/** vim: et:ts=4:sw=4:sts=4
 * @license RequireJS 2.1.16 Copyright (c) 2010-2015, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/requirejs for details
 */
//Not using strict: uneven strict support in browsers, #392, and causes
//problems with requirejs.exec()/transpiler plugins that may not be strict.
/*jslint regexp: true, nomen: true, sloppy: true */
/*global window, navigator, document, importScripts, setTimeout, opera */

var requirejs, require, define;
(function (global) {
    var req, s, head, baseElement, dataMain, src,
        interactiveScript, currentlyAddingScript, mainScript, subPath,
        version = '2.1.16',
        commentRegExp = /(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/mg,
        cjsRequireRegExp = /[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,
        jsSuffixRegExp = /\.js$/,
        currDirRegExp = /^\.\//,
        op = Object.prototype,
        ostring = op.toString,
        hasOwn = op.hasOwnProperty,
        ap = Array.prototype,
        apsp = ap.splice,
        isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document),
        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',
        //PS3 indicates loaded and complete, but need to wait for complete
        //specifically. Sequence is 'loading', 'loaded', execution,
        // then 'complete'. The UA check is unfortunate, but not sure how
        //to feature test w/o causing perf issues.
        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?
                      /^complete$/ : /^(complete|loaded)$/,
        defContextName = '_',
        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.
        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',
        contexts = {},
        cfg = {},
        globalDefQueue = [],
        useInteractive = false;

    function isFunction(it) {
        return ostring.call(it) === '[object Function]';
    }

    function isArray(it) {
        return ostring.call(it) === '[object Array]';
    }

    /**
     * Helper function for iterating over an array. If the func returns
     * a true value, it will break out of the loop.
     */
    function each(ary, func) {
        if (ary) {
            var i;
            for (i = 0; i < ary.length; i += 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    /**
     * Helper function for iterating over an array backwards. If the func
     * returns a true value, it will break out of the loop.
     */
    function eachReverse(ary, func) {
        if (ary) {
            var i;
            for (i = ary.length - 1; i > -1; i -= 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    function getOwn(obj, prop) {
        return hasProp(obj, prop) && obj[prop];
    }

    /**
     * Cycles over properties in an object and calls a function for each
     * property value. If the function returns a truthy value, then the
     * iteration is stopped.
     */
    function eachProp(obj, func) {
        var prop;
        for (prop in obj) {
            if (hasProp(obj, prop)) {
                if (func(obj[prop], prop)) {
                    break;
                }
            }
        }
    }

    /**
     * Simple function to mix in properties from source into target,
     * but only if target does not already have a property of the same name.
     */
    function mixin(target, source, force, deepStringMixin) {
        if (source) {
            eachProp(source, function (value, prop) {
                if (force || !hasProp(target, prop)) {
                    if (deepStringMixin && typeof value === 'object' && value &&
                        !isArray(value) && !isFunction(value) &&
                        !(value instanceof RegExp)) {

                        if (!target[prop]) {
                            target[prop] = {};
                        }
                        mixin(target[prop], value, force, deepStringMixin);
                    } else {
                        target[prop] = value;
                    }
                }
            });
        }
        return target;
    }

    //Similar to Function.prototype.bind, but the 'this' object is specified
    //first, since it is easier to read/figure out what 'this' will be.
    function bind(obj, fn) {
        return function () {
            return fn.apply(obj, arguments);
        };
    }

    function scripts() {
        return document.getElementsByTagName('script');
    }

    function defaultOnError(err) {
        throw err;
    }

    //Allow getting a global that is expressed in
    //dot notation, like 'a.b.c'.
    function getGlobal(value) {
        if (!value) {
            return value;
        }
        var g = global;
        each(value.split('.'), function (part) {
            g = g[part];
        });
        return g;
    }

    /**
     * Constructs an error with a pointer to an URL with more information.
     * @param {String} id the error ID that maps to an ID on a web page.
     * @param {String} message human readable error.
     * @param {Error} [err] the original error, if there is one.
     *
     * @returns {Error}
     */
    function makeError(id, msg, err, requireModules) {
        var e = new Error(msg + '\nhttp://requirejs.org/docs/errors.html#' + id);
        e.requireType = id;
        e.requireModules = requireModules;
        if (err) {
            e.originalError = err;
        }
        return e;
    }

    if (typeof define !== 'undefined') {
        //If a define is already in play via another AMD loader,
        //do not overwrite.
        return;
    }

    if (typeof requirejs !== 'undefined') {
        if (isFunction(requirejs)) {
            //Do not overwrite an existing requirejs instance.
            return;
        }
        cfg = requirejs;
        requirejs = undefined;
    }

    //Allow for a require config object
    if (typeof require !== 'undefined' && !isFunction(require)) {
        //assume it is a config object.
        cfg = require;
        require = undefined;
    }

    function newContext(contextName) {
        var inCheckLoaded, Module, context, handlers,
            checkLoadedTimeoutId,
            config = {
                //Defaults. Do not set a default for map
                //config to speed up normalize(), which
                //will run faster if there is no default.
                waitSeconds: 7,
                baseUrl: './',
                paths: {},
                bundles: {},
                pkgs: {},
                shim: {},
                config: {}
            },
            registry = {},
            //registry of just enabled modules, to speed
            //cycle breaking code when lots of modules
            //are registered, but not activated.
            enabledRegistry = {},
            undefEvents = {},
            defQueue = [],
            defined = {},
            urlFetched = {},
            bundlesMap = {},
            requireCounter = 1,
            unnormalizedCounter = 1;

        /**
         * Trims the . and .. from an array of path segments.
         * It will keep a leading path segment if a .. will become
         * the first path segment, to help with module name lookups,
         * which act like paths, but can be remapped. But the end result,
         * all paths that use this function should look normalized.
         * NOTE: this method MODIFIES the input array.
         * @param {Array} ary the array of path segments.
         */
        function trimDots(ary) {
            var i, part;
            for (i = 0; i < ary.length; i++) {
                part = ary[i];
                if (part === '.') {
                    ary.splice(i, 1);
                    i -= 1;
                } else if (part === '..') {
                    // If at the start, or previous value is still ..,
                    // keep them so that when converted to a path it may
                    // still work when converted to a path, even though
                    // as an ID it is less than ideal. In larger point
                    // releases, may be better to just kick out an error.
                    if (i === 0 || (i == 1 && ary[2] === '..') || ary[i - 1] === '..') {
                        continue;
                    } else if (i > 0) {
                        ary.splice(i - 1, 2);
                        i -= 2;
                    }
                }
            }
        }

        /**
         * Given a relative module name, like ./something, normalize it to
         * a real name that can be mapped to a path.
         * @param {String} name the relative name
         * @param {String} baseName a real name that the name arg is relative
         * to.
         * @param {Boolean} applyMap apply the map config to the value. Should
         * only be done if this normalization is for a dependency ID.
         * @returns {String} normalized name
         */
        function normalize(name, baseName, applyMap) {
            var pkgMain, mapValue, nameParts, i, j, nameSegment, lastIndex,
                foundMap, foundI, foundStarMap, starI, normalizedBaseParts,
                baseParts = (baseName && baseName.split('/')),
                map = config.map,
                starMap = map && map['*'];

            //Adjust any relative paths.
            if (name) {
                name = name.split('/');
                lastIndex = name.length - 1;

                // If wanting node ID compatibility, strip .js from end
                // of IDs. Have to do this here, and not in nameToUrl
                // because node allows either .js or non .js to map
                // to same file.
                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                }

                // Starts with a '.' so need the baseName
                if (name[0].charAt(0) === '.' && baseParts) {
                    //Convert baseName to array, and lop off the last part,
                    //so that . matches that 'directory' and not name of the baseName's
                    //module. For instance, baseName of 'one/two/three', maps to
                    //'one/two/three.js', but we want the directory, 'one/two' for
                    //this normalization.
                    normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                    name = normalizedBaseParts.concat(name);
                }

                trimDots(name);
                name = name.join('/');
            }

            //Apply map config if available.
            if (applyMap && map && (baseParts || starMap)) {
                nameParts = name.split('/');

                outerLoop: for (i = nameParts.length; i > 0; i -= 1) {
                    nameSegment = nameParts.slice(0, i).join('/');

                    if (baseParts) {
                        //Find the longest baseName segment match in the config.
                        //So, do joins on the biggest to smallest lengths of baseParts.
                        for (j = baseParts.length; j > 0; j -= 1) {
                            mapValue = getOwn(map, baseParts.slice(0, j).join('/'));

                            //baseName segment has config, find if it has one for
                            //this name.
                            if (mapValue) {
                                mapValue = getOwn(mapValue, nameSegment);
                                if (mapValue) {
                                    //Match, update name to the new value.
                                    foundMap = mapValue;
                                    foundI = i;
                                    break outerLoop;
                                }
                            }
                        }
                    }

                    //Check for a star map match, but just hold on to it,
                    //if there is a shorter segment match later in a matching
                    //config, then favor over this star map.
                    if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {
                        foundStarMap = getOwn(starMap, nameSegment);
                        starI = i;
                    }
                }

                if (!foundMap && foundStarMap) {
                    foundMap = foundStarMap;
                    foundI = starI;
                }

                if (foundMap) {
                    nameParts.splice(0, foundI, foundMap);
                    name = nameParts.join('/');
                }
            }

            // If the name points to a package's name, use
            // the package main instead.
            pkgMain = getOwn(config.pkgs, name);

            return pkgMain ? pkgMain : name;
        }

        function removeScript(name) {
            if (isBrowser) {
                each(scripts(), function (scriptNode) {
                    if (scriptNode.getAttribute('data-requiremodule') === name &&
                            scriptNode.getAttribute('data-requirecontext') === context.contextName) {
                        scriptNode.parentNode.removeChild(scriptNode);
                        return true;
                    }
                });
            }
        }

        function hasPathFallback(id) {
            var pathConfig = getOwn(config.paths, id);
            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {
                //Pop off the first array value, since it failed, and
                //retry
                pathConfig.shift();
                context.require.undef(id);

                //Custom require that does not do map translation, since
                //ID is "absolute", already mapped/resolved.
                context.makeRequire(null, {
                    skipMap: true
                })([id]);

                return true;
            }
        }

        //Turns a plugin!resource to [plugin, resource]
        //with the plugin being undefined if the name
        //did not have a plugin prefix.
        function splitPrefix(name) {
            var prefix,
                index = name ? name.indexOf('!') : -1;
            if (index > -1) {
                prefix = name.substring(0, index);
                name = name.substring(index + 1, name.length);
            }
            return [prefix, name];
        }

        /**
         * Creates a module mapping that includes plugin prefix, module
         * name, and path. If parentModuleMap is provided it will
         * also normalize the name via require.normalize()
         *
         * @param {String} name the module name
         * @param {String} [parentModuleMap] parent module map
         * for the module name, used to resolve relative names.
         * @param {Boolean} isNormalized: is the ID already normalized.
         * This is true if this call is done for a define() module ID.
         * @param {Boolean} applyMap: apply the map config to the ID.
         * Should only be true if this map is for a dependency.
         *
         * @returns {Object}
         */
        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {
            var url, pluginModule, suffix, nameParts,
                prefix = null,
                parentName = parentModuleMap ? parentModuleMap.name : null,
                originalName = name,
                isDefine = true,
                normalizedName = '';

            //If no name, then it means it is a require call, generate an
            //internal name.
            if (!name) {
                isDefine = false;
                name = '_@r' + (requireCounter += 1);
            }

            nameParts = splitPrefix(name);
            prefix = nameParts[0];
            name = nameParts[1];

            if (prefix) {
                prefix = normalize(prefix, parentName, applyMap);
                pluginModule = getOwn(defined, prefix);
            }

            //Account for relative paths if there is a base name.
            if (name) {
                if (prefix) {
                    if (pluginModule && pluginModule.normalize) {
                        //Plugin is loaded, use its normalize method.
                        normalizedName = pluginModule.normalize(name, function (name) {
                            return normalize(name, parentName, applyMap);
                        });
                    } else {
                        // If nested plugin references, then do not try to
                        // normalize, as it will not normalize correctly. This
                        // places a restriction on resourceIds, and the longer
                        // term solution is not to normalize until plugins are
                        // loaded and all normalizations to allow for async
                        // loading of a loader plugin. But for now, fixes the
                        // common uses. Details in #1131
                        normalizedName = name.indexOf('!') === -1 ?
                                         normalize(name, parentName, applyMap) :
                                         name;
                    }
                } else {
                    //A regular module.
                    normalizedName = normalize(name, parentName, applyMap);

                    //Normalized name may be a plugin ID due to map config
                    //application in normalize. The map config values must
                    //already be normalized, so do not need to redo that part.
                    nameParts = splitPrefix(normalizedName);
                    prefix = nameParts[0];
                    normalizedName = nameParts[1];
                    isNormalized = true;

                    url = context.nameToUrl(normalizedName);
                }
            }

            //If the id is a plugin id that cannot be determined if it needs
            //normalization, stamp it with a unique ID so two matching relative
            //ids that may conflict can be separate.
            suffix = prefix && !pluginModule && !isNormalized ?
                     '_unnormalized' + (unnormalizedCounter += 1) :
                     '';

            return {
                prefix: prefix,
                name: normalizedName,
                parentMap: parentModuleMap,
                unnormalized: !!suffix,
                url: url,
                originalName: originalName,
                isDefine: isDefine,
                id: (prefix ?
                        prefix + '!' + normalizedName :
                        normalizedName) + suffix
            };
        }

        function getModule(depMap) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (!mod) {
                mod = registry[id] = new context.Module(depMap);
            }

            return mod;
        }

        function on(depMap, name, fn) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (hasProp(defined, id) &&
                    (!mod || mod.defineEmitComplete)) {
                if (name === 'defined') {
                    fn(defined[id]);
                }
            } else {
                mod = getModule(depMap);
                if (mod.error && name === 'error') {
                    fn(mod.error);
                } else {
                    mod.on(name, fn);
                }
            }
        }

        function onError(err, errback) {
            var ids = err.requireModules,
                notified = false;

            if (errback) {
                errback(err);
            } else {
                each(ids, function (id) {
                    var mod = getOwn(registry, id);
                    if (mod) {
                        //Set error on module, so it skips timeout checks.
                        mod.error = err;
                        if (mod.events.error) {
                            notified = true;
                            mod.emit('error', err);
                        }
                    }
                });

                if (!notified) {
                    req.onError(err);
                }
            }
        }

        /**
         * Internal method to transfer globalQueue items to this context's
         * defQueue.
         */
        function takeGlobalQueue() {
            //Push all the globalDefQueue items into the context's defQueue
            if (globalDefQueue.length) {
                //Array splice in the values since the context code has a
                //local var ref to defQueue, so cannot just reassign the one
                //on context.
                apsp.apply(defQueue,
                           [defQueue.length, 0].concat(globalDefQueue));
                globalDefQueue = [];
            }
        }

        handlers = {
            'require': function (mod) {
                if (mod.require) {
                    return mod.require;
                } else {
                    return (mod.require = context.makeRequire(mod.map));
                }
            },
            'exports': function (mod) {
                mod.usingExports = true;
                if (mod.map.isDefine) {
                    if (mod.exports) {
                        return (defined[mod.map.id] = mod.exports);
                    } else {
                        return (mod.exports = defined[mod.map.id] = {});
                    }
                }
            },
            'module': function (mod) {
                if (mod.module) {
                    return mod.module;
                } else {
                    return (mod.module = {
                        id: mod.map.id,
                        uri: mod.map.url,
                        config: function () {
                            return  getOwn(config.config, mod.map.id) || {};
                        },
                        exports: mod.exports || (mod.exports = {})
                    });
                }
            }
        };

        function cleanRegistry(id) {
            //Clean up machinery used for waiting modules.
            delete registry[id];
            delete enabledRegistry[id];
        }

        function breakCycle(mod, traced, processed) {
            var id = mod.map.id;

            if (mod.error) {
                mod.emit('error', mod.error);
            } else {
                traced[id] = true;
                each(mod.depMaps, function (depMap, i) {
                    var depId = depMap.id,
                        dep = getOwn(registry, depId);

                    //Only force things that have not completed
                    //being defined, so still in the registry,
                    //and only if it has not been matched up
                    //in the module already.
                    if (dep && !mod.depMatched[i] && !processed[depId]) {
                        if (getOwn(traced, depId)) {
                            mod.defineDep(i, defined[depId]);
                            mod.check(); //pass false?
                        } else {
                            breakCycle(dep, traced, processed);
                        }
                    }
                });
                processed[id] = true;
            }
        }

        function checkLoaded() {
            var err, usingPathFallback,
                waitInterval = config.waitSeconds * 1000,
                //It is possible to disable the wait interval by using waitSeconds of 0.
                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),
                noLoads = [],
                reqCalls = [],
                stillLoading = false,
                needCycleCheck = true;

            //Do not bother if this call was a result of a cycle break.
            if (inCheckLoaded) {
                return;
            }

            inCheckLoaded = true;

            //Figure out the state of all the modules.
            eachProp(enabledRegistry, function (mod) {
                var map = mod.map,
                    modId = map.id;

                //Skip things that are not enabled or in error state.
                if (!mod.enabled) {
                    return;
                }

                if (!map.isDefine) {
                    reqCalls.push(mod);
                }

                if (!mod.error) {
                    //If the module should be executed, and it has not
                    //been inited and time is up, remember it.
                    if (!mod.inited && expired) {
                        if (hasPathFallback(modId)) {
                            usingPathFallback = true;
                            stillLoading = true;
                        } else {
                            noLoads.push(modId);
                            removeScript(modId);
                        }
                    } else if (!mod.inited && mod.fetched && map.isDefine) {
                        stillLoading = true;
                        if (!map.prefix) {
                            //No reason to keep looking for unfinished
                            //loading. If the only stillLoading is a
                            //plugin resource though, keep going,
                            //because it may be that a plugin resource
                            //is waiting on a non-plugin cycle.
                            return (needCycleCheck = false);
                        }
                    }
                }
            });

            if (expired && noLoads.length) {
                //If wait time expired, throw error of unloaded modules.
                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);
                err.contextName = context.contextName;
                return onError(err);
            }

            //Not expired, check for a cycle.
            if (needCycleCheck) {
                each(reqCalls, function (mod) {
                    breakCycle(mod, {}, {});
                });
            }

            //If still waiting on loads, and the waiting load is something
            //other than a plugin resource, or there are still outstanding
            //scripts, then just try back later.
            if ((!expired || usingPathFallback) && stillLoading) {
                //Something is still waiting to load. Wait for it, but only
                //if a timeout is not already in effect.
                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {
                    checkLoadedTimeoutId = setTimeout(function () {
                        checkLoadedTimeoutId = 0;
                        checkLoaded();
                    }, 50);
                }
            }

            inCheckLoaded = false;
        }

        Module = function (map) {
            this.events = getOwn(undefEvents, map.id) || {};
            this.map = map;
            this.shim = getOwn(config.shim, map.id);
            this.depExports = [];
            this.depMaps = [];
            this.depMatched = [];
            this.pluginMaps = {};
            this.depCount = 0;

            /* this.exports this.factory
               this.depMaps = [],
               this.enabled, this.fetched
            */
        };

        Module.prototype = {
            init: function (depMaps, factory, errback, options) {
                options = options || {};

                //Do not do more inits if already done. Can happen if there
                //are multiple define calls for the same module. That is not
                //a normal, common case, but it is also not unexpected.
                if (this.inited) {
                    return;
                }

                this.factory = factory;

                if (errback) {
                    //Register for errors on this module.
                    this.on('error', errback);
                } else if (this.events.error) {
                    //If no errback already, but there are error listeners
                    //on this module, set up an errback to pass to the deps.
                    errback = bind(this, function (err) {
                        this.emit('error', err);
                    });
                }

                //Do a copy of the dependency array, so that
                //source inputs are not modified. For example
                //"shim" deps are passed in here directly, and
                //doing a direct modification of the depMaps array
                //would affect that config.
                this.depMaps = depMaps && depMaps.slice(0);

                this.errback = errback;

                //Indicate this module has be initialized
                this.inited = true;

                this.ignore = options.ignore;

                //Could have option to init this module in enabled mode,
                //or could have been previously marked as enabled. However,
                //the dependencies are not known until init is called. So
                //if enabled previously, now trigger dependencies as enabled.
                if (options.enabled || this.enabled) {
                    //Enable this module and dependencies.
                    //Will call this.check()
                    this.enable();
                } else {
                    this.check();
                }
            },

            defineDep: function (i, depExports) {
                //Because of cycles, defined callback for a given
                //export can be called more than once.
                if (!this.depMatched[i]) {
                    this.depMatched[i] = true;
                    this.depCount -= 1;
                    this.depExports[i] = depExports;
                }
            },

            fetch: function () {
                if (this.fetched) {
                    return;
                }
                this.fetched = true;

                context.startTime = (new Date()).getTime();

                var map = this.map;

                //If the manager is for a plugin managed resource,
                //ask the plugin to load it now.
                if (this.shim) {
                    context.makeRequire(this.map, {
                        enableBuildCallback: true
                    })(this.shim.deps || [], bind(this, function () {
                        return map.prefix ? this.callPlugin() : this.load();
                    }));
                } else {
                    //Regular dependency.
                    return map.prefix ? this.callPlugin() : this.load();
                }
            },

            load: function () {
                var url = this.map.url;

                //Regular dependency.
                if (!urlFetched[url]) {
                    urlFetched[url] = true;
                    context.load(this.map.id, url);
                }
            },

            /**
             * Checks if the module is ready to define itself, and if so,
             * define it.
             */
            check: function () {
                if (!this.enabled || this.enabling) {
                    return;
                }

                var err, cjsModule,
                    id = this.map.id,
                    depExports = this.depExports,
                    exports = this.exports,
                    factory = this.factory;

                if (!this.inited) {
                    this.fetch();
                } else if (this.error) {
                    this.emit('error', this.error);
                } else if (!this.defining) {
                    //The factory could trigger another require call
                    //that would result in checking this module to
                    //define itself again. If already in the process
                    //of doing that, skip this work.
                    this.defining = true;

                    if (this.depCount < 1 && !this.defined) {
                        if (isFunction(factory)) {
                            //If there is an error listener, favor passing
                            //to that instead of throwing an error. However,
                            //only do it for define()'d  modules. require
                            //errbacks should not be called for failures in
                            //their callbacks (#699). However if a global
                            //onError is set, use that.
                            if ((this.events.error && this.map.isDefine) ||
                                req.onError !== defaultOnError) {
                                try {
                                    exports = context.execCb(id, factory, depExports, exports);
                                } catch (e) {
                                    err = e;
                                }
                            } else {
                                exports = context.execCb(id, factory, depExports, exports);
                            }

                            // Favor return value over exports. If node/cjs in play,
                            // then will not have a return value anyway. Favor
                            // module.exports assignment over exports object.
                            if (this.map.isDefine && exports === undefined) {
                                cjsModule = this.module;
                                if (cjsModule) {
                                    exports = cjsModule.exports;
                                } else if (this.usingExports) {
                                    //exports already set the defined value.
                                    exports = this.exports;
                                }
                            }

                            if (err) {
                                err.requireMap = this.map;
                                err.requireModules = this.map.isDefine ? [this.map.id] : null;
                                err.requireType = this.map.isDefine ? 'define' : 'require';
                                return onError((this.error = err));
                            }

                        } else {
                            //Just a literal value
                            exports = factory;
                        }

                        this.exports = exports;

                        if (this.map.isDefine && !this.ignore) {
                            defined[id] = exports;

                            if (req.onResourceLoad) {
                                req.onResourceLoad(context, this.map, this.depMaps);
                            }
                        }

                        //Clean up
                        cleanRegistry(id);

                        this.defined = true;
                    }

                    //Finished the define stage. Allow calling check again
                    //to allow define notifications below in the case of a
                    //cycle.
                    this.defining = false;

                    if (this.defined && !this.defineEmitted) {
                        this.defineEmitted = true;
                        this.emit('defined', this.exports);
                        this.defineEmitComplete = true;
                    }

                }
            },

            callPlugin: function () {
                var map = this.map,
                    id = map.id,
                    //Map already normalized the prefix.
                    pluginMap = makeModuleMap(map.prefix);

                //Mark this as a dependency for this plugin, so it
                //can be traced for cycles.
                this.depMaps.push(pluginMap);

                on(pluginMap, 'defined', bind(this, function (plugin) {
                    var load, normalizedMap, normalizedMod,
                        bundleId = getOwn(bundlesMap, this.map.id),
                        name = this.map.name,
                        parentName = this.map.parentMap ? this.map.parentMap.name : null,
                        localRequire = context.makeRequire(map.parentMap, {
                            enableBuildCallback: true
                        });

                    //If current map is not normalized, wait for that
                    //normalized name to load instead of continuing.
                    if (this.map.unnormalized) {
                        //Normalize the ID if the plugin allows it.
                        if (plugin.normalize) {
                            name = plugin.normalize(name, function (name) {
                                return normalize(name, parentName, true);
                            }) || '';
                        }

                        //prefix and name should already be normalized, no need
                        //for applying map config again either.
                        normalizedMap = makeModuleMap(map.prefix + '!' + name,
                                                      this.map.parentMap);
                        on(normalizedMap,
                            'defined', bind(this, function (value) {
                                this.init([], function () { return value; }, null, {
                                    enabled: true,
                                    ignore: true
                                });
                            }));

                        normalizedMod = getOwn(registry, normalizedMap.id);
                        if (normalizedMod) {
                            //Mark this as a dependency for this plugin, so it
                            //can be traced for cycles.
                            this.depMaps.push(normalizedMap);

                            if (this.events.error) {
                                normalizedMod.on('error', bind(this, function (err) {
                                    this.emit('error', err);
                                }));
                            }
                            normalizedMod.enable();
                        }

                        return;
                    }

                    //If a paths config, then just load that file instead to
                    //resolve the plugin, as it is built into that paths layer.
                    if (bundleId) {
                        this.map.url = context.nameToUrl(bundleId);
                        this.load();
                        return;
                    }

                    load = bind(this, function (value) {
                        this.init([], function () { return value; }, null, {
                            enabled: true
                        });
                    });

                    load.error = bind(this, function (err) {
                        this.inited = true;
                        this.error = err;
                        err.requireModules = [id];

                        //Remove temp unnormalized modules for this module,
                        //since they will never be resolved otherwise now.
                        eachProp(registry, function (mod) {
                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {
                                cleanRegistry(mod.map.id);
                            }
                        });

                        onError(err);
                    });

                    //Allow plugins to load other code without having to know the
                    //context or how to 'complete' the load.
                    load.fromText = bind(this, function (text, textAlt) {
                        /*jslint evil: true */
                        var moduleName = map.name,
                            moduleMap = makeModuleMap(moduleName),
                            hasInteractive = useInteractive;

                        //As of 2.1.0, support just passing the text, to reinforce
                        //fromText only being called once per resource. Still
                        //support old style of passing moduleName but discard
                        //that moduleName in favor of the internal ref.
                        if (textAlt) {
                            text = textAlt;
                        }

                        //Turn off interactive script matching for IE for any define
                        //calls in the text, then turn it back on at the end.
                        if (hasInteractive) {
                            useInteractive = false;
                        }

                        //Prime the system by creating a module instance for
                        //it.
                        getModule(moduleMap);

                        //Transfer any config to this other module.
                        if (hasProp(config.config, id)) {
                            config.config[moduleName] = config.config[id];
                        }

                        try {
                            req.exec(text);
                        } catch (e) {
                            return onError(makeError('fromtexteval',
                                             'fromText eval for ' + id +
                                            ' failed: ' + e,
                                             e,
                                             [id]));
                        }

                        if (hasInteractive) {
                            useInteractive = true;
                        }

                        //Mark this as a dependency for the plugin
                        //resource
                        this.depMaps.push(moduleMap);

                        //Support anonymous modules.
                        context.completeLoad(moduleName);

                        //Bind the value of that module to the value for this
                        //resource ID.
                        localRequire([moduleName], load);
                    });

                    //Use parentName here since the plugin's name is not reliable,
                    //could be some weird string with no path that actually wants to
                    //reference the parentName's path.
                    plugin.load(map.name, localRequire, load, config);
                }));

                context.enable(pluginMap, this);
                this.pluginMaps[pluginMap.id] = pluginMap;
            },

            enable: function () {
                enabledRegistry[this.map.id] = this;
                this.enabled = true;

                //Set flag mentioning that the module is enabling,
                //so that immediate calls to the defined callbacks
                //for dependencies do not trigger inadvertent load
                //with the depCount still being zero.
                this.enabling = true;

                //Enable each dependency
                each(this.depMaps, bind(this, function (depMap, i) {
                    var id, mod, handler;

                    if (typeof depMap === 'string') {
                        //Dependency needs to be converted to a depMap
                        //and wired up to this module.
                        depMap = makeModuleMap(depMap,
                                               (this.map.isDefine ? this.map : this.map.parentMap),
                                               false,
                                               !this.skipMap);
                        this.depMaps[i] = depMap;

                        handler = getOwn(handlers, depMap.id);

                        if (handler) {
                            this.depExports[i] = handler(this);
                            return;
                        }

                        this.depCount += 1;

                        on(depMap, 'defined', bind(this, function (depExports) {
                            this.defineDep(i, depExports);
                            this.check();
                        }));

                        if (this.errback) {
                            on(depMap, 'error', bind(this, this.errback));
                        } else if (this.events.error) {
                            // No direct errback on this module, but something
                            // else is listening for errors, so be sure to
                            // propagate the error correctly.
                            on(depMap, 'error', bind(this, function(err) {
                                this.emit('error', err);
                            }));
                        }
                    }

                    id = depMap.id;
                    mod = registry[id];

                    //Skip special modules like 'require', 'exports', 'module'
                    //Also, don't call enable if it is already enabled,
                    //important in circular dependency cases.
                    if (!hasProp(handlers, id) && mod && !mod.enabled) {
                        context.enable(depMap, this);
                    }
                }));

                //Enable each plugin that is used in
                //a dependency
                eachProp(this.pluginMaps, bind(this, function (pluginMap) {
                    var mod = getOwn(registry, pluginMap.id);
                    if (mod && !mod.enabled) {
                        context.enable(pluginMap, this);
                    }
                }));

                this.enabling = false;

                this.check();
            },

            on: function (name, cb) {
                var cbs = this.events[name];
                if (!cbs) {
                    cbs = this.events[name] = [];
                }
                cbs.push(cb);
            },

            emit: function (name, evt) {
                each(this.events[name], function (cb) {
                    cb(evt);
                });
                if (name === 'error') {
                    //Now that the error handler was triggered, remove
                    //the listeners, since this broken Module instance
                    //can stay around for a while in the registry.
                    delete this.events[name];
                }
            }
        };

        function callGetModule(args) {
            //Skip modules already defined.
            if (!hasProp(defined, args[0])) {
                getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);
            }
        }

        function removeListener(node, func, name, ieName) {
            //Favor detachEvent because of IE9
            //issue, see attachEvent/addEventListener comment elsewhere
            //in this file.
            if (node.detachEvent && !isOpera) {
                //Probably IE. If not it will throw an error, which will be
                //useful to know.
                if (ieName) {
                    node.detachEvent(ieName, func);
                }
            } else {
                node.removeEventListener(name, func, false);
            }
        }

        /**
         * Given an event from a script node, get the requirejs info from it,
         * and then removes the event listeners on the node.
         * @param {Event} evt
         * @returns {Object}
         */
        function getScriptData(evt) {
            //Using currentTarget instead of target for Firefox 2.0's sake. Not
            //all old browsers will be supported, but this one was easy enough
            //to support and still makes sense.
            var node = evt.currentTarget || evt.srcElement;

            //Remove the listeners once here.
            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');
            removeListener(node, context.onScriptError, 'error');

            return {
                node: node,
                id: node && node.getAttribute('data-requiremodule')
            };
        }

        function intakeDefines() {
            var args;

            //Any defined modules in the global queue, intake them now.
            takeGlobalQueue();

            //Make sure any remaining defQueue items get properly processed.
            while (defQueue.length) {
                args = defQueue.shift();
                if (args[0] === null) {
                    return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' + args[args.length - 1]));
                } else {
                    //args are id, deps, factory. Should be normalized by the
                    //define() function.
                    callGetModule(args);
                }
            }
        }

        context = {
            config: config,
            contextName: contextName,
            registry: registry,
            defined: defined,
            urlFetched: urlFetched,
            defQueue: defQueue,
            Module: Module,
            makeModuleMap: makeModuleMap,
            nextTick: req.nextTick,
            onError: onError,

            /**
             * Set a configuration for the context.
             * @param {Object} cfg config object to integrate.
             */
            configure: function (cfg) {
                //Make sure the baseUrl ends in a slash.
                if (cfg.baseUrl) {
                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {
                        cfg.baseUrl += '/';
                    }
                }

                //Save off the paths since they require special processing,
                //they are additive.
                var shim = config.shim,
                    objs = {
                        paths: true,
                        bundles: true,
                        config: true,
                        map: true
                    };

                eachProp(cfg, function (value, prop) {
                    if (objs[prop]) {
                        if (!config[prop]) {
                            config[prop] = {};
                        }
                        mixin(config[prop], value, true, true);
                    } else {
                        config[prop] = value;
                    }
                });

                //Reverse map the bundles
                if (cfg.bundles) {
                    eachProp(cfg.bundles, function (value, prop) {
                        each(value, function (v) {
                            if (v !== prop) {
                                bundlesMap[v] = prop;
                            }
                        });
                    });
                }

                //Merge shim
                if (cfg.shim) {
                    eachProp(cfg.shim, function (value, id) {
                        //Normalize the structure
                        if (isArray(value)) {
                            value = {
                                deps: value
                            };
                        }
                        if ((value.exports || value.init) && !value.exportsFn) {
                            value.exportsFn = context.makeShimExports(value);
                        }
                        shim[id] = value;
                    });
                    config.shim = shim;
                }

                //Adjust packages if necessary.
                if (cfg.packages) {
                    each(cfg.packages, function (pkgObj) {
                        var location, name;

                        pkgObj = typeof pkgObj === 'string' ? { name: pkgObj } : pkgObj;

                        name = pkgObj.name;
                        location = pkgObj.location;
                        if (location) {
                            config.paths[name] = pkgObj.location;
                        }

                        //Save pointer to main module ID for pkg name.
                        //Remove leading dot in main, so main paths are normalized,
                        //and remove any trailing .js, since different package
                        //envs have different conventions: some use a module name,
                        //some use a file name.
                        config.pkgs[name] = pkgObj.name + '/' + (pkgObj.main || 'main')
                                     .replace(currDirRegExp, '')
                                     .replace(jsSuffixRegExp, '');
                    });
                }

                //If there are any "waiting to execute" modules in the registry,
                //update the maps for them, since their info, like URLs to load,
                //may have changed.
                eachProp(registry, function (mod, id) {
                    //If module already has init called, since it is too
                    //late to modify them, and ignore unnormalized ones
                    //since they are transient.
                    if (!mod.inited && !mod.map.unnormalized) {
                        mod.map = makeModuleMap(id);
                    }
                });

                //If a deps array or a config callback is specified, then call
                //require with those args. This is useful when require is defined as a
                //config object before require.js is loaded.
                if (cfg.deps || cfg.callback) {
                    context.require(cfg.deps || [], cfg.callback);
                }
            },

            makeShimExports: function (value) {
                function fn() {
                    var ret;
                    if (value.init) {
                        ret = value.init.apply(global, arguments);
                    }
                    return ret || (value.exports && getGlobal(value.exports));
                }
                return fn;
            },

            makeRequire: function (relMap, options) {
                options = options || {};

                function localRequire(deps, callback, errback) {
                    var id, map, requireMod;

                    if (options.enableBuildCallback && callback && isFunction(callback)) {
                        callback.__requireJsBuild = true;
                    }

                    if (typeof deps === 'string') {
                        if (isFunction(callback)) {
                            //Invalid call
                            return onError(makeError('requireargs', 'Invalid require call'), errback);
                        }

                        //If require|exports|module are requested, get the
                        //value for them from the special handlers. Caveat:
                        //this only works while module is being defined.
                        if (relMap && hasProp(handlers, deps)) {
                            return handlers[deps](registry[relMap.id]);
                        }

                        //Synchronous access to one module. If require.get is
                        //available (as in the Node adapter), prefer that.
                        if (req.get) {
                            return req.get(context, deps, relMap, localRequire);
                        }

                        //Normalize module name, if it contains . or ..
                        map = makeModuleMap(deps, relMap, false, true);
                        id = map.id;

                        if (!hasProp(defined, id)) {
                            return onError(makeError('notloaded', 'Module name "' +
                                        id +
                                        '" has not been loaded yet for context: ' +
                                        contextName +
                                        (relMap ? '' : '. Use require([])')));
                        }
                        return defined[id];
                    }

                    //Grab defines waiting in the global queue.
                    intakeDefines();

                    //Mark all the dependencies as needing to be loaded.
                    context.nextTick(function () {
                        //Some defines could have been added since the
                        //require call, collect them.
                        intakeDefines();

                        requireMod = getModule(makeModuleMap(null, relMap));

                        //Store if map config should be applied to this require
                        //call for dependencies.
                        requireMod.skipMap = options.skipMap;

                        requireMod.init(deps, callback, errback, {
                            enabled: true
                        });

                        checkLoaded();
                    });

                    return localRequire;
                }

                mixin(localRequire, {
                    isBrowser: isBrowser,

                    /**
                     * Converts a module name + .extension into an URL path.
                     * *Requires* the use of a module name. It does not support using
                     * plain URLs like nameToUrl.
                     */
                    toUrl: function (moduleNamePlusExt) {
                        var ext,
                            index = moduleNamePlusExt.lastIndexOf('.'),
                            segment = moduleNamePlusExt.split('/')[0],
                            isRelative = segment === '.' || segment === '..';

                        //Have a file extension alias, and it is not the
                        //dots from a relative path.
                        if (index !== -1 && (!isRelative || index > 1)) {
                            ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);
                            moduleNamePlusExt = moduleNamePlusExt.substring(0, index);
                        }

                        return context.nameToUrl(normalize(moduleNamePlusExt,
                                                relMap && relMap.id, true), ext,  true);
                    },

                    defined: function (id) {
                        return hasProp(defined, makeModuleMap(id, relMap, false, true).id);
                    },

                    specified: function (id) {
                        id = makeModuleMap(id, relMap, false, true).id;
                        return hasProp(defined, id) || hasProp(registry, id);
                    }
                });

                //Only allow undef on top level require calls
                if (!relMap) {
                    localRequire.undef = function (id) {
                        //Bind any waiting define() calls to this context,
                        //fix for #408
                        takeGlobalQueue();

                        var map = makeModuleMap(id, relMap, true),
                            mod = getOwn(registry, id);

                        removeScript(id);

                        delete defined[id];
                        delete urlFetched[map.url];
                        delete undefEvents[id];

                        //Clean queued defines too. Go backwards
                        //in array so that the splices do not
                        //mess up the iteration.
                        eachReverse(defQueue, function(args, i) {
                            if(args[0] === id) {
                                defQueue.splice(i, 1);
                            }
                        });

                        if (mod) {
                            //Hold on to listeners in case the
                            //module will be attempted to be reloaded
                            //using a different config.
                            if (mod.events.defined) {
                                undefEvents[id] = mod.events;
                            }

                            cleanRegistry(id);
                        }
                    };
                }

                return localRequire;
            },

            /**
             * Called to enable a module if it is still in the registry
             * awaiting enablement. A second arg, parent, the parent module,
             * is passed in for context, when this method is overridden by
             * the optimizer. Not shown here to keep code compact.
             */
            enable: function (depMap) {
                var mod = getOwn(registry, depMap.id);
                if (mod) {
                    getModule(depMap).enable();
                }
            },

            /**
             * Internal method used by environment adapters to complete a load event.
             * A load event could be a script load or just a load pass from a synchronous
             * load call.
             * @param {String} moduleName the name of the module to potentially complete.
             */
            completeLoad: function (moduleName) {
                var found, args, mod,
                    shim = getOwn(config.shim, moduleName) || {},
                    shExports = shim.exports;

                takeGlobalQueue();

                while (defQueue.length) {
                    args = defQueue.shift();
                    if (args[0] === null) {
                        args[0] = moduleName;
                        //If already found an anonymous module and bound it
                        //to this name, then this is some other anon module
                        //waiting for its completeLoad to fire.
                        if (found) {
                            break;
                        }
                        found = true;
                    } else if (args[0] === moduleName) {
                        //Found matching define call for this script!
                        found = true;
                    }

                    callGetModule(args);
                }

                //Do this after the cycle of callGetModule in case the result
                //of those calls/init calls changes the registry.
                mod = getOwn(registry, moduleName);

                if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {
                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {
                        if (hasPathFallback(moduleName)) {
                            return;
                        } else {
                            return onError(makeError('nodefine',
                                             'No define call for ' + moduleName,
                                             null,
                                             [moduleName]));
                        }
                    } else {
                        //A script that does not call define(), so just simulate
                        //the call for it.
                        callGetModule([moduleName, (shim.deps || []), shim.exportsFn]);
                    }
                }

                checkLoaded();
            },

            /**
             * Converts a module name to a file path. Supports cases where
             * moduleName may actually be just an URL.
             * Note that it **does not** call normalize on the moduleName,
             * it is assumed to have already been normalized. This is an
             * internal API, not a public one. Use toUrl for the public API.
             */
            nameToUrl: function (moduleName, ext, skipExt) {
                var paths, syms, i, parentModule, url,
                    parentPath, bundleId,
                    pkgMain = getOwn(config.pkgs, moduleName);

                if (pkgMain) {
                    moduleName = pkgMain;
                }

                bundleId = getOwn(bundlesMap, moduleName);

                if (bundleId) {
                    return context.nameToUrl(bundleId, ext, skipExt);
                }

                //If a colon is in the URL, it indicates a protocol is used and it is just
                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)
                //or ends with .js, then assume the user meant to use an url and not a module id.
                //The slash is important for protocol-less URLs as well as full paths.
                if (req.jsExtRegExp.test(moduleName)) {
                    //Just a plain path, not module name lookup, so just return it.
                    //Add extension if it is included. This is a bit wonky, only non-.js things pass
                    //an extension, this method probably needs to be reworked.
                    url = moduleName + (ext || '');
                } else {
                    //A module that needs to be converted to a path.
                    paths = config.paths;

                    syms = moduleName.split('/');
                    //For each module name segment, see if there is a path
                    //registered for it. Start with most specific name
                    //and work up from it.
                    for (i = syms.length; i > 0; i -= 1) {
                        parentModule = syms.slice(0, i).join('/');

                        parentPath = getOwn(paths, parentModule);
                        if (parentPath) {
                            //If an array, it means there are a few choices,
                            //Choose the one that is desired
                            if (isArray(parentPath)) {
                                parentPath = parentPath[0];
                            }
                            syms.splice(0, i, parentPath);
                            break;
                        }
                    }

                    //Join the path parts together, then figure out if baseUrl is needed.
                    url = syms.join('/');
                    url += (ext || (/^data\:|\?/.test(url) || skipExt ? '' : '.js'));
                    url = (url.charAt(0) === '/' || url.match(/^[\w\+\.\-]+:/) ? '' : config.baseUrl) + url;
                }

                return config.urlArgs ? url +
                                        ((url.indexOf('?') === -1 ? '?' : '&') +
                                         config.urlArgs) : url;
            },

            //Delegates to req.load. Broken out as a separate function to
            //allow overriding in the optimizer.
            load: function (id, url) {
                req.load(context, id, url);
            },

            /**
             * Executes a module callback function. Broken out as a separate function
             * solely to allow the build system to sequence the files in the built
             * layer in the right sequence.
             *
             * @private
             */
            execCb: function (name, callback, args, exports) {
                return callback.apply(exports, args);
            },

            /**
             * callback for script loads, used to check status of loading.
             *
             * @param {Event} evt the event from the browser for the script
             * that was loaded.
             */
            onScriptLoad: function (evt) {
                //Using currentTarget instead of target for Firefox 2.0's sake. Not
                //all old browsers will be supported, but this one was easy enough
                //to support and still makes sense.
                if (evt.type === 'load' ||
                        (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {
                    //Reset interactive script so a script node is not held onto for
                    //to long.
                    interactiveScript = null;

                    //Pull out the name of the module and the context.
                    var data = getScriptData(evt);
                    context.completeLoad(data.id);
                }
            },

            /**
             * Callback for script errors.
             */
            onScriptError: function (evt) {
                var data = getScriptData(evt);
                if (!hasPathFallback(data.id)) {
                    return onError(makeError('scripterror', 'Script error for: ' + data.id, evt, [data.id]));
                }
            }
        };

        context.require = context.makeRequire();
        return context;
    }

    /**
     * Main entry point.
     *
     * If the only argument to require is a string, then the module that
     * is represented by that string is fetched for the appropriate context.
     *
     * If the first argument is an array, then it will be treated as an array
     * of dependency string names to fetch. An optional function callback can
     * be specified to execute when all of those dependencies are available.
     *
     * Make a local req variable to help Caja compliance (it assumes things
     * on a require that are not standardized), and to give a short
     * name for minification/local scope use.
     */
    req = requirejs = function (deps, callback, errback, optional) {

        //Find the right context, use default
        var context, config,
            contextName = defContextName;

        // Determine if have config object in the call.
        if (!isArray(deps) && typeof deps !== 'string') {
            // deps is a config object
            config = deps;
            if (isArray(callback)) {
                // Adjust args if there are dependencies
                deps = callback;
                callback = errback;
                errback = optional;
            } else {
                deps = [];
            }
        }

        if (config && config.context) {
            contextName = config.context;
        }

        context = getOwn(contexts, contextName);
        if (!context) {
            context = contexts[contextName] = req.s.newContext(contextName);
        }

        if (config) {
            context.configure(config);
        }

        return context.require(deps, callback, errback);
    };

    /**
     * Support require.config() to make it easier to cooperate with other
     * AMD loaders on globally agreed names.
     */
    req.config = function (config) {
        return req(config);
    };

    /**
     * Execute something after the current tick
     * of the event loop. Override for other envs
     * that have a better solution than setTimeout.
     * @param  {Function} fn function to execute later.
     */
    req.nextTick = typeof setTimeout !== 'undefined' ? function (fn) {
        setTimeout(fn, 4);
    } : function (fn) { fn(); };

    /**
     * Export require as a global, but only if it does not already exist.
     */
    if (!require) {
        require = req;
    }

    req.version = version;

    //Used to filter out dependencies that are already paths.
    req.jsExtRegExp = /^\/|:|\?|\.js$/;
    req.isBrowser = isBrowser;
    s = req.s = {
        contexts: contexts,
        newContext: newContext
    };

    //Create default context.
    req({});

    //Exports some context-sensitive methods on global require.
    each([
        'toUrl',
        'undef',
        'defined',
        'specified'
    ], function (prop) {
        //Reference from contexts instead of early binding to default context,
        //so that during builds, the latest instance of the default context
        //with its config gets used.
        req[prop] = function () {
            var ctx = contexts[defContextName];
            return ctx.require[prop].apply(ctx, arguments);
        };
    });

    if (isBrowser) {
        head = s.head = document.getElementsByTagName('head')[0];
        //If BASE tag is in play, using appendChild is a problem for IE6.
        //When that browser dies, this can be removed. Details in this jQuery bug:
        //http://dev.jquery.com/ticket/2709
        baseElement = document.getElementsByTagName('base')[0];
        if (baseElement) {
            head = s.head = baseElement.parentNode;
        }
    }

    /**
     * Any errors that require explicitly generates will be passed to this
     * function. Intercept/override it if you want custom error handling.
     * @param {Error} err the error object.
     */
    req.onError = defaultOnError;

    /**
     * Creates the node for the load command. Only used in browser envs.
     */
    req.createNode = function (config, moduleName, url) {
        var node = config.xhtml ?
                document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :
                document.createElement('script');
        node.type = config.scriptType || 'text/javascript';
        node.charset = 'utf-8';
        node.async = true;
        return node;
    };

    /**
     * Does the request to load a module for the browser case.
     * Make this a separate function to allow other environments
     * to override it.
     *
     * @param {Object} context the require context to find state.
     * @param {String} moduleName the name of the module.
     * @param {Object} url the URL to the module.
     */
    req.load = function (context, moduleName, url) {
        var config = (context && context.config) || {},
            node;
        if (isBrowser) {
            //In the browser so use a script tag
            node = req.createNode(config, moduleName, url);

            node.setAttribute('data-requirecontext', context.contextName);
            node.setAttribute('data-requiremodule', moduleName);

            //Set up load listener. Test attachEvent first because IE9 has
            //a subtle issue in its addEventListener and script onload firings
            //that do not match the behavior of all other browsers with
            //addEventListener support, which fire the onload event for a
            //script right after the script execution. See:
            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution
            //UNFORTUNATELY Opera implements attachEvent but does not follow the script
            //script execution mode.
            if (node.attachEvent &&
                    //Check if node.attachEvent is artificially added by custom script or
                    //natively supported by browser
                    //read https://github.com/jrburke/requirejs/issues/187
                    //if we can NOT find [native code] then it must NOT natively supported.
                    //in IE8, node.attachEvent does not have toString()
                    //Note the test for "[native code" with no closing brace, see:
                    //https://github.com/jrburke/requirejs/issues/273
                    !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&
                    !isOpera) {
                //Probably IE. IE (at least 6-8) do not fire
                //script onload right after executing the script, so
                //we cannot tie the anonymous define call to a name.
                //However, IE reports the script as being in 'interactive'
                //readyState at the time of the define call.
                useInteractive = true;

                node.attachEvent('onreadystatechange', context.onScriptLoad);
                //It would be great to add an error handler here to catch
                //404s in IE9+. However, onreadystatechange will fire before
                //the error handler, so that does not help. If addEventListener
                //is used, then IE will fire error before load, but we cannot
                //use that pathway given the connect.microsoft.com issue
                //mentioned above about not doing the 'script execute,
                //then fire the script load event listener before execute
                //next script' that other browsers do.
                //Best hope: IE10 fixes the issues,
                //and then destroys all installs of IE 6-9.
                //node.attachEvent('onerror', context.onScriptError);
            } else {
                node.addEventListener('load', context.onScriptLoad, false);
                node.addEventListener('error', context.onScriptError, false);
            }
            node.src = url;

            //For some cache cases in IE 6-8, the script executes before the end
            //of the appendChild execution, so to tie an anonymous define
            //call to the module name (which is stored on the node), hold on
            //to a reference to this node, but clear after the DOM insertion.
            currentlyAddingScript = node;
            if (baseElement) {
                head.insertBefore(node, baseElement);
            } else {
                head.appendChild(node);
            }
            currentlyAddingScript = null;

            return node;
        } else if (isWebWorker) {
            try {
                //In a web worker, use importScripts. This is not a very
                //efficient use of importScripts, importScripts will block until
                //its script is downloaded and evaluated. However, if web workers
                //are in play, the expectation that a build has been done so that
                //only one script needs to be loaded anyway. This may need to be
                //reevaluated if other use cases become common.
                importScripts(url);

                //Account for anonymous modules
                context.completeLoad(moduleName);
            } catch (e) {
                context.onError(makeError('importscripts',
                                'importScripts failed for ' +
                                    moduleName + ' at ' + url,
                                e,
                                [moduleName]));
            }
        }
    };

    function getInteractiveScript() {
        if (interactiveScript && interactiveScript.readyState === 'interactive') {
            return interactiveScript;
        }

        eachReverse(scripts(), function (script) {
            if (script.readyState === 'interactive') {
                return (interactiveScript = script);
            }
        });
        return interactiveScript;
    }

    //Look for a data-main script attribute, which could also adjust the baseUrl.
    if (isBrowser && !cfg.skipDataMain) {
        //Figure out baseUrl. Get it from the script tag with require.js in it.
        eachReverse(scripts(), function (script) {
            //Set the 'head' where we can append children by
            //using the script's parent.
            if (!head) {
                head = script.parentNode;
            }

            //Look for a data-main attribute to set main script for the page
            //to load. If it is there, the path to data main becomes the
            //baseUrl, if it is not already set.
            dataMain = script.getAttribute('data-main');
            if (dataMain) {
                //Preserve dataMain in case it is a path (i.e. contains '?')
                mainScript = dataMain;

                //Set final baseUrl if there is not already an explicit one.
                if (!cfg.baseUrl) {
                    //Pull off the directory of data-main for use as the
                    //baseUrl.
                    src = mainScript.split('/');
                    mainScript = src.pop();
                    subPath = src.length ? src.join('/')  + '/' : './';

                    cfg.baseUrl = subPath;
                }

                //Strip off any trailing .js since mainScript is now
                //like a module name.
                mainScript = mainScript.replace(jsSuffixRegExp, '');

                 //If mainScript is still a path, fall back to dataMain
                if (req.jsExtRegExp.test(mainScript)) {
                    mainScript = dataMain;
                }

                //Put the data-main script in the files to load.
                cfg.deps = cfg.deps ? cfg.deps.concat(mainScript) : [mainScript];

                return true;
            }
        });
    }

    /**
     * The function that handles definitions of modules. Differs from
     * require() in that a string for the module should be the first argument,
     * and the function to execute after dependencies are loaded should
     * return a value to define the module corresponding to the first argument's
     * name.
     */
    define = function (name, deps, callback) {
        var node, context;

        //Allow for anonymous modules
        if (typeof name !== 'string') {
            //Adjust args appropriately
            callback = deps;
            deps = name;
            name = null;
        }

        //This module may not have dependencies
        if (!isArray(deps)) {
            callback = deps;
            deps = null;
        }

        //If no name, and callback is a function, then figure out if it a
        //CommonJS thing with dependencies.
        if (!deps && isFunction(callback)) {
            deps = [];
            //Remove comments from the callback string,
            //look for require calls, and pull them into the dependencies,
            //but only if there are function args.
            if (callback.length) {
                callback
                    .toString()
                    .replace(commentRegExp, '')
                    .replace(cjsRequireRegExp, function (match, dep) {
                        deps.push(dep);
                    });

                //May be a CommonJS thing even without require calls, but still
                //could use exports, and module. Avoid doing exports and module
                //work though if it just needs require.
                //REQUIRES the function to expect the CommonJS variables in the
                //order listed below.
                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);
            }
        }

        //If in IE 6-8 and hit an anonymous define() call, do the interactive
        //work.
        if (useInteractive) {
            node = currentlyAddingScript || getInteractiveScript();
            if (node) {
                if (!name) {
                    name = node.getAttribute('data-requiremodule');
                }
                context = contexts[node.getAttribute('data-requirecontext')];
            }
        }

        //Always save off evaluating the def call until the script onload handler.
        //This allows multiple modules to be in a file without prematurely
        //tracing dependencies, and allows for anonymous module support,
        //where the module name is not known until the script onload event
        //occurs. If no context, use the global queue, and get it processed
        //in the onscript load callback.
        (context ? context.defQueue : globalDefQueue).push([name, deps, callback]);
    };

    define.amd = {
        jQuery: true
    };


    /**
     * Executes the text. Normally just uses eval, but can be modified
     * to use a better, environment-specific call. Only used for transpiling
     * loader plugins, not for plain JS modules.
     * @param {String} text the text to execute/evaluate.
     */
    req.exec = function (text) {
        /*jslint evil: true */
        return eval(text);
    };

    //Set up with config info.
    req(cfg);
}(this));

define("js/libs/require.js", function(){});

/*!
 * jQuery JavaScript Library v2.1.3
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-18T15:11Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//

var arr = [];

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	version = "2.1.3",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		return !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;
	},

	isPlainObject: function( obj ) {
		// Not plain objects:
		// - Any object or value whose internal [[Class]] property is not "[object Object]"
		// - DOM nodes
		// - window
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		if ( obj.constructor &&
				!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
			return false;
		}

		// If the function hasn't returned already, we're confident that
		// |obj| is a plain object, created by {} or constructed with new Object
		return true;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		// Support: Android<4.0, iOS<6 (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		var script,
			indirect = eval;

		code = jQuery.trim( code );

		if ( code ) {
			// If the code includes a valid, prologue position
			// strict mode pragma, execute code by injecting a
			// script tag into the document.
			if ( code.indexOf("use strict") === 1 ) {
				script = document.createElement("script");
				script.text = code;
				document.head.appendChild( script ).parentNode.removeChild( script );
			} else {
			// Otherwise, avoid the DOM node creation, insertion
			// and removal by using an indirect global eval
				indirect( code );
			}
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE9-11+
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.0-pre
 * http://sizzlejs.com/
 *
 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-16
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];
	nodeType = context.nodeType;

	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	if ( !seed && documentIsHTML ) {

		// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
		if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType !== 1 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;
	parent = doc.defaultView;

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Support tests
	---------------------------------------------------------------------- */
	documentIsHTML = !isXML( doc );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\f]' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is no seed and only one group
	if ( match.length === 1 ) {

		// Take a shortcut and set the context if the root selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			len = this.length,
			ret = [],
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Support: Blackberry 4.6
					// gEBID returns nodes no longer in the document (#6963)
					if ( elem && elem.parentNode ) {
						// Inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter(function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.unique( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// Add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// If we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
});

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed, false );
	window.removeEventListener( "load", completed, false );
	jQuery.ready();
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// We once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		} else {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[0], key ) : emptyGet;
};


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( owner ) {
	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	/* jshint -W018 */
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};


function Data() {
	// Support: Android<4,
	// Old WebKit does not have Object.preventExtensions/freeze method,
	// return new empty object instead with no [[set]] accessor
	Object.defineProperty( this.cache = {}, 0, {
		get: function() {
			return {};
		}
	});

	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;
Data.accepts = jQuery.acceptData;

Data.prototype = {
	key: function( owner ) {
		// We can accept data for non-element nodes in modern browsers,
		// but we should not, see #8335.
		// Always return the key for a frozen object.
		if ( !Data.accepts( owner ) ) {
			return 0;
		}

		var descriptor = {},
			// Check if the owner object already has a cache key
			unlock = owner[ this.expando ];

		// If not, create one
		if ( !unlock ) {
			unlock = Data.uid++;

			// Secure it in a non-enumerable, non-writable property
			try {
				descriptor[ this.expando ] = { value: unlock };
				Object.defineProperties( owner, descriptor );

			// Support: Android<4
			// Fallback to a less secure definition
			} catch ( e ) {
				descriptor[ this.expando ] = unlock;
				jQuery.extend( owner, descriptor );
			}
		}

		// Ensure the cache object
		if ( !this.cache[ unlock ] ) {
			this.cache[ unlock ] = {};
		}

		return unlock;
	},
	set: function( owner, data, value ) {
		var prop,
			// There may be an unlock assigned to this node,
			// if there is no entry for this "owner", create one inline
			// and set the unlock as though an owner entry had always existed
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		// Handle: [ owner, key, value ] args
		if ( typeof data === "string" ) {
			cache[ data ] = value;

		// Handle: [ owner, { properties } ] args
		} else {
			// Fresh assignments by object are shallow copied
			if ( jQuery.isEmptyObject( cache ) ) {
				jQuery.extend( this.cache[ unlock ], data );
			// Otherwise, copy the properties one-by-one to the cache object
			} else {
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		// Either a valid cache is found, or will be created.
		// New caches will be created and the unlock returned,
		// allowing direct access to the newly created
		// empty data object. A valid owner object must be provided.
		var cache = this.cache[ this.key( owner ) ];

		return key === undefined ?
			cache : cache[ key ];
	},
	access: function( owner, key, value ) {
		var stored;
		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				((key && typeof key === "string") && value === undefined) ) {

			stored = this.get( owner, key );

			return stored !== undefined ?
				stored : this.get( owner, jQuery.camelCase(key) );
		}

		// [*]When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i, name, camel,
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		if ( key === undefined ) {
			this.cache[ unlock ] = {};

		} else {
			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = key.concat( key.map( jQuery.camelCase ) );
			} else {
				camel = jQuery.camelCase( key );
				// Try the string as a key before any manipulation
				if ( key in cache ) {
					name = [ key, camel ];
				} else {
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					name = camel;
					name = name in cache ?
						[ name ] : ( name.match( rnotwhite ) || [] );
				}
			}

			i = name.length;
			while ( i-- ) {
				delete cache[ name[ i ] ];
			}
		}
	},
	hasData: function( owner ) {
		return !jQuery.isEmptyObject(
			this.cache[ owner[ this.expando ] ] || {}
		);
	},
	discard: function( owner ) {
		if ( owner[ this.expando ] ) {
			delete this.cache[ owner[ this.expando ] ];
		}
	}
};
var data_priv = new Data();

var data_user = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			data_user.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend({
	hasData: function( elem ) {
		return data_user.hasData( elem ) || data_priv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return data_user.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		data_user.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to data_priv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return data_priv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		data_priv.remove( elem, name );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = data_user.get( elem );

				if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice(5) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					data_priv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				data_user.set( this, key );
			});
		}

		return access( this, function( value ) {
			var data,
				camelKey = jQuery.camelCase( key );

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {
				// Attempt to get data from the cache
				// with the key as-is
				data = data_user.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to get data from the cache
				// with the key camelized
				data = data_user.get( elem, camelKey );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, camelKey, undefined );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each(function() {
				// First, attempt to store a copy or reference of any
				// data that might've been store with a camelCased key.
				var data = data_user.get( this, camelKey );

				// For HTML5 data-* attribute interop, we have to
				// store property names with dashes in a camelCase form.
				// This might not apply to all properties...*
				data_user.set( this, camelKey, value );

				// *... In the case of properties that might _actually_
				// have dashes, we need to also store a copy of that
				// unchanged property.
				if ( key.indexOf("-") !== -1 && data !== undefined ) {
					data_user.set( this, key, value );
				}
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			data_user.remove( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = data_priv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = data_priv.access( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return data_priv.get( elem, key ) || data_priv.access( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				data_priv.remove( elem, [ type + "queue", key ] );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = data_priv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};

var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Safari<=5.1
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari<=5.1, Android<4.2
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<=11+
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
})();
var strundefined = typeof undefined;



support.focusinBubbles = "onfocusin" in window;


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.hasData( elem ) && data_priv.get( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;
			data_priv.remove( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.disabled !== true || event.type !== "click" ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: Cordova 2.5 (WebKit) (#13255)
		// All events should have a target; Cordova deviceready doesn't
		if ( !event.target ) {
			event.target = document;
		}

		// Support: Safari 6.0+, Chrome<28
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle, false );
	}
};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&
				// Support: Android<4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && e.preventDefault ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && e.stopPropagation ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// Support: Chrome 15+
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// Support: Firefox, Chrome, Safari
// Create "bubbling" focus and blur events
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					data_priv.remove( doc, fix );

				} else {
					data_priv.access( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


var
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {

		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

// Support: IE9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: 1.x compatibility
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute("type");
	}

	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		data_priv.set(
			elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
		);
	}
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( data_priv.hasData( src ) ) {
		pdataOld = data_priv.access( src );
		pdataCur = data_priv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( data_user.hasData( src ) ) {
		udataOld = data_user.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		data_user.set( dest, udataCur );
	}
}

function getAll( context, tag ) {
	var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
			context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					// Support: QtWebKit, PhantomJS
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: QtWebKit, PhantomJS
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	},

	cleanData: function( elems ) {
		var data, elem, type, key,
			special = jQuery.event.special,
			i = 0;

		for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
			if ( jQuery.acceptData( elem ) ) {
				key = elem[ data_priv.expando ];

				if ( key && (data = data_priv.cache[ key ]) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}
					if ( data_priv.cache[ key ] ) {
						// Discard any remaining `private` data
						delete data_priv.cache[ key ];
					}
				}
			}
			// Discard any remaining `user` data
			delete data_user.cache[ elem[ data_user.expando ] ];
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each(function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				});
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							// Support: QtWebKit
							// jQuery.merge because push.apply(_, arraylike) throws
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: QtWebKit
			// .get() because push.apply(_, arraylike) throws
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var style,
		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

			// Use of this method is a temporary fix (more like optimization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = iframe[ 0 ].contentDocument;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {
		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		if ( elem.ownerDocument.defaultView.opener ) {
			return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
		}

		return window.getComputedStyle( elem, null );
	};



function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE9
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];
	}

	if ( computed ) {

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// Support: iOS < 6
		// A tribute to the "awesome hack by Dean Edwards"
		// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
		// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
		if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?
		// Support: IE
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {
				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	var pixelPositionVal, boxSizingReliableVal,
		docElem = document.documentElement,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	if ( !div.style ) {
		return;
	}

	// Support: IE9-11+
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
		"position:absolute";
	container.appendChild( div );

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computePixelPositionAndBoxSizingReliable() {
		div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
			"border:1px;padding:1px;width:4px;position:absolute";
		div.innerHTML = "";
		docElem.appendChild( container );

		var divStyle = window.getComputedStyle( div, null );
		pixelPositionVal = divStyle.top !== "1%";
		boxSizingReliableVal = divStyle.width === "4px";

		docElem.removeChild( container );
	}

	// Support: node.js jsdom
	// Don't assume that getComputedStyle is a property of the global object
	if ( window.getComputedStyle ) {
		jQuery.extend( support, {
			pixelPosition: function() {

				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computePixelPositionAndBoxSizingReliable();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computePixelPositionAndBoxSizingReliable();
				}
				return boxSizingReliableVal;
			},
			reliableMarginRight: function() {

				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				docElem.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );

				docElem.removeChild( container );
				div.removeChild( marginDiv );

				return ret;
			}
		});
	}
})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
	// Swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[0].toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = data_priv.get( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display !== "none" || !hidden ) {
				data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.extend({

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Support: IE9-11+
			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
				style[ name ] = value;
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

// Support: Android 2.3
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*.
					// Use string for doubling so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur(),
				// break the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = data_priv.get( elem, "fxshow" );

	// Handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// Ensure the complete handler is called before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// Height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE9-10 do not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			data_priv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
			style.display = "inline-block";
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always(function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		});
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = data_priv.access( elem, "fxshow", {} );
		}

		// Store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;

			data_priv.remove( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// Don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// Support: Android 2.3
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || data_priv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = data_priv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = data_priv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: iOS<=5.1, Android<=4.2+
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE<=11+
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: Android<=2.3
	// Options inside disabled selects are incorrectly marked as disabled
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<=11+
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
})();


var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					elem[ propName ] = false;
				}

				elem.removeAttribute( name );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle;
		if ( !isXML ) {
			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ name ];
			attrHandle[ name ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				name.toLowerCase() :
				null;
			attrHandle[ name ] = handle;
		}
		return ret;
	};
});




var rfocusable = /^(?:input|select|textarea|button)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each(function() {
			delete this[ jQuery.propFix[ name ] || name ];
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
					elem.tabIndex :
					-1;
			}
		}
	}
});

if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = arguments.length === 0 || typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// Toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					data_priv.set( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// Handle most common string cases
					ret.replace(rreturn, "") :
					// Handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// IE6-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( option.value, values ) >= 0) ) {
						optionSet = true;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



// Support: Android 2.3
// Workaround failure to string-cast null input
jQuery.parseJSON = function( data ) {
	return JSON.parse( data + "" );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE9
	try {
		tmp = new DOMParser();
		xml = tmp.parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Document location
	ajaxLocation = window.location.href,

	// Segment location into parts
	ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

		// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,
			// URL without anti-cache param
			cacheURL,
			// Response headers
			responseHeadersString,
			responseHeaders,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		var wrap;

		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapAll( html.call(this, i) );
			});
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
};
jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


jQuery.ajaxSettings.xhr = function() {
	try {
		return new XMLHttpRequest();
	} catch( e ) {}
};

var xhrId = 0,
	xhrCallbacks = {},
	xhrSuccessStatus = {
		// file protocol always yields status code 0, assume 200
		0: 200,
		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE9
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if ( window.attachEvent ) {
	window.attachEvent( "onunload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]();
		}
	});
}

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport(function( options ) {
	var callback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr(),
					id = ++xhrId;

				xhr.open( options.type, options.url, options.async, options.username, options.password );

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers["X-Requested-With"] ) {
					headers["X-Requested-With"] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							delete xhrCallbacks[ id ];
							callback = xhr.onload = xhr.onerror = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {
								complete(
									// file: protocol always yields status 0; see #8605, #14207
									xhr.status,
									xhr.statusText
								);
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,
									// Support: IE9
									// Accessing binary-data responseText throws an exception
									// (#11426)
									typeof xhr.responseText === "string" ? {
										text: xhr.responseText
									} : undefined,
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				xhr.onerror = callback("error");

				// Create the abort callback
				callback = xhrCallbacks[ id ] = callback("abort");

				try {
					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {
					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {
	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery("<script>").prop({
					async: true,
					charset: s.scriptCharset,
					src: s.url
				}).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};




var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			elem = this[ 0 ],
			box = { top: 0, left: 0 },
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// Support: BlackBerry 5, iOS 3 (original iPhone)
		// If we don't have gBCR, just use 0,0 rather than error
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top + win.pageYOffset - docElem.clientTop,
			left: box.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : window.pageXOffset,
					top ? val : window.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Support: Safari<7+, Chrome<37+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));

/**
 * @license
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modern -o ./dist/lodash.js`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre ES5 environments */
  var undefined;

  /** Used to pool arrays and objects used internally */
  var arrayPool = [],
      objectPool = [];

  /** Used to generate unique IDs */
  var idCounter = 0;

  /** Used to prefix keys to avoid issues with `__proto__` and properties on `Object.prototype` */
  var keyPrefix = +new Date + '';

  /** Used as the size when optimizations are enabled for large arrays */
  var largeArraySize = 75;

  /** Used as the max size of the `arrayPool` and `objectPool` */
  var maxPoolSize = 40;

  /** Used to detect and test whitespace */
  var whitespace = (
    // whitespace
    ' \t\x0B\f\xA0\ufeff' +

    // line terminators
    '\n\r\u2028\u2029' +

    // unicode category "Zs" space separators
    '\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000'
  );

  /** Used to match empty string literals in compiled template source */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /**
   * Used to match ES6 template delimiters
   * http://people.mozilla.org/~jorendorff/es6-draft.html#sec-literals-string-literals
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match regexp flags from their coerced string values */
  var reFlags = /\w*$/;

  /** Used to detected named functions */
  var reFuncName = /^\s*function[ \n\r\t]+\w/;

  /** Used to match "interpolate" template delimiters */
  var reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match leading whitespace and zeros to be removed */
  var reLeadingSpacesAndZeros = RegExp('^[' + whitespace + ']*0+(?=.$)');

  /** Used to ensure capturing order of template delimiters */
  var reNoMatch = /($^)/;

  /** Used to detect functions containing a `this` reference */
  var reThis = /\bthis\b/;

  /** Used to match unescaped characters in compiled string literals */
  var reUnescapedString = /['\n\r\t\u2028\u2029\\]/g;

  /** Used to assign default `context` object properties */
  var contextProps = [
    'Array', 'Boolean', 'Date', 'Function', 'Math', 'Number', 'Object',
    'RegExp', 'String', '_', 'attachEvent', 'clearTimeout', 'isFinite', 'isNaN',
    'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify */
  var templateCounter = 0;

  /** `Object#toString` result shortcuts */
  var argsClass = '[object Arguments]',
      arrayClass = '[object Array]',
      boolClass = '[object Boolean]',
      dateClass = '[object Date]',
      funcClass = '[object Function]',
      numberClass = '[object Number]',
      objectClass = '[object Object]',
      regexpClass = '[object RegExp]',
      stringClass = '[object String]';

  /** Used to identify object classifications that `_.clone` supports */
  var cloneableClasses = {};
  cloneableClasses[funcClass] = false;
  cloneableClasses[argsClass] = cloneableClasses[arrayClass] =
  cloneableClasses[boolClass] = cloneableClasses[dateClass] =
  cloneableClasses[numberClass] = cloneableClasses[objectClass] =
  cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;

  /** Used as an internal `_.debounce` options object */
  var debounceOptions = {
    'leading': false,
    'maxWait': 0,
    'trailing': false
  };

  /** Used as the property descriptor for `__bindData__` */
  var descriptor = {
    'configurable': false,
    'enumerable': false,
    'value': null,
    'writable': false
  };

  /** Used to determine if values are of the language type Object */
  var objectTypes = {
    'boolean': false,
    'function': true,
    'object': true,
    'number': false,
    'string': false,
    'undefined': false
  };

  /** Used to escape characters for inclusion in compiled string literals */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\t': 't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Used as a reference to the global object */
  var root = (objectTypes[typeof window] && window) || this;

  /** Detect free variable `exports` */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module` */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports` */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */
  var freeGlobal = objectTypes[typeof global] && global;
  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
    root = freeGlobal;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * The base implementation of `_.indexOf` without support for binary searches
   * or `fromIndex` constraints.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the matched value or `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    var index = (fromIndex || 0) - 1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * An implementation of `_.contains` for cache objects that mimics the return
   * signature of `_.indexOf` by returning `0` if the value is found, else `-1`.
   *
   * @private
   * @param {Object} cache The cache object to inspect.
   * @param {*} value The value to search for.
   * @returns {number} Returns `0` if `value` is found, else `-1`.
   */
  function cacheIndexOf(cache, value) {
    var type = typeof value;
    cache = cache.cache;

    if (type == 'boolean' || value == null) {
      return cache[value] ? 0 : -1;
    }
    if (type != 'number' && type != 'string') {
      type = 'object';
    }
    var key = type == 'number' ? value : keyPrefix + value;
    cache = (cache = cache[type]) && cache[key];

    return type == 'object'
      ? (cache && baseIndexOf(cache, value) > -1 ? 0 : -1)
      : (cache ? 0 : -1);
  }

  /**
   * Adds a given value to the corresponding cache object.
   *
   * @private
   * @param {*} value The value to add to the cache.
   */
  function cachePush(value) {
    var cache = this.cache,
        type = typeof value;

    if (type == 'boolean' || value == null) {
      cache[value] = true;
    } else {
      if (type != 'number' && type != 'string') {
        type = 'object';
      }
      var key = type == 'number' ? value : keyPrefix + value,
          typeCache = cache[type] || (cache[type] = {});

      if (type == 'object') {
        (typeCache[key] || (typeCache[key] = [])).push(value);
      } else {
        typeCache[key] = true;
      }
    }
  }

  /**
   * Used by `_.max` and `_.min` as the default callback when a given
   * collection is a string value.
   *
   * @private
   * @param {string} value The character to inspect.
   * @returns {number} Returns the code unit of given character.
   */
  function charAtCallback(value) {
    return value.charCodeAt(0);
  }

  /**
   * Used by `sortBy` to compare transformed `collection` elements, stable sorting
   * them in ascending order.
   *
   * @private
   * @param {Object} a The object to compare to `b`.
   * @param {Object} b The object to compare to `a`.
   * @returns {number} Returns the sort order indicator of `1` or `-1`.
   */
  function compareAscending(a, b) {
    var ac = a.criteria,
        bc = b.criteria,
        index = -1,
        length = ac.length;

    while (++index < length) {
      var value = ac[index],
          other = bc[index];

      if (value !== other) {
        if (value > other || typeof value == 'undefined') {
          return 1;
        }
        if (value < other || typeof other == 'undefined') {
          return -1;
        }
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to return the same value for
    // `a` and `b`. See https://github.com/jashkenas/underscore/pull/1247
    //
    // This also ensures a stable sort in V8 and other engines.
    // See http://code.google.com/p/v8/issues/detail?id=90
    return a.index - b.index;
  }

  /**
   * Creates a cache object to optimize linear searches of large arrays.
   *
   * @private
   * @param {Array} [array=[]] The array to search.
   * @returns {null|Object} Returns the cache object or `null` if caching should not be used.
   */
  function createCache(array) {
    var index = -1,
        length = array.length,
        first = array[0],
        mid = array[(length / 2) | 0],
        last = array[length - 1];

    if (first && typeof first == 'object' &&
        mid && typeof mid == 'object' && last && typeof last == 'object') {
      return false;
    }
    var cache = getObject();
    cache['false'] = cache['null'] = cache['true'] = cache['undefined'] = false;

    var result = getObject();
    result.array = array;
    result.cache = cache;
    result.push = cachePush;

    while (++index < length) {
      result.push(array[index]);
    }
    return result;
  }

  /**
   * Used by `template` to escape characters for inclusion in compiled
   * string literals.
   *
   * @private
   * @param {string} match The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(match) {
    return '\\' + stringEscapes[match];
  }

  /**
   * Gets an array from the array pool or creates a new one if the pool is empty.
   *
   * @private
   * @returns {Array} The array from the pool.
   */
  function getArray() {
    return arrayPool.pop() || [];
  }

  /**
   * Gets an object from the object pool or creates a new one if the pool is empty.
   *
   * @private
   * @returns {Object} The object from the pool.
   */
  function getObject() {
    return objectPool.pop() || {
      'array': null,
      'cache': null,
      'criteria': null,
      'false': false,
      'index': 0,
      'null': false,
      'number': null,
      'object': null,
      'push': null,
      'string': null,
      'true': false,
      'undefined': false,
      'value': null
    };
  }

  /**
   * Releases the given array back to the array pool.
   *
   * @private
   * @param {Array} [array] The array to release.
   */
  function releaseArray(array) {
    array.length = 0;
    if (arrayPool.length < maxPoolSize) {
      arrayPool.push(array);
    }
  }

  /**
   * Releases the given object back to the object pool.
   *
   * @private
   * @param {Object} [object] The object to release.
   */
  function releaseObject(object) {
    var cache = object.cache;
    if (cache) {
      releaseObject(cache);
    }
    object.array = object.cache = object.criteria = object.object = object.number = object.string = object.value = null;
    if (objectPool.length < maxPoolSize) {
      objectPool.push(object);
    }
  }

  /**
   * Slices the `collection` from the `start` index up to, but not including,
   * the `end` index.
   *
   * Note: This function is used instead of `Array#slice` to support node lists
   * in IE < 9 and to ensure dense arrays are returned.
   *
   * @private
   * @param {Array|Object|string} collection The collection to slice.
   * @param {number} start The start index.
   * @param {number} end The end index.
   * @returns {Array} Returns the new array.
   */
  function slice(array, start, end) {
    start || (start = 0);
    if (typeof end == 'undefined') {
      end = array ? array.length : 0;
    }
    var index = -1,
        length = end - start || 0,
        result = Array(length < 0 ? 0 : length);

    while (++index < length) {
      result[index] = array[start + index];
    }
    return result;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new `lodash` function using the given context object.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns the `lodash` function.
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See http://es5.github.io/#x11.1.5.
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

    /** Native constructor references */
    var Array = context.Array,
        Boolean = context.Boolean,
        Date = context.Date,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /**
     * Used for `Array` method references.
     *
     * Normally `Array.prototype` would suffice, however, using an array literal
     * avoids issues in Narwhal.
     */
    var arrayRef = [];

    /** Used for native method references */
    var objectProto = Object.prototype;

    /** Used to restore the original `_` reference in `noConflict` */
    var oldDash = context._;

    /** Used to resolve the internal [[Class]] of values */
    var toString = objectProto.toString;

    /** Used to detect if a method is native */
    var reNative = RegExp('^' +
      String(toString)
        .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
        .replace(/toString| for [^\]]+/g, '.*?') + '$'
    );

    /** Native method shortcuts */
    var ceil = Math.ceil,
        clearTimeout = context.clearTimeout,
        floor = Math.floor,
        fnToString = Function.prototype.toString,
        getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,
        hasOwnProperty = objectProto.hasOwnProperty,
        push = arrayRef.push,
        setTimeout = context.setTimeout,
        splice = arrayRef.splice,
        unshift = arrayRef.unshift;

    /** Used to set meta data on functions */
    var defineProperty = (function() {
      // IE 8 only accepts DOM elements
      try {
        var o = {},
            func = isNative(func = Object.defineProperty) && func,
            result = func(o, o, o) && func;
      } catch(e) { }
      return result;
    }());

    /* Native method shortcuts for methods with the same name as other `lodash` methods */
    var nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,
        nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,
        nativeIsFinite = context.isFinite,
        nativeIsNaN = context.isNaN,
        nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random;

    /** Used to lookup a built-in constructor by [[Class]] */
    var ctorByClass = {};
    ctorByClass[arrayClass] = Array;
    ctorByClass[boolClass] = Boolean;
    ctorByClass[dateClass] = Date;
    ctorByClass[funcClass] = Function;
    ctorByClass[objectClass] = Object;
    ctorByClass[numberClass] = Number;
    ctorByClass[regexpClass] = RegExp;
    ctorByClass[stringClass] = String;

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps the given value to enable intuitive
     * method chaining.
     *
     * In addition to Lo-Dash methods, wrappers also have the following `Array` methods:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,
     * and `unshift`
     *
     * Chaining is supported in custom builds as long as the `value` method is
     * implicitly or explicitly included in the build.
     *
     * The chainable wrapper functions are:
     * `after`, `assign`, `bind`, `bindAll`, `bindKey`, `chain`, `compact`,
     * `compose`, `concat`, `countBy`, `create`, `createCallback`, `curry`,
     * `debounce`, `defaults`, `defer`, `delay`, `difference`, `filter`, `flatten`,
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
     * `invoke`, `keys`, `map`, `max`, `memoize`, `merge`, `min`, `object`, `omit`,
     * `once`, `pairs`, `partial`, `partialRight`, `pick`, `pluck`, `pull`, `push`,
     * `range`, `reject`, `remove`, `rest`, `reverse`, `shuffle`, `slice`, `sort`,
     * `sortBy`, `splice`, `tap`, `throttle`, `times`, `toArray`, `transform`,
     * `union`, `uniq`, `unshift`, `unzip`, `values`, `where`, `without`, `wrap`,
     * and `zip`
     *
     * The non-chainable wrapper functions are:
     * `clone`, `cloneDeep`, `contains`, `escape`, `every`, `find`, `findIndex`,
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `has`, `identity`,
     * `indexOf`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
     * `isEmpty`, `isEqual`, `isFinite`, `isFunction`, `isNaN`, `isNull`, `isNumber`,
     * `isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`, `join`,
     * `lastIndexOf`, `mixin`, `noConflict`, `parseInt`, `pop`, `random`, `reduce`,
     * `reduceRight`, `result`, `shift`, `size`, `some`, `sortedIndex`, `runInContext`,
     * `template`, `unescape`, `uniqueId`, and `value`
     *
     * The wrapper functions `first` and `last` return wrapped values when `n` is
     * provided, otherwise they return unwrapped values.
     *
     * Explicit chaining can be enabled by using the `_.chain` method.
     *
     * @name _
     * @constructor
     * @category Chaining
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns a `lodash` instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(num) {
     *   return num * num;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      // don't wrap if already wrapped, even if wrapped by a different `lodash` constructor
      return (value && typeof value == 'object' && !isArray(value) && hasOwnProperty.call(value, '__wrapped__'))
       ? value
       : new lodashWrapper(value);
    }

    /**
     * A fast path for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap in a `lodash` instance.
     * @param {boolean} chainAll A flag to enable chaining for all methods
     * @returns {Object} Returns a `lodash` instance.
     */
    function lodashWrapper(value, chainAll) {
      this.__chain__ = !!chainAll;
      this.__wrapped__ = value;
    }
    // ensure `new lodashWrapper` is an instance of `lodash`
    lodashWrapper.prototype = lodash.prototype;

    /**
     * An object used to flag environments features.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    /**
     * Detect if functions can be decompiled by `Function#toString`
     * (all but PS3 and older Opera mobile browsers & avoided in Windows 8 apps).
     *
     * @memberOf _.support
     * @type boolean
     */
    support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);

    /**
     * Detect if `Function#name` is supported (all but IE).
     *
     * @memberOf _.support
     * @type boolean
     */
    support.funcNames = typeof Function.name == 'string';

    /**
     * By default, the template delimiters used by Lo-Dash are similar to those in
     * embedded Ruby (ERB). Change the following template settings to use alternative
     * delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': /<%-([\s\S]+?)%>/g,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': /<%([\s\S]+?)%>/g,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*--------------------------------------------------------------------------*/

    /**
     * The base implementation of `_.bind` that creates the bound function and
     * sets its meta data.
     *
     * @private
     * @param {Array} bindData The bind data array.
     * @returns {Function} Returns the new bound function.
     */
    function baseBind(bindData) {
      var func = bindData[0],
          partialArgs = bindData[2],
          thisArg = bindData[4];

      function bound() {
        // `Function#bind` spec
        // http://es5.github.io/#x15.3.4.5
        if (partialArgs) {
          // avoid `arguments` object deoptimizations by using `slice` instead
          // of `Array.prototype.slice.call` and not assigning `arguments` to a
          // variable as a ternary expression
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        // mimic the constructor's `return` behavior
        // http://es5.github.io/#x13.2.2
        if (this instanceof bound) {
          // ensure `new bound` is an instance of `func`
          var thisBinding = baseCreate(func.prototype),
              result = func.apply(thisBinding, args || arguments);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisArg, args || arguments);
      }
      setBindData(bound, bindData);
      return bound;
    }

    /**
     * The base implementation of `_.clone` without argument juggling or support
     * for `thisArg` binding.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep=false] Specify a deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, callback, stackA, stackB) {
      if (callback) {
        var result = callback(value);
        if (typeof result != 'undefined') {
          return result;
        }
      }
      // inspect [[Class]]
      var isObj = isObject(value);
      if (isObj) {
        var className = toString.call(value);
        if (!cloneableClasses[className]) {
          return value;
        }
        var ctor = ctorByClass[className];
        switch (className) {
          case boolClass:
          case dateClass:
            return new ctor(+value);

          case numberClass:
          case stringClass:
            return new ctor(value);

          case regexpClass:
            result = ctor(value.source, reFlags.exec(value));
            result.lastIndex = value.lastIndex;
            return result;
        }
      } else {
        return value;
      }
      var isArr = isArray(value);
      if (isDeep) {
        // check for circular references and return corresponding clone
        var initedStack = !stackA;
        stackA || (stackA = getArray());
        stackB || (stackB = getArray());

        var length = stackA.length;
        while (length--) {
          if (stackA[length] == value) {
            return stackB[length];
          }
        }
        result = isArr ? ctor(value.length) : {};
      }
      else {
        result = isArr ? slice(value) : assign({}, value);
      }
      // add array properties assigned by `RegExp#exec`
      if (isArr) {
        if (hasOwnProperty.call(value, 'index')) {
          result.index = value.index;
        }
        if (hasOwnProperty.call(value, 'input')) {
          result.input = value.input;
        }
      }
      // exit for shallow clone
      if (!isDeep) {
        return result;
      }
      // add the source value to the stack of traversed objects
      // and associate it with its clone
      stackA.push(value);
      stackB.push(result);

      // recursively populate clone (susceptible to call stack limits)
      (isArr ? forEach : forOwn)(value, function(objValue, key) {
        result[key] = baseClone(objValue, isDeep, callback, stackA, stackB);
      });

      if (initedStack) {
        releaseArray(stackA);
        releaseArray(stackB);
      }
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    function baseCreate(prototype, properties) {
      return isObject(prototype) ? nativeCreate(prototype) : {};
    }
    // fallback for browsers without `Object.create`
    if (!nativeCreate) {
      baseCreate = (function() {
        function Object() {}
        return function(prototype) {
          if (isObject(prototype)) {
            Object.prototype = prototype;
            var result = new Object;
            Object.prototype = null;
          }
          return result || context.Object();
        };
      }());
    }

    /**
     * The base implementation of `_.createCallback` without support for creating
     * "_.pluck" or "_.where" style callbacks.
     *
     * @private
     * @param {*} [func=identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of the created callback.
     * @param {number} [argCount] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     */
    function baseCreateCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      // exit early for no `thisArg` or already bound by `Function#bind`
      if (typeof thisArg == 'undefined' || !('prototype' in func)) {
        return func;
      }
      var bindData = func.__bindData__;
      if (typeof bindData == 'undefined') {
        if (support.funcNames) {
          bindData = !func.name;
        }
        bindData = bindData || !support.funcDecomp;
        if (!bindData) {
          var source = fnToString.call(func);
          if (!support.funcNames) {
            bindData = !reFuncName.test(source);
          }
          if (!bindData) {
            // checks if `func` references the `this` keyword and stores the result
            bindData = reThis.test(source);
            setBindData(func, bindData);
          }
        }
      }
      // exit early if there are no `this` references or `func` is bound
      if (bindData === false || (bindData !== true && bindData[1] & 1)) {
        return func;
      }
      switch (argCount) {
        case 1: return function(value) {
          return func.call(thisArg, value);
        };
        case 2: return function(a, b) {
          return func.call(thisArg, a, b);
        };
        case 3: return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
      }
      return bind(func, thisArg);
    }

    /**
     * The base implementation of `createWrapper` that creates the wrapper and
     * sets its meta data.
     *
     * @private
     * @param {Array} bindData The bind data array.
     * @returns {Function} Returns the new function.
     */
    function baseCreateWrapper(bindData) {
      var func = bindData[0],
          bitmask = bindData[1],
          partialArgs = bindData[2],
          partialRightArgs = bindData[3],
          thisArg = bindData[4],
          arity = bindData[5];

      var isBind = bitmask & 1,
          isBindKey = bitmask & 2,
          isCurry = bitmask & 4,
          isCurryBound = bitmask & 8,
          key = func;

      function bound() {
        var thisBinding = isBind ? thisArg : this;
        if (partialArgs) {
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        if (partialRightArgs || isCurry) {
          args || (args = slice(arguments));
          if (partialRightArgs) {
            push.apply(args, partialRightArgs);
          }
          if (isCurry && args.length < arity) {
            bitmask |= 16 & ~32;
            return baseCreateWrapper([func, (isCurryBound ? bitmask : bitmask & ~3), args, null, thisArg, arity]);
          }
        }
        args || (args = arguments);
        if (isBindKey) {
          func = thisBinding[key];
        }
        if (this instanceof bound) {
          thisBinding = baseCreate(func.prototype);
          var result = func.apply(thisBinding, args);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisBinding, args);
      }
      setBindData(bound, bindData);
      return bound;
    }

    /**
     * The base implementation of `_.difference` that accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to process.
     * @param {Array} [values] The array of values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     */
    function baseDifference(array, values) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array ? array.length : 0,
          isLarge = length >= largeArraySize && indexOf === baseIndexOf,
          result = [];

      if (isLarge) {
        var cache = createCache(values);
        if (cache) {
          indexOf = cacheIndexOf;
          values = cache;
        } else {
          isLarge = false;
        }
      }
      while (++index < length) {
        var value = array[index];
        if (indexOf(values, value) < 0) {
          result.push(value);
        }
      }
      if (isLarge) {
        releaseObject(values);
      }
      return result;
    }

    /**
     * The base implementation of `_.flatten` without support for callback
     * shorthands or `thisArg` binding.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
     * @param {boolean} [isStrict=false] A flag to restrict flattening to arrays and `arguments` objects.
     * @param {number} [fromIndex=0] The index to start from.
     * @returns {Array} Returns a new flattened array.
     */
    function baseFlatten(array, isShallow, isStrict, fromIndex) {
      var index = (fromIndex || 0) - 1,
          length = array ? array.length : 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (value && typeof value == 'object' && typeof value.length == 'number'
            && (isArray(value) || isArguments(value))) {
          // recursively flatten arrays (susceptible to call stack limits)
          if (!isShallow) {
            value = baseFlatten(value, isShallow, isStrict);
          }
          var valIndex = -1,
              valLength = value.length,
              resIndex = result.length;

          result.length += valLength;
          while (++valIndex < valLength) {
            result[resIndex++] = value[valIndex];
          }
        } else if (!isStrict) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.isEqual`, without support for `thisArg` binding,
     * that allows partial "_.where" style comparisons.
     *
     * @private
     * @param {*} a The value to compare.
     * @param {*} b The other value to compare.
     * @param {Function} [callback] The function to customize comparing values.
     * @param {Function} [isWhere=false] A flag to indicate performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `a` objects.
     * @param {Array} [stackB=[]] Tracks traversed `b` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(a, b, callback, isWhere, stackA, stackB) {
      // used to indicate that when comparing objects, `a` has at least the properties of `b`
      if (callback) {
        var result = callback(a, b);
        if (typeof result != 'undefined') {
          return !!result;
        }
      }
      // exit early for identical values
      if (a === b) {
        // treat `+0` vs. `-0` as not equal
        return a !== 0 || (1 / a == 1 / b);
      }
      var type = typeof a,
          otherType = typeof b;

      // exit early for unlike primitive values
      if (a === a &&
          !(a && objectTypes[type]) &&
          !(b && objectTypes[otherType])) {
        return false;
      }
      // exit early for `null` and `undefined` avoiding ES3's Function#call behavior
      // http://es5.github.io/#x15.3.4.4
      if (a == null || b == null) {
        return a === b;
      }
      // compare [[Class]] names
      var className = toString.call(a),
          otherClass = toString.call(b);

      if (className == argsClass) {
        className = objectClass;
      }
      if (otherClass == argsClass) {
        otherClass = objectClass;
      }
      if (className != otherClass) {
        return false;
      }
      switch (className) {
        case boolClass:
        case dateClass:
          // coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal
          return +a == +b;

        case numberClass:
          // treat `NaN` vs. `NaN` as equal
          return (a != +a)
            ? b != +b
            // but treat `+0` vs. `-0` as not equal
            : (a == 0 ? (1 / a == 1 / b) : a == +b);

        case regexpClass:
        case stringClass:
          // coerce regexes to strings (http://es5.github.io/#x15.10.6.4)
          // treat string primitives and their corresponding object instances as equal
          return a == String(b);
      }
      var isArr = className == arrayClass;
      if (!isArr) {
        // unwrap any `lodash` wrapped values
        var aWrapped = hasOwnProperty.call(a, '__wrapped__'),
            bWrapped = hasOwnProperty.call(b, '__wrapped__');

        if (aWrapped || bWrapped) {
          return baseIsEqual(aWrapped ? a.__wrapped__ : a, bWrapped ? b.__wrapped__ : b, callback, isWhere, stackA, stackB);
        }
        // exit for functions and DOM nodes
        if (className != objectClass) {
          return false;
        }
        // in older versions of Opera, `arguments` objects have `Array` constructors
        var ctorA = a.constructor,
            ctorB = b.constructor;

        // non `Object` object instances with different constructors are not equal
        if (ctorA != ctorB &&
              !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) &&
              ('constructor' in a && 'constructor' in b)
            ) {
          return false;
        }
      }
      // assume cyclic structures are equal
      // the algorithm for detecting cyclic structures is adapted from ES 5.1
      // section 15.12.3, abstract operation `JO` (http://es5.github.io/#x15.12.3)
      var initedStack = !stackA;
      stackA || (stackA = getArray());
      stackB || (stackB = getArray());

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == a) {
          return stackB[length] == b;
        }
      }
      var size = 0;
      result = true;

      // add `a` and `b` to the stack of traversed objects
      stackA.push(a);
      stackB.push(b);

      // recursively compare objects and arrays (susceptible to call stack limits)
      if (isArr) {
        // compare lengths to determine if a deep comparison is necessary
        length = a.length;
        size = b.length;
        result = size == length;

        if (result || isWhere) {
          // deep compare the contents, ignoring non-numeric properties
          while (size--) {
            var index = length,
                value = b[size];

            if (isWhere) {
              while (index--) {
                if ((result = baseIsEqual(a[index], value, callback, isWhere, stackA, stackB))) {
                  break;
                }
              }
            } else if (!(result = baseIsEqual(a[size], value, callback, isWhere, stackA, stackB))) {
              break;
            }
          }
        }
      }
      else {
        // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`
        // which, in this case, is more costly
        forIn(b, function(value, key, b) {
          if (hasOwnProperty.call(b, key)) {
            // count the number of properties.
            size++;
            // deep compare each property value.
            return (result = hasOwnProperty.call(a, key) && baseIsEqual(a[key], value, callback, isWhere, stackA, stackB));
          }
        });

        if (result && !isWhere) {
          // ensure both objects have the same number of properties
          forIn(a, function(value, key, a) {
            if (hasOwnProperty.call(a, key)) {
              // `size` will be `-1` if `a` has more properties than `b`
              return (result = --size > -1);
            }
          });
        }
      }
      stackA.pop();
      stackB.pop();

      if (initedStack) {
        releaseArray(stackA);
        releaseArray(stackB);
      }
      return result;
    }

    /**
     * The base implementation of `_.merge` without argument juggling or support
     * for `thisArg` binding.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [callback] The function to customize merging properties.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     */
    function baseMerge(object, source, callback, stackA, stackB) {
      (isArray(source) ? forEach : forOwn)(source, function(source, key) {
        var found,
            isArr,
            result = source,
            value = object[key];

        if (source && ((isArr = isArray(source)) || isPlainObject(source))) {
          // avoid merging previously merged cyclic sources
          var stackLength = stackA.length;
          while (stackLength--) {
            if ((found = stackA[stackLength] == source)) {
              value = stackB[stackLength];
              break;
            }
          }
          if (!found) {
            var isShallow;
            if (callback) {
              result = callback(value, source);
              if ((isShallow = typeof result != 'undefined')) {
                value = result;
              }
            }
            if (!isShallow) {
              value = isArr
                ? (isArray(value) ? value : [])
                : (isPlainObject(value) ? value : {});
            }
            // add `source` and associated `value` to the stack of traversed objects
            stackA.push(source);
            stackB.push(value);

            // recursively merge objects and arrays (susceptible to call stack limits)
            if (!isShallow) {
              baseMerge(value, source, callback, stackA, stackB);
            }
          }
        }
        else {
          if (callback) {
            result = callback(value, source);
            if (typeof result == 'undefined') {
              result = source;
            }
          }
          if (typeof result != 'undefined') {
            value = result;
          }
        }
        object[key] = value;
      });
    }

    /**
     * The base implementation of `_.random` without argument juggling or support
     * for returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns a random number.
     */
    function baseRandom(min, max) {
      return min + floor(nativeRandom() * (max - min + 1));
    }

    /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * or `thisArg` binding.
     *
     * @private
     * @param {Array} array The array to process.
     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
     * @param {Function} [callback] The function called per iteration.
     * @returns {Array} Returns a duplicate-value-free array.
     */
    function baseUniq(array, isSorted, callback) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array ? array.length : 0,
          result = [];

      var isLarge = !isSorted && length >= largeArraySize && indexOf === baseIndexOf,
          seen = (callback || isLarge) ? getArray() : result;

      if (isLarge) {
        var cache = createCache(seen);
        indexOf = cacheIndexOf;
        seen = cache;
      }
      while (++index < length) {
        var value = array[index],
            computed = callback ? callback(value, index, array) : value;

        if (isSorted
              ? !index || seen[seen.length - 1] !== computed
              : indexOf(seen, computed) < 0
            ) {
          if (callback || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      if (isLarge) {
        releaseArray(seen.array);
        releaseObject(seen);
      } else if (callback) {
        releaseArray(seen);
      }
      return result;
    }

    /**
     * Creates a function that aggregates a collection, creating an object composed
     * of keys generated from the results of running each element of the collection
     * through a callback. The given `setter` function sets the keys and values
     * of the composed object.
     *
     * @private
     * @param {Function} setter The setter function.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter) {
      return function(collection, callback, thisArg) {
        var result = {};
        callback = lodash.createCallback(callback, thisArg, 3);

        var index = -1,
            length = collection ? collection.length : 0;

        if (typeof length == 'number') {
          while (++index < length) {
            var value = collection[index];
            setter(result, value, callback(value, index, collection), collection);
          }
        } else {
          forOwn(collection, function(value, key, collection) {
            setter(result, value, callback(value, key, collection), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a function that, when called, either curries or invokes `func`
     * with an optional `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of method flags to compose.
     *  The bitmask may be composed of the following flags:
     *  1 - `_.bind`
     *  2 - `_.bindKey`
     *  4 - `_.curry`
     *  8 - `_.curry` (bound)
     *  16 - `_.partial`
     *  32 - `_.partialRight`
     * @param {Array} [partialArgs] An array of arguments to prepend to those
     *  provided to the new function.
     * @param {Array} [partialRightArgs] An array of arguments to append to those
     *  provided to the new function.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new function.
     */
    function createWrapper(func, bitmask, partialArgs, partialRightArgs, thisArg, arity) {
      var isBind = bitmask & 1,
          isBindKey = bitmask & 2,
          isCurry = bitmask & 4,
          isCurryBound = bitmask & 8,
          isPartial = bitmask & 16,
          isPartialRight = bitmask & 32;

      if (!isBindKey && !isFunction(func)) {
        throw new TypeError;
      }
      if (isPartial && !partialArgs.length) {
        bitmask &= ~16;
        isPartial = partialArgs = false;
      }
      if (isPartialRight && !partialRightArgs.length) {
        bitmask &= ~32;
        isPartialRight = partialRightArgs = false;
      }
      var bindData = func && func.__bindData__;
      if (bindData && bindData !== true) {
        // clone `bindData`
        bindData = slice(bindData);
        if (bindData[2]) {
          bindData[2] = slice(bindData[2]);
        }
        if (bindData[3]) {
          bindData[3] = slice(bindData[3]);
        }
        // set `thisBinding` is not previously bound
        if (isBind && !(bindData[1] & 1)) {
          bindData[4] = thisArg;
        }
        // set if previously bound but not currently (subsequent curried functions)
        if (!isBind && bindData[1] & 1) {
          bitmask |= 8;
        }
        // set curried arity if not yet set
        if (isCurry && !(bindData[1] & 4)) {
          bindData[5] = arity;
        }
        // append partial left arguments
        if (isPartial) {
          push.apply(bindData[2] || (bindData[2] = []), partialArgs);
        }
        // append partial right arguments
        if (isPartialRight) {
          unshift.apply(bindData[3] || (bindData[3] = []), partialRightArgs);
        }
        // merge flags
        bindData[1] |= bitmask;
        return createWrapper.apply(null, bindData);
      }
      // fast path for `_.bind`
      var creater = (bitmask == 1 || bitmask === 17) ? baseBind : baseCreateWrapper;
      return creater([func, bitmask, partialArgs, partialRightArgs, thisArg, arity]);
    }

    /**
     * Used by `escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} match The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    function escapeHtmlChar(match) {
      return htmlEscapes[match];
    }

    /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized, this method returns the custom method, otherwise it returns
     * the `baseIndexOf` function.
     *
     * @private
     * @returns {Function} Returns the "indexOf" function.
     */
    function getIndexOf() {
      var result = (result = lodash.indexOf) === indexOf ? baseIndexOf : result;
      return result;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a native function, else `false`.
     */
    function isNative(value) {
      return typeof value == 'function' && reNative.test(value);
    }

    /**
     * Sets `this` binding data on a given function.
     *
     * @private
     * @param {Function} func The function to set data on.
     * @param {Array} value The data array to set.
     */
    var setBindData = !defineProperty ? noop : function(func, value) {
      descriptor.value = value;
      defineProperty(func, '__bindData__', descriptor);
    };

    /**
     * A fallback implementation of `isPlainObject` which checks if a given value
     * is an object created by the `Object` constructor, assuming objects created
     * by the `Object` constructor have no inherited enumerable properties and that
     * there are no `Object.prototype` extensions.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     */
    function shimIsPlainObject(value) {
      var ctor,
          result;

      // avoid non Object objects, `arguments` objects, and DOM elements
      if (!(value && toString.call(value) == objectClass) ||
          (ctor = value.constructor, isFunction(ctor) && !(ctor instanceof ctor))) {
        return false;
      }
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      forIn(value, function(value, key) {
        result = key;
      });
      return typeof result == 'undefined' || hasOwnProperty.call(value, result);
    }

    /**
     * Used by `unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {string} match The matched character to unescape.
     * @returns {string} Returns the unescaped character.
     */
    function unescapeHtmlChar(match) {
      return htmlUnescapes[match];
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Checks if `value` is an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an `arguments` object, else `false`.
     * @example
     *
     * (function() { return _.isArguments(arguments); })(1, 2, 3);
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      return value && typeof value == 'object' && typeof value.length == 'number' &&
        toString.call(value) == argsClass || false;
    }

    /**
     * Checks if `value` is an array.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an array, else `false`.
     * @example
     *
     * (function() { return _.isArray(arguments); })();
     * // => false
     *
     * _.isArray([1, 2, 3]);
     * // => true
     */
    var isArray = nativeIsArray || function(value) {
      return value && typeof value == 'object' && typeof value.length == 'number' &&
        toString.call(value) == arrayClass || false;
    };

    /**
     * A fallback implementation of `Object.keys` which produces an array of the
     * given object's own enumerable property names.
     *
     * @private
     * @type Function
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     */
    var shimKeys = function(object) {
      var index, iterable = object, result = [];
      if (!iterable) return result;
      if (!(objectTypes[typeof object])) return result;
        for (index in iterable) {
          if (hasOwnProperty.call(iterable, index)) {
            result.push(index);
          }
        }
      return result
    };

    /**
     * Creates an array composed of the own enumerable property names of an object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     * @example
     *
     * _.keys({ 'one': 1, 'two': 2, 'three': 3 });
     * // => ['one', 'two', 'three'] (property order is not guaranteed across environments)
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      if (!isObject(object)) {
        return [];
      }
      return nativeKeys(object);
    };

    /**
     * Used to convert characters to HTML entities:
     *
     * Though the `>` character is escaped for symmetry, characters like `>` and `/`
     * don't require escaping in HTML and have no special meaning unless they're part
     * of a tag or an unquoted attribute value.
     * http://mathiasbynens.be/notes/ambiguous-ampersands (under "semi-related fun fact")
     */
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };

    /** Used to convert HTML entities to characters */
    var htmlUnescapes = invert(htmlEscapes);

    /** Used to match HTML entities and HTML characters */
    var reEscapedHtml = RegExp('(' + keys(htmlUnescapes).join('|') + ')', 'g'),
        reUnescapedHtml = RegExp('[' + keys(htmlEscapes).join('') + ']', 'g');

    /*--------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources will overwrite property assignments of previous
     * sources. If a callback is provided it will be executed to produce the
     * assigned values. The callback is bound to `thisArg` and invoked with two
     * arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @type Function
     * @alias extend
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param {Function} [callback] The function to customize assigning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * _.assign({ 'name': 'fred' }, { 'employer': 'slate' });
     * // => { 'name': 'fred', 'employer': 'slate' }
     *
     * var defaults = _.partialRight(_.assign, function(a, b) {
     *   return typeof a == 'undefined' ? b : a;
     * });
     *
     * var object = { 'name': 'barney' };
     * defaults(object, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    var assign = function(object, source, guard) {
      var index, iterable = object, result = iterable;
      if (!iterable) return result;
      var args = arguments,
          argsIndex = 0,
          argsLength = typeof guard == 'number' ? 2 : args.length;
      if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {
        var callback = baseCreateCallback(args[--argsLength - 1], args[argsLength--], 2);
      } else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {
        callback = args[--argsLength];
      }
      while (++argsIndex < argsLength) {
        iterable = args[argsIndex];
        if (iterable && objectTypes[typeof iterable]) {
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] && keys(iterable),
            length = ownProps ? ownProps.length : 0;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          result[index] = callback ? callback(result[index], iterable[index]) : iterable[index];
        }
        }
      }
      return result
    };

    /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects will also
     * be cloned, otherwise they will be assigned by reference. If a callback
     * is provided it will be executed to produce the cloned values. If the
     * callback returns `undefined` cloning will be handled by the method instead.
     * The callback is bound to `thisArg` and invoked with one argument; (value).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep=false] Specify a deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * var shallow = _.clone(characters);
     * shallow[0] === characters[0];
     * // => true
     *
     * var deep = _.clone(characters, true);
     * deep[0] === characters[0];
     * // => false
     *
     * _.mixin({
     *   'clone': _.partialRight(_.clone, function(value) {
     *     return _.isElement(value) ? value.cloneNode(false) : undefined;
     *   })
     * });
     *
     * var clone = _.clone(document.body);
     * clone.childNodes.length;
     * // => 0
     */
    function clone(value, isDeep, callback, thisArg) {
      // allows working with "Collections" methods without using their `index`
      // and `collection` arguments for `isDeep` and `callback`
      if (typeof isDeep != 'boolean' && isDeep != null) {
        thisArg = callback;
        callback = isDeep;
        isDeep = false;
      }
      return baseClone(value, isDeep, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
    }

    /**
     * Creates a deep clone of `value`. If a callback is provided it will be
     * executed to produce the cloned values. If the callback returns `undefined`
     * cloning will be handled by the method instead. The callback is bound to
     * `thisArg` and invoked with one argument; (value).
     *
     * Note: This method is loosely based on the structured clone algorithm. Functions
     * and DOM nodes are **not** cloned. The enumerable properties of `arguments` objects and
     * objects created by constructors other than `Object` are cloned to plain `Object` objects.
     * See http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * var deep = _.cloneDeep(characters);
     * deep[0] === characters[0];
     * // => false
     *
     * var view = {
     *   'label': 'docs',
     *   'node': element
     * };
     *
     * var clone = _.cloneDeep(view, function(value) {
     *   return _.isElement(value) ? value.cloneNode(true) : undefined;
     * });
     *
     * clone.node == view.node;
     * // => false
     */
    function cloneDeep(value, callback, thisArg) {
      return baseClone(value, true, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
    }

    /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, { 'constructor': Circle });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties ? assign(result, properties) : result;
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional defaults of the same property will be ignored.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param- {Object} [guard] Allows working with `_.reduce` without using its
     *  `key` and `object` arguments as sources.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var object = { 'name': 'barney' };
     * _.defaults(object, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    var defaults = function(object, source, guard) {
      var index, iterable = object, result = iterable;
      if (!iterable) return result;
      var args = arguments,
          argsIndex = 0,
          argsLength = typeof guard == 'number' ? 2 : args.length;
      while (++argsIndex < argsLength) {
        iterable = args[argsIndex];
        if (iterable && objectTypes[typeof iterable]) {
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] && keys(iterable),
            length = ownProps ? ownProps.length : 0;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          if (typeof result[index] == 'undefined') result[index] = iterable[index];
        }
        }
      }
      return result
    };

    /**
     * This method is like `_.findIndex` except that it returns the key of the
     * first element that passes the callback check, instead of the element itself.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [callback=identity] The function called per
     *  iteration. If a property name or object is provided it will be used to
     *  create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
     * @example
     *
     * var characters = {
     *   'barney': {  'age': 36, 'blocked': false },
     *   'fred': {    'age': 40, 'blocked': true },
     *   'pebbles': { 'age': 1,  'blocked': false }
     * };
     *
     * _.findKey(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => 'barney' (property order is not guaranteed across environments)
     *
     * // using "_.where" callback shorthand
     * _.findKey(characters, { 'age': 1 });
     * // => 'pebbles'
     *
     * // using "_.pluck" callback shorthand
     * _.findKey(characters, 'blocked');
     * // => 'fred'
     */
    function findKey(object, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forOwn(object, function(value, key, object) {
        if (callback(value, key, object)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [callback=identity] The function called per
     *  iteration. If a property name or object is provided it will be used to
     *  create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
     * @example
     *
     * var characters = {
     *   'barney': {  'age': 36, 'blocked': true },
     *   'fred': {    'age': 40, 'blocked': false },
     *   'pebbles': { 'age': 1,  'blocked': true }
     * };
     *
     * _.findLastKey(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => returns `pebbles`, assuming `_.findKey` returns `barney`
     *
     * // using "_.where" callback shorthand
     * _.findLastKey(characters, { 'age': 40 });
     * // => 'fred'
     *
     * // using "_.pluck" callback shorthand
     * _.findLastKey(characters, 'blocked');
     * // => 'pebbles'
     */
    function findLastKey(object, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forOwnRight(object, function(value, key, object) {
        if (callback(value, key, object)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * Iterates over own and inherited enumerable properties of an object,
     * executing the callback for each property. The callback is bound to `thisArg`
     * and invoked with three arguments; (value, key, object). Callbacks may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * Shape.prototype.move = function(x, y) {
     *   this.x += x;
     *   this.y += y;
     * };
     *
     * _.forIn(new Shape, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'x', 'y', and 'move' (property order is not guaranteed across environments)
     */
    var forIn = function(collection, callback, thisArg) {
      var index, iterable = collection, result = iterable;
      if (!iterable) return result;
      if (!objectTypes[typeof iterable]) return result;
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
        for (index in iterable) {
          if (callback(iterable[index], index, collection) === false) return result;
        }
      return result
    };

    /**
     * This method is like `_.forIn` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * Shape.prototype.move = function(x, y) {
     *   this.x += x;
     *   this.y += y;
     * };
     *
     * _.forInRight(new Shape, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'move', 'y', and 'x' assuming `_.forIn ` logs 'x', 'y', and 'move'
     */
    function forInRight(object, callback, thisArg) {
      var pairs = [];

      forIn(object, function(value, key) {
        pairs.push(key, value);
      });

      var length = pairs.length;
      callback = baseCreateCallback(callback, thisArg, 3);
      while (length--) {
        if (callback(pairs[length--], pairs[length], object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * Iterates over own enumerable properties of an object, executing the callback
     * for each property. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, key, object). Callbacks may exit iteration early by
     * explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
     *   console.log(key);
     * });
     * // => logs '0', '1', and 'length' (property order is not guaranteed across environments)
     */
    var forOwn = function(collection, callback, thisArg) {
      var index, iterable = collection, result = iterable;
      if (!iterable) return result;
      if (!objectTypes[typeof iterable]) return result;
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] && keys(iterable),
            length = ownProps ? ownProps.length : 0;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          if (callback(iterable[index], index, collection) === false) return result;
        }
      return result
    };

    /**
     * This method is like `_.forOwn` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwnRight({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
     *   console.log(key);
     * });
     * // => logs 'length', '1', and '0' assuming `_.forOwn` logs '0', '1', and 'length'
     */
    function forOwnRight(object, callback, thisArg) {
      var props = keys(object),
          length = props.length;

      callback = baseCreateCallback(callback, thisArg, 3);
      while (length--) {
        var key = props[length];
        if (callback(object[key], key, object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * Creates a sorted array of property names of all enumerable properties,
     * own and inherited, of `object` that have function values.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names that have function values.
     * @example
     *
     * _.functions(_);
     * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]
     */
    function functions(object) {
      var result = [];
      forIn(object, function(value, key) {
        if (isFunction(value)) {
          result.push(key);
        }
      });
      return result.sort();
    }

    /**
     * Checks if the specified property name exists as a direct property of `object`,
     * instead of an inherited property.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @param {string} key The name of the property to check.
     * @returns {boolean} Returns `true` if key is a direct property, else `false`.
     * @example
     *
     * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');
     * // => true
     */
    function has(object, key) {
      return object ? hasOwnProperty.call(object, key) : false;
    }

    /**
     * Creates an object composed of the inverted keys and values of the given object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the created inverted object.
     * @example
     *
     * _.invert({ 'first': 'fred', 'second': 'barney' });
     * // => { 'fred': 'first', 'barney': 'second' }
     */
    function invert(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index];
        result[object[key]] = key;
      }
      return result;
    }

    /**
     * Checks if `value` is a boolean value.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a boolean value, else `false`.
     * @example
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        value && typeof value == 'object' && toString.call(value) == boolClass || false;
    }

    /**
     * Checks if `value` is a date.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a date, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     */
    function isDate(value) {
      return value && typeof value == 'object' && toString.call(value) == dateClass || false;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     */
    function isElement(value) {
      return value && value.nodeType === 1 || false;
    }

    /**
     * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a
     * length of `0` and objects with no own enumerable properties are considered
     * "empty".
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if the `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({});
     * // => true
     *
     * _.isEmpty('');
     * // => true
     */
    function isEmpty(value) {
      var result = true;
      if (!value) {
        return result;
      }
      var className = toString.call(value),
          length = value.length;

      if ((className == arrayClass || className == stringClass || className == argsClass ) ||
          (className == objectClass && typeof length == 'number' && isFunction(value.splice))) {
        return !length;
      }
      forOwn(value, function() {
        return (result = false);
      });
      return result;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent to each other. If a callback is provided it will be executed
     * to compare values. If the callback returns `undefined` comparisons will
     * be handled by the method instead. The callback is bound to `thisArg` and
     * invoked with two arguments; (a, b).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} a The value to compare.
     * @param {*} b The other value to compare.
     * @param {Function} [callback] The function to customize comparing values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'name': 'fred' };
     * var copy = { 'name': 'fred' };
     *
     * object == copy;
     * // => false
     *
     * _.isEqual(object, copy);
     * // => true
     *
     * var words = ['hello', 'goodbye'];
     * var otherWords = ['hi', 'goodbye'];
     *
     * _.isEqual(words, otherWords, function(a, b) {
     *   var reGreet = /^(?:hello|hi)$/i,
     *       aGreet = _.isString(a) && reGreet.test(a),
     *       bGreet = _.isString(b) && reGreet.test(b);
     *
     *   return (aGreet || bGreet) ? (aGreet == bGreet) : undefined;
     * });
     * // => true
     */
    function isEqual(a, b, callback, thisArg) {
      return baseIsEqual(a, b, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 2));
    }

    /**
     * Checks if `value` is, or can be coerced to, a finite number.
     *
     * Note: This is not the same as native `isFinite` which will return true for
     * booleans and empty strings. See http://es5.github.io/#x15.1.2.5.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is finite, else `false`.
     * @example
     *
     * _.isFinite(-101);
     * // => true
     *
     * _.isFinite('10');
     * // => true
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite('');
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));
    }

    /**
     * Checks if `value` is a function.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     */
    function isFunction(value) {
      return typeof value == 'function';
    }

    /**
     * Checks if `value` is the language type of Object.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // check if the value is the ECMAScript language type of Object
      // http://es5.github.io/#x8
      // and avoid a V8 bug
      // http://code.google.com/p/v8/issues/detail?id=2291
      return !!(value && objectTypes[typeof value]);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * Note: This is not the same as native `isNaN` which will return `true` for
     * `undefined` and other non-numeric values. See http://es5.github.io/#x15.1.2.4.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // `NaN` as a primitive is the only value that is not equal to itself
      // (perform the [[Class]] check first to avoid errors with some host objects in IE)
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(undefined);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is a number.
     *
     * Note: `NaN` is considered a number. See http://es5.github.io/#x8.5.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(8.4 * 5);
     * // => true
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        value && typeof value == 'object' && toString.call(value) == numberClass || false;
    }

    /**
     * Checks if `value` is an object created by the `Object` constructor.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * _.isPlainObject(new Shape);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     */
    var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {
      if (!(value && toString.call(value) == objectClass)) {
        return false;
      }
      var valueOf = value.valueOf,
          objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);

      return objProto
        ? (value == objProto || getPrototypeOf(value) == objProto)
        : shimIsPlainObject(value);
    };

    /**
     * Checks if `value` is a regular expression.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a regular expression, else `false`.
     * @example
     *
     * _.isRegExp(/fred/);
     * // => true
     */
    function isRegExp(value) {
      return value && typeof value == 'object' && toString.call(value) == regexpClass || false;
    }

    /**
     * Checks if `value` is a string.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a string, else `false`.
     * @example
     *
     * _.isString('fred');
     * // => true
     */
    function isString(value) {
      return typeof value == 'string' ||
        value && typeof value == 'object' && toString.call(value) == stringClass || false;
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     */
    function isUndefined(value) {
      return typeof value == 'undefined';
    }

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through the callback.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new object with values of the results of each `callback` execution.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2, 'c': 3} , function(num) { return num * 3; });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     *
     * var characters = {
     *   'fred': { 'name': 'fred', 'age': 40 },
     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
     * };
     *
     * // using "_.pluck" callback shorthand
     * _.mapValues(characters, 'age');
     * // => { 'fred': 40, 'pebbles': 1 }
     */
    function mapValues(object, callback, thisArg) {
      var result = {};
      callback = lodash.createCallback(callback, thisArg, 3);

      forOwn(object, function(value, key, object) {
        result[key] = callback(value, key, object);
      });
      return result;
    }

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * will overwrite property assignments of previous sources. If a callback is
     * provided it will be executed to produce the merged values of the destination
     * and source properties. If the callback returns `undefined` merging will
     * be handled by the method instead. The callback is bound to `thisArg` and
     * invoked with two arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param {Function} [callback] The function to customize merging properties.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var names = {
     *   'characters': [
     *     { 'name': 'barney' },
     *     { 'name': 'fred' }
     *   ]
     * };
     *
     * var ages = {
     *   'characters': [
     *     { 'age': 36 },
     *     { 'age': 40 }
     *   ]
     * };
     *
     * _.merge(names, ages);
     * // => { 'characters': [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred', 'age': 40 }] }
     *
     * var food = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var otherFood = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(food, otherFood, function(a, b) {
     *   return _.isArray(a) ? a.concat(b) : undefined;
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot] }
     */
    function merge(object) {
      var args = arguments,
          length = 2;

      if (!isObject(object)) {
        return object;
      }
      // allows working with `_.reduce` and `_.reduceRight` without using
      // their `index` and `collection` arguments
      if (typeof args[2] != 'number') {
        length = args.length;
      }
      if (length > 3 && typeof args[length - 2] == 'function') {
        var callback = baseCreateCallback(args[--length - 1], args[length--], 2);
      } else if (length > 2 && typeof args[length - 1] == 'function') {
        callback = args[--length];
      }
      var sources = slice(arguments, 1, length),
          index = -1,
          stackA = getArray(),
          stackB = getArray();

      while (++index < length) {
        baseMerge(object, sources[index], callback, stackA, stackB);
      }
      releaseArray(stackA);
      releaseArray(stackB);
      return object;
    }

    /**
     * Creates a shallow clone of `object` excluding the specified properties.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If a callback is provided it will be executed for each
     * property of `object` omitting the properties the callback returns truey
     * for. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Function|...string|string[]} [callback] The properties to omit or the
     *  function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object without the omitted properties.
     * @example
     *
     * _.omit({ 'name': 'fred', 'age': 40 }, 'age');
     * // => { 'name': 'fred' }
     *
     * _.omit({ 'name': 'fred', 'age': 40 }, function(value) {
     *   return typeof value == 'number';
     * });
     * // => { 'name': 'fred' }
     */
    function omit(object, callback, thisArg) {
      var result = {};
      if (typeof callback != 'function') {
        var props = [];
        forIn(object, function(value, key) {
          props.push(key);
        });
        props = baseDifference(props, baseFlatten(arguments, true, false, 1));

        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];
          result[key] = object[key];
        }
      } else {
        callback = lodash.createCallback(callback, thisArg, 3);
        forIn(object, function(value, key, object) {
          if (!callback(value, key, object)) {
            result[key] = value;
          }
        });
      }
      return result;
    }

    /**
     * Creates a two dimensional array of an object's key-value pairs,
     * i.e. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (property order is not guaranteed across environments)
     */
    function pairs(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates a shallow clone of `object` composed of the specified properties.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If a callback is provided it will be executed for each
     * property of `object` picking the properties the callback returns truey
     * for. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Function|...string|string[]} [callback] The function called per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object composed of the picked properties.
     * @example
     *
     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, 'name');
     * // => { 'name': 'fred' }
     *
     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, function(value, key) {
     *   return key.charAt(0) != '_';
     * });
     * // => { 'name': 'fred' }
     */
    function pick(object, callback, thisArg) {
      var result = {};
      if (typeof callback != 'function') {
        var index = -1,
            props = baseFlatten(arguments, true, false, 1),
            length = isObject(object) ? props.length : 0;

        while (++index < length) {
          var key = props[index];
          if (key in object) {
            result[key] = object[key];
          }
        }
      } else {
        callback = lodash.createCallback(callback, thisArg, 3);
        forIn(object, function(value, key, object) {
          if (callback(value, key, object)) {
            result[key] = value;
          }
        });
      }
      return result;
    }

    /**
     * An alternative to `_.reduce` this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable properties through a callback, with each callback execution
     * potentially mutating the `accumulator` object. The callback is bound to
     * `thisArg` and invoked with four arguments; (accumulator, value, key, object).
     * Callbacks may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var squares = _.transform([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(result, num) {
     *   num *= num;
     *   if (num % 2) {
     *     return result.push(num) < 3;
     *   }
     * });
     * // => [1, 9, 25]
     *
     * var mapped = _.transform({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
     *   result[key] = num * 3;
     * });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function transform(object, callback, accumulator, thisArg) {
      var isArr = isArray(object);
      if (accumulator == null) {
        if (isArr) {
          accumulator = [];
        } else {
          var ctor = object && object.constructor,
              proto = ctor && ctor.prototype;

          accumulator = baseCreate(proto);
        }
      }
      if (callback) {
        callback = lodash.createCallback(callback, thisArg, 4);
        (isArr ? forEach : forOwn)(object, function(value, index, object) {
          return callback(accumulator, value, index, object);
        });
      }
      return accumulator;
    }

    /**
     * Creates an array composed of the own enumerable property values of `object`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property values.
     * @example
     *
     * _.values({ 'one': 1, 'two': 2, 'three': 3 });
     * // => [1, 2, 3] (property order is not guaranteed across environments)
     */
    function values(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array of elements from the specified indexes, or keys, of the
     * `collection`. Indexes may be specified as individual arguments or as arrays
     * of indexes.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [index] The indexes of `collection`
     *   to retrieve, specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns a new array of elements corresponding to the
     *  provided indexes.
     * @example
     *
     * _.at(['a', 'b', 'c', 'd', 'e'], [0, 2, 4]);
     * // => ['a', 'c', 'e']
     *
     * _.at(['fred', 'barney', 'pebbles'], 0, 2);
     * // => ['fred', 'pebbles']
     */
    function at(collection) {
      var args = arguments,
          index = -1,
          props = baseFlatten(args, true, false, 1),
          length = (args[2] && args[2][args[1]] === collection) ? 1 : props.length,
          result = Array(length);

      while(++index < length) {
        result[index] = collection[props[index]];
      }
      return result;
    }

    /**
     * Checks if a given value is present in a collection using strict equality
     * for comparisons, i.e. `===`. If `fromIndex` is negative, it is used as the
     * offset from the end of the collection.
     *
     * @static
     * @memberOf _
     * @alias include
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {*} target The value to check for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {boolean} Returns `true` if the `target` element is found, else `false`.
     * @example
     *
     * _.contains([1, 2, 3], 1);
     * // => true
     *
     * _.contains([1, 2, 3], 1, 2);
     * // => false
     *
     * _.contains({ 'name': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.contains('pebbles', 'eb');
     * // => true
     */
    function contains(collection, target, fromIndex) {
      var index = -1,
          indexOf = getIndexOf(),
          length = collection ? collection.length : 0,
          result = false;

      fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;
      if (isArray(collection)) {
        result = indexOf(collection, target, fromIndex) > -1;
      } else if (typeof length == 'number') {
        result = (isString(collection) ? collection.indexOf(target, fromIndex) : indexOf(collection, target, fromIndex)) > -1;
      } else {
        forOwn(collection, function(value) {
          if (++index >= fromIndex) {
            return !(result = value === target);
          }
        });
      }
      return result;
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through the callback. The corresponding value
     * of each key is the number of times the key was returned by the callback.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1);
    });

    /**
     * Checks if the given callback returns truey value for **all** elements of
     * a collection. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if all elements passed the callback check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes']);
     * // => false
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.every(characters, 'age');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.every(characters, { 'age': 36 });
     * // => false
     */
    function every(collection, callback, thisArg) {
      var result = true;
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          if (!(result = !!callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          return (result = !!callback(value, index, collection));
        });
      }
      return result;
    }

    /**
     * Iterates over elements of a collection, returning an array of all elements
     * the callback returns truey for. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that passed the callback check.
     * @example
     *
     * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [2, 4, 6]
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.filter(characters, 'blocked');
     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
     *
     * // using "_.where" callback shorthand
     * _.filter(characters, { 'age': 36 });
     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
     */
    function filter(collection, callback, thisArg) {
      var result = [];
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            result.push(value);
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result.push(value);
          }
        });
      }
      return result;
    }

    /**
     * Iterates over elements of a collection, returning the first element that
     * the callback returns truey for. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect, findWhere
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the found element, else `undefined`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': false },
     *   { 'name': 'fred',    'age': 40, 'blocked': true },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
     * ];
     *
     * _.find(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => { 'name': 'barney', 'age': 36, 'blocked': false }
     *
     * // using "_.where" callback shorthand
     * _.find(characters, { 'age': 1 });
     * // =>  { 'name': 'pebbles', 'age': 1, 'blocked': false }
     *
     * // using "_.pluck" callback shorthand
     * _.find(characters, 'blocked');
     * // => { 'name': 'fred', 'age': 40, 'blocked': true }
     */
    function find(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            return value;
          }
        }
      } else {
        var result;
        forOwn(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result = value;
            return false;
          }
        });
        return result;
      }
    }

    /**
     * This method is like `_.find` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the found element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(num) {
     *   return num % 2 == 1;
     * });
     * // => 3
     */
    function findLast(collection, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forEachRight(collection, function(value, index, collection) {
        if (callback(value, index, collection)) {
          result = value;
          return false;
        }
      });
      return result;
    }

    /**
     * Iterates over elements of a collection, executing the callback for each
     * element. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection). Callbacks may exit iteration early by
     * explicitly returning `false`.
     *
     * Note: As with other "Collections" methods, objects with a `length` property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEach(function(num) { console.log(num); }).join(',');
     * // => logs each number and returns '1,2,3'
     *
     * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { console.log(num); });
     * // => logs each number and returns the object (property order is not guaranteed across environments)
     */
    function forEach(collection, callback, thisArg) {
      var index = -1,
          length = collection ? collection.length : 0;

      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        while (++index < length) {
          if (callback(collection[index], index, collection) === false) {
            break;
          }
        }
      } else {
        forOwn(collection, callback);
      }
      return collection;
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEachRight(function(num) { console.log(num); }).join(',');
     * // => logs each number from right to left and returns '3,2,1'
     */
    function forEachRight(collection, callback, thisArg) {
      var length = collection ? collection.length : 0;
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        while (length--) {
          if (callback(collection[length], length, collection) === false) {
            break;
          }
        }
      } else {
        var props = keys(collection);
        length = props.length;
        forOwn(collection, function(value, key, collection) {
          key = props ? props[--length] : --length;
          return callback(collection[key], key, collection);
        });
      }
      return collection;
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of a collection through the callback. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using "_.pluck" callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of the collection through the given callback. The corresponding
     * value of each key is the last element responsible for generating the key.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keys = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keys, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keys, function(key) { return String.fromCharCode(key.code); });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(characters, function(key) { this.fromCharCode(key.code); }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var indexBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Invokes the method named by `methodName` on each element in the `collection`
     * returning an array of the results of each invoked method. Additional arguments
     * will be provided to each invoked method. If `methodName` is a function it
     * will be invoked for, and `this` bound to, each element in the `collection`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|string} methodName The name of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [arg] Arguments to invoke the method with.
     * @returns {Array} Returns a new array of the results of each invoked method.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    function invoke(collection, methodName) {
      var args = slice(arguments, 2),
          index = -1,
          isFunc = typeof methodName == 'function',
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      forEach(collection, function(value) {
        result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);
      });
      return result;
    }

    /**
     * Creates an array of values by running each element in the collection
     * through the callback. The callback is bound to `thisArg` and invoked with
     * three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of the results of each `callback` execution.
     * @example
     *
     * _.map([1, 2, 3], function(num) { return num * 3; });
     * // => [3, 6, 9]
     *
     * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });
     * // => [3, 6, 9] (property order is not guaranteed across environments)
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.map(characters, 'name');
     * // => ['barney', 'fred']
     */
    function map(collection, callback, thisArg) {
      var index = -1,
          length = collection ? collection.length : 0;

      callback = lodash.createCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        var result = Array(length);
        while (++index < length) {
          result[index] = callback(collection[index], index, collection);
        }
      } else {
        result = [];
        forOwn(collection, function(value, key, collection) {
          result[++index] = callback(value, key, collection);
        });
      }
      return result;
    }

    /**
     * Retrieves the maximum value of a collection. If the collection is empty or
     * falsey `-Infinity` is returned. If a callback is provided it will be executed
     * for each value in the collection to generate the criterion by which the value
     * is ranked. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.max(characters, function(chr) { return chr.age; });
     * // => { 'name': 'fred', 'age': 40 };
     *
     * // using "_.pluck" callback shorthand
     * _.max(characters, 'age');
     * // => { 'name': 'fred', 'age': 40 };
     */
    function max(collection, callback, thisArg) {
      var computed = -Infinity,
          result = computed;

      // allows working with functions like `_.map` without using
      // their `index` argument as a callback
      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
        callback = null;
      }
      if (callback == null && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value > result) {
            result = value;
          }
        }
      } else {
        callback = (callback == null && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg, 3);

        forEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current > computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the minimum value of a collection. If the collection is empty or
     * falsey `Infinity` is returned. If a callback is provided it will be executed
     * for each value in the collection to generate the criterion by which the value
     * is ranked. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.min(characters, function(chr) { return chr.age; });
     * // => { 'name': 'barney', 'age': 36 };
     *
     * // using "_.pluck" callback shorthand
     * _.min(characters, 'age');
     * // => { 'name': 'barney', 'age': 36 };
     */
    function min(collection, callback, thisArg) {
      var computed = Infinity,
          result = computed;

      // allows working with functions like `_.map` without using
      // their `index` argument as a callback
      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
        callback = null;
      }
      if (callback == null && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value < result) {
            result = value;
          }
        }
      } else {
        callback = (callback == null && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg, 3);

        forEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current < computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the value of a specified property from all elements in the collection.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {string} property The name of the property to pluck.
     * @returns {Array} Returns a new array of property values.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(characters, 'name');
     * // => ['barney', 'fred']
     */
    var pluck = map;

    /**
     * Reduces a collection to a value which is the accumulated result of running
     * each element in the collection through the callback, where each successive
     * callback execution consumes the return value of the previous execution. If
     * `accumulator` is not provided the first element of the collection will be
     * used as the initial `accumulator` value. The callback is bound to `thisArg`
     * and invoked with four arguments; (accumulator, value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] Initial value of the accumulator.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var sum = _.reduce([1, 2, 3], function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * var mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
     *   result[key] = num * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function reduce(collection, callback, accumulator, thisArg) {
      if (!collection) return accumulator;
      var noaccum = arguments.length < 3;
      callback = lodash.createCallback(callback, thisArg, 4);

      var index = -1,
          length = collection.length;

      if (typeof length == 'number') {
        if (noaccum) {
          accumulator = collection[++index];
        }
        while (++index < length) {
          accumulator = callback(accumulator, collection[index], index, collection);
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          accumulator = noaccum
            ? (noaccum = false, value)
            : callback(accumulator, value, index, collection)
        });
      }
      return accumulator;
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] Initial value of the accumulator.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var list = [[0, 1], [2, 3], [4, 5]];
     * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, callback, accumulator, thisArg) {
      var noaccum = arguments.length < 3;
      callback = lodash.createCallback(callback, thisArg, 4);
      forEachRight(collection, function(value, index, collection) {
        accumulator = noaccum
          ? (noaccum = false, value)
          : callback(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The opposite of `_.filter` this method returns the elements of a
     * collection that the callback does **not** return truey for.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that failed the callback check.
     * @example
     *
     * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [1, 3, 5]
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.reject(characters, 'blocked');
     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
     *
     * // using "_.where" callback shorthand
     * _.reject(characters, { 'age': 36 });
     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
     */
    function reject(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg, 3);
      return filter(collection, function(value, index, collection) {
        return !callback(value, index, collection);
      });
    }

    /**
     * Retrieves a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Allows working with functions like `_.map`
     *  without using their `index` arguments as `n`.
     * @returns {Array} Returns the random sample(s) of `collection`.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sample(collection, n, guard) {
      if (collection && typeof collection.length != 'number') {
        collection = values(collection);
      }
      if (n == null || guard) {
        return collection ? collection[baseRandom(0, collection.length - 1)] : undefined;
      }
      var result = shuffle(collection);
      result.length = nativeMin(nativeMax(0, n), result.length);
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the Fisher-Yates
     * shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns a new shuffled collection.
     * @example
     *
     * _.shuffle([1, 2, 3, 4, 5, 6]);
     * // => [4, 1, 6, 3, 5, 2]
     */
    function shuffle(collection) {
      var index = -1,
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      forEach(collection, function(value) {
        var rand = baseRandom(0, ++index);
        result[index] = result[rand];
        result[rand] = value;
      });
      return result;
    }

    /**
     * Gets the size of the `collection` by returning `collection.length` for arrays
     * and array-like objects or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns `collection.length` or number of own enumerable properties.
     * @example
     *
     * _.size([1, 2]);
     * // => 2
     *
     * _.size({ 'one': 1, 'two': 2, 'three': 3 });
     * // => 3
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      var length = collection ? collection.length : 0;
      return typeof length == 'number' ? length : keys(collection).length;
    }

    /**
     * Checks if the callback returns a truey value for **any** element of a
     * collection. The function returns as soon as it finds a passing value and
     * does not iterate over the entire collection. The callback is bound to
     * `thisArg` and invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if any element passed the callback check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.some(characters, 'blocked');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.some(characters, { 'age': 1 });
     * // => false
     */
    function some(collection, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          if ((result = callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          return !(result = callback(value, index, collection));
        });
      }
      return !!result;
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through the callback. This method
     * performs a stable sort, that is, it will preserve the original sort order
     * of equal elements. The callback is bound to `thisArg` and invoked with
     * three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an array of property names is provided for `callback` the collection
     * will be sorted by each property value.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of sorted elements.
     * @example
     *
     * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);
     * // => [3, 1, 2]
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36 },
     *   { 'name': 'fred',    'age': 40 },
     *   { 'name': 'barney',  'age': 26 },
     *   { 'name': 'fred',    'age': 30 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.map(_.sortBy(characters, 'age'), _.values);
     * // => [['barney', 26], ['fred', 30], ['barney', 36], ['fred', 40]]
     *
     * // sorting by multiple properties
     * _.map(_.sortBy(characters, ['name', 'age']), _.values);
     * // = > [['barney', 26], ['barney', 36], ['fred', 30], ['fred', 40]]
     */
    function sortBy(collection, callback, thisArg) {
      var index = -1,
          isArr = isArray(callback),
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      if (!isArr) {
        callback = lodash.createCallback(callback, thisArg, 3);
      }
      forEach(collection, function(value, key, collection) {
        var object = result[++index] = getObject();
        if (isArr) {
          object.criteria = map(callback, function(key) { return value[key]; });
        } else {
          (object.criteria = getArray())[0] = callback(value, key, collection);
        }
        object.index = index;
        object.value = value;
      });

      length = result.length;
      result.sort(compareAscending);
      while (length--) {
        var object = result[length];
        result[length] = object.value;
        if (!isArr) {
          releaseArray(object.criteria);
        }
        releaseObject(object);
      }
      return result;
    }

    /**
     * Converts the `collection` to an array.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to convert.
     * @returns {Array} Returns the new converted array.
     * @example
     *
     * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);
     * // => [2, 3, 4]
     */
    function toArray(collection) {
      if (collection && typeof collection.length == 'number') {
        return slice(collection);
      }
      return values(collection);
    }

    /**
     * Performs a deep comparison of each element in a `collection` to the given
     * `properties` object, returning an array of all elements that have equivalent
     * property values.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Object} props The object of property values to filter by.
     * @returns {Array} Returns a new array of elements that have the given properties.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'pets': ['hoppy'] },
     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.where(characters, { 'age': 36 });
     * // => [{ 'name': 'barney', 'age': 36, 'pets': ['hoppy'] }]
     *
     * _.where(characters, { 'pets': ['dino'] });
     * // => [{ 'name': 'fred', 'age': 40, 'pets': ['baby puss', 'dino'] }]
     */
    var where = filter;

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are all falsey.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to compact.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * Creates an array excluding all values of the provided arrays using strict
     * equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);
     * // => [1, 3, 4]
     */
    function difference(array) {
      return baseDifference(array, baseFlatten(arguments, true, true, 1));
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element that passes the callback check, instead of the element itself.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': false },
     *   { 'name': 'fred',    'age': 40, 'blocked': true },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
     * ];
     *
     * _.findIndex(characters, function(chr) {
     *   return chr.age < 20;
     * });
     * // => 2
     *
     * // using "_.where" callback shorthand
     * _.findIndex(characters, { 'age': 36 });
     * // => 0
     *
     * // using "_.pluck" callback shorthand
     * _.findIndex(characters, 'blocked');
     * // => 1
     */
    function findIndex(array, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0;

      callback = lodash.createCallback(callback, thisArg, 3);
      while (++index < length) {
        if (callback(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': true },
     *   { 'name': 'fred',    'age': 40, 'blocked': false },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': true }
     * ];
     *
     * _.findLastIndex(characters, function(chr) {
     *   return chr.age > 30;
     * });
     * // => 1
     *
     * // using "_.where" callback shorthand
     * _.findLastIndex(characters, { 'age': 36 });
     * // => 0
     *
     * // using "_.pluck" callback shorthand
     * _.findLastIndex(characters, 'blocked');
     * // => 2
     */
    function findLastIndex(array, callback, thisArg) {
      var length = array ? array.length : 0;
      callback = lodash.createCallback(callback, thisArg, 3);
      while (length--) {
        if (callback(array[length], length, array)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Gets the first element or first `n` elements of an array. If a callback
     * is provided elements at the beginning of the array are returned as long
     * as the callback returns truey. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias head, take
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the first element(s) of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.first([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [1, 2]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': false, 'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.first(characters, 'blocked');
     * // => [{ 'name': 'barney', 'blocked': true, 'employer': 'slate' }]
     *
     * // using "_.where" callback shorthand
     * _.pluck(_.first(characters, { 'employer': 'slate' }), 'name');
     * // => ['barney', 'fred']
     */
    function first(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = -1;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (++index < length && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = callback;
        if (n == null || thisArg) {
          return array ? array[0] : undefined;
        }
      }
      return slice(array, 0, nativeMin(nativeMax(0, n), length));
    }

    /**
     * Flattens a nested array (the nesting can be to any depth). If `isShallow`
     * is truey, the array will only be flattened a single level. If a callback
     * is provided each element of the array is passed through the callback before
     * flattening. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to flatten.
     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new flattened array.
     * @example
     *
     * _.flatten([1, [2], [3, [[4]]]]);
     * // => [1, 2, 3, 4];
     *
     * _.flatten([1, [2], [3, [[4]]]], true);
     * // => [1, 2, 3, [[4]]];
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 30, 'pets': ['hoppy'] },
     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.flatten(characters, 'pets');
     * // => ['hoppy', 'baby puss', 'dino']
     */
    function flatten(array, isShallow, callback, thisArg) {
      // juggle arguments
      if (typeof isShallow != 'boolean' && isShallow != null) {
        thisArg = callback;
        callback = (typeof isShallow != 'function' && thisArg && thisArg[isShallow] === array) ? null : isShallow;
        isShallow = false;
      }
      if (callback != null) {
        array = map(array, callback, thisArg);
      }
      return baseFlatten(array, isShallow);
    }

    /**
     * Gets the index at which the first occurrence of `value` is found using
     * strict equality for comparisons, i.e. `===`. If the array is already sorted
     * providing `true` for `fromIndex` will run a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 1
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 4
     *
     * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      if (typeof fromIndex == 'number') {
        var length = array ? array.length : 0;
        fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0);
      } else if (fromIndex) {
        var index = sortedIndex(array, value);
        return array[index] === value ? index : -1;
      }
      return baseIndexOf(array, value, fromIndex);
    }

    /**
     * Gets all but the last element or last `n` elements of an array. If a
     * callback is provided elements at the end of the array are excluded from
     * the result as long as the callback returns truey. The callback is bound
     * to `thisArg` and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     *
     * _.initial([1, 2, 3], 2);
     * // => [1]
     *
     * _.initial([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [1]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.initial(characters, 'blocked');
     * // => [{ 'name': 'barney',  'blocked': false, 'employer': 'slate' }]
     *
     * // using "_.where" callback shorthand
     * _.pluck(_.initial(characters, { 'employer': 'na' }), 'name');
     * // => ['barney', 'fred']
     */
    function initial(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = length;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (index-- && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = (callback == null || thisArg) ? 1 : callback || n;
      }
      return slice(array, 0, nativeMin(nativeMax(0, length - n), length));
    }

    /**
     * Creates an array of unique values present in all provided arrays using
     * strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of shared values.
     * @example
     *
     * _.intersection([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2]
     */
    function intersection() {
      var args = [],
          argsIndex = -1,
          argsLength = arguments.length,
          caches = getArray(),
          indexOf = getIndexOf(),
          trustIndexOf = indexOf === baseIndexOf,
          seen = getArray();

      while (++argsIndex < argsLength) {
        var value = arguments[argsIndex];
        if (isArray(value) || isArguments(value)) {
          args.push(value);
          caches.push(trustIndexOf && value.length >= largeArraySize &&
            createCache(argsIndex ? args[argsIndex] : seen));
        }
      }
      var array = args[0],
          index = -1,
          length = array ? array.length : 0,
          result = [];

      outer:
      while (++index < length) {
        var cache = caches[0];
        value = array[index];

        if ((cache ? cacheIndexOf(cache, value) : indexOf(seen, value)) < 0) {
          argsIndex = argsLength;
          (cache || seen).push(value);
          while (--argsIndex) {
            cache = caches[argsIndex];
            if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value)) < 0) {
              continue outer;
            }
          }
          result.push(value);
        }
      }
      while (argsLength--) {
        cache = caches[argsLength];
        if (cache) {
          releaseObject(cache);
        }
      }
      releaseArray(caches);
      releaseArray(seen);
      return result;
    }

    /**
     * Gets the last element or last `n` elements of an array. If a callback is
     * provided elements at the end of the array are returned as long as the
     * callback returns truey. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the last element(s) of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     *
     * _.last([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.last([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [2, 3]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.pluck(_.last(characters, 'blocked'), 'name');
     * // => ['fred', 'pebbles']
     *
     * // using "_.where" callback shorthand
     * _.last(characters, { 'employer': 'na' });
     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
     */
    function last(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = length;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (index-- && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = callback;
        if (n == null || thisArg) {
          return array ? array[length - 1] : undefined;
        }
      }
      return slice(array, nativeMax(0, length - n));
    }

    /**
     * Gets the index at which the last occurrence of `value` is found using strict
     * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used
     * as the offset from the end of the collection.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 4
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var index = array ? array.length : 0;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from the given array using strict equality for
     * comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to modify.
     * @param {...*} [value] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    function pull(array) {
      var args = arguments,
          argsIndex = 0,
          argsLength = args.length,
          length = array ? array.length : 0;

      while (++argsIndex < argsLength) {
        var index = -1,
            value = args[argsIndex];
        while (++index < length) {
          if (array[index] === value) {
            splice.call(array, index--, 1);
            length--;
          }
        }
      }
      return array;
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to but not including `end`. If `start` is less than `stop` a
     * zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns a new range array.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      start = +start || 0;
      step = typeof step == 'number' ? step : (+step || 1);

      if (end == null) {
        end = start;
        start = 0;
      }
      // use `Array(length)` so engines like Chakra and V8 avoid slower modes
      // http://youtu.be/XAqIpGU8ZZk#t=17m25s
      var index = -1,
          length = nativeMax(0, ceil((end - start) / (step || 1))),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Removes all elements from an array that the callback returns truey for
     * and returns an array of removed elements. The callback is bound to `thisArg`
     * and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4, 5, 6];
     * var evens = _.remove(array, function(num) { return num % 2 == 0; });
     *
     * console.log(array);
     * // => [1, 3, 5]
     *
     * console.log(evens);
     * // => [2, 4, 6]
     */
    function remove(array, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      callback = lodash.createCallback(callback, thisArg, 3);
      while (++index < length) {
        var value = array[index];
        if (callback(value, index, array)) {
          result.push(value);
          splice.call(array, index--, 1);
          length--;
        }
      }
      return result;
    }

    /**
     * The opposite of `_.initial` this method gets all but the first element or
     * first `n` elements of an array. If a callback function is provided elements
     * at the beginning of the array are excluded from the result as long as the
     * callback returns truey. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias drop, tail
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     *
     * _.rest([1, 2, 3], 2);
     * // => [3]
     *
     * _.rest([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [3]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': false,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true, 'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.pluck(_.rest(characters, 'blocked'), 'name');
     * // => ['fred', 'pebbles']
     *
     * // using "_.where" callback shorthand
     * _.rest(characters, { 'employer': 'slate' });
     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
     */
    function rest(array, callback, thisArg) {
      if (typeof callback != 'number' && callback != null) {
        var n = 0,
            index = -1,
            length = array ? array.length : 0;

        callback = lodash.createCallback(callback, thisArg, 3);
        while (++index < length && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = (callback == null || thisArg) ? 1 : nativeMax(0, callback);
      }
      return slice(array, n);
    }

    /**
     * Uses a binary search to determine the smallest index at which a value
     * should be inserted into a given sorted array in order to maintain the sort
     * order of the array. If a callback is provided it will be executed for
     * `value` and each element of `array` to compute their sort ranking. The
     * callback is bound to `thisArg` and invoked with one argument; (value).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([20, 30, 50], 40);
     * // => 2
     *
     * // using "_.pluck" callback shorthand
     * _.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 2
     *
     * var dict = {
     *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }
     * };
     *
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return dict.wordToNumber[word];
     * });
     * // => 2
     *
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return this.wordToNumber[word];
     * }, dict);
     * // => 2
     */
    function sortedIndex(array, value, callback, thisArg) {
      var low = 0,
          high = array ? array.length : low;

      // explicitly reference `identity` for better inlining in Firefox
      callback = callback ? lodash.createCallback(callback, thisArg, 1) : identity;
      value = callback(value);

      while (low < high) {
        var mid = (low + high) >>> 1;
        (callback(array[mid]) < value)
          ? low = mid + 1
          : high = mid;
      }
      return low;
    }

    /**
     * Creates an array of unique values, in order, of the provided arrays using
     * strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of combined values.
     * @example
     *
     * _.union([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2, 3, 5, 4]
     */
    function union() {
      return baseUniq(baseFlatten(arguments, true, true));
    }

    /**
     * Creates a duplicate-value-free version of an array using strict equality
     * for comparisons, i.e. `===`. If the array is sorted, providing
     * `true` for `isSorted` will use a faster algorithm. If a callback is provided
     * each element of `array` is passed through the callback before uniqueness
     * is computed. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a duplicate-value-free array.
     * @example
     *
     * _.uniq([1, 2, 1, 3, 1]);
     * // => [1, 2, 3]
     *
     * _.uniq([1, 1, 2, 2, 3], true);
     * // => [1, 2, 3]
     *
     * _.uniq(['A', 'b', 'C', 'a', 'B', 'c'], function(letter) { return letter.toLowerCase(); });
     * // => ['A', 'b', 'C']
     *
     * _.uniq([1, 2.5, 3, 1.5, 2, 3.5], function(num) { return this.floor(num); }, Math);
     * // => [1, 2.5, 3]
     *
     * // using "_.pluck" callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, callback, thisArg) {
      // juggle arguments
      if (typeof isSorted != 'boolean' && isSorted != null) {
        thisArg = callback;
        callback = (typeof isSorted != 'function' && thisArg && thisArg[isSorted] === array) ? null : isSorted;
        isSorted = false;
      }
      if (callback != null) {
        callback = lodash.createCallback(callback, thisArg, 3);
      }
      return baseUniq(array, isSorted, callback);
    }

    /**
     * Creates an array excluding all provided values using strict equality for
     * comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to filter.
     * @param {...*} [value] The values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
     * // => [2, 3, 4]
     */
    function without(array) {
      return baseDifference(array, slice(arguments, 1));
    }

    /**
     * Creates an array that is the symmetric difference of the provided arrays.
     * See http://en.wikipedia.org/wiki/Symmetric_difference.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of values.
     * @example
     *
     * _.xor([1, 2, 3], [5, 2, 1, 4]);
     * // => [3, 5, 4]
     *
     * _.xor([1, 2, 5], [2, 3, 5], [3, 4, 5]);
     * // => [1, 4, 5]
     */
    function xor() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var array = arguments[index];
        if (isArray(array) || isArguments(array)) {
          var result = result
            ? baseUniq(baseDifference(result, array).concat(baseDifference(array, result)))
            : array;
        }
      }
      return result || [];
    }

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second
     * elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @alias unzip
     * @category Arrays
     * @param {...Array} [array] Arrays to process.
     * @returns {Array} Returns a new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    function zip() {
      var array = arguments.length > 1 ? arguments : arguments[0],
          index = -1,
          length = array ? max(pluck(array, 'length')) : 0,
          result = Array(length < 0 ? 0 : length);

      while (++index < length) {
        result[index] = pluck(array, index);
      }
      return result;
    }

    /**
     * Creates an object composed from arrays of `keys` and `values`. Provide
     * either a single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`
     * or two arrays, one of `keys` and one of corresponding `values`.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Arrays
     * @param {Array} keys The array of keys.
     * @param {Array} [values=[]] The array of values.
     * @returns {Object} Returns an object composed of the given keys and
     *  corresponding values.
     * @example
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(keys, values) {
      var index = -1,
          length = keys ? keys.length : 0,
          result = {};

      if (!values && length && !isArray(keys[0])) {
        values = [];
      }
      while (++index < length) {
        var key = keys[index];
        if (values) {
          result[key] = values[index];
        } else if (key) {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function that executes `func`, with  the `this` binding and
     * arguments of the created function, only after being called `n` times.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {number} n The number of times the function must be called before
     *  `func` is executed.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('Done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'Done saving!', after all saves have completed
     */
    function after(n, func) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with the `this`
     * binding of `thisArg` and prepends any additional `bind` arguments to those
     * provided to the bound function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var func = function(greeting) {
     *   return greeting + ' ' + this.name;
     * };
     *
     * func = _.bind(func, { 'name': 'fred' }, 'hi');
     * func();
     * // => 'hi fred'
     */
    function bind(func, thisArg) {
      return arguments.length > 2
        ? createWrapper(func, 17, slice(arguments, 2), null, thisArg)
        : createWrapper(func, 1, null, null, thisArg);
    }

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all the function properties
     * of `object` will be bound.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...string} [methodName] The object method names to
     *  bind, specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() { console.log('clicked ' + this.label); }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs', when the button is clicked
     */
    function bindAll(object) {
      var funcs = arguments.length > 1 ? baseFlatten(arguments, true, false, 1) : functions(object),
          index = -1,
          length = funcs.length;

      while (++index < length) {
        var key = funcs[index];
        object[key] = createWrapper(object[key], 1, null, null, object);
      }
      return object;
    }

    /**
     * Creates a function that, when called, invokes the method at `object[key]`
     * and prepends any additional `bindKey` arguments to those provided to the bound
     * function. This method differs from `_.bind` by allowing bound functions to
     * reference methods that will be redefined or don't yet exist.
     * See http://michaux.ca/articles/lazy-function-definition-pattern.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'name': 'fred',
     *   'greet': function(greeting) {
     *     return greeting + ' ' + this.name;
     *   }
     * };
     *
     * var func = _.bindKey(object, 'greet', 'hi');
     * func();
     * // => 'hi fred'
     *
     * object.greet = function(greeting) {
     *   return greeting + 'ya ' + this.name + '!';
     * };
     *
     * func();
     * // => 'hiya fred!'
     */
    function bindKey(object, key) {
      return arguments.length > 2
        ? createWrapper(key, 19, slice(arguments, 2), null, object)
        : createWrapper(key, 3, null, null, object);
    }

    /**
     * Creates a function that is the composition of the provided functions,
     * where each function consumes the return value of the function that follows.
     * For example, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.
     * Each function is executed with the `this` binding of the composed function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {...Function} [func] Functions to compose.
     * @returns {Function} Returns the new composed function.
     * @example
     *
     * var realNameMap = {
     *   'pebbles': 'penelope'
     * };
     *
     * var format = function(name) {
     *   name = realNameMap[name.toLowerCase()] || name;
     *   return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();
     * };
     *
     * var greet = function(formatted) {
     *   return 'Hiya ' + formatted + '!';
     * };
     *
     * var welcome = _.compose(greet, format);
     * welcome('pebbles');
     * // => 'Hiya Penelope!'
     */
    function compose() {
      var funcs = arguments,
          length = funcs.length;

      while (length--) {
        if (!isFunction(funcs[length])) {
          throw new TypeError;
        }
      }
      return function() {
        var args = arguments,
            length = funcs.length;

        while (length--) {
          args = [funcs[length].apply(this, args)];
        }
        return args[0];
      };
    }

    /**
     * Creates a function which accepts one or more arguments of `func` that when
     * invoked either executes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` can be specified
     * if `func.length` is not sufficient.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var curried = _.curry(function(a, b, c) {
     *   console.log(a + b + c);
     * });
     *
     * curried(1)(2)(3);
     * // => 6
     *
     * curried(1, 2)(3);
     * // => 6
     *
     * curried(1, 2, 3);
     * // => 6
     */
    function curry(func, arity) {
      arity = typeof arity == 'number' ? arity : (+arity || func.length);
      return createWrapper(func, 4, null, null, null, arity);
    }

    /**
     * Creates a function that will delay the execution of `func` until after
     * `wait` milliseconds have elapsed since the last time it was invoked.
     * Provide an options object to indicate that `func` should be invoked on
     * the leading and/or trailing edge of the `wait` timeout. Subsequent calls
     * to the debounced function will return the result of the last `func` call.
     *
     * Note: If `leading` and `trailing` options are `true` `func` will be called
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to debounce.
     * @param {number} wait The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify execution on the leading edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be delayed before it's called.
     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * var lazyLayout = _.debounce(calculateLayout, 150);
     * jQuery(window).on('resize', lazyLayout);
     *
     * // execute `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * });
     *
     * // ensure `batchLog` is executed once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * source.addEventListener('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }, false);
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          maxWait = false,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      wait = nativeMax(0, wait) || 0;
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (isObject(options)) {
        leading = options.leading;
        maxWait = 'maxWait' in options && (nativeMax(wait, options.maxWait) || 0);
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      var delayed = function() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0) {
          if (maxTimeoutId) {
            clearTimeout(maxTimeoutId);
          }
          var isCalled = trailingCall;
          maxTimeoutId = timeoutId = trailingCall = undefined;
          if (isCalled) {
            lastCalled = now();
            result = func.apply(thisArg, args);
            if (!timeoutId && !maxTimeoutId) {
              args = thisArg = null;
            }
          }
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      };

      var maxDelayed = function() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (trailing || (maxWait !== wait)) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = null;
          }
        }
      };

      return function() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = null;
        }
        return result;
      };
    }

    /**
     * Defers executing the `func` function until the current call stack has cleared.
     * Additional arguments will be provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to defer.
     * @param {...*} [arg] Arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) { console.log(text); }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    function defer(func) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var args = slice(arguments, 1);
      return setTimeout(function() { func.apply(undefined, args); }, 1);
    }

    /**
     * Executes the `func` function after `wait` milliseconds. Additional arguments
     * will be provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay execution.
     * @param {...*} [arg] Arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) { console.log(text); }, 1000, 'later');
     * // => logs 'later' after one second
     */
    function delay(func, wait) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var args = slice(arguments, 2);
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it will be used to determine the cache key for storing the result
     * based on the arguments provided to the memoized function. By default, the
     * first argument provided to the memoized function is used as the cache key.
     * The `func` is executed with the `this` binding of the memoized function.
     * The result cache is exposed as the `cache` property on the memoized function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] A function used to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var fibonacci = _.memoize(function(n) {
     *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
     * });
     *
     * fibonacci(9)
     * // => 34
     *
     * var data = {
     *   'fred': { 'name': 'fred', 'age': 40 },
     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
     * };
     *
     * // modifying the result cache
     * var get = _.memoize(function(name) { return data[name]; }, _.identity);
     * get('pebbles');
     * // => { 'name': 'pebbles', 'age': 1 }
     *
     * get.cache.pebbles.name = 'penelope';
     * get('pebbles');
     * // => { 'name': 'penelope', 'age': 1 }
     */
    function memoize(func, resolver) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var memoized = function() {
        var cache = memoized.cache,
            key = resolver ? resolver.apply(this, arguments) : keyPrefix + arguments[0];

        return hasOwnProperty.call(cache, key)
          ? cache[key]
          : (cache[key] = func.apply(this, arguments));
      }
      memoized.cache = {};
      return memoized;
    }

    /**
     * Creates a function that is restricted to execute `func` once. Repeat calls to
     * the function will return the value of the first call. The `func` is executed
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` executes `createApplication` once
     */
    function once(func) {
      var ran,
          result;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      return function() {
        if (ran) {
          return result;
        }
        ran = true;
        result = func.apply(this, arguments);

        // clear the `func` variable so the function may be garbage collected
        func = null;
        return result;
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with any additional
     * `partial` arguments prepended to those provided to the new function. This
     * method is similar to `_.bind` except it does **not** alter the `this` binding.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) { return greeting + ' ' + name; };
     * var hi = _.partial(greet, 'hi');
     * hi('fred');
     * // => 'hi fred'
     */
    function partial(func) {
      return createWrapper(func, 16, slice(arguments, 1));
    }

    /**
     * This method is like `_.partial` except that `partial` arguments are
     * appended to those provided to the new function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var defaultsDeep = _.partialRight(_.merge, _.defaults);
     *
     * var options = {
     *   'variable': 'data',
     *   'imports': { 'jq': $ }
     * };
     *
     * defaultsDeep(options, _.templateSettings);
     *
     * options.variable
     * // => 'data'
     *
     * options.imports
     * // => { '_': _, 'jq': $ }
     */
    function partialRight(func) {
      return createWrapper(func, 32, null, slice(arguments, 1));
    }

    /**
     * Creates a function that, when executed, will only call the `func` function
     * at most once per every `wait` milliseconds. Provide an options object to
     * indicate that `func` should be invoked on the leading and/or trailing edge
     * of the `wait` timeout. Subsequent calls to the throttled function will
     * return the result of the last `func` call.
     *
     * Note: If `leading` and `trailing` options are `true` `func` will be called
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to throttle.
     * @param {number} wait The number of milliseconds to throttle executions to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify execution on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * var throttled = _.throttle(updatePosition, 100);
     * jQuery(window).on('scroll', throttled);
     *
     * // execute `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      if (options === false) {
        leading = false;
      } else if (isObject(options)) {
        leading = 'leading' in options ? options.leading : leading;
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      debounceOptions.leading = leading;
      debounceOptions.maxWait = wait;
      debounceOptions.trailing = trailing;

      return debounce(func, wait, debounceOptions);
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Additional arguments provided to the function are appended
     * to those provided to the wrapper function. The wrapper is executed with
     * the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('Fred, Wilma, & Pebbles');
     * // => '<p>Fred, Wilma, &amp; Pebbles</p>'
     */
    function wrap(value, wrapper) {
      return createWrapper(wrapper, 16, [value]);
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'name': 'fred' };
     * var getter = _.constant(object);
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Produces a callback bound to an optional `thisArg`. If `func` is a property
     * name the created callback will return the property value for a given element.
     * If `func` is an object the created callback will return `true` for elements
     * that contain the equivalent object properties, otherwise it will return `false`.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} [func=identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of the created callback.
     * @param {number} [argCount] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.createCallback = _.wrap(_.createCallback, function(func, callback, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(callback);
     *   return !match ? func(callback, thisArg) : function(object) {
     *     return match[2] == 'gt' ? object[match[1]] > match[3] : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(characters, 'age__gt38');
     * // => [{ 'name': 'fred', 'age': 40 }]
     */
    function createCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (func == null || type == 'function') {
        return baseCreateCallback(func, thisArg, argCount);
      }
      // handle "_.pluck" style callback shorthands
      if (type != 'object') {
        return property(func);
      }
      var props = keys(func),
          key = props[0],
          a = func[key];

      // handle "_.where" style callback shorthands
      if (props.length == 1 && a === a && !isObject(a)) {
        // fast path the common case of providing an object with a single
        // property containing a primitive value
        return function(object) {
          var b = object[key];
          return a === b && (a !== 0 || (1 / a == 1 / b));
        };
      }
      return function(object) {
        var length = props.length,
            result = false;

        while (length--) {
          if (!(result = baseIsEqual(object[props[length]], func[props[length]], null, true))) {
            break;
          }
        }
        return result;
      };
    }

    /**
     * Converts the characters `&`, `<`, `>`, `"`, and `'` in `string` to their
     * corresponding HTML entities.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} string The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('Fred, Wilma, & Pebbles');
     * // => 'Fred, Wilma, &amp; Pebbles'
     */
    function escape(string) {
      return string == null ? '' : String(string).replace(reUnescapedHtml, escapeHtmlChar);
    }

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Adds function properties of a source object to the destination object.
     * If `object` is a function methods will be added to its prototype as well.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Function|Object} [object=lodash] object The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added are chainable.
     * @example
     *
     * function capitalize(string) {
     *   return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
     * }
     *
     * _.mixin({ 'capitalize': capitalize });
     * _.capitalize('fred');
     * // => 'Fred'
     *
     * _('fred').capitalize().value();
     * // => 'Fred'
     *
     * _.mixin({ 'capitalize': capitalize }, { 'chain': false });
     * _('fred').capitalize();
     * // => 'Fred'
     */
    function mixin(object, source, options) {
      var chain = true,
          methodNames = source && functions(source);

      if (!source || (!options && !methodNames.length)) {
        if (options == null) {
          options = source;
        }
        ctor = lodashWrapper;
        source = object;
        object = lodash;
        methodNames = functions(source);
      }
      if (options === false) {
        chain = false;
      } else if (isObject(options) && 'chain' in options) {
        chain = options.chain;
      }
      var ctor = object,
          isFunc = isFunction(ctor);

      forEach(methodNames, function(methodName) {
        var func = object[methodName] = source[methodName];
        if (isFunc) {
          ctor.prototype[methodName] = function() {
            var chainAll = this.__chain__,
                value = this.__wrapped__,
                args = [value];

            push.apply(args, arguments);
            var result = func.apply(object, args);
            if (chain || chainAll) {
              if (value === result && isObject(result)) {
                return this;
              }
              result = new ctor(result);
              result.__chain__ = chainAll;
            }
            return result;
          };
        }
      });
    }

    /**
     * Reverts the '_' variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      context._ = oldDash;
      return this;
    }

    /**
     * A no-operation function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // no operation performed
    }

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @example
     *
     * var stamp = _.now();
     * _.defer(function() { console.log(_.now() - stamp); });
     * // => logs the number of milliseconds it took for the deferred function to be called
     */
    var now = isNative(now = Date.now) && now || function() {
      return new Date().getTime();
    };

    /**
     * Converts the given value into an integer of the specified radix.
     * If `radix` is `undefined` or `0` a `radix` of `10` is used unless the
     * `value` is a hexadecimal, in which case a `radix` of `16` is used.
     *
     * Note: This method avoids differences in native ES3 and ES5 `parseInt`
     * implementations. See http://es5.github.io/#E.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} value The value to parse.
     * @param {number} [radix] The radix used to interpret the value to parse.
     * @returns {number} Returns the new integer value.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     */
    var parseInt = nativeParseInt(whitespace + '08') == 8 ? nativeParseInt : function(value, radix) {
      // Firefox < 21 and Opera < 15 follow the ES3 specified implementation of `parseInt`
      return nativeParseInt(isString(value) ? value.replace(reLeadingSpacesAndZeros, '') : value, radix || 0);
    };

    /**
     * Creates a "_.pluck" style function, which returns the `key` value of a
     * given object.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} key The name of the property to retrieve.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var characters = [
     *   { 'name': 'fred',   'age': 40 },
     *   { 'name': 'barney', 'age': 36 }
     * ];
     *
     * var getName = _.property('name');
     *
     * _.map(characters, getName);
     * // => ['barney', 'fred']
     *
     * _.sortBy(characters, getName);
     * // => [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred',   'age': 40 }]
     */
    function property(key) {
      return function(object) {
        return object[key];
      };
    }

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number will be
     * returned. If `floating` is truey or either `min` or `max` are floats a
     * floating-point number will be returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating=false] Specify returning a floating-point number.
     * @returns {number} Returns a random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(min, max, floating) {
      var noMin = min == null,
          noMax = max == null;

      if (floating == null) {
        if (typeof min == 'boolean' && noMax) {
          floating = min;
          min = 1;
        }
        else if (!noMax && typeof max == 'boolean') {
          floating = max;
          noMax = true;
        }
      }
      if (noMin && noMax) {
        max = 1;
      }
      min = +min || 0;
      if (noMax) {
        max = min;
        min = 0;
      } else {
        max = +max || 0;
      }
      if (floating || min % 1 || max % 1) {
        var rand = nativeRandom();
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand +'').length - 1)))), max);
      }
      return baseRandom(min, max);
    }

    /**
     * Resolves the value of property `key` on `object`. If `key` is a function
     * it will be invoked with the `this` binding of `object` and its result returned,
     * else the property value is returned. If `object` is falsey then `undefined`
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Object} object The object to inspect.
     * @param {string} key The name of the property to resolve.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = {
     *   'cheese': 'crumpets',
     *   'stuff': function() {
     *     return 'nonsense';
     *   }
     * };
     *
     * _.result(object, 'cheese');
     * // => 'crumpets'
     *
     * _.result(object, 'stuff');
     * // => 'nonsense'
     */
    function result(object, key) {
      if (object) {
        var value = object[key];
        return isFunction(value) ? object[key]() : value;
      }
    }

    /**
     * A micro-templating method that handles arbitrary delimiters, preserves
     * whitespace, and correctly escapes quotes within interpolated code.
     *
     * Note: In the development build, `_.template` utilizes sourceURLs for easier
     * debugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
     *
     * For more information on precompiling templates see:
     * http://lodash.com/custom-builds
     *
     * For more information on Chrome extension sandboxes see:
     * http://developer.chrome.com/stable/extensions/sandboxingEval.html
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} text The template text.
     * @param {Object} data The data object used to populate the text.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as local variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [variable] The data object variable name.
     * @returns {Function|string} Returns a compiled function when no `data` object
     *  is given, else it returns the interpolated text.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= name %>');
     * compiled({ 'name': 'fred' });
     * // => 'hello fred'
     *
     * // using the "escape" delimiter to escape HTML in data property values
     * _.template('<b><%- value %></b>', { 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to generate HTML
     * var list = '<% _.forEach(people, function(name) { %><li><%- name %></li><% }); %>';
     * _.template(list, { 'people': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the ES6 delimiter as an alternative to the default "interpolate" delimiter
     * _.template('hello ${ name }', { 'name': 'pebbles' });
     * // => 'hello pebbles'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * _.template('<% print("hello " + name); %>!', { 'name': 'barney' });
     * // => 'hello barney!'
     *
     * // using a custom template delimiters
     * _.templateSettings = {
     *   'interpolate': /{{([\s\S]+?)}}/g
     * };
     *
     * _.template('hello {{ name }}!', { 'name': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using the `imports` option to import jQuery
     * var list = '<% jq.each(people, function(name) { %><li><%- name %></li><% }); %>';
     * _.template(list, { 'people': ['fred', 'barney'] }, { 'imports': { 'jq': jQuery } });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= name %>', null, { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.name %>!', null, { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     *   var __t, __p = '', __e = _.escape;
     *   __p += 'hi ' + ((__t = ( data.name )) == null ? '' : __t) + '!';
     *   return __p;
     * }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(text, data, options) {
      // based on John Resig's `tmpl` implementation
      // http://ejohn.org/blog/javascript-micro-templating/
      // and Laura Doktorova's doT.js
      // https://github.com/olado/doT
      var settings = lodash.templateSettings;
      text = String(text || '');

      // avoid missing dependencies when `iteratorTemplate` is not defined
      options = defaults({}, options, settings);

      var imports = defaults({}, options.imports, settings.imports),
          importsKeys = keys(imports),
          importsValues = values(imports);

      var isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // compile the regexp to match each delimiter
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // escape characters that cannot be included in string literals
        source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // replace delimiters with snippets
        if (escapeValue) {
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // the JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value
        return match;
      });

      source += "';\n";

      // if `variable` is not specified, wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain
      var variable = options.variable,
          hasVariable = variable;

      if (!hasVariable) {
        variable = 'obj';
        source = 'with (' + variable + ') {\n' + source + '\n}\n';
      }
      // cleanup code by stripping empty strings
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // frame code as the function body
      source = 'function(' + variable + ') {\n' +
        (hasVariable ? '' : variable + ' || (' + variable + ' = {});\n') +
        "var __t, __p = '', __e = _.escape" +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      // Use a sourceURL for easier debugging.
      // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
      var sourceURL = '\n/*\n//# sourceURL=' + (options.sourceURL || '/lodash/template/source[' + (templateCounter++) + ']') + '\n*/';

      try {
        var result = Function(importsKeys, 'return ' + source + sourceURL).apply(undefined, importsValues);
      } catch(e) {
        e.source = source;
        throw e;
      }
      if (data) {
        return result(data);
      }
      // provide the compiled function's source by its `toString` method, in
      // supported environments, or the `source` property as a convenience for
      // inlining compiled templates during the build process
      result.source = source;
      return result;
    }

    /**
     * Executes the callback `n` times, returning an array of the results
     * of each callback execution. The callback is bound to `thisArg` and invoked
     * with one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {number} n The number of times to execute the callback.
     * @param {Function} callback The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns an array of the results of each `callback` execution.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) { mage.castSpell(n); });
     * // => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively
     *
     * _.times(3, function(n) { this.cast(n); }, mage);
     * // => also calls `mage.castSpell(n)` three times
     */
    function times(n, callback, thisArg) {
      n = (n = +n) > -1 ? n : 0;
      var index = -1,
          result = Array(n);

      callback = baseCreateCallback(callback, thisArg, 1);
      while (++index < n) {
        result[index] = callback(index);
      }
      return result;
    }

    /**
     * The inverse of `_.escape` this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to their
     * corresponding characters.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} string The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('Fred, Barney &amp; Pebbles');
     * // => 'Fred, Barney & Pebbles'
     */
    function unescape(string) {
      return string == null ? '' : String(string).replace(reEscapedHtml, unescapeHtmlChar);
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID will be appended to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return String(prefix == null ? '' : prefix) + id;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps the given value with explicit
     * method chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chaining
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36 },
     *   { 'name': 'fred',    'age': 40 },
     *   { 'name': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(characters)
     *     .sortBy('age')
     *     .map(function(chr) { return chr.name + ' is ' + chr.age; })
     *     .first()
     *     .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      value = new lodashWrapper(value);
      value.__chain__ = true;
      return value;
    }

    /**
     * Invokes `interceptor` with the `value` as the first argument and then
     * returns `value`. The purpose of this method is to "tap into" a method
     * chain in order to perform operations on intermediate results within
     * the chain.
     *
     * @static
     * @memberOf _
     * @category Chaining
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3, 4])
     *  .tap(function(array) { array.pop(); })
     *  .reverse()
     *  .value();
     * // => [3, 2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chaining
     * @returns {*} Returns the wrapper object.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(characters).first();
     * // => { 'name': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(characters).chain()
     *   .first()
     *   .pick('age')
     *   .value();
     * // => { 'age': 36 }
     */
    function wrapperChain() {
      this.__chain__ = true;
      return this;
    }

    /**
     * Produces the `toString` result of the wrapped value.
     *
     * @name toString
     * @memberOf _
     * @category Chaining
     * @returns {string} Returns the string result.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return String(this.__wrapped__);
    }

    /**
     * Extracts the wrapped value.
     *
     * @name valueOf
     * @memberOf _
     * @alias value
     * @category Chaining
     * @returns {*} Returns the wrapped value.
     * @example
     *
     * _([1, 2, 3]).valueOf();
     * // => [1, 2, 3]
     */
    function wrapperValueOf() {
      return this.__wrapped__;
    }

    /*--------------------------------------------------------------------------*/

    // add functions that return wrapped values when chaining
    lodash.after = after;
    lodash.assign = assign;
    lodash.at = at;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.chain = chain;
    lodash.compact = compact;
    lodash.compose = compose;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.createCallback = createCallback;
    lodash.curry = curry;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.indexBy = indexBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.map = map;
    lodash.mapValues = mapValues;
    lodash.max = max;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.min = min;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.property = property;
    lodash.pull = pull;
    lodash.range = range;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.shuffle = shuffle;
    lodash.sortBy = sortBy;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.transform = transform;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.values = values;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.zip = zip;
    lodash.zipObject = zipObject;

    // add aliases
    lodash.collect = map;
    lodash.drop = rest;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assign;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;
    lodash.unzip = zip;

    // add functions to `lodash.prototype`
    mixin(lodash);

    /*--------------------------------------------------------------------------*/

    // add functions that return unwrapped values when chaining
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.contains = contains;
    lodash.escape = escape;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.has = has;
    lodash.identity = identity;
    lodash.indexOf = indexOf;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isNaN = isNaN;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isUndefined = isUndefined;
    lodash.lastIndexOf = lastIndexOf;
    lodash.mixin = mixin;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.result = result;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.template = template;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;

    // add aliases
    lodash.all = every;
    lodash.any = some;
    lodash.detect = find;
    lodash.findWhere = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.include = contains;
    lodash.inject = reduce;

    mixin(function() {
      var source = {}
      forOwn(lodash, function(func, methodName) {
        if (!lodash.prototype[methodName]) {
          source[methodName] = func;
        }
      });
      return source;
    }(), false);

    /*--------------------------------------------------------------------------*/

    // add functions capable of returning wrapped and unwrapped values when chaining
    lodash.first = first;
    lodash.last = last;
    lodash.sample = sample;

    // add aliases
    lodash.take = first;
    lodash.head = first;

    forOwn(lodash, function(func, methodName) {
      var callbackable = methodName !== 'sample';
      if (!lodash.prototype[methodName]) {
        lodash.prototype[methodName]= function(n, guard) {
          var chainAll = this.__chain__,
              result = func(this.__wrapped__, n, guard);

          return !chainAll && (n == null || (guard && !(callbackable && typeof n == 'function')))
            ? result
            : new lodashWrapper(result, chainAll);
        };
      }
    });

    /*--------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = '2.4.1';

    // add "Chaining" functions to the wrapper
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.value = wrapperValueOf;
    lodash.prototype.valueOf = wrapperValueOf;

    // add `Array` functions that return unwrapped values
    forEach(['join', 'pop', 'shift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        var chainAll = this.__chain__,
            result = func.apply(this.__wrapped__, arguments);

        return chainAll
          ? new lodashWrapper(result, chainAll)
          : result;
      };
    });

    // add `Array` functions that return the existing wrapped value
    forEach(['push', 'reverse', 'sort', 'unshift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        func.apply(this.__wrapped__, arguments);
        return this;
      };
    });

    // add `Array` functions that return new wrapped values
    forEach(['concat', 'slice', 'splice'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        return new lodashWrapper(func.apply(this.__wrapped__, arguments), this.__chain__);
      };
    });

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // expose Lo-Dash
  var _ = runInContext();

  // some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lo-Dash to the global object even when an AMD loader is present in
    // case Lo-Dash is loaded with a RequireJS shim config.
    // See http://requirejs.org/docs/api.html#config-shim
    root._ = _;

    // define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module
    define('lodash',[],function() {
      return _;
    });
  }
  // check for `exports` after `define` in case a build optimizer adds an `exports` object
  else if (freeExports && freeModule) {
    // in Node.js or RingoJS
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // in Narwhal or Rhino -require
    else {
      freeExports._ = _;
    }
  }
  else {
    // in a browser or Rhino
    root._ = _;
  }
}.call(this));

/*!
  * Bowser - a browser detector
  * https://github.com/ded/bowser
  * MIT License | (c) Dustin Diaz 2014
  */

!function (name, definition) {
  if (typeof module != 'undefined' && module.exports) module.exports['browser'] = definition()
  else if (typeof define == 'function') define('bowser',definition)
  else this[name] = definition()
} ('bowser', function () {
  /**
    * See useragents.js for examples of navigator.userAgent
    */

  var t = true

  function detect(ua) {

    function getFirstMatch(regex) {
      var match = ua.match(regex);
      return (match && match.length > 1 && match[1]) || '';
    }

    var iosdevice = getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase()
      , likeAndroid = /like android/i.test(ua)
      , android = !likeAndroid && /android/i.test(ua)
      , versionIdentifier = getFirstMatch(/version\/(\d+(\.\d+)?)/i)
      , tablet = /tablet/i.test(ua)
      , mobile = !tablet && /[^-]mobi/i.test(ua)
      , result

    if (/opera|opr/i.test(ua)) {
      result = {
        name: 'Opera'
      , opera: t
      , version: versionIdentifier || getFirstMatch(/(?:opera|opr)[\s\/](\d+(\.\d+)?)/i)
      }
    }
    else if (/windows phone/i.test(ua)) {
      result = {
        name: 'Windows Phone'
      , windowsphone: t
      , msie: t
      , version: getFirstMatch(/iemobile\/(\d+(\.\d+)?)/i)
      }
    }
    else if (/msie|trident/i.test(ua)) {
      result = {
        name: 'Internet Explorer'
      , msie: t
      , version: getFirstMatch(/(?:msie |rv:)(\d+(\.\d+)?)/i)
      }
    }
    else if (/chrome|crios|crmo/i.test(ua)) {
      result = {
        name: 'Chrome'
      , chrome: t
      , version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
      }
    }
    else if (iosdevice) {
      result = {
        name : iosdevice == 'iphone' ? 'iPhone' : iosdevice == 'ipad' ? 'iPad' : 'iPod'
      }
      // WTF: version is not part of user agent in web apps
      if (versionIdentifier) {
        result.version = versionIdentifier
      }
    }
    else if (/sailfish/i.test(ua)) {
      result = {
        name: 'Sailfish'
      , sailfish: t
      , version: getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i)
      }
    }
    else if (/seamonkey\//i.test(ua)) {
      result = {
        name: 'SeaMonkey'
      , seamonkey: t
      , version: getFirstMatch(/seamonkey\/(\d+(\.\d+)?)/i)
      }
    }
    else if (/firefox|iceweasel/i.test(ua)) {
      result = {
        name: 'Firefox'
      , firefox: t
      , version: getFirstMatch(/(?:firefox|iceweasel)[ \/](\d+(\.\d+)?)/i)
      }
      if (/\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(ua)) {
        result.firefoxos = t
      }
    }
    else if (/silk/i.test(ua)) {
      result =  {
        name: 'Amazon Silk'
      , silk: t
      , version : getFirstMatch(/silk\/(\d+(\.\d+)?)/i)
      }
    }
    else if (android) {
      result = {
        name: 'Android'
      , version: versionIdentifier
      }
    }
    else if (/phantom/i.test(ua)) {
      result = {
        name: 'PhantomJS'
      , phantom: t
      , version: getFirstMatch(/phantomjs\/(\d+(\.\d+)?)/i)
      }
    }
    else if (/blackberry|\bbb\d+/i.test(ua) || /rim\stablet/i.test(ua)) {
      result = {
        name: 'BlackBerry'
      , blackberry: t
      , version: versionIdentifier || getFirstMatch(/blackberry[\d]+\/(\d+(\.\d+)?)/i)
      }
    }
    else if (/(web|hpw)os/i.test(ua)) {
      result = {
        name: 'WebOS'
      , webos: t
      , version: versionIdentifier || getFirstMatch(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i)
      };
      /touchpad\//i.test(ua) && (result.touchpad = t)
    }
    else if (/bada/i.test(ua)) {
      result = {
        name: 'Bada'
      , bada: t
      , version: getFirstMatch(/dolfin\/(\d+(\.\d+)?)/i)
      };
    }
    else if (/tizen/i.test(ua)) {
      result = {
        name: 'Tizen'
      , tizen: t
      , version: getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i) || versionIdentifier
      };
    }
    else if (/safari/i.test(ua)) {
      result = {
        name: 'Safari'
      , safari: t
      , version: versionIdentifier
      }
    }
    else result = {}

    // set webkit or gecko flag for browsers based on these engines
    if (/(apple)?webkit/i.test(ua)) {
      result.name = result.name || "Webkit"
      result.webkit = t
      if (!result.version && versionIdentifier) {
        result.version = versionIdentifier
      }
    } else if (!result.opera && /gecko\//i.test(ua)) {
      result.name = result.name || "Gecko"
      result.gecko = t
      result.version = result.version || getFirstMatch(/gecko\/(\d+(\.\d+)?)/i)
    }

    // set OS flags for platforms that have multiple browsers
    if (android || result.silk) {
      result.android = t
    } else if (iosdevice) {
      result[iosdevice] = t
      result.ios = t
    }

    // OS version extraction
    var osVersion = '';
    if (iosdevice) {
      osVersion = getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i);
      osVersion = osVersion.replace(/[_\s]/g, '.');
    } else if (android) {
      osVersion = getFirstMatch(/android[ \/-](\d+(\.\d+)*)/i);
    } else if (result.windowsphone) {
      osVersion = getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i);
    } else if (result.webos) {
      osVersion = getFirstMatch(/(?:web|hpw)os\/(\d+(\.\d+)*)/i);
    } else if (result.blackberry) {
      osVersion = getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i);
    } else if (result.bada) {
      osVersion = getFirstMatch(/bada\/(\d+(\.\d+)*)/i);
    } else if (result.tizen) {
      osVersion = getFirstMatch(/tizen[\/\s](\d+(\.\d+)*)/i);
    }
    if (osVersion) {
      result.osversion = osVersion;
    }

    // device type extraction
    var osMajorVersion = osVersion.split('.')[0];
    if (tablet || iosdevice == 'ipad' || (android && (osMajorVersion == 3 || (osMajorVersion == 4 && !mobile))) || result.silk) {
      result.tablet = t
    } else if (mobile || iosdevice == 'iphone' || iosdevice == 'ipod' || android || result.blackberry || result.webos || result.bada) {
      result.mobile = t
    }

    // Graded Browser Support
    // http://developer.yahoo.com/yui/articles/gbs
    if ((result.msie && result.version >= 10) ||
        (result.chrome && result.version >= 20) ||
        (result.firefox && result.version >= 20.0) ||
        (result.safari && result.version >= 6) ||
        (result.opera && result.version >= 10.0) ||
        (result.ios && result.osversion && result.osversion.split(".")[0] >= 6)
        ) {
      result.a = t;
    }
    else if ((result.msie && result.version < 10) ||
        (result.chrome && result.version < 20) ||
        (result.firefox && result.version < 20.0) ||
        (result.safari && result.version < 6) ||
        (result.opera && result.version < 10.0) ||
        (result.ios && result.osversion && result.osversion.split(".")[0] < 6)
        ) {
      result.c = t
    } else result.x = t

    return result
  }

  var bowser = detect(typeof navigator !== 'undefined' ? navigator.userAgent : '')


  /*
   * Set our detect method to the main bowser object so we can
   * reuse it to test other user agents.
   * This is needed to implement future tests.
   */
  bowser._detect = detect;
  
  /*
   * Minified version of isMobile included
   * group of features available
   * This is to detect android tablet condition (previous condition is giving false each time)
   */
  !function(a){var b=/iPhone/i,c=/iPod/i,d=/iPad/i,e=/(?=.*\bAndroid\b)(?=.*\bMobile\b)/i,f=/Android/i,g=/(?=.*\bAndroid\b)(?=.*\bSD4930UR\b)/i,h=/(?=.*\bAndroid\b)(?=.*\b(?:KFOT|KFTT|KFJWI|KFJWA|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|KFARWI|KFASWI|KFSAWI|KFSAWA)\b)/i,i=/IEMobile/i,j=/(?=.*\bWindows\b)(?=.*\bARM\b)/i,k=/BlackBerry/i,l=/BB10/i,m=/Opera Mini/i,n=/(CriOS|Chrome)(?=.*\bMobile\b)/i,o=/(?=.*\bFirefox\b)(?=.*\bMobile\b)/i,p=new RegExp("(?:Nexus 7|BNTV250|Kindle Fire|Silk|GT-P1000)","i"),q=function(a,b){return a.test(b)},r=function(a){var r=a||navigator.userAgent,s=r.split("[FBAN");return"undefined"!=typeof s[1]&&(r=s[0]),s=r.split("Twitter"),"undefined"!=typeof s[1]&&(r=s[0]),this.apple={phone:q(b,r),ipod:q(c,r),tablet:!q(b,r)&&q(d,r),device:q(b,r)||q(c,r)||q(d,r)},this.amazon={phone:q(g,r),tablet:!q(g,r)&&q(h,r),device:q(g,r)||q(h,r)},this.android={phone:q(g,r)||q(e,r),tablet:!q(g,r)&&!q(e,r)&&(q(h,r)||q(f,r)),device:q(g,r)||q(h,r)||q(e,r)||q(f,r)},this.windows={phone:q(i,r),tablet:q(j,r),device:q(i,r)||q(j,r)},this.other={blackberry:q(k,r),blackberry10:q(l,r),opera:q(m,r),firefox:q(o,r),chrome:q(n,r),device:q(k,r)||q(l,r)||q(m,r)||q(o,r)||q(n,r)},this.seven_inch=q(p,r),this.any=this.apple.device||this.android.device||this.windows.device||this.other.device||this.seven_inch,this.phone=this.apple.phone||this.android.phone||this.windows.phone,this.tablet=this.apple.tablet||this.android.tablet||this.windows.tablet,"undefined"==typeof window?this:void 0},s=function(){var a=new r;return a.Class=r,a};"undefined"!=typeof module&&module.exports&&"undefined"==typeof window?module.exports=r:"undefined"!=typeof module&&module.exports&&"undefined"!=typeof window?module.exports=s():"function"==typeof define&&define.amd?define("isMobile",[],a.isMobile=s()):a.isMobile=s()}(this);
		
  bowser.tablet = isMobile.android.tablet;
  
  return bowser;
});

define('device',[
	'jquery',
	'bowser',
], function (
	j,
	bowser
) {
	'use strict';

	// Singleton.
	// This object contains information about the device on which the game is running.
	var device = {};

	device.browser = bowser.name;
	device.version = bowser.version;

	var os = 'UNKNOWN';
	if (navigator.appVersion.indexOf('Win') !== -1) {
		os = 'Windows';
	} else if (navigator.appVersion.indexOf('Mac') !== -1) {
		os = 'MacOS';
	} else if (navigator.appVersion.indexOf('X11') !== -1) {
		os = 'UNIX';
	} else if (navigator.appVersion.indexOf('Linux') !== -1) {
		os = 'Linux';
	}
	
	var androidVersion = (navigator.userAgent.match(/Version/g) ? true : false);

	device.isMinimalUI = device.isChromecast = /minimalUI/.test(location.search);
	device.os = os;
	device.model = navigator.platform || '';
	device.OSVersion = navigator.oscpu || navigator.platform;

	device.isTouchDevice = 'ontouchstart' in window || 
							'ontouchstart' in document.documentElement || 
							'msmaxtouchpoints' in window.navigator;
							

	device.isTablet = bowser.tablet || false;
	device.isAndroidTabletApp = (device.isTablet && androidVersion) ? true : false;
	device.isOldAndroidTabletApp = (device.isAndroidTabletApp &&  device.version < 32);
	device.isAndroidTabletApp && j('html').addClass('androidApp');

	device.isChromecast = /chromecast/.test(location.search);
	device.isChromecast && j('html').addClass('chromecast');

	device.isAndroidTvChromecast = (bowser.tablet && device.isChromecast);
	device.isAndroidTvChromecast && j('html').addClass('chromecast-androidTv');

	device.isAndroidTvBrowser = (device.OSVersion.match(/Linux/g) && (device.os === 'UNIX' || device.os === 'Linux') && !device.isAndroidTabletApp) || false;
	device.isAndroidTvBrowser && j('html').addClass('browser-androidTv');

	device.isWeak = device.isChromecast || device.isAndroidTvChromecast || device.isAndroidTvBrowser;
	device.isWeak && j('html').addClass('weak-platform');

	device.gearConnected = false;


	var isMacOSContains = (navigator.userAgent.match(/Version/g) && navigator.userAgent.match(/Safari/g) ? true : false);
	var isMacOS = (device.OSVersion === 'MacIntel' && device.os === 'MacOS' ? true : false);


	device.isMacOSApp = (!!isMacOS && /minimalUI/.test(location.search) && /macos/.test(location.search));
	device.isMacOSApp && j('html').addClass('macOSApp');


	// isiOS only for iPAD or iPhone or iPod & not MAC
	device.isiOS = (navigator.userAgent.match(/(iPad|iPhone|iPod)/g) ? true : false);
	device.isOldiOS = device.isiOS && window.devicePixelRatio < 2 ? true : false; // Super-general duck test: if it's not retina and it identifies as iOS, it sure sounds old to me
	device.isNewiOS = (device.isiOS && bowser.osversion >= 11.2); // IOS 11.2 & above detection for disabling video preview feature

	device.isIpad = !device.isMacOSApp && (navigator.platform === 'iPad' || (isMacOS && device.isTouchDevice)) ? true : false;
	device.isIpadApp = device.isIpad && (device.browser === 'Webkit' || device.browser === 'iPad') && !isMacOSContains;
	device.isIpadAppNewiOS = (device.isIpadApp && device.isNewiOS) || false; // detect new IOS ipads
	device.isMobile = (bowser.mobile && !bowser.tablet && !device.isIpad) || false;


	device.browser === "Opera" && j('html').addClass('browser--opera');
	device.browser === "Internet Explorer" && j('html').addClass('browser--exp');
	device.browser === "Safari" && j('html').addClass('browser--safari');
	if ((device.browser === "iPhone" || device.browser === "iPad" || device.browser === "iPod") && device.os === "MacOS") {
		j('html').addClass('browser--safari__mobile');
	}


	return device;

});
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define('es6Promise',e):t.ES6Promise=e()}(this,function(){"use strict";function t(t){var e=typeof t;return null!==t&&("object"===e||"function"===e)}function e(t){return"function"==typeof t}function n(t){B=t}function r(t){G=t}function o(){return function(){return process.nextTick(a)}}function i(){return"undefined"!=typeof z?function(){z(a)}:c()}function s(){var t=0,e=new J(a),n=document.createTextNode("");return e.observe(n,{characterData:!0}),function(){n.data=t=++t%2}}function u(){var t=new MessageChannel;return t.port1.onmessage=a,function(){return t.port2.postMessage(0)}}function c(){var t=setTimeout;return function(){return t(a,1)}}function a(){for(var t=0;t<W;t+=2){var e=V[t],n=V[t+1];e(n),V[t]=void 0,V[t+1]=void 0}W=0}function f(){try{var t=Function("return this")().require("vertx");return z=t.runOnLoop||t.runOnContext,i()}catch(e){return c()}}function l(t,e){var n=this,r=new this.constructor(p);void 0===r[Z]&&O(r);var o=n._state;if(o){var i=arguments[o-1];G(function(){return P(o,r,i,n._result)})}else E(n,r,t,e);return r}function h(t){var e=this;if(t&&"object"==typeof t&&t.constructor===e)return t;var n=new e(p);return g(n,t),n}function p(){}function v(){return new TypeError("You cannot resolve a promise with itself")}function d(){return new TypeError("A promises callback cannot return that same promise.")}function _(t){try{return t.then}catch(e){return nt.error=e,nt}}function y(t,e,n,r){try{t.call(e,n,r)}catch(o){return o}}function m(t,e,n){G(function(t){var r=!1,o=y(n,e,function(n){r||(r=!0,e!==n?g(t,n):S(t,n))},function(e){r||(r=!0,j(t,e))},"Settle: "+(t._label||" unknown promise"));!r&&o&&(r=!0,j(t,o))},t)}function b(t,e){e._state===tt?S(t,e._result):e._state===et?j(t,e._result):E(e,void 0,function(e){return g(t,e)},function(e){return j(t,e)})}function w(t,n,r){n.constructor===t.constructor&&r===l&&n.constructor.resolve===h?b(t,n):r===nt?(j(t,nt.error),nt.error=null):void 0===r?S(t,n):e(r)?m(t,n,r):S(t,n)}function g(e,n){e===n?j(e,v()):t(n)?w(e,n,_(n)):S(e,n)}function A(t){t._onerror&&t._onerror(t._result),T(t)}function S(t,e){t._state===$&&(t._result=e,t._state=tt,0!==t._subscribers.length&&G(T,t))}function j(t,e){t._state===$&&(t._state=et,t._result=e,G(A,t))}function E(t,e,n,r){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=e,o[i+tt]=n,o[i+et]=r,0===i&&t._state&&G(T,t)}function T(t){var e=t._subscribers,n=t._state;if(0!==e.length){for(var r=void 0,o=void 0,i=t._result,s=0;s<e.length;s+=3)r=e[s],o=e[s+n],r?P(n,r,o,i):o(i);t._subscribers.length=0}}function M(t,e){try{return t(e)}catch(n){return nt.error=n,nt}}function P(t,n,r,o){var i=e(r),s=void 0,u=void 0,c=void 0,a=void 0;if(i){if(s=M(r,o),s===nt?(a=!0,u=s.error,s.error=null):c=!0,n===s)return void j(n,d())}else s=o,c=!0;n._state!==$||(i&&c?g(n,s):a?j(n,u):t===tt?S(n,s):t===et&&j(n,s))}function x(t,e){try{e(function(e){g(t,e)},function(e){j(t,e)})}catch(n){j(t,n)}}function C(){return rt++}function O(t){t[Z]=rt++,t._state=void 0,t._result=void 0,t._subscribers=[]}function k(){return new Error("Array Methods must be provided an Array")}function F(t){return new ot(this,t).promise}function Y(t){var e=this;return new e(U(t)?function(n,r){for(var o=t.length,i=0;i<o;i++)e.resolve(t[i]).then(n,r)}:function(t,e){return e(new TypeError("You must pass an array to race."))})}function q(t){var e=this,n=new e(p);return j(n,t),n}function D(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function K(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function L(){var t=void 0;if("undefined"!=typeof global)t=global;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var n=t.Promise;if(n){var r=null;try{r=Object.prototype.toString.call(n.resolve())}catch(e){}if("[object Promise]"===r&&!n.cast)return}t.Promise=it}var N=void 0;N=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)};var U=N,W=0,z=void 0,B=void 0,G=function(t,e){V[W]=t,V[W+1]=e,W+=2,2===W&&(B?B(a):X())},H="undefined"!=typeof window?window:void 0,I=H||{},J=I.MutationObserver||I.WebKitMutationObserver,Q="undefined"==typeof self&&"undefined"!=typeof process&&"[object process]"==={}.toString.call(process),R="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,V=new Array(1e3),X=void 0;X=Q?o():J?s():R?u():void 0===H&&"function"==typeof require?f():c();var Z=Math.random().toString(36).substring(2),$=void 0,tt=1,et=2,nt={error:null},rt=0,ot=function(){function t(t,e){this._instanceConstructor=t,this.promise=new t(p),this.promise[Z]||O(this.promise),U(e)?(this.length=e.length,this._remaining=e.length,this._result=new Array(this.length),0===this.length?S(this.promise,this._result):(this.length=this.length||0,this._enumerate(e),0===this._remaining&&S(this.promise,this._result))):j(this.promise,k())}return t.prototype._enumerate=function(t){for(var e=0;this._state===$&&e<t.length;e++)this._eachEntry(t[e],e)},t.prototype._eachEntry=function(t,e){var n=this._instanceConstructor,r=n.resolve;if(r===h){var o=_(t);if(o===l&&t._state!==$)this._settledAt(t._state,e,t._result);else if("function"!=typeof o)this._remaining--,this._result[e]=t;else if(n===it){var i=new n(p);w(i,t,o),this._willSettleAt(i,e)}else this._willSettleAt(new n(function(e){return e(t)}),e)}else this._willSettleAt(r(t),e)},t.prototype._settledAt=function(t,e,n){var r=this.promise;r._state===$&&(this._remaining--,t===et?j(r,n):this._result[e]=n),0===this._remaining&&S(r,this._result)},t.prototype._willSettleAt=function(t,e){var n=this;E(t,void 0,function(t){return n._settledAt(tt,e,t)},function(t){return n._settledAt(et,e,t)})},t}(),it=function(){function t(e){this[Z]=C(),this._result=this._state=void 0,this._subscribers=[],p!==e&&("function"!=typeof e&&D(),this instanceof t?x(this,e):K())}return t.prototype["catch"]=function(t){return this.then(null,t)},t.prototype["finally"]=function(t){var n=this,r=n.constructor;return e(t)?n.then(function(e){return r.resolve(t()).then(function(){return e})},function(e){return r.resolve(t()).then(function(){throw e})}):n.then(t,t)},t}();return it.prototype.then=l,it.all=F,it.race=Y,it.resolve=h,it.reject=q,it._setScheduler=n,it._setAsap=r,it._asap=G,it.polyfill=L,it.Promise=it,it});
/**
 * @license RequireJS text 2.0.14 Copyright (c) 2010-2014, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/requirejs/text for details
 */
/*jslint regexp: true */
/*global require, XMLHttpRequest, ActiveXObject,
  define, window, process, Packages,
  java, location, Components, FileUtils */

define('text',['module'], function (module) {
    'use strict';

    var text, fs, Cc, Ci, xpcIsWindows,
        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],
        xmlRegExp = /^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,
        bodyRegExp = /<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,
        hasLocation = typeof location !== 'undefined' && location.href,
        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\:/, ''),
        defaultHostName = hasLocation && location.hostname,
        defaultPort = hasLocation && (location.port || undefined),
        buildMap = {},
        masterConfig = (module.config && module.config()) || {};

    text = {
        version: '2.0.14',

        strip: function (content) {
            //Strips <?xml ...?> declarations so that external SVG and XML
            //documents can be added to a document without worry. Also, if the string
            //is an HTML document, only the part inside the body tag is returned.
            if (content) {
                content = content.replace(xmlRegExp, "");
                var matches = content.match(bodyRegExp);
                if (matches) {
                    content = matches[1];
                }
            } else {
                content = "";
            }
            return content;
        },

        jsEscape: function (content) {
            return content.replace(/(['\\])/g, '\\$1')
                .replace(/[\f]/g, "\\f")
                .replace(/[\b]/g, "\\b")
                .replace(/[\n]/g, "\\n")
                .replace(/[\t]/g, "\\t")
                .replace(/[\r]/g, "\\r")
                .replace(/[\u2028]/g, "\\u2028")
                .replace(/[\u2029]/g, "\\u2029");
        },

        createXhr: masterConfig.createXhr || function () {
            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.
            var xhr, i, progId;
            if (typeof XMLHttpRequest !== "undefined") {
                return new XMLHttpRequest();
            } else if (typeof ActiveXObject !== "undefined") {
                for (i = 0; i < 3; i += 1) {
                    progId = progIds[i];
                    try {
                        xhr = new ActiveXObject(progId);
                    } catch (e) {}

                    if (xhr) {
                        progIds = [progId];  // so faster next time
                        break;
                    }
                }
            }

            return xhr;
        },

        /**
         * Parses a resource name into its component parts. Resource names
         * look like: module/name.ext!strip, where the !strip part is
         * optional.
         * @param {String} name the resource name
         * @returns {Object} with properties "moduleName", "ext" and "strip"
         * where strip is a boolean.
         */
        parseName: function (name) {
            var modName, ext, temp,
                strip = false,
                index = name.lastIndexOf("."),
                isRelative = name.indexOf('./') === 0 ||
                             name.indexOf('../') === 0;

            if (index !== -1 && (!isRelative || index > 1)) {
                modName = name.substring(0, index);
                ext = name.substring(index + 1);
            } else {
                modName = name;
            }

            temp = ext || modName;
            index = temp.indexOf("!");
            if (index !== -1) {
                //Pull off the strip arg.
                strip = temp.substring(index + 1) === "strip";
                temp = temp.substring(0, index);
                if (ext) {
                    ext = temp;
                } else {
                    modName = temp;
                }
            }

            return {
                moduleName: modName,
                ext: ext,
                strip: strip
            };
        },

        xdRegExp: /^((\w+)\:)?\/\/([^\/\\]+)/,

        /**
         * Is an URL on another domain. Only works for browser use, returns
         * false in non-browser environments. Only used to know if an
         * optimized .js version of a text resource should be loaded
         * instead.
         * @param {String} url
         * @returns Boolean
         */
        useXhr: function (url, protocol, hostname, port) {
            var uProtocol, uHostName, uPort,
                match = text.xdRegExp.exec(url);
            if (!match) {
                return true;
            }
            uProtocol = match[2];
            uHostName = match[3];

            uHostName = uHostName.split(':');
            uPort = uHostName[1];
            uHostName = uHostName[0];

            return (!uProtocol || uProtocol === protocol) &&
                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&
                   ((!uPort && !uHostName) || uPort === port);
        },

        finishLoad: function (name, strip, content, onLoad) {
            content = strip ? text.strip(content) : content;
            if (masterConfig.isBuild) {
                buildMap[name] = content;
            }
            onLoad(content);
        },

        load: function (name, req, onLoad, config) {
            //Name has format: some.module.filext!strip
            //The strip part is optional.
            //if strip is present, then that means only get the string contents
            //inside a body tag in an HTML string. For XML/SVG content it means
            //removing the <?xml ...?> declarations so the content can be inserted
            //into the current doc without problems.

            // Do not bother with the work if a build and text will
            // not be inlined.
            if (config && config.isBuild && !config.inlineText) {
                onLoad();
                return;
            }

            masterConfig.isBuild = config && config.isBuild;

            var parsed = text.parseName(name),
                nonStripName = parsed.moduleName +
                    (parsed.ext ? '.' + parsed.ext : ''),
                url = req.toUrl(nonStripName),
                useXhr = (masterConfig.useXhr) ||
                         text.useXhr;

            // Do not load if it is an empty: url
            if (url.indexOf('empty:') === 0) {
                onLoad();
                return;
            }

            //Load the text. Use XHR if possible and in a browser.
            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {
                text.get(url, function (content) {
                    text.finishLoad(name, parsed.strip, content, onLoad);
                }, function (err) {
                    if (onLoad.error) {
                        onLoad.error(err);
                    }
                });
            } else {
                //Need to fetch the resource across domains. Assume
                //the resource has been optimized into a JS module. Fetch
                //by the module name + extension, but do not include the
                //!strip part to avoid file system issues.
                req([nonStripName], function (content) {
                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,
                                    parsed.strip, content, onLoad);
                });
            }
        },

        write: function (pluginName, moduleName, write, config) {
            if (buildMap.hasOwnProperty(moduleName)) {
                var content = text.jsEscape(buildMap[moduleName]);
                write.asModule(pluginName + "!" + moduleName,
                               "define(function () { return '" +
                                   content +
                               "';});\n");
            }
        },

        writeFile: function (pluginName, moduleName, req, write, config) {
            var parsed = text.parseName(moduleName),
                extPart = parsed.ext ? '.' + parsed.ext : '',
                nonStripName = parsed.moduleName + extPart,
                //Use a '.js' file name so that it indicates it is a
                //script that can be loaded across domains.
                fileName = req.toUrl(parsed.moduleName + extPart) + '.js';

            //Leverage own load() method to load plugin value, but only
            //write out values that do not have the strip argument,
            //to avoid any potential issues with ! in file names.
            text.load(nonStripName, req, function (value) {
                //Use own write() method to construct full module value.
                //But need to create shell that translates writeFile's
                //write() to the right interface.
                var textWrite = function (contents) {
                    return write(fileName, contents);
                };
                textWrite.asModule = function (moduleName, contents) {
                    return write.asModule(moduleName, fileName, contents);
                };

                text.write(pluginName, nonStripName, textWrite, config);
            }, config);
        }
    };

    if (masterConfig.env === 'node' || (!masterConfig.env &&
            typeof process !== "undefined" &&
            process.versions &&
            !!process.versions.node &&
            !process.versions['node-webkit'] &&
            !process.versions['atom-shell'])) {
        //Using special require.nodeRequire, something added by r.js.
        fs = require.nodeRequire('fs');

        text.get = function (url, callback, errback) {
            try {
                var file = fs.readFileSync(url, 'utf8');
                //Remove BOM (Byte Mark Order) from utf8 files if it is there.
                if (file[0] === '\uFEFF') {
                    file = file.substring(1);
                }
                callback(file);
            } catch (e) {
                if (errback) {
                    errback(e);
                }
            }
        };
    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&
            text.createXhr())) {
        text.get = function (url, callback, errback, headers) {
            var xhr = text.createXhr(), header;
            xhr.open('GET', url, true);

            //Allow plugins direct access to xhr headers
            if (headers) {
                for (header in headers) {
                    if (headers.hasOwnProperty(header)) {
                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);
                    }
                }
            }

            //Allow overrides specified in config
            if (masterConfig.onXhr) {
                masterConfig.onXhr(xhr, url);
            }

            xhr.onreadystatechange = function (evt) {
                var status, err;
                //Do not explicitly handle errors, those should be
                //visible via console output in the browser.
                if (xhr.readyState === 4) {
                    status = xhr.status || 0;
                    if (status > 399 && status < 600) {
                        //An http 4xx or 5xx error. Signal an error.
                        err = new Error(url + ' HTTP status: ' + status);
                        err.xhr = xhr;
                        if (errback) {
                            errback(err);
                        }
                    } else {
                        callback(xhr.responseText);
                    }

                    if (masterConfig.onXhrComplete) {
                        masterConfig.onXhrComplete(xhr, url);
                    }
                }
            };
            xhr.send(null);
        };
    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&
            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {
        //Why Java, why is this so awkward?
        text.get = function (url, callback) {
            var stringBuffer, line,
                encoding = "utf-8",
                file = new java.io.File(url),
                lineSeparator = java.lang.System.getProperty("line.separator"),
                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),
                content = '';
            try {
                stringBuffer = new java.lang.StringBuffer();
                line = input.readLine();

                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324
                // http://www.unicode.org/faq/utf_bom.html

                // Note that when we use utf-8, the BOM should appear as "EF BB BF", but it doesn't due to this bug in the JDK:
                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058
                if (line && line.length() && line.charAt(0) === 0xfeff) {
                    // Eat the BOM, since we've already found the encoding on this file,
                    // and we plan to concatenating this buffer with others; the BOM should
                    // only appear at the top of a file.
                    line = line.substring(1);
                }

                if (line !== null) {
                    stringBuffer.append(line);
                }

                while ((line = input.readLine()) !== null) {
                    stringBuffer.append(lineSeparator);
                    stringBuffer.append(line);
                }
                //Make sure we return a JavaScript string and not a Java string.
                content = String(stringBuffer.toString()); //String
            } finally {
                input.close();
            }
            callback(content);
        };
    } else if (masterConfig.env === 'xpconnect' || (!masterConfig.env &&
            typeof Components !== 'undefined' && Components.classes &&
            Components.interfaces)) {
        //Avert your gaze!
        Cc = Components.classes;
        Ci = Components.interfaces;
        Components.utils['import']('resource://gre/modules/FileUtils.jsm');
        xpcIsWindows = ('@mozilla.org/windows-registry-key;1' in Cc);

        text.get = function (url, callback) {
            var inStream, convertStream, fileObj,
                readData = {};

            if (xpcIsWindows) {
                url = url.replace(/\//g, '\\');
            }

            fileObj = new FileUtils.File(url);

            //XPCOM, you so crazy
            try {
                inStream = Cc['@mozilla.org/network/file-input-stream;1']
                           .createInstance(Ci.nsIFileInputStream);
                inStream.init(fileObj, 1, 0, false);

                convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']
                                .createInstance(Ci.nsIConverterInputStream);
                convertStream.init(inStream, "utf-8", inStream.available(),
                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);

                convertStream.readString(inStream.available(), readData);
                convertStream.close();
                inStream.close();
                callback(readData.value);
            } catch (e) {
                throw new Error((fileObj && fileObj.path || '') + ': ' + e);
            }
        };
    }
    return text;
});


define('text!html/maintenance.html',[],function () { return '<link rel="stylesheet" href="<%= cdn %>/web/css/static_page.css"/>\n\n<div class="wrapper" data-objMacOSApp="<%= isMacOSApp %>">\n    <div class="main">\n        <div class="logo">\n            <svg version="1.1" id="_x31__copie_2_1_" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px"\n         y="0px" viewBox="0 0 595.2 127.7" style="enable-background:new 0 0 595.2 127.7;" xml:space="preserve">\n                <style type="text/css">\n                    .st_logo{fill-rule:evenodd;clip-rule:evenodd;fill:#FFF400;}\n                    .st_logo1{fill-rule:evenodd;clip-rule:evenodd;fill:#FFFFFF;}\n                </style>\n           \n                </defs>\n                <g id="NOW_copie" >\n                    <g>\n                        <path class="st_logo" d="M420.9,63.5l-11-37.1l-16.6,0.1v74.9h16.2l0.3-42l11.2,42h16V26.4h-15.9L420.9,63.5z M465,24.7 c-16,0-22.9,8.3-22.9,21.2v36.5c0,14.8,9.8,20.2,22.8,20.2c13,0,23.1-5.5,23.1-20.2V46C487.9,33,481,24.7,465,24.7z M468.6,86.7 c0,1.7-1.6,3.5-3.4,3.6c-1.9,0.1-4-1.7-4-3.6V41.5c0-2.5,1.3-4.1,4-4.1s3.4,2.6,3.4,4V86.7z M551.1,13.1l-15.9,53.3l-0.2-40 l-15.2,0.1l-11.7,40l-0.4-40h-14.7l0.2,74.9H511l9-27.5l0.1,27.5l17.8-0.1l28.7-88.1L551.1,13.1z"/>\n                    </g>\n                </g>\n                <g id="Forme_1_copie" >\n                    <g>\n                        <path class="st_logo1" d="M40.8,85.2c0,1.8-0.9,2.7-2.7,2.7h-9.8v13.4h13.6c9.3,0,13.9-4.6,13.9-13.9V26.2h-15V85.2z M82.5,86.4    c0,1.8-0.9,2.7-2.7,2.7h-1.6c-1.8,0-2.7-0.9-2.7-2.7V26.2h-15V88c0,9.3,4.6,13.9,13.9,13.9h9.1c9.3,0,13.9-4.6,13.9-13.9V26.2h-15 V86.4z M132.4,62.4l-12.9-9.5c-1.8-1.3-2.6-2.5-2.6-4.8v-7.1c0-1.8,0.9-2.7,2.7-2.7h1.2c1.8,0,2.7,0.9,2.7,2.7v12.3h14.7V39.5 c0-9.3-4.6-13.9-13.9-13.9h-8.2c-9.3,0-13.9,4.6-13.9,13.9v11.9c0,5.4,1.4,8.5,6,11.8l12.9,9.5c1.8,1.3,2.6,2.5,2.6,4.8v9 c0,1.8-0.9,2.7-2.7,2.7h-1.4c-1.8,0-2.7-0.9-2.7-2.7V72h-14.7v16c0,9.3,4.6,13.9,13.9,13.9h8.4c9.3,0,13.9-4.6,13.9-13.9V74.2 C138.4,68.6,137,65.7,132.4,62.4z M143.7,39.6h5.9V102h15V39.6h9.6V26.2h-37L143.7,39.6z M336,86.4c0,1.8-0.9,2.7-2.7,2.7h-1.9 c-1.8,0-2.7-0.9-2.7-2.7V41.1c0-1.8,0.9-2.7,2.7-2.7h1.7c1.8,0,2.7,0.9,2.7,2.7v16h14.8V39.5c0-9.3-4.6-13.9-13.9-13.9h-9 c-9.3,0-13.9,4.6-13.9,13.9V88c0,9.3,4.6,13.9,13.9,13.9h9.2c9.3,0,13.9-4.6,13.9-13.9V68.2H336V86.4z M370.7,69.9H383V56.5h-12.3 V39.7h12.9V26.2h-27.9v75.1h28.1V87.9h-13.1V69.9z M293.5,62.6l-9.3-36.3h-17.9v75.1h15.3l-0.3-37.2v-3.4l10.4,40.6h16.9V26.2h-15 V62.6z M388.2,28c0-0.6-0.4-0.9-1.1-0.9H386V30h0.6v-1.2h0.4l0.7,1.2h0.6l-0.7-1.3C387.9,28.7,388.2,28.5,388.2,28z M387.1,28.3 h-0.5v-0.8h0.5c0.4,0,0.6,0.1,0.6,0.4C387.6,28.2,387.5,28.3,387.1,28.3z M387,26c-1.4,0-2.7,1-2.7,2.6c0,1.6,1.3,2.6,2.7,2.6 c1.4,0,2.7-1,2.7-2.6C389.7,27,388.4,26,387,26z M387,30.6c-1.1,0-2-0.9-2-2.1c0-1.2,0.9-2.1,2-2.1c1.1,0,2,0.9,2,2.1 C389,29.8,388.1,30.6,387,30.6z M224.1,84.8V42.3c0-10.8-5.3-16.1-16.1-16.1h-21.1v75.1H208c5.3,0,9.3-1.3,12-3.9l-5.6,17.1h16 l5.7-19.2h10.1v6.1h15V25.9h-17.9L224.1,84.8z M209.1,84.3c0,2.9-1.3,4.2-4.2,4.2h-3V39.1h3c2.9,0,4.2,1.3,4.2,4.2V84.3z M246.2,81.7H240l6.1-21.4V81.7z"/>\n                    </g>\n                </g>\n            </svg>\n        </div>\n        <img class="character" src="<%= cdn %>/web/img/assets/main_carrot.png" alt="carrot"/>\n\n        <div class="timer_container">\n            <div class="timer_title"><%= maintenanceTitle %></div>\n            <div class="timer clearfix" data-endTime="<%= maintenanceTime %>" data-done="<%= doneTxt %>">\n                <div class="timer_count">\n                    <div class="timer_value days"></div>\n                    <div class="text" data-singular="<%= day %>" data-plural="<%= days %>"></div>\n                </div>\n                <div class="timer_count">\n                    <div class="timer_value hours"></div>\n                    <div class="text" data-singular="<%= hour %>" data-plural="<%= hours %>"></div>\n                </div>\n                <div class="timer_count">\n                    <div class="timer_value minutes"></div>\n                    <div class="text" data-singular="<%= min %>" data-plural="<%= mins %>"></div>\n                </div>\n                <div class="timer_count">\n                    <div class="timer_value seconds"></div>\n                    <div class="text" data-singular="<%= sec %>" data-plural="<%= secs %>"></div>\n                </div>\n            </div>\n        </div>\n\n        <p class="main__text"><%= maintenanceTxt %></p>\n    </div>\n</div>\n\n<script type="text/javascript">\n    var pageName = "Maintenance";\n    var siteSection = "Maintenance page";\n\n    $(document).ready(function() {\n        clickInstagram();\n\n        function clickInstagram() {\n            $(\'.instagram\').on(\'click\', function(event) {\n                event.preventDefault();\n                if (!!window.is_screen_tracked) {\n                    window.tcClickEvents(\'Action - Instagram\');\n                }\n\n                \n                if ($(\'.wrapper\').attr(\'data-objMacOSApp\') === \'true\') {\n                    window.webkit.messageHandlers.jsHandler.postMessage("https://www.instagram.com/justdancegame_us/?hl="+ lang);\n                } else {\n                    window.open(\'//instagram.com/justdancegame_us/?hl=\'+ lang, \'_blank\');\n                }\n            });\n        };\n    });\n\n</script>\n\n<script type="text/javascript" src="<%= cdn %>/web/js/maintenance.js"></script>\n<script type="text/javascript" src="<%= cdn %>/web/js/static_page_tracker.js"></script>\n\n';});

define('utils',[
	'jquery',
	'lodash',
	'es6Promise',
	'device',

	'text!html/maintenance.html'
], function (
	j,
	_,
	es6Promise,
	device,

	maintenanceHtml
) {
	'use strict';

	var Promise = es6Promise.Promise;

	// Assorted utility functions
	var exports = {};
	var STATUS_OK = 200 // "OK" status provided by server

	var MAINTENANCE_DATA_CONST = {
		uat_url: 'https://uat-public-ubiservices.ubi.com/v2/spaces/b53239ea-94df-4b05-a6d1-0f184eec2241/entities',
		prod_url: 'https://public-ubiservices.ubi.com/v2/spaces/b53239ea-94df-4b05-a6d1-0f184eec2241/entities',
		header: 'Ubi-AppId',
		header_value: 'cef33ce6-9b88-49a0-ac1d-f2d7cfe2d4b2'
	};
	var DFAULT_LOCAL_DEV_ENV = 2; // Match the local to dev environment

	// All environments defined here
	var prodArray = ['prod', 'cert', 'staging'];
	var uatDevArray = ['liveuat', 'uat', 'dev', 'demo'];

	var DEVICE_LIST = ['isBrowser', 'isChromecast', 'isMacOSApp', 'isIpadApp', 'isAndroidTabletApp', 'isAndroidTvBrowser'];

	Array.prototype.max = function() {
	    return Math.max.apply(null, this);
	};
	Array.prototype.min = function() {
	    return Math.min.apply(null, this);
	};


	// Only call a the given function as often as specified by the throttleLimit arg
	// Arg types                 Function, Number
	exports.throttle = function (func,     throttleLimit) {
		var lastTimeCalled = 0;
		return function () {
			var now = Date.now();
			if (now - lastTimeCalled > throttleLimit) {
				lastTimeCalled = now;
				func.apply(this, arguments);
			}
		};
	};

	// Replace tokens in a string, globally
	// Arg types                      String, Object
	// Returns the string after all tokens has been replaced
	exports.replaceTokens = function (str,    tokens) {
		for (var token in tokens) {
			while (str.indexOf(token) !== -1) {
				str = str.replace(token, tokens[token]);
			}
		}
		return str;
	};

	// Arg types                   Number, Number, Number
	exports.clamp = function clamp(number, min,    max) {
		return Math.min(Math.max(number, min), max);
	};

	// Linearly interpolate a value
	// Arg types                 Number, Number, Number
	exports.lerp = function lerp(a,      b,      t) {
		return a + t * (b - a);
	};

	// Modulo operator that always returns a positive number
	// Arg types               Number, Number
	exports.mod = function mod(x,      n) {
		return (((x % n) + n) % n);
	};

	// Arg types                 Number
	exports.sign = function sign(number) {
		return number > 0 ? 1 : -1;
	};

	// Approximation of a Gaussian distribution between [-s,s[
	// Arg types                 Number
	exports.gaussian = function (s) {
		return (s || 1) *
				((Math.random() + Math.random() + Math.random() + Math.random() + Math.random() + Math.random()) - 3) / 3;
	};

	// Returns a random Number that lies within the unit circle. Calling repeatedly will produce a uniform distribution.
	exports.randomInUnitCircle = function () {
		var x, y;
		do {
			x = 1 - 2 * Math.random();
			y = 1 - 2 * Math.random();
		} while (x * x + y * y > 1);
		return { x: x, y: y };
	};

	// "Properly" destroys and tears down HTML5 media element content. Used on Chromecast.
	// Arg types                      HTMLMediaElement
	exports.tearDownMedia = function (element) {
		if (!element.src) { return; }
		element.pause();
		element.src = '';
		element.load();
	};

	// Create a new tag, add attributes to that tag and append the newly created element to the first element in the
	// document matching the provided tag name. (This function seems quite insane).
	// Arg types                            String,    String,     Object
	exports.addElementToElement = function (toTagName, newTagName, attributes, getOnloadDfd) {
		var el = document.createElement(newTagName);
		for (var key in attributes) { el[key] = attributes[key]; }

		document.getElementsByTagName(toTagName)[0].appendChild(el);

		if (getOnloadDfd){
			var dfd = j.Deferred();

			el.onload = function(){
				dfd.resolve();
			}
			return dfd;
		}
	};

	// Arg types                    String
	exports.stripEmojis = function (str) {
		if (!str) {
			str = 'undefined'; return;
		}
		// Unicode ranges from http://crocodillon.com/blog/parsing-emoji-unicode-in-javascript
		return str.replace(/\ud83c[\udf00-\udfff]|\ud83d[\udc00-\ude4f]|\ud83d[\ude80-\udeff]/g, '');
	},

	// Turn the text content of the matched elements into metallic text using SVG filters
	j.fn.makeMetal = function (type) {
		var $el = this.find('text.top-layer');
		$el.length || ($el = this);

		switch (type) {
		case 'silver':
			$el.attr({
				fill: 'url(#silverGradient)',
				filter: 'url(#innerGlowSilver)',
			});
			break;
		case 'gold':
			$el.attr({
				fill: 'url(#goldGradient)',
				filter: 'url(#innerGlowGold)',
			});
			break;
		}
		return this;
	};

	exports.toggleFullscreen = function () {
		document.fullscreenElement ?
				document.exitFullscreen() :
				document.documentElement.requestFullscreen();
	};

	// Strip JSONP from a string and parse the remainder
	// Returns the parsed Object
	var JSONP_PREFIX = /^[^(]*?\(/;
	var JSONP_SUFFIX = /\)[^)]*?$/;
	exports.parseJsonp = function (jsonpString) {
		var prefix = jsonpString.match(JSONP_PREFIX)[0];
		var suffix = jsonpString.match(JSONP_SUFFIX)[0];
		return JSON.parse(jsonpString.substring(prefix.length, jsonpString.length - suffix.length));
	};

	// Fetches a binary file and parses it into an ArrayBuffer
	// Arg types                        String
	exports.fetchBinaryFile = function (url) {
		var dfd = j.Deferred();
		var req = new XMLHttpRequest();

		req.onload = function () {
		  dfd.resolve(req.response);
		};
		req.onerror = function (err) {
			dfd.reject(err);
		};
		req.responseType = 'arraybuffer';

		req.open('GET', url, true);
		req.send(null);

		return dfd.promise();
	};

	// Format the numbers so they are more readable
	exports.formatNumber = function (n) {
		var numString = n.toString();

		if (numString.length > 11) {
			return Math.floor(n / 1000000000) + 'B'; // 123456789012 > 123B  ..if we ever get numbers this big, we might look at trillion ;)
		}

		switch (numString.length) {
			case 4:  numString = numString.substr(0, 1) + ',' + numString.substr(1, 3); break; // 1234 > 1 234
			case 5:  numString = numString.substr(0, 2) + ',' + numString.substr(2, 3); break; // 12345 > 12 345
			case 6:  numString = Math.floor(n / 1000) + 'K'; break;                            // 123456 > 123K
			case 7:  numString = Math.floor(n / 10000) / 100 + 'M'; break;                     // 1234567 > 1.23M
			case 8:  numString = Math.floor(n / 100000) / 10 + 'M'; break;                     // 12345678 > 12.3M
			case 9:  numString = Math.floor(n / 1000000) + 'M'; break;                         // 123456789 > 123M
			case 10: numString = Math.floor(n / 10000000) / 100 + 'B'; break;                  // 1234567890 > 1.23B
			case 11: numString = Math.floor(n / 100000000) / 10 + 'B'; break;                  // 12345678901 > 12.3B
		}

		return numString;
	},

	exports.sToMs = function (s) { return s * 1000; };
	exports.msToS = function (ms) { return Math.floor(ms / 1000); };
	exports.percentToFraction = function (percent) { return percent / 100; };
	exports.fractionToPercent = function (fraction) { return fraction * 100; };

	exports.msToTime = function(duration) {
	    var seconds = parseInt((duration / 1000) % 60),
	    	minutes = parseInt((duration / (1000*60)) % 60),
	    	hours = parseInt((duration / (1000*60*60)) % 24);

	    hours = (hours < 10) ? "0" + hours : hours;
	    minutes = (minutes < 10) ? "0" + minutes : minutes;
	    seconds = (seconds < 10) ? "0" + seconds : seconds;

	    return hours + ":" + minutes + ":" + seconds;
	};

	exports.getParameterByName = function (name, url) {
		if (!url) url = location.search;

		name = name.replace(/[\[\]]/g, "\\$&");
		var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)");
		var results = regex.exec(url);

		if (!results) return null;
		if (!results[2]) return '';
		return decodeURIComponent(results[2].replace(/\+/g, " "));
	};

	exports.changeNoToClassCss = function(songStr) {
		var res = songStr.charAt(0),
			strMap = res.match(/[0-9]/g);

		if (!!strMap) {
		    var res2 = songStr.slice(1);
		    return '\\3' + res + ' ' + res2;
		}
        
		return songStr;
	};


	exports.formatNbString = function(val) {
		if (val <= 9) { return '0'+ val; }
		else
			return val;
	};


	exports.detectDevice = function(data) {
		var deviceDetected;

		for (var d in data) {
			if (data.hasOwnProperty(d) && data[d]) {
				if (DEVICE_LIST.indexOf(d) > -1)
					deviceDetected = d;
			}
		}

		if (!deviceDetected) deviceDetected = DEVICE_LIST[0];
		return deviceDetected;
	};

	//Time stamp calculation for tracking
	exports.diffTimeCalculation = function() {
		var currentDate = new Date();
		var diffTime = (currentDate.getTime() - window.initialTime);
		var loadingTime = Math.abs(diffTime / 1000);

		return loadingTime;
	};

	exports.renderMaintenancePage = function(parentElem, endTime, strObj) {
		if (parentElem.find('#iframe_maintenance').length > 0) {
			return;
		}

		var $maintenance = j(_.template(maintenanceHtml) ({
			maintenanceTitle: strObj.title,
			maintenanceTxt: strObj.text.replace(/\\n/g, '<br>'),
			maintenanceTime: endTime,
			day: strObj.day,
			days: strObj.days,
			hour: strObj.hour,
			hours: strObj.hours,
			min: strObj.min,
			mins: strObj.mins,
			sec: strObj.sec,
			secs: strObj.secs,
			doneTxt: strObj.done,
			isMacOSApp: device.isMacOSApp
		}));

		parentElem.empty();
		parentElem.append($maintenance);
	};



	// Declared all maintenance related methods here
	exports.getEnvironmentData = function() {
		var data_env = {};
		var data_url;

		var env = environment.split("-").pop();
		data_env.environment = env;

		if (prodArray.indexOf(env) > -1) {
  			data_url = MAINTENANCE_DATA_CONST.prod_url;
		} else {
			data_url = MAINTENANCE_DATA_CONST.uat_url;
			if (uatDevArray.indexOf(env) < 0) {
				data_env.environment = uatDevArray[DFAULT_LOCAL_DEV_ENV];
			}
		}

		data_env.ubiServiceUrl = data_url;

		return data_env;
	};

	// Process maintenance data before JDNow page load
	exports.processMaintenanceData = function(data) {
	    var mainData;
	    var mainDataLength;
	    var env = exports.getEnvironmentData().environment;
	    var entityLength = data.entities.length;
	    var onGoingEndTimeArr = [];
	    var startTimeArr = [];
	    var tempMaintenanceObj = {};
	    var eT;
	    var nT;
	    var sT;
	    var currentTime = new Date().getTime();

	    for (var i = 0; i < entityLength; i++) {
	        if (env === data.entities[i].name) { // Extract the maintenance data from entities
	            mainData = data.entities[i].obj.maintenances;
	        }
	    }

	    // Check presence for maintenance data, if its empty then return empty maintenance obj
	    if (!!mainData && mainData.length > 0) {
	    	mainDataLength = mainData.length;
	    } else {
	    	return tempMaintenanceObj = {};
	    }


	    //Extract endTime(max value), notifyPlayersTime(min value), startTime values from maintenance data
	    for (var j = 0; j < mainDataLength; j++) {
    		eT = mainData[j].endTime; 
    		nT = mainData[j].notifyPlayersTime;
    		sT = mainData[j].startTime;

	        if (!!sT) {
	        	if (sT <= currentTime) {
	        		// Maintenance is going on right now since startTime <= currentTime
	        		if (!!eT && eT > currentTime) {
	        			// endtime is there && endTime > currentTime
	        			// push the endtime values, will not take expired maintenance values into account
	        			startTimeArr.push(sT);
	        			onGoingEndTimeArr.push(eT);
	        		} else if (!eT) {
	        			// push startTime values & assign empty endTime
	        			startTimeArr.push(sT);
	        			tempMaintenanceObj.endTime = '';
	        		}
	        	} else if (!!nT && sT > currentTime && nT <= currentTime) {
	        		// Maintenance is scheduled to happen then notify the players
	        		startTimeArr.push(sT);
	        	}
	        }
	    }


	    // Take the most sooner startTime & its corresponding notifyTime from its index
	    tempMaintenanceObj.startTime = ((mainData.length > 0 && startTimeArr.length > 0) ? startTimeArr.min() : '');
	    var index = mainData.map(function(e) { 
	        return e.startTime; 
	    }).indexOf(tempMaintenanceObj.startTime);
	    tempMaintenanceObj.notifyTime = ((mainData.length > 0 && index >= 0) ? mainData[index].notifyPlayersTime : '');

	    // If multiple maintenances is going on right now
	    if (tempMaintenanceObj.endTime !== '') {
	    	if (onGoingEndTimeArr.length > 0) {
	    		// check the endTimeArray
	    		// take the max of onGoingEndTimeArr value only if the endtime is not assigned as empty string
	    		tempMaintenanceObj.endTime = onGoingEndTimeArr.max();
	    	} else {
	    		// assign endTime of earliest startTime, this ensures future maintenance values
	    		// Or send an empty value if there's no endTime for that startTime
	    		tempMaintenanceObj.endTime = ((mainData.length > 0 && index >= 0) ? mainData[index].endTime : '');
	    	}
	    }


	    return tempMaintenanceObj;
	};


	exports.makeHTTPRequestForMaintenance = function() {

		return new Promise(function(resolve, reject) {

			if (window.XMLHttpRequest) { var xhttp = new XMLHttpRequest(); }

			xhttp.onreadystatechange = function(event) {
				if (this.readyState === XMLHttpRequest.DONE) {
					if (this.status === STATUS_OK)
						resolve(JSON.parse(this.responseText));
					else
						reject(this.status, this.statusText);
				}
			};

			xhttp.open("GET", exports.getEnvironmentData().ubiServiceUrl, true);
			xhttp.setRequestHeader(MAINTENANCE_DATA_CONST.header, MAINTENANCE_DATA_CONST.header_value);
			xhttp.send();
		});
	};


	return exports;

});
// loc('oasis_key',{'[oasis_tag]':'replacement text',...});
define('loc',[
	'lodash',
	'utils',
], function (
	_,
	utils
) {
	'use strict';

	// Private helper function
	function translate(id, tokens) {
		if (!(id in l18n.strings)) { return '!!!'+id+'!!!'; }

		var data = (debugLocs ? "["+id+"]" : "" ) + l18n.strings[id];

		if (!tokens) { return data; }

		tokens['[product name]'] = 'Just Dance';
		return utils.replaceTokens(data, tokens);
	}

	// Localization function. Looks up translatable ids in the translation table and replaces tokens.
	// Arg types     String|Array, Object
	return function (strings,      tokens) {
		if (_.isArray(strings)) {
			var ret = {};
			_.each(strings, function (id) {
				ret[id] = translate(id, tokens);
			});
			return ret;
		} else {
			return translate(strings, tokens);
		}
	};
});

/*	SWFObject v2.2 <http://code.google.com/p/swfobject/> 
	is released under the MIT License <http://www.opensource.org/licenses/mit-license.php> 
*/
var swfobject=function(){var D="undefined",r="object",S="Shockwave Flash",W="ShockwaveFlash.ShockwaveFlash",q="application/x-shockwave-flash",R="SWFObjectExprInst",x="onreadystatechange",O=window,j=document,t=navigator,T=false,U=[h],o=[],N=[],I=[],l,Q,E,B,J=false,a=false,n,G,m=true,M=function(){var aa=typeof j.getElementById!=D&&typeof j.getElementsByTagName!=D&&typeof j.createElement!=D,ah=t.userAgent.toLowerCase(),Y=t.platform.toLowerCase(),ae=Y?/win/.test(Y):/win/.test(ah),ac=Y?/mac/.test(Y):/mac/.test(ah),af=/webkit/.test(ah)?parseFloat(ah.replace(/^.*webkit\/(\d+(\.\d+)?).*$/,"$1")):false,X=!+"\v1",ag=[0,0,0],ab=null;if(typeof t.plugins!=D&&typeof t.plugins[S]==r){ab=t.plugins[S].description;if(ab&&!(typeof t.mimeTypes!=D&&t.mimeTypes[q]&&!t.mimeTypes[q].enabledPlugin)){T=true;X=false;ab=ab.replace(/^.*\s+(\S+\s+\S+$)/,"$1");ag[0]=parseInt(ab.replace(/^(.*)\..*$/,"$1"),10);ag[1]=parseInt(ab.replace(/^.*\.(.*)\s.*$/,"$1"),10);ag[2]=/[a-zA-Z]/.test(ab)?parseInt(ab.replace(/^.*[a-zA-Z]+(.*)$/,"$1"),10):0}}else{if(typeof O.ActiveXObject!=D){try{var ad=new ActiveXObject(W);if(ad){ab=ad.GetVariable("$version");if(ab){X=true;ab=ab.split(" ")[1].split(",");ag=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}}catch(Z){}}}return{w3:aa,pv:ag,wk:af,ie:X,win:ae,mac:ac}}(),k=function(){if(!M.w3){return}if((typeof j.readyState!=D&&j.readyState=="complete")||(typeof j.readyState==D&&(j.getElementsByTagName("body")[0]||j.body))){f()}if(!J){if(typeof j.addEventListener!=D){j.addEventListener("DOMContentLoaded",f,false)}if(M.ie&&M.win){j.attachEvent(x,function(){if(j.readyState=="complete"){j.detachEvent(x,arguments.callee);f()}});if(O==top){(function(){if(J){return}try{j.documentElement.doScroll("left")}catch(X){setTimeout(arguments.callee,0);return}f()})()}}if(M.wk){(function(){if(J){return}if(!/loaded|complete/.test(j.readyState)){setTimeout(arguments.callee,0);return}f()})()}s(f)}}();function f(){if(J){return}try{var Z=j.getElementsByTagName("body")[0].appendChild(C("span"));Z.parentNode.removeChild(Z)}catch(aa){return}J=true;var X=U.length;for(var Y=0;Y<X;Y++){U[Y]()}}function K(X){if(J){X()}else{U[U.length]=X}}function s(Y){if(typeof O.addEventListener!=D){O.addEventListener("load",Y,false)}else{if(typeof j.addEventListener!=D){j.addEventListener("load",Y,false)}else{if(typeof O.attachEvent!=D){i(O,"onload",Y)}else{if(typeof O.onload=="function"){var X=O.onload;O.onload=function(){X();Y()}}else{O.onload=Y}}}}}function h(){if(T){V()}else{H()}}function V(){var X=j.getElementsByTagName("body")[0];var aa=C(r);aa.setAttribute("type",q);var Z=X.appendChild(aa);if(Z){var Y=0;(function(){if(typeof Z.GetVariable!=D){var ab=Z.GetVariable("$version");if(ab){ab=ab.split(" ")[1].split(",");M.pv=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}else{if(Y<10){Y++;setTimeout(arguments.callee,10);return}}X.removeChild(aa);Z=null;H()})()}else{H()}}function H(){var ag=o.length;if(ag>0){for(var af=0;af<ag;af++){var Y=o[af].id;var ab=o[af].callbackFn;var aa={success:false,id:Y};if(M.pv[0]>0){var ae=c(Y);if(ae){if(F(o[af].swfVersion)&&!(M.wk&&M.wk<312)){w(Y,true);if(ab){aa.success=true;aa.ref=z(Y);ab(aa)}}else{if(o[af].expressInstall&&A()){var ai={};ai.data=o[af].expressInstall;ai.width=ae.getAttribute("width")||"0";ai.height=ae.getAttribute("height")||"0";if(ae.getAttribute("class")){ai.styleclass=ae.getAttribute("class")}if(ae.getAttribute("align")){ai.align=ae.getAttribute("align")}var ah={};var X=ae.getElementsByTagName("param");var ac=X.length;for(var ad=0;ad<ac;ad++){if(X[ad].getAttribute("name").toLowerCase()!="movie"){ah[X[ad].getAttribute("name")]=X[ad].getAttribute("value")}}P(ai,ah,Y,ab)}else{p(ae);if(ab){ab(aa)}}}}}else{w(Y,true);if(ab){var Z=z(Y);if(Z&&typeof Z.SetVariable!=D){aa.success=true;aa.ref=Z}ab(aa)}}}}}function z(aa){var X=null;var Y=c(aa);if(Y&&Y.nodeName=="OBJECT"){if(typeof Y.SetVariable!=D){X=Y}else{var Z=Y.getElementsByTagName(r)[0];if(Z){X=Z}}}return X}function A(){return !a&&F("6.0.65")&&(M.win||M.mac)&&!(M.wk&&M.wk<312)}function P(aa,ab,X,Z){a=true;E=Z||null;B={success:false,id:X};var ae=c(X);if(ae){if(ae.nodeName=="OBJECT"){l=g(ae);Q=null}else{l=ae;Q=X}aa.id=R;if(typeof aa.width==D||(!/%$/.test(aa.width)&&parseInt(aa.width,10)<310)){aa.width="310"}if(typeof aa.height==D||(!/%$/.test(aa.height)&&parseInt(aa.height,10)<137)){aa.height="137"}j.title=j.title.slice(0,47)+" - Flash Player Installation";var ad=M.ie&&M.win?"ActiveX":"PlugIn",ac="MMredirectURL="+O.location.toString().replace(/&/g,"%26")+"&MMplayerType="+ad+"&MMdoctitle="+j.title;if(typeof ab.flashvars!=D){ab.flashvars+="&"+ac}else{ab.flashvars=ac}if(M.ie&&M.win&&ae.readyState!=4){var Y=C("div");X+="SWFObjectNew";Y.setAttribute("id",X);ae.parentNode.insertBefore(Y,ae);ae.style.display="none";(function(){if(ae.readyState==4){ae.parentNode.removeChild(ae)}else{setTimeout(arguments.callee,10)}})()}u(aa,ab,X)}}function p(Y){if(M.ie&&M.win&&Y.readyState!=4){var X=C("div");Y.parentNode.insertBefore(X,Y);X.parentNode.replaceChild(g(Y),X);Y.style.display="none";(function(){if(Y.readyState==4){Y.parentNode.removeChild(Y)}else{setTimeout(arguments.callee,10)}})()}else{Y.parentNode.replaceChild(g(Y),Y)}}function g(ab){var aa=C("div");if(M.win&&M.ie){aa.innerHTML=ab.innerHTML}else{var Y=ab.getElementsByTagName(r)[0];if(Y){var ad=Y.childNodes;if(ad){var X=ad.length;for(var Z=0;Z<X;Z++){if(!(ad[Z].nodeType==1&&ad[Z].nodeName=="PARAM")&&!(ad[Z].nodeType==8)){aa.appendChild(ad[Z].cloneNode(true))}}}}}return aa}function u(ai,ag,Y){var X,aa=c(Y);if(M.wk&&M.wk<312){return X}if(aa){if(typeof ai.id==D){ai.id=Y}if(M.ie&&M.win){var ah="";for(var ae in ai){if(ai[ae]!=Object.prototype[ae]){if(ae.toLowerCase()=="data"){ag.movie=ai[ae]}else{if(ae.toLowerCase()=="styleclass"){ah+=' class="'+ai[ae]+'"'}else{if(ae.toLowerCase()!="classid"){ah+=" "+ae+'="'+ai[ae]+'"'}}}}}var af="";for(var ad in ag){if(ag[ad]!=Object.prototype[ad]){af+='<param name="'+ad+'" value="'+ag[ad]+'" />'}}aa.outerHTML='<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"'+ah+">"+af+"</object>";N[N.length]=ai.id;X=c(ai.id)}else{var Z=C(r);Z.setAttribute("type",q);for(var ac in ai){if(ai[ac]!=Object.prototype[ac]){if(ac.toLowerCase()=="styleclass"){Z.setAttribute("class",ai[ac])}else{if(ac.toLowerCase()!="classid"){Z.setAttribute(ac,ai[ac])}}}}for(var ab in ag){if(ag[ab]!=Object.prototype[ab]&&ab.toLowerCase()!="movie"){e(Z,ab,ag[ab])}}aa.parentNode.replaceChild(Z,aa);X=Z}}return X}function e(Z,X,Y){var aa=C("param");aa.setAttribute("name",X);aa.setAttribute("value",Y);Z.appendChild(aa)}function y(Y){var X=c(Y);if(X&&X.nodeName=="OBJECT"){if(M.ie&&M.win){X.style.display="none";(function(){if(X.readyState==4){b(Y)}else{setTimeout(arguments.callee,10)}})()}else{X.parentNode.removeChild(X)}}}function b(Z){var Y=c(Z);if(Y){for(var X in Y){if(typeof Y[X]=="function"){Y[X]=null}}Y.parentNode.removeChild(Y)}}function c(Z){var X=null;try{X=j.getElementById(Z)}catch(Y){}return X}function C(X){return j.createElement(X)}function i(Z,X,Y){Z.attachEvent(X,Y);I[I.length]=[Z,X,Y]}function F(Z){var Y=M.pv,X=Z.split(".");X[0]=parseInt(X[0],10);X[1]=parseInt(X[1],10)||0;X[2]=parseInt(X[2],10)||0;return(Y[0]>X[0]||(Y[0]==X[0]&&Y[1]>X[1])||(Y[0]==X[0]&&Y[1]==X[1]&&Y[2]>=X[2]))?true:false}function v(ac,Y,ad,ab){if(M.ie&&M.mac){return}var aa=j.getElementsByTagName("head")[0];if(!aa){return}var X=(ad&&typeof ad=="string")?ad:"screen";if(ab){n=null;G=null}if(!n||G!=X){var Z=C("style");Z.setAttribute("type","text/css");Z.setAttribute("media",X);n=aa.appendChild(Z);if(M.ie&&M.win&&typeof j.styleSheets!=D&&j.styleSheets.length>0){n=j.styleSheets[j.styleSheets.length-1]}G=X}if(M.ie&&M.win){if(n&&typeof n.addRule==r){n.addRule(ac,Y)}}else{if(n&&typeof j.createTextNode!=D){n.appendChild(j.createTextNode(ac+" {"+Y+"}"))}}}function w(Z,X){if(!m){return}var Y=X?"visible":"hidden";if(J&&c(Z)){c(Z).style.visibility=Y}else{v("#"+Z,"visibility:"+Y)}}function L(Y){var Z=/[\\\"<>\.;]/;var X=Z.exec(Y)!=null;return X&&typeof encodeURIComponent!=D?encodeURIComponent(Y):Y}var d=function(){if(M.ie&&M.win){window.attachEvent("onunload",function(){var ac=I.length;for(var ab=0;ab<ac;ab++){I[ab][0].detachEvent(I[ab][1],I[ab][2])}var Z=N.length;for(var aa=0;aa<Z;aa++){y(N[aa])}for(var Y in M){M[Y]=null}M=null;for(var X in swfobject){swfobject[X]=null}swfobject=null})}}();return{registerObject:function(ab,X,aa,Z){if(M.w3&&ab&&X){var Y={};Y.id=ab;Y.swfVersion=X;Y.expressInstall=aa;Y.callbackFn=Z;o[o.length]=Y;w(ab,false)}else{if(Z){Z({success:false,id:ab})}}},getObjectById:function(X){if(M.w3){return z(X)}},embedSWF:function(ab,ah,ae,ag,Y,aa,Z,ad,af,ac){var X={success:false,id:ah};if(M.w3&&!(M.wk&&M.wk<312)&&ab&&ah&&ae&&ag&&Y){w(ah,false);K(function(){ae+="";ag+="";var aj={};if(af&&typeof af===r){for(var al in af){aj[al]=af[al]}}aj.data=ab;aj.width=ae;aj.height=ag;var am={};if(ad&&typeof ad===r){for(var ak in ad){am[ak]=ad[ak]}}if(Z&&typeof Z===r){for(var ai in Z){if(typeof am.flashvars!=D){am.flashvars+="&"+ai+"="+Z[ai]}else{am.flashvars=ai+"="+Z[ai]}}}if(F(Y)){var an=u(aj,am,ah);if(aj.id==ah){w(ah,true)}X.success=true;X.ref=an}else{if(aa&&A()){aj.data=aa;P(aj,am,ah,ac);return}else{w(ah,true)}}if(ac){ac(X)}})}else{if(ac){ac(X)}}},switchOffAutoHideShow:function(){m=false},ua:M,getFlashPlayerVersion:function(){return{major:M.pv[0],minor:M.pv[1],release:M.pv[2]}},hasFlashPlayerVersion:F,createSWF:function(Z,Y,X){if(M.w3){return u(Z,Y,X)}else{return undefined}},showExpressInstall:function(Z,aa,X,Y){if(M.w3&&A()){P(Z,aa,X,Y)}},removeSWF:function(X){if(M.w3){y(X)}},createCSS:function(aa,Z,Y,X){if(M.w3){v(aa,Z,Y,X)}},addDomLoadEvent:K,addLoadEvent:s,getQueryParamValue:function(aa){var Z=j.location.search||j.location.hash;if(Z){if(/\?/.test(Z)){Z=Z.split("?")[1]}if(aa==null){return L(Z)}var Y=Z.split("&");for(var X=0;X<Y.length;X++){if(Y[X].substring(0,Y[X].indexOf("="))==aa){return L(Y[X].substring((Y[X].indexOf("=")+1)))}}}return""},expressInstallCallback:function(){if(a){var X=c(R);if(X&&l){X.parentNode.replaceChild(l,X);if(Q){w(Q,true);if(M.ie&&M.win){l.style.display="block"}}if(E){E(B)}}a=false}}}}();
define("swfobject", function(){});

/* global swfobject */
define('environment',[
	'jquery',
	'bowser',
	'device',
	// Non-AMD dependencies
	'swfobject',
], function (
	$,
	bowser,
	device
) {
	'use strict';

	// Exposes various information regarding the execution environment.
	var exports = {
		id: window.environment || 'development',
	};

	// Detect HLS
	try {
		exports.supportsHls = !!document.createElement('video').canPlayType('application/vnd.apple.mpegURL');
	} catch (err) {
		exports.supportsHls = false;
	}

	// Detect Flash

	exports.hasFlash = false;
	var flashVersion = swfobject.getFlashPlayerVersion() || {};
	var isFlashInstalled = flashVersion.major >= 11;

	var isFlashActivated = false;
	if (isFlashInstalled) {
		var plugins = navigator.plugins;
		for (var p = 0; p < plugins.length; p++){
			if (plugins[p].name && plugins[p].name.indexOf('Flash') > -1) {
				isFlashActivated = true;
				break;
			}
		}
	}
	exports.hasFlash = isFlashInstalled && isFlashActivated;



	exports.supportsClickInteraction = !device.isChromecast;
	exports.supportsMse = !!(window.MediaSource || window.WebKitMediaSource) && !bowser.safari && !bowser.ios;

	var gl, canvas = document.createElement('canvas');
	try { gl = canvas.getContext('webgl'); } catch (x) {}
	if (!gl) { try { gl = canvas.getContext('experimental-webgl'); } catch (x) {} }
	exports.supportsWebGl = !!gl;
	gl = canvas = undefined;

	// Constants
	exports.TRANSITION_END = bowser.safari || (bowser.name === 'iPad' && bowser.osversion.substring(0, 1) === '6') ? 'webkitTransitionEnd' : 'transitionend';
	exports.ANIMATION_END = bowser.webkit ? 'webkitAnimationEnd' : 'animationend';

	exports.TRANSFORM = bowser.webkit && !bowser.chrome ? 'webkitTransform' : 'transform';

	exports.BACKGROUND_VIDEO_URL = cdn + '/web/video/60s_dash/60s.mp4.mpd';

	//fastline works with those URls :
	// localhost
	// ubisoft
	// ip of the computer X.X.X.X
	// urls defined in the hostfile (for hls cookies purpose) : X.just-dance.com or X.justdancenow.com
	// uats addresses : eg. eu-uat2.just-dance.com for uat2 europe
	// it DOES NOT work with justdancenow.com, the production address
	exports.FASTLANE = /(localhost|ubisoft|\d+\.\d+\.\d+\.\d+|(\w+\-)*\w+\.(just-dance|justdancenow).com)/.test(location.host) && /fastlane/.test(location.search);
	
	exports.POINTER_DOWN = device.isTouchDevice ? 'touchstart' : 'mousedown';
	exports.POINTER_MOVE = device.isTouchDevice ? 'touchmove' : 'mousemove';
	exports.POINTER_UP = device.isTouchDevice ? 'touchend' : 'mouseup';
	exports.POINTER_UP_CANCEL = 'touchcancel';

	exports.SONG_MENU_ID = !device.isIpadApp ? "M_2018_JDNow_MenuMusic" : "M_2018_JDNow_MenuMusic_IPAD";

	return exports;
});
define('pubsub',[
	'lodash',
], function (
	_
) {
	'use strict';

	// Singleton
	// Implementation of the publisher/subscriber pattern
	var exports = {};
	var events = {};

	exports.publish = function (evName, args) {
		_.each(events[evName], function (callback) {
			callback.apply(null, args);
		});
	};

	exports.subscribe = function (evName, callback) {
		var callbacks = events[evName] = events[evName] || [];

		if (_.indexOf(callbacks, callback) !== -1) {
			console.warn('This callback is already registered to this event');
			return;
		}

		callbacks.push(callback);
	};

	exports.unsubscribe = function (evName, callback) {
		if (_.isUndefined(callback)) {
			console.warn('callback argument is "undefined", probably a bug');
		}

		var callbacks = events[evName];
		if (!callbacks) { return; }

		if (callback) {
			var pos = _.indexOf(callbacks, callback);
			pos === -1 || callbacks.splice(pos, 1);
		} else {
			callbacks.length = 0;
		}
	};

	return exports;

});

define('miscUtils',[],function () {
	'use strict';

	// Assorted utility functions
	var exports = {};

	// Find the highest scorer for a given song
	// Arg types                           String, Object
	exports.findHighScorePlayer = function(song,   players) {
		var score = 0;
		var sPlayer = null;
		for (var p in players) {
			var tempPlayer = players[p];
			tempPlayer.tempHighscore = 0;
			for(var i in tempPlayer.highscores) {
				var h = tempPlayer.highscores[i];
				if (h.song === song) {
					var tempScore = parseInt(h.score,10);
					if(tempScore>score) {
						sPlayer = tempPlayer;
						score = tempScore;
					}
					tempPlayer.tempHighscore = score;
					break;
				}
			}
		}
		return sPlayer;
	};

	exports.findSongHighscorePlayer = function(song, player) {
		for (var i in player.highscores) {
			var h = player.highscores[i];
			if (h.song === song) {
				return h;
			}
		}
	};

	// Update the local high score tables.
	// Arg types                              String, Object
	exports.updateLocalHighScores = function(song,   players) {
		for (var p in players) {
			var tempPlayer = players[p];
			tempPlayer.tempHighscore = 0;
			var found = false;

			for(var i in tempPlayer.highscores) {
				var h = tempPlayer.highscores[i];
				if (h.song === song) {
					found = true;
					var prevScore = parseInt(h.score,10);
					if(tempPlayer.totalScore>prevScore) {
						h.score = tempPlayer.totalScore;
					}
					break;
				}
			}

			if(!found && !tempPlayer.isGhost && tempPlayer.totalScore > 0) {
				tempPlayer.highscores.push({
					'song': song,
					'score': tempPlayer.totalScore
				});
			}
		}
	};

	exports.updateLocalHSSongLevel = function(song, xpDetails, player, jd) {

		if (xpDetails.end.level > xpDetails.start.level)
			jd.gui.hud.players.levelUp(player.id, xpDetails.end.level);

		var hsData = {
			'level' : xpDetails.end.level,
			'xp' : xpDetails.end.xp - xpDetails.start.xp,
			'nextXPLevel' : xpDetails.end.endBracket,
			'prevXPLevel' : xpDetails.start.startBracket
		};
		hsData.completed = 0.1 * Math.round( 10 * (hsData.xp - hsData.prevXPLevel)/(hsData.nextXPLevel - hsData.prevXPLevel));

		var found = false;
		for(var i in player.highscores) {
			var h = player.highscores[i];
			if (h.song === song) {
				found = true;
				_.merge(h, hsData);
				break;
			}
		}

		if (!found && player.totalScore>0) {
			hsData.song = song;
			hsData.score = player.totalScore;

			player.highscores.push(hsData);
		}
	};

	// Update the total score for players.
	exports.updateTotalScore = function(playerResults, players) {
		for (var p = 0; p < playerResults.length; p++) {
			var tempResult = playerResults[p];
			var tempID = tempResult.publicID;

			if (players[tempID]) {
				players[tempID].totalScore = tempResult.scaledScore;
			}
		}
	};

	// Update the achievements of individual players.
	exports.updateAchievements = function(player, song, achievements) {
		if (!!player.highscores && !!achievements) {
			for(var i in player.highscores) {
				var h = player.highscores[i];
				if (h.song === song) {
					player.highscores[i].achievements = achievements;
				}
			}
		}
	};

	exports.clearTotalScores = function(players) {
		for(var i in players) {
			var player = players[i];
			player.totalScore = 0;
		}
	};

	return exports;

});


define('ghosts',[
	'lodash',
	'pubsub'
], function (
	_,
	pubsub
) {
	'use strict';

	// Singleton.
	// Data structure that keeps track of the ghosts that has currently "joined" the room.
	function Ghosts () {
		var ghosts = {};

		// Mangle the ghost data from the server into something that is a bit easier to work with.
		var _structureGhost = function (ghost) {
			ghost.avatar = (!!ghost.metadata.avatar ? ghost.metadata.avatar : 376); //Take the original value or if it's absent then assign the default one
			ghost.country = ghost.metadata.country;
			ghost.name = (ghost.metadata.name === "" ? "Player X" : ghost.metadata.name); //Assign name or if it's absent then assign a default one
			ghost.id = ghost.metadata.publicID;
			ghost.globalLevel = ghost.metadata.globalLevel;
			ghost.coach = ghost.coach || 0;
			ghost.isGhost = true;

			// The data sent from the server is compressed into just 1 character
			var ratingTable = {
				'b': 'bad',
				'o': 'ok',
				'g': 'good',
				'p': 'perfect',
				'y': 'yeah'
			};

			// Restructure and sort ghost move data
			ghost.moves = _.chain(ghost.moves)
				.map(function (data) {
					var move = data.split(':');
					return {
						move: parseInt(move[0], 10),
						rating: ratingTable[move[1]],
						totalScore: parseInt(move[2], 10)
					};
				})
				.sortBy('move')
				.value();

			// Delete unused properties
			delete ghost.metadata;

			return ghost;
		};

		// Returns an Object where the keys are ghost player ids and the values are ghost Objects
		var getGhosts = function () {
			return ghosts;
		};

		// Update the internal ghost data
		// Arg types                   Array
		var onGhostsChange = function (data) {
			removeGhosts(); // Always remove any lingering ghosts just in case

			if (!_.isEmpty(data)) {
				addGhosts(data);
			}
		};

		// Private function
		var addGhosts = function (data) {
			_.each(data, function (ghost) {
				addGhost(ghost);
			});
		};

		// Removes all ghosts, i.e. makes the "leave" the room
		var removeGhosts = function () {
			_.each(ghosts, function (ghost) {
				removeGhost(ghost.id);
			});
		};

		// Private function
		var addGhost = function (ghost) {
			_structureGhost(ghost);
			ghosts[ghost.id] = ghost;

			pubsub.publish('ghostAdded', [ghost]);
		};

		// Arg types                String
		var removeGhost = function (ghostId) {
			var ghost = ghosts[ghostId];
			if (!ghost) {
				console.warn('Trying to remove nonexisting ghost', ghostId);
				return;
			}
			delete ghosts[ghostId];
			pubsub.publish('ghostRemoved', [ ghost ]);
		};

		// Export the public interface
		_.extend(this, {
			getGhosts: getGhosts,
			onGhostsChange: onGhostsChange,
			addGhosts: addGhosts, // Private, should not be exposed
			removeGhosts: removeGhosts,
			addGhost: addGhost, // Private, should not be exposed
			removeGhost: removeGhost,
		});

	}

	return new Ghosts(); // "Singleton" object

});


define('text!html/gui/avatar.html',[],function () { return '<div class="avatar-wrapper <%- classes.join(\' \') %>">\n\t<div class="avatar" style="background-image:url(<%= url %>)"></div>\n</div>';});

define('avatars',['require','lodash','text!html/gui/avatar.html'],function (require) {
	'use strict';

	var _ = require('lodash');
	var avatarHtml = require('text!html/gui/avatar.html');

	var avatarTemplate = _.template(avatarHtml);

	// Singleton module responsible for providing avatar image URLs and avatar HTML representations.
	function Avatars () {
		var avatars;

		// Avatars are found outside of the normal CDN since it's bound to a song except 6 default avatars -
		// therefore we're collecting the hrefs from the api rather than assuming they're in /web/img/avatars256/*
		// Arg types               Object
		var setAvatars = function (apiResponse) {
			avatars = apiResponse;
		};

		// Returns the URL string for a given avatar number
		// Arg types                 Number
		var getAvatarUrl = function (avatar) {
			return avatars[avatar] || avatars['Common'];
		};

		// Returns a HTML string representation of an avatar
		// Arg types                  Number, Array|String
		var getAvatarHtml = function (avatar, classes) {
			_.isArray(classes) || (classes = [ classes ]);
			var isNumberedAvatar = _.isFinite(avatar);
			isNumberedAvatar || (classes.push('fb-avatar'));
			var avatarUrl = isNumberedAvatar ? getAvatarUrl(avatar) : avatar;
			return avatarTemplate({
				classes: classes,
				url: avatarUrl,
			});
		};

		// Export the public interface
		_.extend(this, {
			setAvatars: setAvatars,
			getAvatarUrl: getAvatarUrl,
			getAvatarHtml: getAvatarHtml,
		});

	}

	return new Avatars(); // "Singleton"

});

define('songs',[
	'lodash',
	'jquery',
	'pubsub',
	'avatars',
	'loc'
], function (
	_,
	$,
	pubsub,
	avatars,
	loc
) {
	'use strict';

	// Singleton.
	// This is the song catalog, containing songs and song categories.
	// Internally the categories are stored in an Array of category Objects, while the songs are stored in an Object of
	// song Objects.
	function Songs() {
		var categories;
		var songs;
		var blockedSongIds;
		var rewards;

		// Initialize the songs and song categories with the data provided by the server.
		// Arg types               Array          Array
		var setSongs = function (argSongs) {
			// First sort the songs, then index it by their ID
			var songs_sorted = _.sortBy(argSongs, ['name']);
			songs = _.indexBy(songs_sorted, 'id');

			// Set some default properties and remove unused data
			_.each(songs, function (song) {
				delete song.credits;
				delete song.app_avatars;
				_.defaults(song, {
					activated : false,
					visible: true,
					fetched: false,
					freeToPlay : false,
					dataPromise: $.Deferred(),
				});
			});

			mapFreeToPlay();
		};

		// Initialize song categories with data provided by server & player controller
		var setCategories = function(newCategories) {
			var favorites, ftueCategory;

			if (categories) {
				favorites = categories.shift();
			} else {
				favorites = { id: 'FAVORITES', trackingId: 'FAVORITES', name: loc(3878), description: loc(3876), songs: [], classes: [ 'favorites' ], visible: true };
			}

			categories = newCategories;
			categories.unshift(favorites);
		
			_.each(categories, function (category) {
				category.visible = (!category.isHidden);
				category.songs = _.difference(category.songs, blockedSongIds);

				if (category.trackingId === "FTUE")
					ftueCategory = category;
			});
			
			// Remove the FTUE data from categories array to avoid duplicacy & then add it again after Favorites
			_.remove(categories, function(ele) { return ele.trackingId === "FTUE"; });
			if (!!ftueCategory)
				categories.splice(1, 0, ftueCategory);

			mapFreeToPlay();
			pubsub.publish('categoriesChanged');
		};

		//Map free to play categories & songs
		var mapFreeToPlay = function () {
			if (!categories || !songs) {
				return;
			}

			var freeCats = _.filter(categories, {'freeToPlay' : true});
			
			_.each(freeCats, function(cat) {
				_.each(cat.songs, function (song) {
					var map = _.find(songs, {'id': song});
					if (!!map) {
						map.freeToPlay = true;
					}
				});
			});
		};


		// The initiali song info received from the server does not contain detailed information, needed to actually
		// dance to the song. By calling this function we provide that additional information for a specified song.
		// Arg types                    String, Object
		var setFullSongInfo = function (songId, songInfo) {
			// Remove some attributes that are already set, or are not needed
			delete songInfo.Artist;
			delete songInfo.MapName;
			delete songInfo.Title;
			delete songInfo.Credits;

			var song = getSong(songId);
			_.extend(song, songInfo);
			song.fetched = true;
			return song;
		};


		// Static list of rewards for different levels, e.g.:
		// Level 1 -> 20 coins, Level 2 -> Type 1 avatar, Level 3 -> 40 coins, etc...
		// Arg types               Array
		var setRewards = function (aRewards) {
			rewards = aRewards;
		};

		var getSongData = function () {
			return songs;
		};

		// Returns a reward Object for a specific song.
		// Arg types              String, Number
		var getReward = function (songId, level) {
			var reward = _.find(rewards, { level: level });
			if (!reward) { return; }
			switch (reward.type) {
			case 'coins':
				return { type: reward.type, value: reward.value };
			case 'avatar':
				var song = getSong(songId);
				var avatarNumber = (song.avatars || [])[reward.value];
				var avatarUrl = avatars.getAvatarUrl(avatarNumber);
				return { type: reward.type, value: avatarUrl };
			}
		};

		var setPrice = function(price) {
			_.each(songs, function (song) {
				song.price = price;
			});
		};

		// Returns the categories data at any given point of time
		var getCategories = function () {
			return categories;
		};

		// Filters the list of categries to remove those that are explicitly set of not visible (like the Free Songs
		// category in VIP mode) or empty categories (like Favorites)
		var getVisibleCategories = function () {
			return _.filter(categories, function (category) {
				return !!(category.visible && category.songs.length);
			});
		};


		// Arg types                Object
		var getCategory = function (query) {
			return _.find(getCategories(), query);
		};

		// Returns a category if it exists and is visible, otherwise return undefined.
		var getVisibleCategory = function (query) {
			return _.find(getVisibleCategories(), query);
		};

		// Arg types                  Number
		var getCategoryAt = function (position) {
			return getVisibleCategories()[position];
		};

		var getCategoryIds = function () {
			return _.pluck(getVisibleCategories(), 'id');
		};

		// Returns the first category Object that has the given song id in its songs list
		// Arg types                        String
		var getCategoryBySongId = function (songId) {
			return _.find(getVisibleCategories(), function (category) {
				return _.contains(category.songs, songId);
			});
		};

		var getSong = function (songId) {
			var song = songId.hasOwnProperty("id") ? songId : songs[songId];
			if (!song) { console.warn('No song data for song ' + songId); }
			//if (!song) { throw new Error('No song data for song ' + songId); } // TODO: switch to this when songs are in sync
			return song;
		};

		// Returns an Array of all songs' ids
		var getSongIds = function () {
			return _.pluck(songs, 'id');
		};
		
		var isSongFreeToPlay = function(songId) {
			var song = getSong(songId);
			// This happens if the song catalog is out of sync
			if (!song) { return false; }

			return song.freeToPlay;

		};

		var isSongVIP = function(songId) {
			var song = getSong(songId);
			// This happens if the song catalog is out of sync
			if (!song) { return false; }

			return !song.price && !song.freeToPlay;

		};


		// Make the categories that match the query visible
		// Arg types                   Object
		var showCategories = function (query) {
			var categories = _.filter(getCategories(), query);
			_.each(categories, function (category) {
				category.visible = true;
			});

			pubsub.publish('categoriesChanged');
		};

		// Make the categories that match the query hidden
		// Arg types                   Object
		var hideCategories = function (query) {
			var categories = _.filter(getCategories(), query);
			_.each(categories, function (category) {
				category.visible = false;
			});
			pubsub.publish('categoriesChanged');
		};

		// Display only one category that match the query hidden
		var showOnlyCategories = function(query) {
			var categories = getCategories();
			_.each(categories, function (category) {
				category.visible = false;
			});

			categories = _.filter(categories, query);
			_.each(categories, function (category) {
				category.visible = true;
			});

			pubsub.publish('categoriesChanged');
		};



		// Tag the songs that has been bought using coins
		// Arg types                    Array
        var setBoughtSongs = function (boughtSongIds) {
			//can't buy songs permanently
		};


		// Tag the song that has been activated using ppp coins
		// Arg types                    string
        var setActiveSong = function (songId) {
            var song = getSong(songId || "");
            if (!!song) {
                song.activated = true;
                pubsub.publish('songChanged',[song]);
                pubsub.publish('songActivatedStatusChanged',[song,song.activated]);
            }
		};

		// When the song has been played or is interrupted, goes back to deactivated.
		// Arg types                   string
		var deactivateSong = function(songId) {
			var song = getSong(songId || "");
			if (!!song) {
                song.activated = false;
            }
		};

		// Update the Favorites category, by giving it a new name and a new list of songs. This happens e.g. when
		// the controller changes.
		// Arg types                      Array,            bool
		var setFavoritesSongs = function (favoritesSongIds, preventPublish) {
			var favoritesCat = getCategory({ id: 'FAVORITES' }),
				isExistingFavCatSong = favoritesCat.songs;
			var isExistingFavCatLen = isExistingFavCatSong.length;
			var isExistingFavCat = (isExistingFavCatLen > 0);

			favoritesCat.songs = _.intersection(favoritesSongIds || favoritesCat.songs, this.getSongIds());
			var isNewFavCatLen = favoritesCat.songs.length;

			favoritesCat.isAdded = (isNewFavCatLen > isExistingFavCatLen ? true : false);
			if (favoritesCat.isAdded == false) {
				favoritesCat.removeFocusIn = isExistingFavCatSong.indexOf(_.difference(isExistingFavCatSong, favoritesCat.songs)[0]);
				// If the length is same then avoid any new index assigning
				if (isExistingFavCatLen == favoritesCat.removeFocusIn + 1) {
					favoritesCat.removeFocusIn = favoritesCat.removeFocusIn - 1;
					favoritesCat.isAdded = true; // forcefully make it true to avoid any confusion
				}
			}

			if (!isExistingFavCat && favoritesCat.songs.length === 0) {
				return;
			}

			pubsub.publish('favoritesCategoryChanged', [
				isExistingFavCat,
				favoritesCat // songs to update
			]);

		};

		// Arg types                Object
		var addCategory = function (category) {
			categories.unshift(category);
			pubsub.publish('categoriesChanged');
		};

		// Arg types                   Object
		var removeCategory = function (categoryId) {
			_.remove(categories, { id: categoryId });
			pubsub.publish('categoriesChanged');
		};

		// Update the list of song ids for a given category
		// Arg types                        String,     Array
		var updateCategorySongs = function (categoryId, songs) {
			var currentCat = getCategory({ id: categoryId });
			currentCat.songs = songs;
			pubsub.publish('categoriesChanged');
		};


		// Export the public interface
		_.extend(this, {
			setSongs: 					setSongs,
			setCategories: 				setCategories,
			setRewards: 				setRewards,
			getReward: 					getReward,
			setPrice: 					setPrice,
			getSongData: 				getSongData,  
			getCategories: 				getCategories,
			getVisibleCategories: 		getVisibleCategories,
			getCategory: 				getCategory,
			getVisibleCategory: 		getVisibleCategory,
			getCategoryAt: 				getCategoryAt,
			getCategoryIds: 			getCategoryIds,
			getCategoryBySongId: 		getCategoryBySongId,
			getSong: 					getSong,
			getSongIds: 				getSongIds,
			showCategories: 			showCategories,
			hideCategories: 			hideCategories,
			showOnlyCategories : 		showOnlyCategories,
			isSongFreeToPlay: 			isSongFreeToPlay,
			isSongVIP : 				isSongVIP,
			setFullSongInfo: 			setFullSongInfo,
			setBoughtSongs: 			setBoughtSongs,
			setActiveSong: 				setActiveSong,
			deactivateSong : 			deactivateSong,
			setFavoritesSongs: 			setFavoritesSongs,
			addCategory: 				addCategory,
			removeCategory: 			removeCategory,
			updateCategorySongs: 		updateCategorySongs
		});

	}


	return new Songs(); // "Singleton"
});

/**
 * FastDom
 *
 * Eliminates layout thrashing
 * by batching DOM read/write
 * interactions.
 *
 * @author Wilson Page <wilsonpage@me.com>
 */

;(function(fastdom){

  'use strict';

  // Normalize rAF
  var raf = window.requestAnimationFrame
    || window.webkitRequestAnimationFrame
    || window.mozRequestAnimationFrame
    || window.msRequestAnimationFrame
    || function(cb) { return window.setTimeout(cb, 1000 / 60); };

  /**
   * Creates a fresh
   * FastDom instance.
   *
   * @constructor
   */
  function FastDom() {
    this.frames = [];
    this.lastId = 0;

    // Placing the rAF method
    // on the instance allows
    // us to replace it with
    // a stub for testing.
    this.raf = raf;

    this.batch = {
      hash: {},
      read: [],
      write: [],
      mode: null
    };
  }

  /**
   * Adds a job to the
   * read batch and schedules
   * a new frame if need be.
   *
   * @param  {Function} fn
   * @public
   */
  FastDom.prototype.read = function(fn, ctx) {
    var job = this.add('read', fn, ctx);
    var id = job.id;

    // Add this job to the read queue
    this.batch.read.push(job.id);

    // We should *not* schedule a new frame if:
    // 1. We're 'reading'
    // 2. A frame is already scheduled
    var doesntNeedFrame = this.batch.mode === 'reading'
      || this.batch.scheduled;

    // If a frame isn't needed, return
    if (doesntNeedFrame) return id;

    // Schedule a new
    // frame, then return
    this.scheduleBatch();
    return id;
  };

  /**
   * Adds a job to the
   * write batch and schedules
   * a new frame if need be.
   *
   * @param  {Function} fn
   * @public
   */
  FastDom.prototype.write = function(fn, ctx) {
    var job = this.add('write', fn, ctx);
    var mode = this.batch.mode;
    var id = job.id;

    // Push the job id into the queue
    this.batch.write.push(job.id);

    // We should *not* schedule a new frame if:
    // 1. We are 'writing'
    // 2. We are 'reading'
    // 3. A frame is already scheduled.
    var doesntNeedFrame = mode === 'writing'
      || mode === 'reading'
      || this.batch.scheduled;

    // If a frame isn't needed, return
    if (doesntNeedFrame) return id;

    // Schedule a new
    // frame, then return
    this.scheduleBatch();
    return id;
  };

  /**
   * Defers the given job
   * by the number of frames
   * specified.
   *
   * If no frames are given
   * then the job is run in
   * the next free frame.
   *
   * @param  {Number}   frame
   * @param  {Function} fn
   * @public
   */
  FastDom.prototype.defer = function(frame, fn, ctx) {

    // Accepts two arguments
    if (typeof frame === 'function') {
      ctx = fn;
      fn = frame;
      frame = 1;
    }

    var self = this;
    var index = frame - 1;

    return this.schedule(index, function() {
      self.run({
        fn: fn,
        ctx: ctx
      });
    });
  };

  /**
   * Clears a scheduled 'read',
   * 'write' or 'defer' job.
   *
   * @param  {Number|String} id
   * @public
   */
  FastDom.prototype.clear = function(id) {

    // Defer jobs are cleared differently
    if (typeof id === 'function') {
      return this.clearFrame(id);
    }

    // Allow ids to be passed as strings
    id = Number(id);

    var job = this.batch.hash[id];
    if (!job) return;

    var list = this.batch[job.type];
    var index = list.indexOf(id);

    // Clear references
    delete this.batch.hash[id];
    if (~index) list.splice(index, 1);
  };

  /**
   * Clears a scheduled frame.
   *
   * @param  {Function} frame
   * @private
   */
  FastDom.prototype.clearFrame = function(frame) {
    var index = this.frames.indexOf(frame);
    if (~index) this.frames.splice(index, 1);
  };

  /**
   * Schedules a new read/write
   * batch if one isn't pending.
   *
   * @private
   */
  FastDom.prototype.scheduleBatch = function() {
    var self = this;

    // Schedule batch for next frame
    this.schedule(0, function() {
      self.batch.scheduled = false;
      self.runBatch();
    });

    // Set flag to indicate
    // a frame has been scheduled
    this.batch.scheduled = true;
  };

  /**
   * Generates a unique
   * id for a job.
   *
   * @return {Number}
   * @private
   */
  FastDom.prototype.uniqueId = function() {
    return ++this.lastId;
  };

  /**
   * Calls each job in
   * the list passed.
   *
   * If a context has been
   * stored on the function
   * then it is used, else the
   * current `this` is used.
   *
   * @param  {Array} list
   * @private
   */
  FastDom.prototype.flush = function(list) {
    var id;

    while (id = list.shift()) {
      this.run(this.batch.hash[id]);
    }
  };

  /**
   * Runs any 'read' jobs followed
   * by any 'write' jobs.
   *
   * We run this inside a try catch
   * so that if any jobs error, we
   * are able to recover and continue
   * to flush the batch until it's empty.
   *
   * @private
   */
  FastDom.prototype.runBatch = function() {
    try {

      // Set the mode to 'reading',
      // then empty all read jobs
      this.batch.mode = 'reading';
      this.flush(this.batch.read);

      // Set the mode to 'writing'
      // then empty all write jobs
      this.batch.mode = 'writing';
      this.flush(this.batch.write);

      this.batch.mode = null;

    } catch (e) {
      this.runBatch();
      throw e;
    }
  };

  /**
   * Adds a new job to
   * the given batch.
   *
   * @param {Array}   list
   * @param {Function} fn
   * @param {Object}   ctx
   * @returns {Number} id
   * @private
   */
  FastDom.prototype.add = function(type, fn, ctx) {
    var id = this.uniqueId();
    return this.batch.hash[id] = {
      id: id,
      fn: fn,
      ctx: ctx,
      type: type
    };
  };

  /**
   * Runs a given job.
   *
   * Applications using FastDom
   * have the options of setting
   * `fastdom.onError`.
   *
   * This will catch any
   * errors that may throw
   * inside callbacks, which
   * is useful as often DOM
   * nodes have been removed
   * since a job was scheduled.
   *
   * Example:
   *
   *   fastdom.onError = function(e) {
   *     // Runs when jobs error
   *   };
   *
   * @param  {Object} job
   * @private
   */
  FastDom.prototype.run = function(job){
    var ctx = job.ctx || this;
    var fn = job.fn;

    // Clear reference to the job
    delete this.batch.hash[job.id];

    // If no `onError` handler
    // has been registered, just
    // run the job normally.
    if (!this.onError) {
      return fn.call(ctx);
    }

    // If an `onError` handler
    // has been registered, catch
    // errors that throw inside
    // callbacks, and run the
    // handler instead.
    try { fn.call(ctx); } catch (e) {
      this.onError(e);
    }
  };

  /**
   * Starts a rAF loop
   * to empty the frame queue.
   *
   * @private
   */
  FastDom.prototype.loop = function() {
    var self = this;
    var raf = this.raf;

    // Don't start more than one loop
    if (this.looping) return;

    raf(function frame() {
      var fn = self.frames.shift();

      // If no more frames,
      // stop looping
      if (!self.frames.length) {
        self.looping = false;

      // Otherwise, schedule the
      // next frame
      } else {
        raf(frame);
      }

      // Run the frame.  Note that
      // this may throw an error
      // in user code, but all
      // fastdom tasks are dealt
      // with already so the code
      // will continue to iterate
      if (fn) fn();
    });

    this.looping = true;
  };

  /**
   * Adds a function to
   * a specified index
   * of the frame queue.
   *
   * @param  {Number}   index
   * @param  {Function} fn
   * @return {Function}
   * @private
   */
  FastDom.prototype.schedule = function(index, fn) {

    // Make sure this slot
    // hasn't already been
    // taken. If it has, try
    // re-scheduling for the next slot
    if (this.frames[index]) {
      return this.schedule(index + 1, fn);
    }

    // Start the rAF
    // loop to empty
    // the frame queue
    this.loop();

    // Insert this function into
    // the frames queue and return
    return this.frames[index] = fn;
  };

  // We only ever want there to be
  // one instance of FastDom in an app
  fastdom = fastdom || new FastDom();

  /**
   * Expose 'fastdom'
   */

  if (typeof module !== 'undefined' && module.exports) {
    module.exports = fastdom;
  } else if (typeof define === 'function' && define.amd) {
    define('fastdom',[],function(){ return fastdom; });
  } else {
    window['fastdom'] = fastdom;
  }

})(window.fastdom);

define('trackerUtils',[
	'utils'
], function (
	utils
) {
	'use strict';

	// Assorted tracking utility functions
	var exports = {};
	var temp_wa_data = [];


	//Track all events from gui & jd
	exports.triggerTracking = function (type, playerCount, dcid) {
		switch (type) {
			case 'full-screen':
				this.trackClickEvents(playerCount === 0  ? 'Action - NSM - Full Screen Mode' : 'Action - SM - Full Screen Mode');
				break;

			case 'how-to':
				this.trackClickEvents('Navigation - Room Number - Connect Smartphone');
				break;

			case 'player-join':
				this.trackJdnowEvents('Scoring Mode Pages', 'Coverflow', dcid);
				break;

			case 'play-btn':
				this.trackClickEvents('Navigation - Room Number - Song Selection');
				break;
		}
	};


	//Arg types							 String
	exports.trackClickEvents = function (trackData) {
		if (!window.is_screen_tracked) {
			return;
		}

		if (window.tc_events_100 === undefined) {
			tempEvents('clickevent', '', trackData, '');
			return; 
		}

		tcClickEvents(trackData);
	};

	//Arg types							  String		String
	exports.trackJdnowEvents = function (trackSection, trackAction, trackDancerId) {
		if (!window.is_screen_tracked) {
			return;
		}

		var trDancerId = (!trackDancerId ? '' : trackDancerId);
		if (window.tc_events_100 === undefined) {
			tempEvents('pageevent', trackSection, trackAction, trDancerId);
			return; 
		}

		tcJdnowEvent(trackSection, trackAction, trDancerId);
	};


	//Window function called for tracking from tracker file
	window.sendEventsToTracker = function () {
		var tempLength = temp_wa_data.length;
		for (var i = 0; i < tempLength; i++) {
			switch (temp_wa_data[i].type) {
				case 'clickevent':
					tcClickEvents(temp_wa_data[i].action);
					break;
				case 'pageevent':
					tcJdnowEvent(temp_wa_data[i].siteSection, temp_wa_data[i].action, temp_wa_data[i].dancerId);
					break;
			}
		}

		//Empty the temporary array after all tracker calls been made
		temp_wa_data = [];
	};


	/** Tracking idle data events **/
	// Private function
	var tempEvents = function (eventType, section, data, dancerId) {
		var tempObj = {};
		tempObj.type = eventType;
		tempObj.siteSection = section;
		tempObj.action = data;
		tempObj.dancerId = dancerId;

		temp_wa_data.push(tempObj);
	};




	/** TRACKING CLICK EVENTS sent to server**/
	// Private function
	var tcClickEvents = function (data) {
		tc_events_100(this, 'clickevent', {
            'ACTION':'Just Dance Now - ' + data
        });
	};


	/** TRACKING JDNOW EVENTS sent to server**/
	// Private function
	var tcJdnowEvent = function (section, data, dancerId) {
		tc_events_100(this, 'jdnowevent', {
            'ACTION': data,  //pageName
            'SITESECTION': section,  //Section
            'COUNTRY': country,  //Country
            'LANGUAGE': lang,  //Language
            'DANCERID': dancerId  //DANCERID
        });
	};


	return exports;
});



define('text!html/connectionLost.html',[],function () { return '<!-- ugly svg codes included here since this page works offline & images won\'t be downloaded -->\n<div class="connectionLost-wrapper">\n    <div class="main">\n        <div class="logo">\n            <svg version="1.1" id="_x31__copie_2_1_" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px"\n         y="0px" viewBox="0 0 595.2 127.7" style="enable-background:new 0 0 595.2 127.7;" xml:space="preserve">\n                <style type="text/css">\n                    .st_logo{fill-rule:evenodd;clip-rule:evenodd;fill:#FFF400;}\n                    .st_logo1{fill-rule:evenodd;clip-rule:evenodd;fill:#FFFFFF;}\n                </style>\n           \n                </defs>\n                <g id="NOW_copie" >\n                    <g>\n                        <path class="st_logo" d="M420.9,63.5l-11-37.1l-16.6,0.1v74.9h16.2l0.3-42l11.2,42h16V26.4h-15.9L420.9,63.5z M465,24.7 c-16,0-22.9,8.3-22.9,21.2v36.5c0,14.8,9.8,20.2,22.8,20.2c13,0,23.1-5.5,23.1-20.2V46C487.9,33,481,24.7,465,24.7z M468.6,86.7 c0,1.7-1.6,3.5-3.4,3.6c-1.9,0.1-4-1.7-4-3.6V41.5c0-2.5,1.3-4.1,4-4.1s3.4,2.6,3.4,4V86.7z M551.1,13.1l-15.9,53.3l-0.2-40 l-15.2,0.1l-11.7,40l-0.4-40h-14.7l0.2,74.9H511l9-27.5l0.1,27.5l17.8-0.1l28.7-88.1L551.1,13.1z"/>\n                    </g>\n                </g>\n                <g id="Forme_1_copie" >\n                    <g>\n                        <path class="st_logo1" d="M40.8,85.2c0,1.8-0.9,2.7-2.7,2.7h-9.8v13.4h13.6c9.3,0,13.9-4.6,13.9-13.9V26.2h-15V85.2z M82.5,86.4    c0,1.8-0.9,2.7-2.7,2.7h-1.6c-1.8,0-2.7-0.9-2.7-2.7V26.2h-15V88c0,9.3,4.6,13.9,13.9,13.9h9.1c9.3,0,13.9-4.6,13.9-13.9V26.2h-15 V86.4z M132.4,62.4l-12.9-9.5c-1.8-1.3-2.6-2.5-2.6-4.8v-7.1c0-1.8,0.9-2.7,2.7-2.7h1.2c1.8,0,2.7,0.9,2.7,2.7v12.3h14.7V39.5 c0-9.3-4.6-13.9-13.9-13.9h-8.2c-9.3,0-13.9,4.6-13.9,13.9v11.9c0,5.4,1.4,8.5,6,11.8l12.9,9.5c1.8,1.3,2.6,2.5,2.6,4.8v9 c0,1.8-0.9,2.7-2.7,2.7h-1.4c-1.8,0-2.7-0.9-2.7-2.7V72h-14.7v16c0,9.3,4.6,13.9,13.9,13.9h8.4c9.3,0,13.9-4.6,13.9-13.9V74.2 C138.4,68.6,137,65.7,132.4,62.4z M143.7,39.6h5.9V102h15V39.6h9.6V26.2h-37L143.7,39.6z M336,86.4c0,1.8-0.9,2.7-2.7,2.7h-1.9 c-1.8,0-2.7-0.9-2.7-2.7V41.1c0-1.8,0.9-2.7,2.7-2.7h1.7c1.8,0,2.7,0.9,2.7,2.7v16h14.8V39.5c0-9.3-4.6-13.9-13.9-13.9h-9 c-9.3,0-13.9,4.6-13.9,13.9V88c0,9.3,4.6,13.9,13.9,13.9h9.2c9.3,0,13.9-4.6,13.9-13.9V68.2H336V86.4z M370.7,69.9H383V56.5h-12.3 V39.7h12.9V26.2h-27.9v75.1h28.1V87.9h-13.1V69.9z M293.5,62.6l-9.3-36.3h-17.9v75.1h15.3l-0.3-37.2v-3.4l10.4,40.6h16.9V26.2h-15 V62.6z M388.2,28c0-0.6-0.4-0.9-1.1-0.9H386V30h0.6v-1.2h0.4l0.7,1.2h0.6l-0.7-1.3C387.9,28.7,388.2,28.5,388.2,28z M387.1,28.3 h-0.5v-0.8h0.5c0.4,0,0.6,0.1,0.6,0.4C387.6,28.2,387.5,28.3,387.1,28.3z M387,26c-1.4,0-2.7,1-2.7,2.6c0,1.6,1.3,2.6,2.7,2.6 c1.4,0,2.7-1,2.7-2.6C389.7,27,388.4,26,387,26z M387,30.6c-1.1,0-2-0.9-2-2.1c0-1.2,0.9-2.1,2-2.1c1.1,0,2,0.9,2,2.1 C389,29.8,388.1,30.6,387,30.6z M224.1,84.8V42.3c0-10.8-5.3-16.1-16.1-16.1h-21.1v75.1H208c5.3,0,9.3-1.3,12-3.9l-5.6,17.1h16 l5.7-19.2h10.1v6.1h15V25.9h-17.9L224.1,84.8z M209.1,84.3c0,2.9-1.3,4.2-4.2,4.2h-3V39.1h3c2.9,0,4.2,1.3,4.2,4.2V84.3z M246.2,81.7H240l6.1-21.4V81.7z"/>\n                    </g>\n                </g>\n            </svg>\n        </div>\n\n        <div class="character">\n            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="624" height="820" viewBox="0 0 624 820">\n                  <metadata><?xpacket begin="Ã¯Â»Â¿" id="W5M0MpCehiHzreSzNTczkc9d"?>\n                <x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c142 79.160924, 2017/07/13-01:06:39        ">\n                   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">\n                      <rdf:Description rdf:about=""/>\n                   </rdf:RDF>\n                </x:xmpmeta>                                                                                             \n                           \n                <?xpacket end="w"?></metadata>\n                <image id="Layer_0" data-name="Layer 0" width="624" height="820" xlink:href="data:img/png;base64,iVBORw0KGgoAAAANSUhEUgAAAnAAAAM0CAYAAAA7rR9tAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAABmJLR0QAAAAAAAD5Q7t/AAAACXBIWXMAAAsSAAALEgHS3X78AAAAB3RJTUUH4wMBDiAnmQhi+gAAgABJREFUeNrsnXecZGWZtq/3hAqdc0/35JxzAIacJAlIEAyIGHHdXVfdXXVdV/ncoLu6yoo5YE4IqKBkhjQwMDnn2D3TOVdXOun9/nhPdVf39AwziMwA78Wv6KpTJ1f/au5+wv0IKSUajUZzmiGAKmARMBYoACLhww5/SqANMAEr72EDB4HHgCYgONUXo9FoNK82Qgs4jUZzGlINvBO4HKgNl4kRHr1Ac95rI3wIYBtKxL0EpE/1BWk0Gs2riRZwGo3mdEIAVwPfZ1C4/SX0AM8CK4EdQDewCeg/1Req0Wg0fwlawGk0mtOJK4FvAJP/isfYCHwA2Ao4p/qCNRqN5pWgBZxGozkdMIALgR+jat4AVeTW3SU51OjjZCGQ4HmSggJBeZlBPAbdPQGuC0Gg1h9Va1JfJ17ueE3An4CvAbtO9cVrNBrNyaIFnEajOZXYwDzgYlRUbFruDceV/PFBl2ee9WhsDAiCXGlbgGFKCuKCWAwyWYnngpTq7ZJiwbRpJm+/PkLdKIFtC4QAw1CPYfQB9wA/BDagI3IajeZ1ghZwGo3mVCGAjwH/ClSgukkB8Dz46c+zPPBnh4wjEfEeZLQVGemFbAUyXQB+BIlAGD5GcS8ilkS2TAGnnICAWEwyut5g1ChBUSGMHWtyznKb0fUjRudagN8B/xU+12g0mtMaLeA0Gs2pYirwDFA3/I0DB3z+5fNpersNgolPMPNd/0PVlN0EpotIF+N31UJWibjGdIr2WDtWQR/Zlllknr4eufZ6TIoxbDDCsJthBtTWCv7mwzGWLraOdU6bgX8CngbcU32DNBqN5lhoAafRaE4F1cB3gevzF/b0So40BTz0sMtzK33Sbj8LPvVe3n5uHI8oPgFSxd0g/H8EgwiCJB08372NpGWT7S6nZf0kUh0V9LRXIdsWIw6cS5Asp6DI54YbDc5dbjNpojHSuXUDfwv8+lTfJI1GozkWWsBpNJrXGhOVOv0aqOaDfft9nnrG46XVPo2NEs/3MSJpgnn3Eb/lE1hFZYyy41xQUUZdZHzozKv+n/sGMzCJh/6+HkkcMjj4NGV6OdSZoHn3ZI6suoLMuquIueMpKvaYOsXg3HMszjnborBgSGo1gfKhewwdidNoNKchWsBpNJrXGhP4e+B/gwDj0cdcfvDjLIk+cIv24k18gurznqZ+8kFGl/uMKwuoFdMJTIllghCgyudODBWlK8AiwKWD53sbeeKuWwi2XY3RM5VMVjBhvOC9t0Q571yLSGTI5v8F3IEWcRqN5jRDCziNRvNaYwJ/A3zd87B+cHeG3//eR9StZvxnPsT8aQET/ErKzAoKqSdBhgwJBALjJITbSBgYFGCwydnCyq0WzY/cjnju/WCaxOMBb7nE5m8+HAtFIqAmOHwZ+OKpvmkajUaTj3nHHXec6nPQaDRvLgzUjNPLgwBz82aPrbvSlF70a/7tMkkN1fSLPlIiQafXQNSIYRJBvMx/J4JEkiWg3hzPojqDnnm/pJldiI7J+H21bN/p05uQzJ9rYak+Bxs4G/CB1eFPjUajOeVoAafRaF5rBLAQuFwGWBs2+WzfLvA6xrA6tY+Xko28sM9nY4NkTWcPfeIAU4rrkPiAB3hI3PCRJSCLxCFGARYmJiYG1oCkGy7wBODiAnHmxaYwat522ifeQ9vuWcT6J3GowaOs1GD6tAFXExNYDCRRc1U1Go3mlKNTqBqN5rXGAN4P3BUExJ5Y4fDDHzv0dBn4nkHguRiGANNFlB9CzHma6Zf+hsjofQTCRSIJJEgp1E8k0nQpjZcgDKixAiDL+PgM6q3xeNJDIvGFRLU8CCTquQQKKCTBdn61KUvTd76OceRcysoF3/jfODXVQ7pUPeBfgG8CmVN9EzUazZsbLeA0Gs1rjSAUcEDcD2DFCpeHHnHp7ZMgwHMlvb1qyoIwJIgsfqyZoKAFDA8CEwIT6VtIw0OM2YM5ZQNGURNSCoikMev24Jc3URb3mBwXTCgcR4lRjid9amL1xEUhPj4SiU2MLC3cvaaZlm99F7N5OeeeJ/nUP8aIxYakZ5Oo7tn/QE9t0Gg0pxAt4DQazWuNAK5BCbix+W8EEgwB/UnJli0+m7d4bNrqc6RJQmAgAxMhRdiEKpESHBd8xwR8ZKQHYQQI28MobSeY9ysKL/0ZpeXtjImGB5EQM6PEDZPpxUuIG4UIIYhQQK9/kN9sStH89R8Q7ZvLsmUWH/5AlLpRR/nFfQ34NyB1qm+mRqN5c6IFnEajOVVcDdyHahQYkSCAvj7JocaA3h6V8jQNMEwwTUgk4MBBn8OHA1JpSRBAol/S1RWQTkPgRPBm/4pRt3yOCaObyJdhErAErE1AJohxVdUUFpfMoi/Yy/fvn0T2Zz8g8E2WLLH49D/GKCkZEonzga8DX0CLOI1GcwrQAk6j0ZxKvomyFBksUMubiXoypNPg+5JEAvYf9Pn9Hxy27wgIfAOu/AxT3vY9qmKOMv5VmVpsAzwJO9Kwogs+PW4SZ5QtYkvfYX7777cQ3/ohpOmwZLHBRz4UY8yYIZE4CdwO/JBBP2GNRqN5TdBdqBqN5lSyFjV/9HHgQWAFsB9Va1YEFJ7ojmwbIhFBcbFg3FiDs8+26ekJaGgMcPujFM57kvLSBDIUb0KoWQ4+UBeBt5RDt99PzIwyuXAU9vJH2Bt/DrdlDM276nn6GRfPl0ybOmAxIoCLgSZg46m+kRqN5s2FjsBpNJrTiVyeMvfFVIiqkytAaa0A1Q1aCcwIH5V56y4Dxud2tm6dx//cmaXHP0D8b29myrTtFJkg5LEP7gQW80sXMDEyld3eTn6zvZvOO79BSeslGLbHu98R5e03RrCtgc16GJydqr9QNRrNa4KOwGk0mtMZF+gAmoFWoC183QCsR80qfRR4CBXBC4CJhKKuv1+yapVHImHA2A101W6nLnL8QVy2CGhIN9HmNbEgvoSa8h7WTLgfe/tCRP9YNm/1CAKYN9fKTWyIAWcBq4DGU33DNBrNmwPjL9+FRqPRnFIyqJFX/cBXgZ25N8rKBRWVQKYc97l3EnFK8V5mZwEQM6Hb6WJFzxNMjkziU/MqSH7gcziFW5BehHvuc3j0sSHjUeuBL3GchgyNRqN5NdECTqPRvNHoyD2pqjRYutjGtH3EgQtIb1lKb3BiO4kYkPa6ebLrMSwjxm3LM5R++lZk+U4CX3D3z7Ns3DRkstZZwEeAWlQEsAoVndNoNJpXHS3gNBrNG43dqDo5DAMuOt9idL2BkMW4L92Ikyo44R1FTDCFw3Ndq7GSncyfspfYOz+DLGilrxeeWDEkCmcBdwAPo5oxngV+Csw/1TdEo9G88dACTqPRvNH4I6qTFYBRdQaLFxkYkTTm/ivobR6Xq107LgLwJWR9KDVgb+YIhgtzzn4U44Ivg5Rs3RrgeUM2qUDNeZ0HzARuQnndzTnVN0Wj0byx0AJOo9G80dgN/AnVtQrAeefalJeBcEtIrLsMJxAvK+JMoNOBbzbA+jQUG6o+Li4kY27+GW7xJpqaBYcaXjYnOxn44qm+KRqN5o2F7kLVaDRvNCTQDlwBlAGUlRrs3OVz+LBECEH98vswTX9g5SEbS7XMBwotONQL+3y4pBSSgfKPM4RPZ2DibrgEX0I0Avv3Bxw4qB6OIyktMTAHLYlnhue0Dm01otFoXgWsv3wXGo1Gc9qxA2USPAEgEoGLLrLZsMkn0TGWdLaAiO0QoATbSEhUFK7YgoZO2FkJVaZKq9aYULv8zxx++lZefGEZDz/sIKULCAwiVFUHXHShybXX2NTWDCQ6bkB5xXWf6puj0Whe/+gUqkajeSOSAf4TOJRbsHShxYL5JrJzDIf2TUceY2BXbqYXqDFb54wC1xPs6RVYBsgAkj5Mqmyh4vov0l5wH+a7P8jYO89k2tfPJP7Wz9LrdnLf7z2+8MU0XV0DCtHmFY4J02g0muHoCJxGo3mjshHV0PB3gBGNwdzZJi89X0Ji3yI6F7xEBUqs5arYJBDkReRMAXEToiY0Z8HNW9EXkrnnP8HUK5/AS0CFhJgN1R/cwbrSduT9d9LbG6M/JamoEKC/bzUazauIjsBpNJo3IgYwHXiavJTlksU2ZRUCb91lJHsKscxwHqpUj2BYOtWXKmQWK5Y0pMGRg1McDAm4UNQLZRJcCQkXSjwYu/B5ZFkLQgyZ+mCgv3M1Gs2rhP6LUKPRnO6MB94FlKL0kIXSVfmPBPAMapxWOfAO1GzUW8gz0x03VjB2fED7mkvp2LGEuuXPDKRLh5fC5YSXKWB+kaA1KYibEj9Qos9gsNkhf2NpgZuowm0rQlYPqbEzOf4UL41GozlhtIDTaDSnM5OAu4Arw9fH6uCUwLuB64APAbeiNJZgmGi6+EKDrZtsEi9dRs+ilZTavqp7G+4GEkbPJDA1DkeSYAk1nFUc72QM8DurEG4ptgWWNXyvGo1G85ejw/kajeZ0ZRzwXQbFGwwKsuEPAxgF/AR4D+qP05yAG8LMGRaxQgfryJkkksUgj+5ElahlgQQ/AE9IdnVCc1Zg5FTdcQgCEwKL0jJBednAKegGBo1G86qhI3AajebVIiem8hs5XynVwJ3ApbkF2Sx090gcRyqvNgkFcUFlJZjmgEianr+TREKSToWpztAzpCAuKC6SpPonkDg0GWfuOkxUx2k+uV36AZRGobxQ8rsmyScnQn/eCNRcOjUfQ3hIJJGIwLIHzi1LnrmwRqPR/CVoAafRaE6GSlR6spLBKJfF0Lq0h4EHeOUiTqBq2AYib+2dAXd9K8O+fQFBmOr0fTAtydLFNre9J0JFxaCMkhK2bPP5yU+ztLRKBAZ+IDGMgEsviVBZBS3tpfTunUPLjPWMi0i8YScRhA0LroBKC2bEJDuDkY1/8+N8MgBh+gjDJ/BMHEdiWwLgMNBzqj9AjUbzxkALOI1GczzGouZ75joo3wP8DcrT7FjcgBod9U1emYirAG4DorkF993v8uyzEI0IiLQTmElMrxKZqeDxJx2yjuQTH4sRiyoltXN3wPd/lGXvLhUUFEVtSDcOqQoeeiTL6HqBwMTsmYgnUKJQDtqJGGLQXsSQkA6guhAOdL18CE1KcKWPGXfxg0h+bZ2HRqPRvEpoAafRaI7FcuB/UYPZjbyHBUr05PKlQpA/W7Qq3K4DNXngZJmAEo4ANDVLnnzKI1bSRvztX+TpsU+SMV1Ks4XM3nEl9iP/yjPPFGEZWf7pkzE6uyR33pXh4H4wJryAuPoOOsauB6eI2OrrMF68nUMHZ2CZBt6LH6C7vInspT9hbMxRNiICRDB4PQJwsjCtDFY1wtoeWFoG2bymBz+M1hkCsj70iiym4eP7QqVuFVF0E4NGo3mV0AJOo9EMpxz4CPBJlBg7isdXuGzY4CEQuB54Piw/0+Si820MVapvAz9CWXnczWBw60QoCbfH9+HxJxx6+jPU3Ph5nEt+QU8TYECmBLyJd7HYCxCP/icPPRpw2Vts4gXQ0S6Rdhfi+s+wdsxaOrpAyhSRhd9jyaznKfrx9zDaliIMi+BPXyId7yR1yf1YUg7pRhUoIScB6UPWhbY+sCuHCjgIhSyQ9kA6cfAjaulgDHLEpgqNRqN5JWgBp9FohjMB+Bh54m3vXp/DR1T9WTYL3/puFteTCMsNOwRs1qx1aTwS8O53RImoBGsc+FdgNbD5JI4/kKX0fejpBRHtp2jhs/SmB1cSEjoT0HPRb6jacx6RfZfz5AqXq6+KYNtgiVYailpp34Py/jDAkYIXiray6APvpvyBT2AfuAGRKSf77K20zn+W4rL2YZpLKa5cPZxZCC0JaHOVMh0pP2waIJJlGH4hhukjBkvztIDTaDSvGlrAaTSa4QxprNy61eeb38uwbx8YgY0wAhAmsnQH9tXfxE9FCJ55P17HfH53r0M0Au+6KZqTKuNR9WyfPInj++RF7GRggNVHUNiZn6ZV4knCVtHJhW/7CuKH01m9dhpjx7nEYtDXW0DULRwQbyqcJiEBWzlIxW2f4vx9T9J1/4dwIg0E2SgJX62CVF2puXbabBAa98bgcBc83gvXlo588m6yBG/rJQhDUBgXFMQH3tLftxqN5lVDf6FoNJrhBOQJqBde9NizO8Aq7MWc/iKyow4n5RG77XO4E17AsySxGc/ifP97mB1LuP8PLjOmWSxaaIKSTbehulKfPonjDwS3TEOA5SENH8sYTGka4RpOAIcnrqf23G/R/YdvsWWbh2GA55YzM1OPO20nW/fleb0Z4CSgc6/L6jEPMP2LT1HdVUom0okp4YUUhMlPJGBL8ITaPmWBfwi6ylGJ5mFpVMOA9s3LCPZeTsTOMm68jWUNqE4P3cig0WheJbSA02g0w/HJE1CWDcIQyHm/JvGhTyEbaynAJll/mOaEIJuVlI/dQdXN/4K8+6f099fw8OMOc2bHiUQAJXXeC+wEWk7m+MJQjQEisJCBGMg/2hLscJaVFHAgFTDqyh8jn/17tmyagudLpMiSttL0mQx2JORUnAFuNuDAfmhLJJgzNkGFUF0G3WnwTAak1pCpC1KAL0lnBuek5uNIQd+uRZAtoabe4JILhzTrJtACTqPRvEpoAafRaIYzJAIG4auusdiJElI1rXR7kEmCFBJbQLYf0lPWUjj/PsSaj7J2jc++Az4zpw9InLeGP1sZ9IuzUILuq4CTdzQvPAdVd2ZJ8G2kb2GgDHZz3rg5XZaW0Co8xi3/Lck/fx4j4hGZsYI15dto3M1gEVs+pjpKsh3W9EFtveD8GogYAq9VQpF6X8rchmEYzpS09cKaLri0ChL+wLs0ZgSJrlrwo0yfbjBxwhCJt+VUf7AajeaNgxZwGo1mOB5qagAAxUVgmBJj3zXYv23HvOkz9JLCl6ouLIvSQn1BFvvcHxHZcQW97ZNZs9bLF3BVqCjccBklw13cyWDzwkAKVwgwLTUpKyekBvzZGFSZMeBIAsoW3U/s2fcSSIFx9bfoSverqznWEKuw0i/IQvMBeDYFXlSAI6FfKOFn5PKkQq1fBByBVaUwpxxKwtUk4LgRZKIegaCyUmAPBuB6gN+d6g9Wo9G8cdCzUDUazXCGpFAvPD/CmWdYIAKMDe8ksuZqAtRg94DB4FbCB2/CHsTyH2AENrt3H+UcMlIHpkCZ/n6OQZ+0gVFcQoBpgpDmgEjKbWQN37GE7sp9iGXfJLvwW8TG7yQqg5FbReWwMzIBQ9LUJnGOBOqi0gFkJCSBFNAvIRFebAZ6U3D33sH7IA1IN9ch2mZgWlBTOeTrtRT4f0DZqf5wNRrNGwMt4DQazXCGNDFUVQk++L4o4ycYSD9GbNUHqTBtnGBQSOX80jo9iVj6EDJ+iB07JMmkxPWgs1PS0BjQ2Cg5eCiguTnIHyBfAHwG+BQwBiWnfMJ9quHx5qCVh4BCoVbK7UKihFRf4GK+9WeUXPdTgiBDRSGDkvB4qCBfuFM5uEyEdyJDKOIYDDkegWQSuvzBmybTBchkKRFbUlomhh/h7cAfgEtO9Qes0Whe/5h33HHHqT4HjUZzepEJH4uAYoDSUsGY0Qbbtvn0HhpHrLATd/oa3EDVowWqth/Xh1RxgrL2etyDSzjQ4PPiSx733h/wxGMWTz7ls2IFPLoiy+49HpMmWpQUC1A68AygDZgFzASqhIBtO3y2bobost8SLe+kIaXEmilUd6gVWoREw5xq1sgQj2bwA4lpQV0lRE2oKIKMDfWlkHLD8Vk5kZaPGPZcAmmGqkVHPXwbqIApMXXtTjxL36Yz8Tum03DEpacHCgsFpWUCQ2CiPPZuRYnWleimBo1G8wrRAk6j0QzHB9YCzwLXoKq+qBtlcPZZFjt2+3StuoBon0Fs5ot0BgGWUL5pAF4QULjoCex0jCOrzqThiEtvbC29s79H16SfkCzdiNM8jr1bS9l/0OMtl9i5ZgQbqESJNwnUArS0BKxdY5OO7cGYto6DaUlUgm2D54DlQCoLOFBeBHagziUZhD0HAooLoagAqkugNA5lZdDZycDorONioHxFXFSYLUyh4qv3IoUwu1wJWBnJ0pWII/Ytp6+jmC3bHdZv9IhGBFOnmPk+dgvDPa481R+2RqN5faIFnEajORZNwCHgIlTEiMJCZUy76qUA4/BSrIIW/BkbcTPgi0Et1CfBHL+JIiuFmPUInZf8LxsX/IkjE7fSO/0FxpQcQe68lERvlIsuMCkqGlA2nahEpQ2MAnA8WPWiT3+XTXzJEyREkqgJqRS0NUCqB/wEZPrA9aCyFCJ5oiy/qM4I6+jiFpSUQGsHxy8kyUXoTFSnhB8+HJSIi0FPHLqjMDOuxmglqhoJivZCAKK3nmS/xY5dPgvnm1RWDBzMBpYCzcCmU/1BazSa1x9awGk0muOxEyVhBuq2qqtNnlvp0tdrE+yeT9HCx3ErOkm6oWcb4RSDSIb4tFWkJqzmSLybZACZQJDyA/wJOynvKsfbt5ylS03q6weEjQtsR8mqiQBlpQbrNzk0NxRijF6FNfoAwoD2XkglUMlXQz2yKUi7EC2AIpv8OrshBBLikbC0LYkSaOI4j1x9nItKejrh8xhQDG0mXFwOSR+knaZ45lbiSx9Elm8l6JxAumkiDUdcli2xiMcH1GUUmIyaGeuj0Wg0J4FuYtBoNMcjAL4CPExYBVZYALd/MIowfAxvLOL73ye6bz62xcAcUQF0+9AV+Bz2Ja6EqABTqhX2B9A4bQUY3SQSQ1RWaXicWG6BbcOkCSZ+upjUofkURSCWq3kbwduttxe27VECzzqGfYgQ4PkqikcUFQ+zUWJwpEfum7IMldiNhMt9oFf99CTEQ+Nhw4XqaJaJFz5Exe0fwB//DNu2Cn74kyzpzJDrHQecdao/ZI1G8/pDCziNRvNy+MDHga25BUsXW7z9hijC8DDaFlH03W8zPj0R31CKz0FpqzZfOXEIlCKLCjXsHQ+cgk58O0lTyxC7kUJgHrAHlcIFYNpUE9+zoGU+VjJGgXlsazcMIIA9R6CtB6J22MmahwgvKi0ZWbCZ5M1PZVAo5gzoxqKmvMbVtSCg3VX7HGVBpQVeABlHUjfmAJXv+Dwy2sNzK11WvTikb6EEuJKXr8TTaDSaIWgBp9FoToTdwN+h4k0IA259d5Rb3x3FMCVWYjHWbz9BTZXAZnBCQgQV2IKwBo0wrekD1b1IEmzZ4uMMzmEwUCOnBNAYbkZtrYEhBP6B2Xj9NdgGiEKU2BopTWoqrbXnABzpAN84WsQZQl3HgHQaqSN1JHIirhhlehJG4WR4kQ6QDRsohICsB7NmboQxm/A8waYtAf5gwlQAVxCmizUajeZE0QJOo9GcKM8Cnyec0mBZcNONNmefZZP1fcSuyyjZPpNRMRBC4DNYPhYQ9gGIsNjLBb+6BatuP3v2+uzYNSQqVY6SR2lCm41RtYLSEoHROwl363kEwIRSiMU4vsdbFPY1wuYDkHLANgcN7oLck+MZ/eaeyxHeDxisg+uDllCEDnchcQLVnVowaSVSCrZudentHRJ1nIyyTtFoNJoTRgs4jUZzMnwH+G9CHWRZgssutSkrDzCd0RjrrwRpYMrB7s9c/T+ogFksfKPbyWDMf46ePo/de4YY+0bCTdei+gwoLRXUjhJIP46/4sN4zWMYLyBewsub9Npqbuv2A5BIh80NDJoPDzCSSDsRCtUZr05BiS0wRYm6lnDElimgNWtRPmsd0o3Q2iZ5YoWbvwcj3ItGo9GcMFrAaTSak8EFvklefdrsWSYL55sIDETjLHBjpHw58OUiUGnUnIVaTtW5WQgmb8GwXNo7hqQVi4B1wLbccQwD3nKxTbzIx+xchP/i9TiBzagiEAXi5cWWCW4AOxpge6NaFISz6ZEgwgdSDPaDjhR5GwkDsKCtER47IphUVIwrB2e1qiikx8RFz8GS7+Am4zzz7JCmU4ESrRqNRnPCaAGn0WhOlk7USChApTHnz7ewogFG2wJKkmMZZUGfP1TE5Jo9c6IoE8D+SDPCztDbA643oJYqw1UTwO8JJdW1V0d429U2phUgnvo03SvewdxyqBslh87VOhaGSme29sKWA5AVcMlUuHhK+JgmiOVifwEnTeDBS/sCfrLrCLXx0NiXXE+ERNhJ4m/5Kb7v4foy/3RzVsG6kUGj0ZwwWsBpNJqTJQDuRJnQAjBvjklxkUR0T8P92k8Y1zON0jxJkquFywm63F5SIoM0Xbp7ArLZIcc4B9gC/AJ4EdRQ+yuviDBxgoHMluE9+RGcjnoWVUORxbFF1wijspJZ2LEP1jfAxiOw4TBsaJA42RPNmzKyV1wUdh6ATl+lZ22hnrdlwQ/AknGQNjJguOA0T/zAGo1GowWcRqN5ZbQBe3Mvxo4xuPKKCAEBZu98gl//N5X9dSR8MMVQBSVAxdQkeMJB2C5NzZLu7iGKZi6qx7MN+BaQBNXMcP21ESLRAKv9DPofvoVSDKprGfnb7FgxLQG+A+090Nk7+AhcTmzw/bH2a0AqCrtalSecJ+EPDdDhQHNvEX0P34Jpy/x0cW6PNhqNRnMSaAGn0WheCQlgc+6FZcE73m7z9usjWBEP48AlVD/xIXo8Y0hgbLg2CiL9iHiCREJypGmIqqlBua1lgBXAS7k3lp9lM3e2ibQzsPmdJA5MY0YZxCs58cYDGAwJDvd6O9Hat5EI93OkDxr7odeApANVEYPWh/4GY+eNiEiaKZON/AaK3LAujUajOWG0gNNoNK+UnwINuRemKbjpxghnLrMIpCSy90omGsUD86wEKqVo56UPHZnBK2jB8wTbdxyVA12AKp0bDzyd2yoahSsusykpkZiJiaSffReGjDClSNmXnBTHEmu5OrjgGO8dDwt298N9++EPO0E6JqOMIjLPvQ9Dxli80OSDt8Xyt9C1bxqN5qTRAk6j0bxS1gIfA47kFpSWCt5xc4S6OkHQOJtp+88nFgU3FD0myugWAAGO4eBWbyHwDHbs9Mlkhuz/BuBfgbcBV5MnnRYvMpk100AGBmLNOwj2LWFUNUSL5OBaJyOLjhd1O9FoXF4Er7YIRHeEzL4YJH0cGcdLlDNxgslHb49RUzvk5BLArpM4kkaj0WgBp9FoXjES+CNKZA1IrymTTG66IYpl27iPf5hqr5iUCX0SPATZXGRLgiMgNXYdSEFXl6S1bUjIqx74KPBpYAl531eFhYLrrolSViYQmbF4v/wKBYdmsGAsyvr3lUohydFi7kS6UvP1WADzq+HqyQKaBLUFMCVmEAQmixYajB495Gs3AXwNePS1/eg0Gs3rHS3gNBrNX8ovgd/lLzj/XIs58wJEw4VEf/4fzAuq6MyCJSRVOcuPsJEhXbWLwG6noxN27BwykcFE2WuMNLaeefNMrn5rBDPiYnYswL33SxRlqxFFr/HVDz8zAxp7obAmC2YREwqjuH6EwC0gHh+ycgbVoPHl1/iMNRrNGwAt4DQazV+Kh7L72JhbUFgouPE6G8PyMda/H+vuL1FXGEHmxjOEES4ZQFNRE360ATcT4ZHHXBKJo8Nn6aykpTWguSWg8UiA46hZpm+/LsJVV0QwTB9/16XYL17HkulgxMUr8nIbwlEdFye4nQl7u2CfB6NHjyXjFrN740KidpSamiFfua3hfXNOcM8ajUYzgHnHHXec6nPQaDSvXyag0pzvQqU8iwn/MKytNTBNwZYdPqJ1DjWd9cTnPUdzkCXjMZBGJZ6mftwR7F3n0dZcQDIpWTDfwrIgmZI8+KDLF/8zwz339/PHP6X54+8Fj63I0tomicXUhIbqKoNNmySZPYspPf+n9BZnSPagonzD/0w9EZuQ4y0TI7wetm4AdKahwGpm4ZQMqQc/SKlzFtdfB+XlAyfUAXwf6DvVH6JGo3n9oQWcRqN5JQjgKuAJ4ErUQPZy8uSSYcDcOSZlJbB+kweNS4g2j6Ji6VM0uw6+p9b2EpAes496bIyD59DcIqkbZdDcIvnlrxwe+JNLNsiw/4I7SC+6n6JEnEzjHHbtzfLSGo89e30uf0uUdNbjwLZKvKKdFM/aSJMAmWZwFMTJXt1Ir4dbjsDI4k6A5wmSBYILxlm0/PHD1BVN5aorzPw0agPwDVQEU6PRaE4KLeA0Gs0r4VyUjUjVy604aaLJwQbJoUYXOqYSjyZomfUSmSRqDqkB6QSUju4jtuUSjGwVR5p8Hn7U4+ChAIwAb/69bDnn3+mu30TNmQ8TL+zDbx+P11/EwYOCjZtcLrkkyp59Dqn907GnrMSsbSOTFrhZXplRx0gi7kQFHIAUGDGY7o4m9eyHGF9TzWVvMTHNgQ2eB351qj9IjUbz+sQ61Seg0Whed1jA51EpUwAyWXjiSZfde3xcF3xfEkiIxWHRfJtb3x2ho8Nn+/YC5AOfYUr9Kg5PXUN3F2R8kBHoqd5O5ZwHcVd+mv0HMgQ4mJXbkXMfxzjvbki4ZDthrdVLdPpXiU76PQu2vhPrmY/S0FjAHx9wGFUnaNsyEf+3d7DoE39LT00rSQH0MGyO1wkwUuTu5SxKxNB1fROeaokw3TcIfBWVswdnLkwG4kD6JO+/AApQZsdzgEJUw4cVXqUVvjaBXmAnsA/o/mv9Qmg0mtceLeA0Gs3LYaBEwnTgfcBlqNo3ABxH8sMfZXnwYRfp2uBFwMog/AjYPi88n2buHItFCyw6O13a2yqpePGdVMzayOOeB0KCb9CdDai54D4an7qVuBxNcPb/se8td9EX7UGaWTxTpUQz+yFT4EF0F88u/yLLSw8Teexz7N5dyeLFJpYF7L2Gjq8IJt/+d/SXNZNM8soSlfki7ljPj3fXkuCUN0NxA42HZ3PgkM+sGQNDFyqBOmD/y+xJALXABcDscJsp4fMSBtPWw+QjuZaRbpTP3BPA19E1dxrNGwKdQtVoNMdjHMqs9++Bj6NERCWhaJABPL/K58c/yyICk6BuHc653yA17X6yE58inq3C663lSFPAzl0Btg2O5xP0jCM+ZieV4/fSmAyPlDWYMKEF3+wgbRwg+rbvsMU4Qm8fpNIm0jUgIwdjTQF4SUnHpM1U2lmsXVfguAHnnm1xoNGBrhnEWmqIznuBlmgKEmJk0ZXv+3aiDQz5qdJjplMF+BAvdhjtx/G3Xs2cOYKJEwfKBFPAz4HOY9z7KDAD+Cfgs8AHgIuARSgBXYC6G8bLPArDz/GCcH/Po0WcRvO6R0fgNBrNcCKo8VXXA7cCMxlB2vg+ZLOwc5dP4INfuZmpn3o3F00vIJAF9HmdrN/zAE1PXUVqx7UEHePpbB2LQQFGNk7y7i9S9PG9xKJ7yGQEaU/wYrPkgst+R9eZD2MW92C2hIeVgBRD40oAhiDR4dG19MeM75pJ+0vvZd9+uPA8m2efd3F2X8v4p/bTccV/c1i6yrgjx0iGvTBy2vREa+gCBuNhUk2FcDywFz2P90dJU/MQLxIjvM9NKE+40aiU6Jmo2sJ5wFzgZZ3t0hmJ5w4eFqC4WDDCZLHrUMLwNqD9Vflt0Wg0pwQt4DQaTT7vB96BEg6jjrXSS6s9Nm/16emR7N7rY5gB3rhVxKtaKJdLSAEBxZw9OUNm/GNsanqAzftriLRNgq5JBPuWkOn3KOktpXAcZNKoIfBpwZZMhsmlGZQeeRnlJCW4sK0lhbjkvxifrGHP9sspLICZMww2bIiSevJvmTdmPWLxQzRmgS6OXQ+XE3UjWY+cTPo0DzcAt6oJYSRIJkvz37KAvwHOABaiomMTUHVxx73kxsMBvX2SpibJnn0ehw8HZLMqIuoHap3iYrjyMpvFiy0KhhoIX4nyn7uVoZJWo9G8jtACTqPR5LgUuBPl5XYUiYRk526f1Ws8VjztkUxKVb8mfIikMSZtpC3r85NDq1hSOY5pRbV0OBls0+GsiSYXTk6xI/0ntndnSPYXUeTHsWP9LACe6pYEUoAvaOwzmBALcAPwBgJW8ugKLxiMeHmC7d1NWG/5b2r3nsfOXYVc/Vab7m6PQ4eK8X73NcYIl5YJK3CF//Ll/PmRNIYd9xUIOSmyiFgfQVCWv7gClRK9ErBH2puUEATgedDREbBlu8+KFR579wd4rofjBbiBjxnLICP9SCutIpVenGBPOevWlDFhUpq332Bz9lk2BQUDu56DaqLQAk6jeZ2iBZxGowE1LP77jCDeOjolz6/y+PNDDs1NJm46gi+B8Wtg0moiRQ0YtXuRM1fhegGulDzU0cHqvn6urS5jXV8DgjgSA0+6xASkYv20u/30u2CaMK8SNrYDHvT1BCSqwAwYKQU4MiYEGcG+knVU1T1Dcu+1bNrsc8XlNk897bJ79xjKH/oCy25rYH/FLjp6BW4gj9+VmhOPuXq3ExVs+esZqvFCShO8+EB6M2/PJbkXWQeSScmuPT6HGwN6eiXptKSjA1rbJK0tgmS/SWD2Y531C+KTNzKuJEGsIEGsogWjoBthZTCEgRHYBMlqtt3/ARrX3cY3vuWz/0DA7R+MDj++RqN5naIFnEbz5kYA1wDfJUyZpjOSDRt99u0PaGj0OXRA0Npq4njgV28kmPQioxY9hDl5PTLWyxE/IBtI9mclTn+uqj5JJpWk3+9nfAQC0iq1x6BmSgZw0IeUBzFTQpEPSRNfGmxrD5hfDWJgi7D+zTQAP4y6hTuSqFCVAf1dkHnPZyn6+lR27ppKNOpx0w1RfvoLh0MHlhD/w7+y8Pa/54WqXnqOcHwJk0ulDq+NkyOsN1L/p1AbSV8SJMswssV0dnvs2iWIFwoE0NMj6egI6OyW7D8Q0NDg09wM6TRI31TbGxmklcIxDhNb/ihFl/yRBbM2MrbAI5ubZjGCFjXMLqIf/xee+5oH6/6WZHJI/V3OZkSj0bxO0QJOo3lzYwKXE4q3nl7Jpz+bYt/+AEQAZhpRuxdjwUbcxT9n1JLVjInBnzphbwbsDETC5k47CmZez4EQ8JSXZQww24Z6AWmpasJ8CYFUQS4/gIQXbhRRZ9SeERxOCQqiAalMAEE4z94yIBpAVg4eKE+5SAee79vHWed+n5Inv8jWbTEmTfRYfqbJkWaHYMdNZH9zhLprv0SP0Xf0qK3hYiyXSs1XRwbHTrHmb5cnj/xICsNIsPqlUjZtTmOZqsEglZJ4jgjvR4AwPXy7G2P8NuxJG/EKd1Nc1kNZeQcls/czuaodXElEQNI9/gcb+GBYWURJGyLI/2Ag/L+eha3RvI7RAk6j0Qw4pK1e47Ftu6SowCdY/l2MuY8xetw+Smub6fFderLwaAakAZM6xmE2TcbMFIA0MQMDEZiIwMQILGRggWdimi5Hpm+lYPp2IqYzsgNHgDLT6A6gSCAroLFXML0K+tLhtPewq5OICfjg5YWdcj9NkJ2Cwwt/y6zmhciN7+GBBx3edk2UM5darHrJwVr/IabN2cCu6nsI2gTD85pDxFp+6vRYxr4jvSfCaxKSwIfR5Qm6Lvwu6ZfeTdbykL6FdKJgBARFXfjFDVDQjqw7wNRzn6O05hClZd1Iy6UuEsMQEolAuhaBdPFOwJDYxKF59aXw4u1IK4uUVv5p5ixGNBrN6xQt4DQajZ97ks2CYQT0zv8BF338y8y1Dfb2d7O+FzqcGNHO6dRsXIq181JE7yxkdw0yiKiNJYBASiURpAQpBabpw3M9HJ7zK+re8yVisX6kryzdBnoTbKBEQD/QEEBE0B8RJDNq1BbBMMViWWB6Ry8HsCUNTd1Er/kME1pGY7RczAN/cnnbNTazZ1ts3mDjvngdSz50D6tbGNkGN0d+V+rLVYzlp1pzzy3VU1Api4hffyepS3+O8AwMP4LfW4aIpojUN1FR4jAqHsfzU4yJxwikIJDF+NLFla5q8ADkCZStGQJSAXSmI+z75ecQqRrKqnzOXW7l1xRqAafRvM7RAk6j0QxE4EwThOkxZcFmbKOX9a7F+rZCgm1nY2+4FrH1CkRQipuNIwxJUZEaPF9SKjANNcA+/9HfL9l/APoSlUTX/h2t/VVUf/jfiJhtjI9CZ1alUAGwJNQY0C/V8KfFsLMXlVaVUikhUOLIFurby2HkmaUuNCa7mXT7p4l+93s4bQt5fIXLVVdYHGmU9DTPpTxqQEkACYaKruH7eqUYQAJKTMGU4gJiJT6iTrW/GsJAmO0IBNI3MCnAEBYBBaR9P6z9g0B6wwJ7NuAhCUY8nGFANoDdGdj7h+sxjiymtCLgb2+Ps2zZkK973cCg0bzO0QJOo3lzI8mLwAEEnkXHA5+iddtZOH0+dnou0c4pkC1GCIOCAlh+kWDWTIsJE0xqawwKC1WkTIjwASDA9+BQQ8DdP8mwaYuPte1W2u+YSsEnP0pN3U4usOC+HgajXLaAcqBDwn4Ppqr9YKJMzqSphJwIoEpC4zGuyIZMq+A5Zxt1N3+YSb/8Gb2dM3lyhU95uUFPYxVuRw3CbBnMoB4rApcTdyP5w3GcbQLAgbMXxqi2DVIuyHAHBlHw5IBm9AFfyqMysYaw8WV2YKkcQbzl7ne3C20Zk87+Qlq3n4Wx8pMUlRh88P0W55x91Ff9i8Da1/D3TKPRvMpoAafRaAYUwfSpJrW1BonuiZhrphEXAokPps+oWsFZZ5qcd47NtKkmxgmIGcOGKZMN3v2uKOI3Dtu2eWS6ziL17f8h+o8fIV7UxKICWJ9AfRtlA6gwoCpQDmUmMC38mT/LNJAqMlcOdDCysLIg1SlombCdce/8GNG776btyBS64z54cYzAGtlbLp/8+racKDPy1j9eHMsHKyI4qz5C4Ish/RaSEyhiGziB/FdhZyoSQ6hT6fbgUNKmdfcCuldehnXkIkTXREhWMX+55Jyz7eE7fQq4Heg5+V8VjUZzuqAFnEajGWDyZIN//IcYO/f4GAJMQ2JZJnV1FhPGmYwZY2Ae23zCRyU1DdS4JgD2H/D5769maO8IMKWJYbnYTZfR+fVvUPHBzzOudjuHbWhzgZhULap1YS5w31goa4NxWTU5FMCQkFZ1chSHjQw9jCDAlMhLNsHK4hc57/23Y7xwPemD8zDGbsUqb0d2cmIMj8SdYAJyapXNvMI4zalgaHOrdDGEfWI7GYJFTsD1eYL9PTEOH5xF+uH3Ym78ILah7q9lScpqBbe8K0LB0LkOq1BjtBpfwcE1Gs1phJDyRP8S1Gg0b0AEaj7m11BzOU8GD2gOH3uANeHzT6IGrtstrZL//FKa3XsChCHx596LGL0LeXgqYu3b8Kt3UP7Pt1Bbd4hnumFbKtxrFjUddN0oKOqBBRl1pn7ofuEbEPchHqjlhwhbVUOGf625YFfAvPoIIihgUrHLLifJpp3hsUYaWJ//Ore/+vD8eiEMhh1TzFkmvHtmjEury0gF/rBdimMIOIGUWZUlRiIMiSvT9Hg+hhch01lNV0cxLT2VZNonkNi3mGDLJRh9Eygud5g9y2T2TIPx403qRhlMGD8kNLka+AdU+lSj0bzO0RE4jebNjQTuD39+m+PMPx3GbuDLwFaUfOpHSaGS8OcfAHbv9TlwyEfYWbj680y69MdEIxn6vWIO/24T0Zc+TvcP/oPgPV/mwjG7yeCyL4VqpQwMmN4COwtgazkFy7rxU4KsTyiqQvUUSCLjoLwb2lpAjqSLLHB7YF3SARx2xgXJFCpmOJI1SH7a1EANvaoJl6eAvuPcGQPojxD3ClhWbZAM/BEyvEJNTMhTmkKAiUFSOkhLcCCRInl4NMn2ibS0TEFsvJag4Wx81wJpYWJRaFrUjjJZdpXk7TcUUlIyoprMhJ/tZ4CXcY/TaDSvF7SA02g0AA8CDcCHgDLUP/Re+NMhrLNHVaZtAR5jaFVajm4Gk534LvhuBG/KH6m5/EcsrzLIeAAJ5t1+F7ve9gv2/Oi/SH7pGfYt/QHT3v5ligp7sYRkc1LgVhow34X143F2eQTjkqG4k5D2VR2cDSUGnD0Jno2YdBzxj+3X5qrn/Vk5cvRsuImvQI2Xjw1uS0H4enjkTqKicjHgxcUsvW0VZaJi4GZYQuQF8wJSXhJHGhBY+IHA8Sw8abJx41x6Ni7DO7wQs2s2onsMllsFdpZo3GXMKMG8uTa1NYKaWoNZMwyqKkcsSJRAC/Ar4P+hxZtG84ZCCziNRgNKjK0LH38pOakjrNAiDl9iGAKkQcYf7FadP6qb7rd+m46Nl2Gs/hi+E2HSO/6HgpJWZk/yufeQgVfpMvatOzi8GTzHVN9aOUHWD5SHkx0CWF7v80grOB4jj746kbFY+b5wE1AiMReps1Dp0yTKuy4fO1xv5VRKqgSfGD+PznQ7oGrS9vVJ+lvLcdwI6UyU7vZKkrsWETRPAy9G4Mbw+yuxE5MQ6VFEAgGWT1FxQFVlipISg4Xzo1x4gUV1lYF97BI6D9gFPAzcCTTBCXdNaDSa1wlawGk0mlebAVsS0wAIMLOj8TsroLx3sBszgEwAs6ft4MkLvof97GcxNn6QhBAEt3yecaX9vG+qDwEIE/YXw0MNUo2BkN5RBrsyEPSlyhhdk+TAIUcJr1dCrtPUYlAswshGvfkNDVFU/DFdzRc/0EoyU8hzPc1Ytkl66yJaHnsnwZGzwIuDW4jhFCP8CCYmhghtWBBEIoLqOo9JEw0mTzaZPMlm4niT8vKX7ZxwUOnsX6NSpq2n9tdAo9H8NdECTqPRvNrkJpuK4iKBHQnIJmvxOmqRU3oJ5FAnjqjpMeHt36Fx/1yih25GrPsIyYJedlz7VaaVJam0ocOFmUUQjIFHGiSIUEFlgTR4BRCPQ++z5zI6atI57gH6Gv2hUbKTiUF5qETySB23OVGXP+9UoiJzz13NjCsfxKqs5582H+aC7BL23fNBIgevx/BKiEY8YlGIFoJZCkVFMHGcwcSJFqWlYAhBVZWgrk5QUW68nFVLGmWi0h/+fAL4DbCPYd5+I2ADlUBReEUmg5I19zqBiuQ5aDSa0w4t4DQazavNgK9cRbmgrEzQmoiDU3D0rHgJloAJFX103nIHmbvmYfVPwnrxY7glHWRu+NaATnKBqSWSdTFJuxMexVdvJLLgmIILpmd46n++wBl/28aL454n0RiapZ1sBtEBakdY7qOkksVAJM4yVHOsXH828bmb+fKF5WzqSjLuxdtpf/SfiHjVBIHPmPEeV781wpjRBhVlEIkKCgsFBXFBJEL+mKvjEV4x64AvoQRWO0o+nggmcDHwHuByoJSjLYpzZ9ILfA747snfQI1G89dGCziNRvNq043q0yyLxgUFBUCfRX/WoCWdotgGNxicIR9IKJMwfcZe1l14F9ZD/wVBDJ64ndYzH6Fu/D6EoercamKSuZU+KzYLqJCDXaISOnoN6mbvxy6oQd79H0z7p/eytbKBbIcYOZJ2LALUBAgDjppYleu1DY8JqFTt1plgNTP7zEO80CloaBhN0ar3YgRVlFR4nLHM4p03RRg16qTHj7ooIXUENWBsHXAQWImybDkZYsDHUd2opSewfgXwP6jk8PdQET+NRnOaoAWcRqN5telC+cIttQzlh2Z4hfi9NbR7gsqIxGFoSMeRUGvAlEvu5cCWS4kcuAbTrcdZv5hg5j5Er2o+TWegtFRQ0F1IqqhfSRIHKIBnezzOKunCKmyFlqXU3nsHzts+wxavTcnJE40hRVCJxeHizUT11+a6U8MInNcD8aoDfP7aDF/dCY+bklnZIsgWEyuAj34kxnnnnNBXbQIlznpQZ3wE2AFsDpdlUF2lXSf5eVQBl6E6jM/l5IbYFwH/EV7910e4Ky/HDNSnZDKYpjVRKVwBvIRqCcl9Okb4fq66caSHG94LjeZNjRZwGo3m1aYXOAwstW2IxYEggn9kCWnnQawiFzng5TYYifMkTK7qpvWGL5H6ziSsnoX4PbV0eVBkgBNAr4QFRZJ1xYU0bKuGBQeUpEiYUBTwo9YMywwfaQT4W25inGOTufGf2eu2IFMvc9a55oVJI7yXG6OVH30L88GRGJTPzPBkp2B5Gax3JNOMLNJycFLQ1DSi5jmCEi+HUXG9ZmA9qn6tB1gQnsn+8P1cW8U4lKjKTbwAJfwSx7iqs4H/ZAThdvhwwNoNHjt3BvR0C2QgcHyfokK48foI8+cNhC0LgauA75BnEXMc6oG3oKJ9819m3U7UdIh/RyWnPwTMQcloK/w5vD4vgzKe/s0JnItG84ZFCziNRvNqIwk9xyIRQW2NYOs2EKuvoeuqu+ku3IthqtRp/tx3GT6Zu2ADW27/B/q/8xX8rhLSGYMyEeCH1iPZLNTPydCwpxJaIzDGUflVT9Jv+RDpx7YF8WLo2XEjU/8QwFWfY4/XqP7pH8n7LXcS4xi0DRnOgXB5LjYUnrzrQ1cvjC0roEX6mJkM1eMO0zP3t3irPsXPf+nR3w/vekdEpZPVvWkAPg9sG+FIFcCVwEWoVgqfwahULnpl5i3zgL3AXSgDZYGahPEBlCAa+J4PAujsktx7f5Y/PODieWBFHGT1FkRZJ6JzCv72Caxd7/HZT8U452w7V5uXq/p7OZag0q2LTvB3pRJ4K7AYFW288ASP84Pw3vyQkf0INZo3POYdd9xxqs9Bo9G8sQiAZcDZpgljx5isW++T6Cqlp9NDnPcktQzVSLnnEohKqB3ViL3wIbKTN2FGkkRNiS0G151VnoVxHRx6YQmIThjlQgCBlFR2zsbcv5SpU0yEEdB3YDp17fVk3/IEPV3O0UlAgarumsXIqVPB0dMXAsCGghqoK4YZZTDKdikTHg1pMIyAiQvXkWipwmuaz+49PlMmm4wba4ASXrWoaNvqYUczgG8An0DJyRrUdIwaoBqVDi1HiZcSoBhVzzYRuAllM/xhVNTtbPKibq2tAQ8+5HL3T7OsXutjSBNRsoeCa7/C/mv+lQNn/Jzq8WuJHV6KSNeybKnNxAlGTsA1AT/n2GbAFeE5fxOYnP9Gfz+sXuOxbbvH7j0+O3b6dHRI6uuHdNkWh9dwglNmiaDEXjdqhJtG86ZDR+A0Gs1fg2cIpzqMG2uwZJHJoYOS6P4LONRawszaPoJAuYEIVBpVhj/9MKU6ZnQzowJww9c+qJQr0OfAZWMl2SvW8tLKCmR/Rr1XLsnUbqbUcujrs1i2xOTBhyTZ/Zcwat8CGktX4ncMO1MHJY/iHB15yzUyHOJo414LYkVQY6pdbE1A1IBiE3aloKg4ydm3folnmmbjNp7B4084nLN84Cs3gkpL/gwlQkAJs/9ARc6GIAMVsSS8RwhVWzjC2f4TI7Rs7N0X8PW70hw4ECADAQLk5Efhps+yp3wXR/oliQS01+5gQs1B/NY5w0sGTVQ69IURjnl+eN7Lhx+3uVly988yvLDKw82aIE0QPoVFAe+4KcLNN0aOkmxSwoGDAdu2+fQlJFKqa6+tgXPPHohigkrt3omaDPLsX/oLq9G83tACTqPR/DV4CiXirgVYvNjmjw+mITEL47F30PKuHzBaSLIMCrbh5AJhIpychQQzZ9oLtPXD7PE+m5vbSW0CzgDpShizgyDSRW9PAVXVBmPGCBr2jaJqx/mUXbqSznwB56OSeJMZ2e0shaouy68ey51vAlUTV6g0iG2oXF7Ugp4eMEtNZk20abzxTnZ97Sds2xYhm4VodGBPC4ApwMbw9edR0bMBmpoCNmz02bs/oL8/wA/A95Vp8ZTJghkzTObOtojHBzYZIt4SCckjj7rc94BDR5vAjniIGY9jLriP7vkP0WD309kPaQ+sYijqrcc9PAmkxPeGfDBzgH9D1Z39isFI3D8An2LYDN3ubsmKpz0e+JNDa1uAkAJrzGbMcTvx9s8m0zGF7/9Iks5I3nVzlEhouuz78OBDDr/+rUNra97ADCkQRsC6DQF/+5EopYMzXy3gZrSA07wJ0QJOo9H8NcgAKwgF3NQpBpMnC/bttfFeuo2Wcx5lwoRDZIZHlhg25CDX6DBs55aADh+SWbhmEfw+BdlmYCyIsiNQfIi+trEIYM4sk8aDLtn95zDdqeHFSBtBFiXeylGtAjk5MnzEVgLlshZh6EkItX2yCygGIxhsTkVCdz8UWpXUizlElj5LMO0PdO+6mS1bfJYsGdBY5cBZqOL9v0EV/QOqzu/Z511+8asshw6CYRjIwMfzXaQMsKw4zz0nKCx2OWe5ye0fjA2Z1JBMShoaAn59r8Pq1R4EFqbZj33O/xF/x/9xJNvP6n7ws+F9N2F+LdSvupje9mkUxAXFxSI/OlaA8o27HFXndhfKjuR9wz/451/w+PXvHLZv87FMCzOeIDv5Qfwb/hNRfwi/o57g6fdSvOKf+d29MKpGcPllEXxf8uCfXX76C4dUv0m0qIvIxGfx6cRKLcQ5Mp+Vz7uUlwo+/MEIpjlwclWMbPqi0byh0TVwGo3mr4FEibgPAUY8LohGBes3OgT9FfRl0tSc9SyFclA7DZ9YlXs+kNUUg+95QJkJB9JQZsP4MbBrL1AMVRUOxY1zCBqWESuQTJ1isXO3i5uoIJj9EI12MzIlVOXYtPAAx/qnP4rqqR3uQAxggd+rGgOq81zVTANa++GCUWV0ZrL87wsNTJ6bRL54NZZtsfzMgVysi+oOLQE+Shg9kxK+8/0M99zr0N1lYEezZKc+hT/jd0y99AEmL9+KX7CFTKIGwy2loTHg8GGfxYssduwMePDPHr++x+XX9zgcbgwQZgZZs4HUzZ9g36U/YXu3S7MPmYEbLphSAvOCYnru+QJ+12TmzIZ3vyOCbY1YkrYYuAZVgzaEl1Z73PnNDE2HBXbER1Svxb3i3+i67hus97s41C9oDPrprF/P6JYliK5JRCKCujqD39zjcP8fHbIZkOW7KHj3Rznw9q9y4JyH6Zl2L5XNs5BtUznYEHDRhTZFRQPnthu4B202rHmToSNwGo3mr8VOlA3GVIAzl1k8+6zJS2sEcufl7O/6OpMK+zEFI86bh8HaOIYtAwgE1MWgLRmhPmoyb6bDpk0+8Uke5sQ1+KsdNm+xOP9cqKqCdEMJMl2IiKHE2GiUhBrpn/1cl2kBqvYtO+w9UKIvBukUGIYScrm3J1TAJRV9fHFNhuTuCA1nb2N07W727l1IMiUpLBCg5GEGFX0b4MkVLvfe71AQN6BqO/5FX+XMa1ZwZvkYxlJOCQmyN7Txm+1/YPOvb8HfeAvrNgT8+3+l2b03INErMAwD0wC/fBP+Fd8kOXsF+0va6egO77Aceh2VwqL/sVsRrWcRjXssWxoh0S9pbZf4HpSVCErLBKYKHprAhPxz7uqS/Oq3Do897uC4AWb9NrxF36Pz4l+x28ri9KrbFYQdvIGZhOmPwt6L2H/A59//K01zMxjEMGrXkHn7p2mcsZIDTZDJgmn3Uf+2LxLbehGZTIym5oBRtQN5bf3vmOZNif7F12g0fy2ywAPAPwIUFQkuvjjCCy+lsXrHs//Zs7GvepSJMCCiTiaE4kiojQqONIxm15HxXHX+errb+2hshOIpazBKGkn2TWLDBo9EnyCwerBiqUHbkNyw+zxT3qPSpCkGTSqGD7APrUf6fGhPQ1V0sBFjegnc35JgZSMwBg7tbWf2tK307VxAdzcUDhbiD5mI0NEh+c19DrGoiTfmMezbPs2SGT1cW3oeDtBPQC99WJTw1lk2+2/5D1pbJxFvupDNWxyE5WEWdmDOeZjUqBdJXvQYW4IOjAAyKZT0yvOwQ0J1XFK16Uayf/wyVkxSVgZPrHC5934PgSCQEtMKOO9siw9/KIY5zAb4wEGfH9ydZc26AFPaGDN/T+SGL7CrZg/7k6gIpxh6/6QBsnwv0szQ1FSADCRGrA9z4nME1/wH68u30t8ebmOC70Fi3HaixXsxUnMJhjab5O9do3nToAWcRqP5a/JjVKG7BTBzhsGY0YKmxmrsDTfjXLQC4i5B2I2aa1bIzYrP2a4F5EXecnuWkA0kxaZJauccktNbuWJxH997AWKLDjKjfhMiOYmX1vokemzkmE2YoxuRDRKzRiBtCF7OQawf1dxgMjTNmnttgPRg+yG4eCZkfXUd/QG80BJuWwR4Ptl4E0FW0tsbMGb00S2kDY0B3/1BhubDBsHEh4h8+BPcNK2YabFz6MPBCENmBgYBAa6UtMVb6X/HP1D8/C04bhRn0lrE5DU01+/Hi0NrOLPBFKrJNj0kFSywDcnCUgP/oU9i2zFM4dPTGqFDuhBrRgRZzKAO34vz0KMZFi1UY8ESCdi33+eFF11WvRTQ0RFgGRCMeZTe932ETUYfycTAYY5CBhAbvwuv/gWELMcct4r2Ob8jmLyVtZksMsOQKKEASgyJMJQa9IemvMeg6uDaT82vuEZzatACTqPR/DXZhZowsAygqtJg6VKL+xpdInuvounpKxn7lgewkQMCDTEo1oYzfLkECmrbMbqqWf2Hq7nkb45g2H0kkThVm7B3X0NvLwijB/+8H7GloIXAgliNJDvcMmR4AwMMGv8Gectzr8281ylY0w9LCtWcVyEhYjMwOCplwE6ni8kZye49PrNmmgPD69vaJQ894vDnh3y6OyxkxU5mfPSLXD5zEtWimiQOMSxAYmFiIfDwaM520p4RyDE76bv5DjK+QZNwwIBsBsy0avYQI0U3w2kSEyJQ6sbpDvqRpdvIlB3CHbua2FkP0Fm5lzbPh2wxk7dci3z8k/zPVydTWOjS0u7ju5KAfuy6RuzF6+ld8Gsys59liwOOx9B5sXLo/XWB1YWNBO99jwoIRvvplZIgzWA3yMD2gpICSVnjNDLp8QgzIJMdcjULgDOAP52S33CN5hShBZxGo/lr4gEPoZz5LcOAqy6PsHVrmoOHCnAf/Bfa525kfP0hnBG6UCEUbcOjb+GiQEK0IEF0bDvZRz/KrkVbmT3qIbYehJYznmXsmiaEO5bYRXfSMO8hOtohPgYQYMoRehfyRVwEaOPob8nhqVbUuol9sKMSpterczZycxPCvKpfuYMAj1UveVxwvk15mWDViy4//LHDkSZBIHrxr/wKb7thG7PH1WNg4+BTgGBftg8/cPlz5zp+154iaqkBo3FDXUMrHgah24kf/jyeJW54Tu0OdFhJ0v92GS1ZSZ/06HJRkcPucD2jk9pL7mbsxB103XUX3d0mYvw2onNfIjJ5E2b5ITLlR2h2PbpPcEJpALR7EuzE4G/JcaiwwUi7GFEP0oL7f+8we4ZFVdXARRag0bzJ0F2oGo3mr80+YClh4XtZmWDqFIvNWz0SzaPooZ/xZz6jzGqDQX3kh3NSA8JHTsTJsHE0jOr4SNzRTWTXLyZ5qJ7RFz/Ezq3QOeYIk6avwS/cTPr837A10oMdH+yYEBxDN+QibA0MbV4YjslgLRyAAf0pqKmCEhtSLhzpACwQHpTEfap2vJdsMsrZy2227fD5xreydHRIgqJGIjf/PVfc9gCzy6uxiWFIk7WJndzb3sR/7N/AHzoa2J51KbJUA0cgIC4YEG7iGJeRG9+aS0kPICETwOEUHE4HdGcC0l64klQbmSaUFUKtgOLKw8Qu+xWxK34C59xDz+SX6Co+RH+0l3YvIBlARKjjuXnHGDgZhj0fvmy4KM5rsii2YUJtL05nFHnoXDq7JCUlMGf2gLr+A8rQV6N502D85bvQaDSa43IY+AJqSDsA06cZvPXyCFJIvNU30OSaA19GEjXYPvc8v78gP5OZWyZ9MAuaiV/9Y7LjN2K6Vpg6FKSmrKP4xh8RLWulQILMcw02xDG+AE2UM1s7Q0XGSJG34QhYfQB6fDAjqFkBYUpQlLVCtIdMRrBnr8+3v5Ohp8skiLUjrvtHzrviRc6yLiNOMXuSrXx2z1N8Yd9Oftd2QHXCWoCh7D9ysqVfHvuUAlQPhonSZNn8mxgMPvdQYnDgZgQq9Ro1YEohLAyNiltdaPP6aXESdGYCetOQcKHXhWygTlEyOIGe/H2OcJ+Odw+HPBfQ48DmnoDsDXdhTHkcKQVNLUOuPHaiv4wazRsFLeA0Gs1rwTPAj8jTG+efZzFlChjdU9j7+AWkLFVs7w9LpeZe++FIJV/mPQ9UQbwT+MQWP0H5db8mEvURNvhJya4eHx+XjkAeVT8nGIxgDRBBCbf91rG/HXP7yVeT+TtNQUNHOOoqDIPJuICCLDLaChjcd79DZ5eESDfBNf/M+EseZmp8ImmZ4KGOzXx4wxpe6O0jGUbC8o/toTKcuQhiQh1yoGE2mVseRjBdwkBi/nnnzj3/EeaTy21YUAoXVMGoKCR9db89CV6gHoFUIs8Qg0I4t4vocNE7UsTtZDCUUNyVFGzsSxKZvgkCY3gnqvkK967RvG7RAk6j0bxW/AiVTgWgokJw2aUWhUUG3kP/QsvBibma9UHkYK2bCzjBoPbwpbIScSV0+rA2m6VD9FNoS6QLoh9SpmBzBg6PMII9p2fs3PEsoBXYY0CmQp3IQP6WowvwRnoOYMCRbiVwCqMMihgfZPU2pG/R0hpgiAD/7G8z6cqH+EDJVURFIXfte4Yv7zikHOLMvP0PCzu64cMkFGmhwEqG4jZJOMVCgCeUyB1yDQHggSEhYkBVBBaUwbxiWFYBRRb0+wx0B78cuUxyLgpni/D0jbwVhn+2L7fDYa+lCd0ZcOw+ALyh+e/ICe5Zo3nDoAWcRqN5rdiNshUZiJ285RKbmTMDrPZlHHzkHTS5JraRN9geBkScF6hokBfWbmUD1fGZDeCAB00ZSHiq/szLQtyC8rKAjD+0VC2fXMrPNlChrJ1xaK+CirbBAw8XUPlGviPtVIBwINUH1VEGwmWpAIJIH65j4GVj+JWbGXvtD7i4cBpNQTv/vOl5/rAnicwVr3mMLBTDny6QBnyhGiaECOfGAoEDbgYyGZD9KGHajWrKCFPDlTFYUgqXVcLSEhgTg2obUqFwM1DRtZMNbeXmTAxUp71S0TYMI4DpVWB5cUDgDY3A2Wg0bzJ0F6pGo3mt8IF7gXcBswEKCgQXXWizbqMH+86lve1uqsa0DjH2zc9UHsoMii4/7EdIBtDrDL7/ywNABNIWzIzAbleJkmMSAaMHxFqQuDCm+/i1bsPTmiMQSFjfCGPrGBB9vR7ImS/gbmyAsiNEbv5nzp7kk3Bs/m3tapqTAkqF2thjMJw1fIxXnomwDwRpZXQrDfBNJXREBuw4WA5EJdTWwORaMLKwvwMaAoinoDMDolg1H1jm0LK14fWGL6fDcp+LSxgZDDt9/ZHsWUbiWHa84UjWMcWSSel6si9cBSJAyiEfQhSN5k2GFnAajea1ZDfwJVQ6NQowe5ZJ1BZk2qaQ6aonObqVmAGBPzhKywdsCQccaMmACKN0QuZ1V4aRuYwD0WlQWQ7r+1RdnSlGTgcaUXBbILsX9W0ow7zcscTGcCVzLGVjqMaAQ10oI98AhCcoWPQM2brrqK/oYuL4RnqSUf5763o6+lFJwBQqp2kGgxMM8uvVQHnTpaA4JjBMEI6B8C0ss5QZVBBzC8H0iBT0YtS3YttpCrxiottmUGbZjJ+wG7+wg54sHGyHbEqwOyPwDBhdElBpqRSoxWAzSe7+gYrKecdp6BDhB+uhhGEm12hxrE7TY93r8D3LgNpCWOiMIvOjO5HtS/HJsHD+kKCbTqFq3nRoAafRaF5r7gUuBW4FRHm5QWmpQba9mvTWc8gu2ECBpyI5AUos5OZoVphwOOeLAUNtKkIhZUWgpgQcVwmRnNaIoIr5B4JxhsBtBWdLmKs9WQkwvAlgmJDzc5YcQq2cTkPCS3L2nIPMLsrS6sJ/bsnS2Y+KtuXUkidQ86MCVeRnq1o107eojxhEbYEVK2R89xxkfwGirBsfg/SGZVgbL8NzC5AznoILHqKs4ghFxDjys08TbL2ZQ04EUbaT7JV3kZm4Emp6uLBQUmrU0+7283BzH9vTEs+HqUVQEVXCLZAq0ilEnsfuccSXJZTgzkXjhpSrDd8u/3X+8wBihTA7UUPNSzeSffbdBK2zKavM8s6bo1xxmdZsmjc3WsBpNJrXmiwqAncZMCoeg7FjBS3NEayn/omuyVsoOetp8MKOR4bVxOWK8fNnmMKAgIraoYnucIuNcCqBBAwbsq0Cb2fof5HrGLV5+VRfTrAZL7Pu8MI7AZs64Jap01nbvY9f7svQ2Y1SOREGv439AByBGZfUB+VEtlxCTfO5WO3jifsxhG8jU2VkzINYyx6kZOxhKmvbKJvUzK5F65AioGT8PiorO2lrmEzrT76PeWgZ5eU+dqEklTwX68cXURDpIjV+LU+Oeorkkt+TrjtCcRzmWkpLHs7C7l4BrsDwJZURycQS8Exod1WzhBgmXIPwFmaBmBgU3wOfU74nTP69CcAOP4P6CFTaMMkoJ3P/R3BX/Ct+EMOIZZg3R/Dxv48xZvSQ9KkLPPza/fpqNKcHQsqX+7bSaDSaV51RwG+A8wG2bvP5v29mOHTQRFRvofCmzzL2jCcIvMF0nSfhFx2Q6ROqel+EbZiGocJBXgCuZMw4MEzlezZEP4VF/j1ZcJsFXivI3FynXHdmlBNr7cp3z7Xyng8z9lUHzttOgmUbBH5A0Ik6/yhqUKmVO0/B5PLRzH7+NtwVfwduLdJwkVaWINaJNX4DYsKfmX3jb6CgHzcDvh/67xrKxqP7wAwSK6+lf9UHMBJTMawssbjAMCSuC44DQprIwET6Aib9if7PXcsLHYGaMyo42h3YUYbEEsGkuMCMKPPe8tD6Jc2gPssFSVMSCsOoXS4dnJEQt8E3wDTA8E1kZykTRAE2FjITx+6ZgPnCrXhbrwLDZOw4yQXnWlxxeYTKiqNy1t8APgFHD9bQaN7IaAGn0WhOBQK4Bfg+oQlrW7vP/96ZZeMmiTQTRD5yHROWvYibUdGcFxKwtheVj+tisPgtiRJCvSAqYMI8Ze6bDVcREgwLsKFvP/Q3oURbLuLlhCuG65xQ1+RwAZdf/T/8pxi2nR+eP+Hxoqg6OR9ipSZjupcw+b6vIdoWIogRmAkc2U7s/N9QMP8xJk7bTLSkl4wrBzzxckGtzoxF78FZJP50A/aua7CLfWTtRtx4H4FwCQw1KzUwXQLXoNAfT6RtHkHrNOzzv0Tymm/xfLoXJz+6mXdtNhBxBa4HZoEkElGCMeVDsRe+L5Rwy308RQJGG1AZhZgQZLLFBM3j8Vrqkb21uAfmYnTPRqQqQUYQ2SKEMwqkxLLgbVdHuPGGCKUlR30wWeDbwD8zbMiERvNmQKdQNRrNqUACv0INIv8EIGqqTW69Jcr+A2n6Oitx1rwN94wXsQxodWBnLqyTGzAPoeEZA+Ofyqvy0qSo2i0zBm4/dOw0CDqDQdGVI2fZ8Uq/DX0GU6/5omckAqCTQcEISoYUCOpHw5QjZxD/9ZchNQ1Gb8G1dmHNX8Hkc5+mqvYgJTa4nsqy5mMJlWKOGQaypAf70j9z+Pw/0V11ENdupzs03/XCqGQQgDChMGoxs2sGJT//Ge5zn6BYCJZd/xVWJpyjPy2g1oJziiUyiJA9MoVg3wz6XIsjZS0UTd9Bh91JZzYgYqpopwW0B2HfhSOosgXR/XNI/vgr2Km5CL8QUwYI0yMel0RjYBZApMwnHjNZstTktvdEMUa+nz8C/g0t3jRvUrSA02g0pwof+DJKxF0IiFkzTJYusnj8SRdj91U0b/4FE6ZvpS9QHaYDYm34P9kJE/rBLPUhFClRU/UD9O6H/maUC3D+N14uspQTcCZDvd2OZz47vI7rRHw2QIm3PGNfIlBcC+dMltRaNke2lpAd+wJlC7/C6DlrqZnQgiclhagGWddTp5ibfhAJs8cHHRUFs1IO24JGjkQbyETASwP9xzg3Q9DT7rNr/FbOrN6D6JpF9ulPEcFj9FvuokWmBi1AQg57sC4LC80Cun/590QabiaGyYyiPoJoI7VTnufQBd+kqfYQwlWTLmygIxB0BZJyR7Kw6giRiInl2EyYmqGyQlBXJ5gyyWJUrYEVgVhMUFEmiMfFSOKtARV5+1+OMc5Wo3kzoIfZazSaU0kKZTN7E2AJAbYNq9c6+IlKsq2jkDNXUl7cT3NGTQcgw+C09AyAgGQcq8Rn8rSArA+ugGw/9LZB6jBKLA13pM0NC83Npco5iR1LiB3lQcLQerd8wTf8tYky0s2dt1THK5oKl4yFUqDfldSObWbGeU8ze/Y2ykr7sQOIhH0WlqHsU3Kn7ktY1Qs7O+DxdsGubosdTQGd/ap5NXjZP8/VCdYWR6h56X2Um+PJZgVG4xJq8ambtZa2wFc1iHnX3uUBZkBJUIR1YBn4lcgggnBqofEMylumEZu1gpKiJB2BihYGYR1cjwSvsJey2dsJVtzM8rOjfOofYyxZZDFpoklNjUFVpUFZqSAaFaoZZZA9wF3A54Dfo2veNG9ytIDTaDSnmn7g/ajR71RWGnS0S/bu9zC7p9LXWkbJ4qdoCzw6c+MHcnGXLBDY0FpBZHQfU8coTdZxOELXylq8RFL5WYzUmOBa0B0WsJmBaiSAo7paBxhJwOUvH143lr/cDa/SBwpAWDB7HpxXDZaEuSVQGYGxxS61MQ8ZKMFmG6o7sz0DnY6gwxH8sUnwwmGDTT2Crd2C5n5TdQRgQCxQQtSC43rZBSiH3VrJnM6zMJ75MDMmFVJaBm1tJrLhTIoiHYjp62nLMOT+2Qa0OT5NU7dQUb+eSOs0ZH81prDB8JFd0yjedBE1XWMoLeijqLQHz/bwbHAE9PlQPKuRoj/fypiaSpYvN9XYr2PjowTb+4AHgZbX5LdSoznN0SlUjUZzqmkF1gFXAMRi8L7boiRTkmdW+kQ3fpCu3x9g9FVfZ7fj5025Jyx2k2B5zJsmsSPQ2QjJJy4BIw6j7h+0HckXcQaQtVXBlWtARbtaPnx01YmY9g4fCJ8zPsutn0QJzbBJwszCBUtgco16e1oRlFlqE19CkwPbk+AlhZq0IGFTu0FbRj13TAabIQzyhrnK48ek8q7NLoZJZVEqG+cT++WXCRKVnLHMZP48iy/9T5qD+wtIP/xZRo/aQd+MlTSkVU1bbi5toQlOGlZPfZ7J73svczZeQ3LtDdCyDGF40DeH/udmEN94M7HaNVTMeILE+LX0FPQRMX0qV41CeqW4XoDvgzX4L1EvsBHYFd65VPi78SA6XarRDEELOI1Gczrwf8B5hFG40hLBhz8Qpaklw759Ds7Kv6Fg4VOMK1hHQxqVU0yhvsE6i6ECyiqhrxO61o1FJs6FCb8cHOUARw+jNwC3Dsyuoy0z8tc7Vp3b8Pc8BmvqHAZ9Ndyh60yYC/PGwZE+6E3ByoMGQgaqmzSAHh9afAHZ3IBTqXzi7Lz9cIzzFebR0yRyxy+EWBnU+DHq91xAxSNXw/6LcbvHUFsnufyyCLEo3PaeKF/9eoZ0ugrxwH8wo+jjNNRuRObVHeZ0quFBU2EDmSu+yZQzf0HxC7eSfvrvsZx6CuImQXYs2Z2TYcfbKI70UGx1I4UHbg2BW0p5hcyPvgXAN4EfAocZlN4ajWYEtI2IRqM5XfgY8EVUSRgAm7f4/Nf/pOnuMig668cUfejvuGeTGtI+4BNyYDyl81uYOD7L9nXgHJkGnefDhPsg1jUoAYbPE+0tgd75EGuCcfuU4HGPcWbD06QwaCUyPGWaZlB65JSOxUCDRNEoSKfBz/nPRRkqUyJAsR2aC4ehvePOZg1Dizm34yAvUGVARS0YmFS0jGFc7wKia67F3/lWDL8YO+pRVAQffn+M884d/Hv+j39y+O3vHDraLCKTVtL5rr9nXcVOXE9lmg2Rd0pSzTytjEGZDaN3XozzrV9hGyWMG+9TX2dgWYL+BCBUXZuUkokTBTdeF6G0dIgSvRh4ipe3U9Zo3vRoAafRaE4XbFSB+udzC4IAfvlrh7t/4mAUdjD5G7PZ4aRYuQWVQuwHeuOUn53BaZYkD6OMyHa9E0Y/BUXNg/Oc8jGAI4tVpX9xI9Q1DUbOhjOSeMs9z0/L+oR50PB1LspnMzimq1iAK4eOXi9k6KxTkedzIvLeyP+qNtRyIcCMSOzApNIpRfRXI7rHUuyUUepVYHRNovTgQvzeMXh9VZh+CYVFJmPGeZxzjsnc2SZ1dcZIHmvs3uvz31/J0NgIVlkDPVd/hpfmPEhcyCFBTSu8rJx+LIrA+S3LafzenRh9MzANwU032rz3PcedN+8DP0F5unX/lX6/NJo3FFrAaTSa04kY8O8obzgT1JSBn/7c4fd/kLhjVzL21n9kR8EW1mwOcPqAAmAs0IQSUAGw9wqo3ALFhwejasMNdZvOB5mFsZugIj0wJH6gXi4nwHLbWgwaB8dRIswM13NQx5EM1qaVhudWSJgKtQZTtW54UtJUrsO5TtWwp8I2wwBc2HkqImDEwIyAlbWJtFdgpqPYWJS5FZS2zyW25lpk20xwyggCi8CzCHyTWAxqRwnqRgmmTTWYPdtkyiST0lIxvHkg1yJSkluwYYPH/307S0uLxI43cPATb2VH6QGiYcRQAgViUJ9KICJhdCFUH55L+ldfhoMXEC8M+NxnYixdcsyqnZ8BnwGaT/UvoEbzekELOI1GczpyJyqlGkoMyTe/k+XPfxJkq1cy83Pv5ZmeI2xfCXIWSu00Meiv1htRBmkF2aGjsnKRMwsl4EQv1G2DaleJt36GRtryt8mqR9F0lbVMtqEEWiZ85IRbEUrRhNMVVPOCFZ6PO8T01y6EcaWQTcYRbTUEbSXEvTiVwsCWJhYmhjQxAhOyxQSNUwkOzMZKTcYUhUjPQqRrwStGmD6WLSmIw9gxBrW1BuXlgtmzTCZNNKmsFFgmxyKLioA5wN/nv/Ho4y7f+m6WbCKGddYPWH/LR+nIqAkMUiidagJ9geqnKApnoI6PQ33nTHru+gnF2Zl86h/jnHmGlX+8LSjJvQH4V3TkTaM5KXQTg0ajOR25EzgLWKZeCq68PMITTybxu2axd+1ZLLz0Xg5sgFSKQfGUyzgWO4M1cgaQLQY3CsIGsw+Kkio9aXdC4KptMgyNvhE+96Mq6ladZdQCuHYyPNMIO5sZrHPLRdDKUaLOC/cXB2ywiz3sWJwJuy+Aw3WYfoQoFpF0GWUdE3CbJ0H/KKxIEb4bQUoD9be1QEqBlAb4EURQiIHEjPiUlIIdAREPiER8Ro0SLJhrs2yZRXmZIBYDyxaYLz/b9SXUSLOfA2XABODq3JuXXWrT1SW5574MmfW3sKBmG5vPu5t2maY09Hfr82FeoepQbXNMIjZYlg8lbRjlrciWmQSDdX4S2ImKuG0C+hg5ea3RaI6DFnAajeZ05CDwceBeoB5gwjiD0aMNdu8uxXvkI2TnrGT2ghbWbAKK87bMdYLmNxf45dA/HYyMChuVPAuBqUzYYgxG7vJr0QifOxbxesGyulmUHByHXf0iImhVlfwuKtxko/YjUXKkEqbVgedb1LTPI/rcJZhrr8bunkxAjMAXSqBJk3QQQQpJJBpQFBUUVUhiMVXsb4QpVENIDANs26GiwmDSRIPp01R61DQEhYVCRdhe/hvdQ0nbVlTk61ngt+FrgHbg74A6YEluo5tujBCJwC9+7ZJ56lMsrmphxbL76E5AlanK+gpMuKIKHlk9A2fduVgyQjKxALnvXBxbkM4M3FiBmgb7PKEVs0ajOXm0gNNoNKcrq1Cptf8DSgwTli+32bcvi9V+Dr33f5Ixt/w/1oxJKdGUm6E1fASWROU83VKIZsEvUTJGSAgMlQNMMegylj/TVMLic9JcMaaUF//rBjr3zGLitINEoq2qYj/XIGGiZFE5XL+wAhOf3ueWY+y7DLnhSoRXTeBZWFEYP86gtlYQsQWmCZGIpKpKMH5slOpqQWmpIBYNa9+E0okivC7LgmjkRGZ2DeChUpM9wD5gNUq47UGNpEqMsE0D8CngO8B0ANOE666NsHd/wGOPVxL84issKuqkafoz9GQkRSbsSoPRBRU2tD3x/7CtajAc4nGHRQsNFs4b8s9NrodXo9G8QrSA02g0pzP3A28DrgW48W02Bw/4PP+iAxvejTHnGWYu+TM7V4shthYDdW4S8EzwC8MoW0w1DghAWlCcHBp9y29ecGNQ7hEr8ri/IY089/fIMx7lWXGIQz0o0VeESpM6cPacEi6fNp7KzhiPffsjyO3XIZ1iRCRDSQnMmmlyw3URxo42iBcwkNo0DPFykwheCfuAx4EXga2o5oBOlMw8EZ4C3gvcDcxS5wm3vDPKyuf7cbJ1FP7ku8x+2x0cWvAQXrSPVg+e64Lb5+4gsfxuMi/djk0Mw4CJ400qKgcuUoafjhZwGs1fgB6lpdFoTmccVFXZFYBpWYLaGoPNmz36ek2ykTbmLn6O3V0+ToqjGxB8wCuFjrCUjpj6UbETuufA+I2qmzQ35soHghh0LgQzBakiGlP9tO/z6PCb6RANtCQdMgdDKxAbSMOFZ5TyD3PriDsR7vnWjXgb34+ByajRPm+5xOadN0e45qoIo+sNYjGBaQoMQ5yIeMt3lPPyHg7QAaxFCbVngZXAw6iI5VeBX6BqzJpRkTafk+MISvydA1QClBQLKisNtu1wyaaKCfZcQNGW8yjtKWd0XTsU9nA4KVlwziqc2vVkGifhdY9h5x6PBfMsqqsHLnYdKj2upytoNK8QHYHTaDSnMxIlRM5GzUtl0kSTJYttGg9LZMNcnFQRoqhLxZdy5BJ0LoAPhgNBhIHwWgDYCSXAfCArIF0N2SSMT0LbRBBZiHYMemTkpFN/MNioEMCFZ8X55xlTacmm+d1vzsJY97dIKTnrLJP33xpj7NhjBppy8xpyg7dyJiWHgDVAW/jaH+HhoBoBWlDyM9ci4PPqTi94Fvhb4FvAVIDLLrEpLhTcc59DR0cpva0Xkm04n8iWm6i57CukZj3BumyKMRc9RHz0TlJf+z1kJ9GfHOJ4YKMjcBrNX4QWcBqN5nTnPPIK6m0bFi4weehhQbJvNJlkOUFBl5IEHkdbgAz8zBW2hevFmpXjWQKVVk0VwMQe7Bng7k6rZgfTV+X9+fNOPYi7gvpJcN18yeIyg/ZsL3/603SCh7+AIUwWLRF8+AMx6kYdpVFagBdQqc0DqOhYGiW83PBsulECzefolgp47acUPA6cD3wa+ChgLz/LYuECk1QKjjT7/O7egDXrFhL75Y+Jj1uFf8E36Yn0YPZPh0yhmmgWDDnt3ERXjUbzCtECTqPRnM68B/gSYSdqX0KyZavPuvU+0Rhk0jUk9kzn3KX7eLxB4HtwtL4JW1KD3HQDQBZCYZ+SSN1gFHiUzz5ITxF4nai6OTsNvhE2KljQbUFBhsWL4S3ToCpiYOCT8VNs2B2n96c/xPQLOPNswSc/VkBR0ZCT2AD8CPgpKmL2eqMZZa5cBHwAIB4XxONQWWkxfpzJL3+d5dHHJek9FyMOLMfxMxgiDkGU8lFB/rSHkeZYaDSak0QLOI1GczozHRgNkEpJ/ud/Mzz7nI+FRbQ4iT3uKXZXbuH60nr2min2ZjNQmBlq3BvYkE1wxmUvsmbFpQSFO6EoALtLReKqQUYhG0CQAJkuBEIPD9MBtxDRUo85pY93XZphTgn4riTt+sRNyFqSXb/4GGa2ispRaW55V2y4eNsCfBhVr/Z6RgL/hoqGzmQwuUxpieADt0WZPNHg6ZU+Pd0xDBFHGJJYDK69Osa0aUNchE2Gxko1Gs1JogWcRqM5XYmiTGUBOHw4YMdOn3hRhuy0B+g75wG6JzzPGeU9XFV+DhtGrWJvZ15NfC5t6sfAsXnLTIvAeJQ1BxPQL6AuVHnh0Ib+XFdpcwBWh3rPNcAvYfEFXSxa0M20CKQctX4EQXGh5PEX5sG+K4gWpnn/e6JMmjAksOQA/4/Xv3jL0YxqKFkCvBO4EmXEQjQquOwtEc4/HzIZNadVAJEIxGJDtJoPHGZwyJlGo3kF6BC2RqM5HSkBvga8O7dACsCL4C+6m73v+TteKPkjJfE+bh1zHsVUMLaoHoyw0dIknD8qgQDMCrqOzGB8XQaEC74DpjfYOuCjauh6gJSA2BGQFlHDZsnVLbx1aSdjRUCvA77MuYxInn3yXLq/9xNEtpgrLrO58KIhfxMHwK+A35/qm/kq0ww8CNyGmqbQmv9mLAplpYLSEkFJiRgu3gAeAb6AMmLRaDSvEC3gNBrN6UYUNdD+w/kLDSEICBAVTYiCDGQg0xKhTETIEGB55lCHMVOqJF/XdEbXZZk5fT1PNWSUbKhAiTwYOn3BMaB7GfSPB7uB5ee38raJEtcBJxRuUoJhw8H18zjy429B60zGjjW49T1RTGOIWMnN+Hw1u0JPJxzgB8D7ULYg+U0WPipB7YbrZVHNGn9ENUI08to3Y2g0byh0ClWj0ZxO2Khux78j7w/Mw02SH/0kQyZpkemNsjBi8JVL5/Lxp/fw88P7uX3sLPrMFvWNNnwSg19EUflazOI+/DYLrGBQOuTWyQ2mPzgNOospXvIUM8/sZ0k1pDKh+UhoEFxRDLv3TOPwL79GNDURs9Dlwx+MU1gw5Dp6gI8BTaf6hv6V8VHec1tQVi9jGfStG3DWC3+mUOOzGk71SWs0bwS0gNNoNKcTlwD/QJ5427s/4BvfTLNzJ2TiO6hevoq31s1gljWP/15SwH+ueYHLqsdTaVSD7B9aGi8BM0VdpcXK5ji9jgeFKLGWIwBsA/ZOg3QBZ930CAunuVRHwcnTeh4QNQ2e+/OV9NzzJaz+ydhRj3fcFGXxwiFfpT2oOa4vnOqb+RpyGLiHwc9tuP2JjrZpNK8yWsBpNJrTiWWERfEAra0B3/x2hr37AognGP+hT3H9hYcoZDR73bWMKzWZMqmYFxI7qIrWgDigNhQoYWaCcIoZNbWI1sYepJuGKlRq1UXJDQ/YXU/5OJdx8zdzzmQPy4dMrpwuHK8VicKW5y6m91dfxcqOxZce110b4e03RPKnKbjAJ4Gfn+obeQrIpU41Gs1rgBZwGo3mdCGKqpcCwPXg1/c4bNkSYNtgXfXfLDrvGZ5ui/JiTwM2EDENxsULeKL7MM0HusGMqgkKkgGr2KKsZEJlnBd396q5pQZK3BmoLtO1cymfvYt3n58lFpH47uA41VxJm2UKtq49k56ffRUzO4bKyoBb3h3jsktsjMFK4iQq/fvjU30jNRrNGx8t4DQazWuNARQzaOiai1+NR83ddIB4d1fAzl0BpiFwJv4B85Lv82Bzlh4nSyT01/X8gG19/RgmtBwogZgDRVkVBzKApunYZheBkeJwhwFVAZhgmmCmLZy9Eeqn7+eiCxwyhkR4SrTlImqmCa4v2PP8lfTc/2+YfdOoH+vxwdtinL18yNdnBjX8/YFTfXM1Gs2bAy3gNBrNXxMTqEP5uc1CGcAuRU1WMMnrGQ1/xsMHhimI2CCKOohf+QO6RQbfhagxGCEDleI0gCnLmtn1QgUIC8o8JeKax1Izz2dNz1oCGXalBlBTAqV99TRN7uOa5T0kXVXvVmAODtwyBCQci93f/l/Yeguma3POuZKP3F5IVeWQbtM0yu7kjWYXotFoTmO0gNNoNK8GBqqDNIYSaBcA01CibfYr2aGUEtcD0mV4z9xKZNYLpPBGrIYPJJSXQMmkLvqaUHKwtxAyZUTGPcXORpegSq0rBFw6EX65M8Nll/SQdqDEUpsM+GBIsC1oeOomxMbbkNJg2VKTj34kSkXFEPHWjRox9cdT/QFoNJo3F1rAaTSav4S5qOjaJJRYmwdMASp5mVFJ6TR0dgUEAQS+EmGjRwuiEbVZcbFg2jSDPXsN7M3vxvrFIQpv/S8yKR8pj957xAC7hMHh8/vnQYFHqqaL9EFUXE/CtBo41B3BtDNICWkfYoYyCs7VvZUWwf49k+n808cwMTj3HJPbbo1QUTHEOrMfNVrq57xxvd40Gs1pihZwGo3mlVCKKth/J8oWNxo+RsTzwHUliYRk/0HJ/gMem7f4NDRKCAyCAIThM3Giyfz5JmcutaitEXzo/VHa2wPWrPGwV38MY9x+nOW/QhZJvH7ACXWcoUQgMaAM6CqE9DioXsWhwxI/CxSCGcCoKli/OaC4wsfzQYaGvhJAqJTs4UOjaf7Wt5Bt8zn7Ask/fzJOJDLkknqAzwLfQ4s3jUZzCtACTqPRHItcjEui4lelqPTou4AFwIzjbRwE0NoWsHdfwI6dHgcPSbq6JF3dAamEgefaCCSUNYAZIDsm0tPtsXVblocfcRk7xmDqFJP5c01sW7DqxSjGg1+iYMulOBOewJi2gcjEBqSRRno+PhIzQH2rHZkPdhvE23BTKGkZgF0EBxLQ3+0xZ6lHkJuuEF5lzILuvnIafvBV7NazKSz3eO8tBcPFWx/wj8C2cM/pU/1BaTSaNx9CSu2vqNFojmIKcBEwGlUeNh5YCIxDdZCOSG8ftLb67D8QsGmLz+7dPp3dkmxGeblKEYBwCSr3Qc0O3NErsea9hDBc2HAhcv+lBIeWIZw4witASoOCQp/qaojHBc1NkOw38MlglvQg44fxRm1CXHw3RdPW81I7tBwG9s+AtikwfhWM6wQXSmPgjILMTqiphXH1ytO3OgIVEdUcIUyTXXd+B7n5HQgBb78xwm23RPOtQrKoqQM28J+otgg7vEe5RoxWYCuw51R/iBqN5o2LjsBpNBpQ0bbRwCLgg6h6tjEcJy0KkMlI2toljzzicuiwT2enpKcH+noFnmMCNv0le3ArGyis20DtjMPYNY3EalqZMraNsmIPQ9oYCKxlj9HQtIqm/bNI7BnF/l0TiDgTyTYtpOngGMx4imhMUjdaEonYdHRW0d9eSaRtKZnuSoyPfRTb7AZfQNVOaJ8OIg4CChwoHw+Ne8AwYVSNOn9PgivBEtDdMZrmH/431t7r8X2Ps8+2uPmGSL54I7wfM1FRt5/m3bt8fOAQqrHhbuD/s/fecZJc9b32c6qq4+Swszlr82pXEWUJBRAZYZKNMThhG7B9dX1truM19vXr64gTxsY4YBuDySBAAQmUs7Sr1Wq1OcfJeTpUOO8fp2r6dE11z2zQzgqdR59Wd1edOlV1emb6u7+4b7Y/XIPB8KOHscAZDK9dMqiIsbeghNsHUPFsM+KZ5zx++JDLzp0+ff0Sv5QFz4HUCKXcCUrte8nM28Kit/2Q+XMtVnWMsSQ/F8dyVPE3ESmfiv5R9UQsAgrsKBzi+Eg/L7ywivLea3Cfezupwc04MoOTkuQbJC0tgu6TgnH7ENmPvpttbTs5sh8Yyysr3Krt0Ogyr1mJtf4TsGIztKWU2zRvq9eLm2Hfn38aXvoQQQCXX+bwP+/M0tUhZroctehHNXr/dPj8o94b1WAwnCeMgDMYXnvYwEbg11FxbJtQrsBEiiWJ56kkgcHBgOe2+GzZ5rPzZZ/xgkSIgMAex99wN9m1D0B+gBVLTnHRsjIrOxfRioNDAy4SFammqPzl0TvLy7Cyrwhj0zxGGOXE6ADHTzXz3PcvZWDr7TQNbMKZWKJEoBCU27aR++U72N5wmEN7gFMtMDoXLtsHYwEXLYUju0DOhdWLw0JzQNqGTsdCPvpRSl/5f3iu4I1vdPiVj6XJ55TpzffB8yRSKjEX/c2M/nRKqR6NjXXF3hiwH9Wl4W9m+wfAYDC8+jECzmB47SCAa1DZk7eicjanIAM4fCTgxKmA4yckjz/hceKkwA9symUoTEBQtpDWBO6iJ8mueoj0pY/QtuoU71qapjW1NLSkOYBNgESeRS9zJegsBJISJfb0H+PhnSnKA3MITq2lfHIxpdUP0XTFfbxQ9Dl2BNiZgY4SLAF7ArraoecULF4BLXlISShLeF07jDzxLob+8y+h3MV111r8zIeznDgRcOCgT2+fpLsnoDzh4PlKzPmBRAbq2Q8kQficciSLFllcf63DhvUObW2CTBq9T2rEYeAelIt1PzAQPswfY4PBMGOMgDMYfvRZhGoS/07gbSS4SV0X9u4LOHrMZ9uLAS/vEgwOqFptw8UiQXkXy1p2kkn70CZovHiQOdc9wbq1A7TksqQdsISNhXVWYm06HByUnAtwcCnKEn3lCXrLBVxK7C4c4l8OTDC3nOH3Nl7D94f2cveJ43jjkBWwdJnqsZoR0NAAzY+8A/n1z+OXUtz+Rpu3vDnD33+mwK49AYgAKzuGlR0iaN0NDT1YqRKWJfEtD2H5YHlgBchSG+WXbkcMLyOwXZqbApYsFbzx1hSbNzksXmxN9lXVKAEngYPAN1DxchOz/cNiMBheHRgBZzD86HID8CuorgitqGzJScbHJS9s8/n6t8rsPxBQLCprErKE9B8nsJ7lks3f5oOrCjQsn0vT5QFjrfMZwcUnICBNCZAEr7jpSITu1R3dffzHN7fS6wRYq3PcuWkz85vSLLJbAYmDzUn6GCnupG+0n28eDnhpl8BLCQrtAeVOn5QjSfsZ3uWupefPv4JdXIGwlOhKpyW9fRLfL5O54stkrv9vFq3cQzo/jrA8hJQEFjhWxY2adaDJFpx44XU8f/e7ES+9k3QwByyJ40hamgWrV9u8/a0pNq53SKUSb7EE3A/8FrAH1Q/WYDAYamIEnMHwo0XUe/SPgXcBjfEBh48EPPGkxzPPeuzY6QMOfuAzNjGIkI9zw6qv87EP3suSOVmCjiV0t67kZC7NMAWgjMVZB/afNgKBQw7vO49z085jjK61eH6sk++d6GGwM0V763JKWASeB4XD/PzSLHMXzcEpwbESuK6glHHpzhVwmwexi2n+9WtvZuQ7P0sQNOFYHTTk52M7ql1D/s1/wPgbP0vvxBAvHQPhC2QAgS+RPuCjnj0ImmF1J7zv4iyXtLTT3zeH5+96I4dfuI7ywStIeR0EMiDX4PPm29N8+KfS5HOJayiBncAPga8DD533hTYYDK8ajIAzGH50cIBPAL+Iqtc2hW9/x+XLXy0xMioJAgc/sBge3kZH09f42C1fY/OabjpXNDMw70oKTRs5lTpFgW4sLMQr7B6thxJwWcT9T3HtiSNYi4AgTZByGR8TjG8NKH8X7H5obYGGHxPQLpSzeCNgh5kG0oLAVoU+xl08CbsHLB7du4ATBzYjygvpbxzn5c4HONRfwhpopKl7AoZdSrZNdsko43MF3fMDhpuCStSaD7k26FrkcNsGmzs7bufhk8d5Yncnpx68Hnvn+7DHlmOlS2zaaLN2nc2qlYKNGxyamxLFXD/wVeBTmHpyBoMhASPgDIYfDSzgv4H3xnd4Huza7fNfXy7z4jYPLwDPG0P4j7Bi7vf4qVu+yg1X+7gdCzjVtJ7j6TxjdhrBKBBgYc96dL1AkCJD6fkXuGnHXpwuwA3vWqDSSgdRjsgAJdA8VEfWbDjG0sYLlNy1wmcHVT/OtRhvhuEJH1F2sIRNemuGnsc9dj4xwcBJeCmw6G+FsbkW+y9K0b8whZ8JGGwbx20CvznHLVfCJzfdTgaPPcFe7nnBoveuDyK3vx8xvhCEJJf3WLvO4r13pLniisSSnBLYBfwuKkbOYDAYJjECzmB49dMC/Brwf+I79h/w+f4DHg8/4tI/IPCkg+39PW+95mvcvOZlLrlomPHO5Ryev5G+TAbPFqjwqwurvaeKgQvI755g8zM/JDsPJdaiIrsS5TzWm39BVFiuItosqsvuWtochLedR0UMymgZsspq1z4H7h+n++Fexkdg/0GL8XGbg2MWYxKOtUgeXJXmQMfN+Fc8xQeuGeSda9axOLWesWCMo8XDfPf+pfQ98D5yI2uxei9DpAp0zRG88Q0pXn9DigULLBIYQ7lUP4pp22UwGEKMgDMYXr2kgDegxNuNaEkKxYLkv79a5oEfuAwOSQIJpfIYcxr/iC//0T/BmM/Q3HkcbdtEf0MXrhgO7WySSOFIIE+KDFCihMQjQ5oJbEp45zUWToTnssclF9/zJG3pvkofGb2MXPySogZXUBFqdtXEFWEXvQ8S5hRAJq0C3xwfHPBdoAfkEDAChUHYthr+dMu1HJ94A7vf+ln++SrB0tyNlBjHIUOBcZ4efpAdR7sYuvd9+M98HGtsLql0QEcnLFlkc9XrbG67JUU2O2V9vwj8MsrWaDAYXuMYAWcwvDpJoywyvw106Tv27vP51N+W2LvXI+VkGCn105h+kTs2/w4feOsWGlubOLLoCo40zsG1XARepaE7ECBpoYUWynyD/WwddPB272GkMEF+YQu/eNFVNFs25fNopRMIFX/n2yx8chtrjh1Udsf4JVhVB1W6k+r77IQT6NY7/fg49eYPABcGRh3+5LE38mxhE8ffcje/+jq4Ob+BE4yQJgWUGZOjHBzu55GHOzl1953YB24j7TdhZV3S2TI332xz569MKdNXBh5GZRbvwdSNMxhe0xgBZzC8+rghfHwcWKDvePBhl8//R5nungBbNHB0/C7eufQ+fvYD32dZ+0FoamXbsncwmBqGsMSujkCQJ80Phh/hmX/LsmTrEeYcgotdaGyGT14O7/zkldyaWsoQpVm4dZv80TE23fcg+fn+1N26FS4SWFAd+xZ3o1amTt4e36bPVePPp+cJBoeyPFRK8xsdo6xf0MVvrnwdgVCrLiZtii7Hi6c40i3ZdzJN/7Ovp7D7VoKDV7NwvsWtN6d4+1vTtLZWXUSA6sP6O6g6cgaD4TWIEXAGw6uLH0fFus0BOkElV46NS/75X0vcd7+LLyWOPEk293l+603/zetunIDeHibaOji4/DpO5iwsvMmsUjvM8DzMMIf2nqL32VNc/EA31w/AkvmoeLM5QDbF1lWrOHnDMhpI4+OfxW2cGQKB5+dY8fBzrDy1vxKrFke3tomEh+4yrT7BVAtdLU9xFD8n6+y3BeMHLd77qM89b4fPXH8Jq9OLtSkFdvhJ+EzQ65/i+e4jbP37P0I+9SuQHeXaqx1+5WMZOjqmxMfdhSrObDAYXoMYAWcwvDpYB3wS1Xg+SxgBVirBg4+U+cpXPQ4fdAjyu1jp/xs/NffLXPM/TpI+CSxbytEF13AoP4ZnO0SWN4EkR4ZB2nj8T35I4dkj3NHocdVaSF+OEiBB+OzDeH412665gaLTU3FpnmcEgoAmWvccZsPWx8g2UV/A6ZmnUC3O4u7Q+PHx/TI2LhKDdo1rmBwvmDgl+L8PBLz07nZ+68abKVCuqQuz5Ngzuo3/+POPknnhw0hsli+x+fgvpdmwwYm35vpLlKA3HRwMhtcY9ic/+cnZvgaDwVCftcBngTejYt9sgIcf9fj2d1zu+77LyZ4SHTd9huXzfof/b+hx1n1+ArvfJch1cbjjAxzqGMa3vFC4QQ6HU77kG8/fy/aPPsPvPzLIHbcELL0K7NVUCxIJUuQ4uuZqTrZO4Jz25Z87BIICvZQ6VjLnpYDccHdyLBxUC1B1cHVyQpIg0+55cn+tMdG4QNvnaWOCyiPVCLchePy5As5NksXWPLwaAjhAkks79C/5GidP5rEP3cjgqMuzz3vM6RQsW1ZlIrwUZYd8gAstddhgMLyiGAFnMFzY2Khirm8ltCX5Ptx9X5kv/FeZffugf0CSXfUM/Sf+mv8nXmbhpwuww0UGjRy/6Cc50NGDZBzlrrPIkOavjuxk6E+38bYvTvCxG6H5PcBKIIOqoaZbrQRMdCxm96rllMRQmH0qJ6O4Xgni2iraGrXt8vFwHGgrnMDyg9qCLHJxxl2m+vN0Ai3uuUy67Ujw1XoPMBcu6YW37e/j9kvmkCef2IRMIrFEls3t87E33UO3PIh34ErKpTRbXvDJ5QTLl9vYSselgKuBecAPUBLSYDC8BjACzmC4sJkH/BWqOhkA37nb5WtfLzM+btEfHGLD2/4Dv+0xfo2HuPyPPNgjkZk0Jy76ZfY3nJwUbwIIpOQrj21n+a/u4Y8Plln1E5DaEE4c1xKhRamcncuejVdzKtuLjaUJtyDUKUGonc5O0MVdsgF+OHf0kJOXKSgz3txC+rmK6usbAACAAElEQVSDtJQ9tTq6dQ2mWtssKiJPF1jTWdrqWfFmfnMgoXmJoOMrgl9rHeCtSxfiCDtxuKpmkmJjfjkrr3yGQ63fZ3jLzchCO1u2lRgbk2xYb5NKTV7ExSjp/RgmO9VgeE1gBJzBcGHzP1Fxb0gJ933f5d+/UGJkyKLQsIc1H/k/ZK/ezaF/eJbf+t+D2PsCZXlb8UH25keRDCMR2DjYCD799HbefucBProBxPtRVrcCyQJGgJfqZN/62zjUMYIVuIBNgMRHWb2kpoJ0sZVsQ5OTj/h/SqxV/1d9pHofEODLAB+fwIGUbzHvkX6YK6sTFuLoFjfJVEucrDE2eva14+wa42dCFq4IYN9XynznypN8oH09I/g1xK+kRJkcHVy60uNg1930vXAZjt/Gvv0BqZRg08ZJAWgD16kz8Gh4xQaD4UcY6+ynMBgMrxA54NrozZGjAd/6jsvYKBQaDrH4w3cy54od/PX/LvDpOX2kB32C0hL2r/9x9jUOI+kFLBxsYJgvPP8S6z55iHfdhCo+IlA1/iOC6tdBrpVDG27m5XknKfuDoazyAA+BJJABnvTx8fDw8fAJQvEWEIRbfILJR+U/GXskIcOxnvRxw4cv1VgLBw8Pt2spRSShX1W11/KmTFQpzhto26L3QZ330SNyKfuoamxQ7Waeqc2rBKyFP0hBzxfH+fvCNpoq9ZcTCfCxrUY+cqvg2j/8ZcZW3kVQyvDt75Tp6a1auzTwv8LHbIYqGgyG84ARcAbDhYkFvAPlGgPgO98tc+y4T+BMkH/zH/G6a57gi/81xAce3cuaD0zgDzWx54obOJjvIaAA2KSAHneUv/3Skyz60D7+4GWJNYr6em9ERVDF68VKkFaew8vX8/LcEVyvH6SFL32CIEBKSSB9ZGiWCqI+8RJ8GVCuElxelXBL+q8i8Sr/efi4MsCTUcasbuhSDkaBR/eiLAMXL4TDVCxjPlPtT9F2fX/cFZok5ILYvuhCPJSQi7tpaz2iOVygAeZths89Bl99cR99ckJZNOvg4+GS5S0bWvixOz9NcfH3GepL8Td/V6S3b4qI+13gD1ERjQaD4UcU40I1GC5M5gJ/DawGrLFRyZe+Wma4L8vw6v/mtl/8Jv/49CD9/zqf3+07wpqr5/Fi1wp6V7QicAFoJMthfP7sDx/iw58q8YuDkMqixMdJYEf4egSVxxiKEClgx/LL2Loig+v34pBBygCBMyl2IlGllFDFbCWEpZVbU/+XM/6vWu8ke0MFUgYgAgQCV1i4bj9zjw5ht4WXUcsqFneN6ugxckkkXUwk2nwqCROx5I/Jhy4YfWA+LDoF3c9JXr52lEvzq/EoTRNHKAmwWd3aTGHFoxw/NIdjLy3jyNGA1RfZtLRMHpsCrkHFT74EDJ2bH0mDwXAhYSxwBsOFyU3AesKSIT98yKWnRyJ9j4bN97B3aBd7HnoXKes6Gj88l5HvjjK2aiEyLAeWIsPLpcN87/ce4Pf+oshNA5JU1Kd+EGWbmQDuBb6HcqUGwCHozTbywuI+hDsMgYWUYXybdCG0sgUywA9dmsoiFxBIn0B6BNJDygApfaSM1M25ylhV5rEozi6Dx9jqFQyTUaLUpmJh061oujoMqO1WhepeqLo1zk/Ypx/joSxskRtXf8QzVG0Qb4bfLkPvX3bzneLjtJJGVCWJJN19wCg+b9iQ5Sd/53P46RNs3Qq//psT/Pt/ligWJ4c6wEeA+4Cl52jxDQbDBYSxwBkMFx4O8AngSkAcPhLwL58v0T8AhRUPcMWP/TsPPL6R1l03snL0I3xjwXcZfovL0k0Lw2bzZV44+jT7/+9ufu5fXC5PCebMA6sd1VGhAWWbUd3qlZDbCUcPWey5dg4vXJ4lyDchJn2SyrIWpRtUF5KVSBFlh8pKAoMIJuPhJtWPdly1RJlO3CmrmwyzUqPrUdY9Hy9tIf0cXcd7sBpRAiqyeCUJtHiGafQcjU2y4MWzVuMu1fj4OPq+6Ngs5I7C5ofgWwvHWLa2nRwN0xZIHimWOdZrsXRugeHWrRx/cSP+RAsvvewxPCy5dLON44joTjvUp8vzp/1TaDAYLmhMoKvBcGHhoJrU3xFteG6Lx7HjAq/zBa7/pd/m3hMnKT9yJytOpWlf9mbe9KutXNl5NXlybOcgX/2HLfzKv/n84m7ILgLnLVJ9lV+GsrxFiYs2yLSFezzHi7kOtt3RBBmXBjcLgUeAhyVsJBJfetjCVvmioVVNCFtF2cl4NTOBkICwEOEeCwuhxXlVj7cQQiIl4fkILXfJo+NYSLqXpRjZ5dBWcis7oilUyFyFSKTZ2vtoXOTu1LNNkxJqrdg5ok9uukuOxkcWvdfD6sNwwxckX7+lj19smouLX0PSCmw8nj9U4v/+3mou++Wv8PU3d/Ancz7B1n/8BTpOvol77iuycL7Fe96d1g+8A/in6X7wDAbDqwvjQjUYLiyywBtRKQYAvLjdJyim8FbfT/tFezi05VLWNuYpn/ovPvn7XVzXuQyB4JB/kHu+8Qyf+GzAlYckDReDsxGVy7oGFRkVWafSIIXg+KKVPPye1ex5Xwtpy8UbH8EPlAiKl/PwpR++U/JCSh9PFvFkWYtg046UPkEoxOpblZQbViVEeEgZ+RyTquGGZ5Cy8gh8rPmd9KXTMBoe4lGdrBB3qUYuT13Yxa11uuszKSEhHqznUttlqydW6ILRBVrg9Uge+d5u9gZbydJcY70kghSrV45jXf8gW/773Xxi/1Y+fkWR133iTkbbngDf4VvfLbP/QFViw5uADzG1y6vBYHgVY1yoBsOFxVLgl4AugNExyef+xaXMICO3/SUle4Qj9hHG8qe4/mdSXLR6AR4eE3KMtl07+YV/LjJ/h6S5FexVKJdpO9CMEnAC3JTD4JxOdq6/nG0LoFf04AQ2MpCkrIxKUBDq33YqKaFiD5IEICQi9m8/ico2RVSSFyLTVSRGhBCvXPcGK0fZHWXhsWGsNNViK27Mq9VOq1YB4CRXaZJ71UrYljROn8dXn03rLujdCV/aBD8+Zx4FUiR1xgqAhXYGKYfY8lyel7dexPjql/n5VfN4xnkBd/utlMbT5POCyy6ZNAkK4ApgC3DolfkADAbD+cZY4AyGC4c88McoexkAe/f6jI4G9C65l7dcvZ3v9fXR3Vpi6Ruf5Q2XS8qUkWRZcLzEtQ/007hDQgrs9SjxpnrXgwTPtumd285D167i3ssW83z7Hsb9k9iISUuZomL/URYx0H2IUkpljZNTq9kG0seTZTxZxJflMA5OzRnI+q7QM0WJTZehjXPoHQNOMbWcSJRMoMe6eVRbyGolLySVHkEbF6GP1zVsXDTqVsDQJpZqhY8PQva+Ib7HIVpqRrdIXLKs25gls+4QyHl84dPX8aldPfzGbQ6plY8DcM+9Lt+4yyWoaMCFwCdR+cYGg+FHACPgDIbZpxHl5vo68B60aKr9+318ZwTvuq/gNJeZ6IcfX7icP1/8VlrtTjzp0rZnHxc/+BypY0AGWlaDaGZScJTyFv3zc+zYvJAfXrGIIy1jlN0TpF0bgY2UEk9OxC6pIugC3FhMGjDZPSGo4e5T0W+BLOPjElniBIKslSJrOVOseGeKlBJBgJ+ZQ/eaLoJB7RYiV6q65GrXarRNd4smibQgtl8Xe7WKAeuCL8mNGk+EmA+LAvjZhy0+/fwuehiueb9FJDc0Leeay/qg84cEluTLf/cGvjmwhSvf91+4uQOMDjv8+38UeezxyarGFqpTw0+fk0U3GAyzjhFwBsPsshLV6/RLKBE3yb79Po8+6SPSE7S0neLLR8Z4+8Ur+OjSTYwiGJFDdGx9kY17nscWRXDBngt+J5QsKLYKDt2Q48EPzON7tyzhiSUB41YPti9riKeKmlFZnxWFEVApEaIrnCAsKRJIPzwmjsog9XERCGzhsbN4nGfGjyGFSpI4F607JdBEA/3L8qqQiu59jFvXImEVJDxgagwbJFvnfKbG0MUfcascsXPpxzbD+44GLLnf5zn3aE13c0DABD7vWL+AlD0MLYeBFv7hH65jbMNjLPnVX8XNHqBUEnz9WyVOdU+ezEH9A2HeWS+4wWCYdUwMnMFw/rFRhXpvBD6NEm4N0U4pYe9+n//3Z0UOHrTwFz7FwA2f403zFvAbi66mQMCB4hDZE3u4bu8xnAkBLni9cMiGR260+eElDsfekOXINcvoaXCxghLpQKgqvYlEBXd9LFEJIlMxbyIWB+eHsW7quMp2vcyInCJAWpw8XzjwJA8+cIrevX284PewvCtFq92FL8ucSa04gcASNkJY+LjIbBf5Rw/T2hxEAxRR5qnu2tQ1bFSEVxdegqn/xE2KY6uVqRpHF476sSOofrQTkD4Fx3144soJbmzbgE95yjpGXtg5jZLH+l5g8OQApHIEQQeNyx7lolWH8ShT2HULQwMWC+bbrFk9mb/QhYqDM2VFDIZXOUbAGQznlzTw88DngA8Dy9GyAz0Ptmz1+Mw/ljh0CFKBoPvdv8zbLxvjjo6rKFLmACM88/XH+cXMOBnhQ7fSZU/OgX++XZB/8wKa17ZQas3huWM4gVAdFqa5sMmQLeFjVcVghdmnVaItzFAVAVKqBIXJ7FStr4JEYlkWtrDZ7fVx4PM9fHG75CfKcF0/vLRE0tDURgpHi5cDJgva1srGdBDYiFC8qauy8O0S2SO9zC2XlL1JF2pxURYwtZ9pXLBFY+Lhfkk15eQ0D32czmj4GASK0D4OX1jg8ro1jTTZHQQ1+tJnyXHxsnae7jvO2PgphNtJkCuwPTfE0mX7cQabKB68AS/wuO2WyX6rTvgztxU4djo/uAaD4cLCCDiD4fzhAO9HNRtfSSXWzQLYfyDg379Q4itfK9PTKxGpcXZf8/u8+yfv546WWyj6PlvYyR/87XN87Z6Axjf6SC/NSDrPvsvXs/XmNIsW5cmWLFzXR8hKNunMqQRnCZGKbQ87MkwpnBZtj461QkGnlIovfRrsBp5/8QR3fnmUFWshU4a2kYBy3zh7Vk3QlplPVFtORP0IRAqEppSEwBIOQjgqozWsKCxExcxm2XlS4zbz953CamCq0IreW1Rb5KA6K7XWtriVrVa7rvj+WlVRfGAcGEY1uh+FTgl7huHFa/u4rmEF5RpC1iegM9XI2zY28VRhLwNjRyju28C1G49z7/gE6ze+yOi2K+net5hVF8GiRZM/C13ApcA3gQkMBsOrEiPgDIbzx48D/xuVZRq4LgwOSat/QFoPPuTx2X8qs+V5yYQ1gD9/O/nb/4617/o+H+hcx+HyCf56735e/t51rP2XAj/27glGFl3Ey51L2LI2xZH2AOGVsVyBj9REzZmhBFkZCJCCsCtD9QjCsiFxd6k61gchJ9tw5VJZDj45yh3Pj5BdoA4XEpaMAEMlule1knXyFUteKAAFliplIqwwbq/+fVkCRjt9Fuw5TkbXPUluz6TpksqGxAsBi4Q548cnibWkbgwBSkINo4RcBqxeaOkVfOMmn5VdLjnZgVXj8/QJaBItrOro5L6j+yjJQca617Jh3Ul2dhe5eVEzh56/Gkc4XH55ilRFkzcDTwF7zuoHxWAwzBqmE4PBcP7YAKwAgnJZiq9+3bXu/b5ny8CmUAgouEXGr/pXOt75T7x1jcvVTVfzsuvw2/seZV4aTj5/LemJER67c5C3vm8zecdnsHgQhyx4Sh0E01yAFBBYMaucCPWMlFh+RWUoDeKD9JD42CJLXJVIGYRjlX/Swg5FjZgszqsi6zysrMRtRgmVLKofqAcrjnns7x5CLmk7qypxEomNwG1oYUBkafYKlW4K8ZpvUWkQqAg53V0aCaxoqYS23WZqXThR86KqX8cTI+LGzPB6rhqRnHxAsGdDiVtTGQqUEk8igAlcLm+bw8/f0spnvjHBieOtrCzD4JDP7pXfYv6Kd/Dc81fx2OMut92SIvz4G4B3Az/EWOEMhlclRsAZDOePEko2OP0Dkoce8ewRvxevZRdiyT7kxu/zplvvZ768lpEdi/lfB4Z4sbSAVVccZYAiY5te4Ka5ZT4yZwHSO8pwwcdJEFVxhBBIIfGFheW5NJ8axAk8hES5WSVYQcBIU4ax1hwZKzelxpvEx5Pj2CKNIFXjnJIAT1nXsKfExQlX4PehWnqNhIfYkB+BfO84YkmtmLeZIcJEjDRNnMqmWDZcqO49kJRsoCctJCUs+FRi6aLbiUSX7obVjyFhnngvVV0kEpvDVlO/70nJZ945xjWrhnGlTVpkap5gjDIfXHwzj214jBfvauXojlVcvXYvW186zk3Xf4/hL13Bs8953HRDikxm8sB3Aj8AvnDGi24wGGYNI+AMhvPHZDS6YwvyTo6RS/6BJe/+DHMyBU6NNrJr69U8cNcvkjp1GU65kcuQuEtuoW3NTt7WJLmprYNxd4JAihmX4AiExCkHzB/OcNlL0HlsIhRZISoXgZ6cw93vzCjrWK0bkCUsJFZVfNxUJP5kAeBJjeNYeKXYQAsaCrC4J0s30zlIkxCT6Q4IMWlAE82WSgqAZPcpTE1QiASbTbWgS7LgRZ+m3lMVbX8Qe9bWukq8RXNo1jcEkIJ3HIT/eHiIrUtPcXGqCzcQpKzkdS8hySO4/co5bH9ygp5ta/nA1SPcM9RNYenD2CmPffsd9h3w2bBu8oJbgf8BPAgcP+2lNxgMs4oRcAbD+cOffBbSkZZH9vDrOXRvP0esRpwdN5I7/EbabRAioIygGAyzZH6Bdy9cwlgpYNgPsKaTOQIQAmlZ4JZYeFKwdtcIC7t7cQpesqXJAnt4BFlOQzZbd3JV2LeMJXIzKMYb5aQGtHVmlQ1yjGpB5EPLhKBnJqU4tOtwhFI7U4tsQDbTAv5Q0uVMrckWd6Hqwi5qbh+5TZMseB7JsXBJ5016rZfW08Tc+iL85PcEd13zEps2vJ5A+gjSiYWTbWCAEj/dsoG9P/ZVvvWPb+GZngZuv7SBrceOscoZ4OSpBXzrW2VWLMuSy4nobKuAdRgBZzC86jCFfA2G80cJ9XVNLiv8zi5P2oduofWuz9H87b8if/BtpNKSri4Vwy9dGNr0BdYsHGOkFFCScvpfWMsiEAKrLJl7osxtTwxz68PdLD02gVP2quO39EcAE215yhlJIJPjrXQk4MsiM7EASsCTPgub0lAUKuJKn94BIV0tQbT+XVrCIhVmq+rTCAR2+G9SkYqJ0HqCCmrHqiXFq8XFlqhxDNqxSfNEr+N16Wy1OZeDGw5Kdm8RTDDGhD+kXNQ1PhsHQT9lPrr2BprnD7PvmWZu29yO29QLS+4BP8WTz/g8+pirH5YDNk/7IRoMhgsOI+AMhvPHpN2lsVEEb39b2t18qR9cdl1BXnl9QV5zvcfP/UwaxxYUxhzKax5k/vv/igVpJ8pRqI1l4YoS2YkiG18e5Y0PD/GmB06xZH8Rx5X19VhoBTqxvhWnsRkQBNKlvjgLe5/WqFGWNLrUJOlukRW3YbRDgOX7CAQpHBxhof4T2vHhf0JMbhdYWNjaIxRvSJWoEXed1vtEpnxC1Ao3Sz5Od4MmdXeA6tZavrY/3r4rLCocCLjGg+vulfxT90vkUzDgncShtvu6hEeX3cnvf6CNQ0cvYlgcZZkjuejjf0Z5ztMUJgTPvxBQqmi4NHAbkMFgMLyqMC5Ug+H80Y2KzJoLiEs3O96lmx0X9XsYPfjO3S4EKcZu+TNuWTaGbc3FDYrhFNUlOwIB0rZBBnSeGuO6F1zm9knwAyUE9N/wyD2YwFB7jr1rLYTvTmafBtIHocRRLQUYyBIIiVVHVAghGC+Pku9o5JmuLJcdKSqbT6T9HCiLEexAIG3lv7SFhR/2XxVYk0WEZWiqsqeUNVFrM3md05VR0ePaoNqqpu+Px8JZTHWjxtH/WRzPNE3qherF5gxdulJCowMf3gc/+ZTHu97ez1wxt+5tWQgG8Fm/uMjGlcN8596NrFr/Envt46y96evs+dpGjh3LMNAvmT9v8iZuAT4O/G14NQaD4VWAscAZDOePu4C/A05QCX23oNqMZQtBQEA6DfPSKSWkAJDYOAjLIrBsbCdHM/NY1t/GZS+O8tYfFJnb66uMhFqaKyFWy0+l2bapkSGrG+mXJgdKBFL61HfcCgLpxbJWYyOkIJABVsZi90Zb1f+PyQRlgbOoricnQQhKpUH6Tmynu/sFRst9OIniLX5On5h/dWbUsrzp+/VxSRa8yKrmUV3vzU947U1dCzIgQgOitOHNg/A//sXj0zu6GfJPhFnA9QjI2Tk+9VN59vXvY88QPLkFBtc/TrbtJAcP+Xzz22W8ynnTqGSGlTNcJYPBcAFgBJzBcP4YB/4R+HNgL8oaNwQU9UF2SsWBie1Xs3cCLCs0FTktFGQb1pBgXU+KK7aNcutjx3j9Q/u47KWC8oHpdcuSiGVRBmmHJ29Ywq5VkhxtCQcKJC71ENX/m4JExa0FVoH86yVH4oH/FrSOSIQbTM6nGt9nKRX7WPfV53nn35zgjn/pZsFzRxDSrtnoPTJl5fsnqq2P07mQk57jze2jfbrrM3r2Y9tkbLsu9uJCzoV4oeCogYYE0ln4YC/s+f44X+zpYSk5gmliDwMkTaksP33LXE4Og98H2cV7kfOfQwYOTz7lcuRo1b8bOoDFGAyGVw1GwBkM55cS8M/AzcAVwLuAx9F+F5cvtbBsCA5vQLgOdx/vp9Hq5NfvOYr/2y/xrk8d5+qHD7J+Vw/tp3pwvAmw3dP7bRbgdjTy+Ovm88yKU9hB2DUhfOhIGRDI2sHzEjlNzJxESrB8j8xCj8eWogRcpB9saB4TpDxVX86e/C/D4mMOa076NC+BliwsPDJBWfp1M3EFWfJew/RiNvlSk28jHs8WHy9j+2vF1ukZp7qlLp5EoRkZPWDBBPzqM3Dfsx73+ftpp2Ha23AJeOviTWyc346Vgid6Rmh8+2cJ7CH6+uDhR6tMfw4w5zRWymAwzDJGwBkMs0M/KiZuL6qUgwUq7ungoYDAE/iNvdh2wLhwePgwvPdzDXz8WEBTW4DlyCRjWf33EQEU2i2evqSdF5cPkivpHd5rMZ0K8qYdIyRkW+ZyrBE4SiUbNQWW52KVJsJYOjWP77s0Hj1VmV5CV3+Z7LiHP6XDfISNKHWT45hyDMZFl4g9T0dSdup0RBa3eAKFnsUaibeyNjae2BHGwgUC0gH8xstwx1dd/sdzj3GyfLRu3CEow16nnWZRa46JDhjZB/PXbCFY9gPKxQz79vl4lc4bFiaRwWB4VWEEnMEwu3wAJeAAOHIkoKcnQAYWmXXbIVVk1Rybr32hxNuGxiCP+mZOCqQX1BdxoQA5tayRb13fynPLu3GkhSUtkDNRJrWp3Z1BP7+go30dfU3AAaBQuQ/L9skUXQLSqA6fkvbxFubu7qsUFk5DQ9Gjbcgh0ExUQvvPR9A5aNFUnEgWa0lrlHitsecIPbs0Lu7iVjrddaofI2rME29EEb13wBeQLcOd+8D7bpo/P/gSS8jjTROwV8Tj+rbFpC2BPSSZ014kvf4RhPAYGpaMDFedrb5Zz2AwXFAYAWcwzC7Xo0VrvbRDfbG6mRPkl7zEVS15uodH6dy+j3WtE8q1ViuGfzpDmoSR1jQ/uKaB7pYiuXI2FAxRMTJqTjx914fpG80HEnJigKbXwUBkfQoFlS0ly184RMOIiyfzZLx2Vm7dRdt4qbrWGpAb6SVJiUkkFnnm7DlJqiQrl3W21KohpwuwJKEHU8uJ6OLNC9cgssZF+8PuDpNhhTLMdBGwdhhu3+Pw8JMl7nafoZV83UsvI1maa2Gel2GobLNzArLz9+I7A5RLgnIlvNHGxMAZDK8qjIAzGGYPASyM3oyOSh57wiPwBd6il/A6j1OQDg/t83n98RTzIq+hLuDicV51RNxQR5pHr+tiKD1OznNOw+pWPwZupkgZYFFErp7P3kaUgJksXivp3HuYTd++n/X338O6736d1u3PQsqfUiOt5ciecAniWasp5ozbzNmzi2mtgdPdykxdp3o5EN01ClOta9G2eGZqUmxdJOSs6lPZLlw0OAa9Lfz71uPYCQkmEoknXRwcBJKcSHNpZyPjx5dzqj/NxrkjBKkCrg9uWepnvAhmkOJrMBguCIyAMxhmjxyqJhwAA4OSI0cDhO0ysfJe3re8iYePz2N0u8fC/WVoYmYaKmHMWFeGx25cxKH2YdKBNf0BVVhh79NkFSOwsITDTALE8mTJz1vGUCTg9HlsaOgvsHD7GB0HxxEyIc7Phsa+IcTgAAFZIpUTkKLJ62TJw4/jeKVkGVLLfToTHTtTrVurELDewksv5uvH9kU4KhPVAiybyb/Utg1rRqDNGmTLc830BaNTm4lJwajXx4B3ApVFbLFxzlKYaOBgT5Z+p4TjuIwOQ29/1Y3NwXwnGAyvGswvq8Ewe6xBs8AdOuRTKIJMlbCuvo81DRfz7J4jrDwFuWaJ/XoqtcXqERMpMtXA9vXLONzch+MJgqrvbIkQ9jTTTZOccBr1wAMpKeeK9LeB9FBxcNHpo0K5KZRTOfLKxh650YBlByZwhkdxC6N4E0Nk+ge5aOsOWg4fqv6rdjahfcE076P54/FvtTJSVWro1Fpwta7TASsFlqic3rLg2lGYN+QSFFLs7B7Hif0Zt4VNo91Kf/kktrQQSNoX2GSaF3N0dxvjmTGc3DhDI5IjR6puqpGzNbMaDIbzhhFwBsPsIFDxb7low8GDAeWSjZc7SFvrEDvGDvLsoQEG+pvpuXYd1gaUgIv3mk8qlxF96YsU2zat48WFfaS85MuQ07hSVYuq2mPqWefiFNwCy1rHGVyYZXwwvJekQ/V7saj6SyUsWPbMk1z67bvZdO9WLr73BS757g9pe+pxsP3a8yTfXDVJzep1dHdpvWK+8deyxrFJCRGR6zR8FimVwStQGanChbnjwMJ+XtwLGdU8bPJwH5+01cC87EUMy0FKQYlbGuZxwy0HcbcvR3Ycp2vNMyAlBw/6lMqTh64CrpnBqhkMhgsAI+AMhtnBBt5K+Ds4Pi55ZouPV0pR7nqJlR3D/OfxbYgyZPgpXvR/ipHjKKvNHGYmTCQcXbmYly4OIKgVwybDBIXkCVUbq3o112YeMqWEoCAlWuhf30Q5DfQAw1BVESNeUkPf7kxORksB5nUPMq9niMYSiHgRjFoZufXzNaYnSbglWeH0wr265TRKYHC193qSQ/QIrZBCgHAqQ9s9eP1uSLV6/PBAGSknCGJ/yiUBzVYbg6UxXhrdgSTDz17dSWbZk9yzz4MFO7CcIseOB0xMTN5IE/DfqJ9Lg8FwgWMEnMEwOzQQZv35HnzzLpdDhwICaxyuuJt0rsj2xy2Wbl/C3JMfZY44RbMPtJCcNKr30QQQgl3rWrnvin7GS7trN2YQthJpiUSxbbWQ2NO2dVLiwBIpEIIASYoMFy9qxh6l0khML+tW63KS3KpWjfEzrYk33ZiZtNZKKikSPfuxbfGs1XrFf6P7JawJZ6vpsgKW9wgyfR5ucIQThUNkaAz7xOrT+QjS7Bs/hYdPUzpPfrFFumyT6xjETrscPupz/FiV1XIe8Fngw6hKegaD4QLFCDiDYXZoJvz96x0IeOhhV2V63vjXXH7LvTy0W1IqOCw4/G/kvQ1k7AIZG+Xgmk4zedA3r4NHL0kjrBSWzCBlgJTVakFgY5FmagEyhagKTiNhv1CZB0zngq0U542OK2Sg6If3ErWSqlejLX4pduzhhM+1BFe9BIbpasPFY9qibfXKh+jH6CIuKiPiM9WdqotwW3sWYAtwhLLGSRvW+pIFJwLKnaMUfYFV4zPoSDk8OijoLQe0WXBjRwPFoxlaL90H6WHGx+Ff/7PMc1uqRNwC4DPAX6B+Tg0GwwWIEXAGw+ww+fU/0CcplCQyVcS54i6WN5XYthsarctoCV4HAsquq+wheiaq/tsbabAAvIxg24Yu0uk2LOlgWQ4W6YRkhHoR9KJuuyplfcsxHcryVjmHAErBGP7yJnYvSsFJlJgpkWxNi7bplypQ3WPLKPHnopIhSqheAg0oQZdiUgBNWu5qiaakZYkTL75bK/atlnhDO1Z3qerxcLFuDJGIE1bYHzVM9Fg0DpfsshhJF+nzkzW9T0CL0877Fi3EtwvkaGLzwvkM7lvAd0/uxrrka+Bn2PlywF98qhhvrZUHPgZ8GtUn1WAwXGDMPH3MYDCcSyoVwATYWASpflbPGeY7x4Ciw7L9b0faFlJA3h2t7h8aiQ873CYAFzzH4vErlrBv4RiZgh8afCqZplJGgVdimvg1Gca+JasZC6fuflX810nc7vtFUi1dPL8ky40vusppV2JqckaS3owE2S4gignUY8ZaUEJ33uSFqkIt0ZjoHFE2aC0Rd7roYkz/hIm9jwSgXhdOF3BJmbdRHFx470JCzoU3b4OvvMdimyu5DRihunqKRFIGXt+ymTIBLgXoAqsDdj7RQPnWP2dNY5ngsQ8xNDyP//yvEuvXWsyZM6mibeCnULL4Y6j2bwaD4QLBCDiDYXaYjJwSFoCFtEv0BT6PbpO0zZlD+1O3YNkSiUtjeiDZ4qN3KUjByxvncHhFnlyphI+vRJpU/joRFr5Vh4lQ1CUJMFknszSKaauVPqqw6ohDEaoQ0UjF4jYBtFYNmiqsIgtUCliC+us1juqrOo6yyB0Jtx9GCaZmlKiL3LXzw3kiB/YcKoLqTEqOJNV6SyojEiSMq2XJ0+/VDu8rXBNbqI4WIg239fksPCoYu0SEy5WkRqXKlZAW4wwy5g9ByzE4kWb/rhLB9X/K2qXP4v3H33DixGI+89kSP/OhDEuWVJlC34Oyed4JDJ7BKhkMhlcAI+AMhtlhsma/apnk44wv5vCu1WTdgPUHf5704EWApFAs0b6gt3bAQ2h9613YxpZNc7B9N6zNlsanjCWcsJMCWCJNgBfGvgU1pquX2AC2mC62XWj+vqn4UtJoC1Y0WkoWJA2tl4Tgopx6Xai/YBNAL8qNGunO7eHqFlBZrlGo3/HwOR+OXQ2sCOfJhuO9GtdQC1njOXqtd16Iv46Ph4rbWO+dKkJvqhVusmGBgFv2waGRo7gLlmORgxqdGRACISEjLIQQkC7DABzc6jJ66b1c/t5fw/vSp3n0sU6OHS/wyx/NsnmTrV/RT6LE2/9G2UsNBsMsY2LgDIbZYdIC19oiyGbBklkavv0prrz/GzQ98huU3QybNtp4QZmlc/unuuRg0oIz0tbM45tbsQIPEVT3Z4qLMWUdq10NWIjafxbUXNP9u28Gf1aEQOaYvg0rTLXGCdRalFHizUaVQ14FLAsfbwHeBmwKt0eWrEg8jQIDwBPAA8BjwEPAEBU/ZL32rrrlLEpMgOTkhLiVLSlrVe/SEAk4LTFDStWRIZeFxhxkc2Dl4cO74NSJcfookq2z7g6CspQ81H+ccioDxUVKDfqSvh2C55fczfiHPka6cYijRyV/+/dFdu6q+oGzgV8C3j/9h2swGM4HRsAZDLPDpGOtq8viHW9PMWeORbtYQVewgZZ2j5uud1iwQOAHLvO7RpI1lw8TeZuHrprLaGseO1DFJKSM14a1q95VLqH6kupb3yRMlh2pkfggHKw61jcZ3rVvlelZmKEvg7J4xQVR9bS1iS41qrUWxQlGCQAbUOWSbwXeANwWPt4CvAOV1dsL7AX2A48A30eJuhNUtGo8ASL2GQDJmaoBtd2lSW7bKMbP1l6HYy2hWmk5tspI9R3YMCjJHRPsY4h0HR+wR0Cn1cENbfOhIKHcoM6dUR9K317Jtq57KNz+m5Ad5cgRyaf/sciBg77eMjcDvBtlvzQYDLOM/clPfnK2r8FgeC1SBn4GWCgELFtqs2qlxVWvs7nheptbXp/iTW9M8c1vexw9XuCDt9xFp9s7pUvAaHMDD1+7lIH2FE5gIydNQErByNAfKIQdVuuXpO1GFQOHrfIQBAghsEQ6FF/JWDjYU6rl6ohp23JNXrrtMyhtvKcHWJlDuTObqQ7eVyfVp69+X89CFhEJuwxKduRRDaMyKLfqXFQcXNSbVbeOHUCF7XdSqVUXlfbQPoOaLtSkmm+RcdTTHoH2HB0T3ZsX/qQE4a07qiZclJWaEzAu4OlLhrm6cUWCA7VCGYs12S46u0Z5sXSIcr9U52tQ53KHoHfRdjKXP0bLibX0H1rIthd91q116OiYXOgjwFepROYZDIZZwsTAGQyzgw/8G8rJl02nYfOm6l/H+3/osne/T9oaoaN7sCIkAARMNDTyxOXzGWzLkvJ9pNR2okSZI7NIuwi2hWW30B/00kaGcW+MvJ9CkA6D32G6KH4xWc+tVtmR+n9OKuLQwsFmNA2DzQJ8WTn9TEQZzKx4b9I+3d0pUDJkIbAIJZai2zuECifbiZIrGVTcXVP4HMXN6W7Z6B7iFrcg4Tl6RIJOvz576msRWuRETMA7Gfilg/BLT8GJO8q0k8bDr5F+4uFj89OLriX7huf5o4f2KSujy2QdkvEj8OKCp/F/7LdZ8G//ycDAQrp7fFavmlzwmX5CBoPhFcYIOINh9vgPlBT4EMoWBKjODP/wuSIPP+LhlgOaWp+jeLgf1gKnUF+2A2m2rl9Gz1yJ7VVilWzLQeLjWh5lz8MfmCB1zMU9NcSSk7C+AIvLQ+xYBXtua6Yh04bve9NeqC1SdVynhO246h8/Sfj1L2zwdGtbUjC/fky9mm31EjymK+KrZXlObl+OEm0LUSJnKyrb1UGJrm2oz+NyKskSukCL5tHdq4G2TXfJ6tcaiViouJaj90lJw2nIpiE/BCc4RC5YSMrKk+xvFwT49OFyW+sqem88wt17y/QehGIpvLc8BEdhdONLBG07oGcJsVa51VWZDQbDrGEEnMEwe0wAXwA+GG2QEr76jTLf+Z6H9CH17k+wZsV3kTui7vSoL/SST/tJ2LV2nHS6BYsUPmMcKI9Cn0Owr4d5T5Z53eM+K7sh3Q65OShL01zIDcF+15pae20KEoGy1NW00NXspSqxhd7/qnK8lBJHCiy9FMpMe5RadfbFt9eL8q3VyD5KkhhDuVY3oEqRHEP1bu1GJUA8ghLUeeBSlEu2oM2l9z6NXnuxfbqrOCobolsiLZSLUx8Tu4dTaXBX+KRw6S0fYmF2Q53qfIIyJVqsJpZZS7hq8T7GOuDBg1AqocqvhFZFS1hIJEF18kztxrkGg+G8YgScwTC7XI5mfTt2IuAHD7oIBCNzn+Ztb7+PZx4McLr8SrHbMWC3z8ond9P3MhzeXGA0a2G548y/f4T1j0H7cVg9ClYbSnx4KLfgC0okfuc3BRMNkuy0xjdRpyac2i9q7LNF1A8qeu8AEk96ZK1mchPdLBmUyspV/xKm3xcvgVZPvNUTdTJ2fNTpoQvVuXYUVUS4H9VF4tHw0+tGlSRZH34+kXXN1+aM3KXxrNOke4q2q2owyWITVeLvxGLoWOGRDZTclsjwU6nxuWAxSoGrWtawY+wIri24MruewyfnYK18ETtVpm3n7cjuSwnw8Hy7+nAj4AyGCwIj4AyG2cNCFb2Y/EK8516X4ycCZHqc4I1/R2t7mgPPFshdEijLSAl4EtgOacflhv+CS7/YTRmwJbQMocRalkoXyyIVy08R9nTAw1c63GC14Etv2gK2UsqwtEitnqh2wraoDoaqQWZhhwV8RSjkUrSe8FnfjXIiR3XPpsuBEDVeo11ePYkxk7z7+Dmi1ldllJi6JJynBDyMssKVUMKuBKyj0h5MT2DwtNf6+wgHJRaj6w+AHFNdydr9Bi7sWCOYP68Bq1zCE2kcHHz8MIEleSEEkLPz3N61mn9/YYz0P/8/NkxsgKbDiEwJBi/CK7bSNhcWL6paNCPgDIYLBCPgDIbZIwdcR9QtVML2HR5BOU1h1fd4wxt28qW9x7H6y6SCANqA76Ecr5uZ/GJv9KnURXOpZEvGszkF+CPwwE/YXLO6jaAQzOASZ9ByK6EBQCT4RCje1MggFHYqCCw9kCaXob4om3o59cfVCrGfzkVbb049Ns2LbX89yvr2EMry9jyq3O06lIAep9oSp9eJq3Wd0XOa+vcbQGALBpdKsjKDFAI/KHK4/CKt9gJa7E7cOsmi45RYl13L+jm7ecG2yLitpMfbCEaV6myfAx//aI41q6dY4M6kZ4XBYDjHGAFnMMwebwZujN6cOBUwNAjCzWBd9zVWdTr840MWV5R87GUp+IarxNuNKJdeUtumeE2yaH9YH+1kRwf+rR6ZUp5y3aITChGKsJpdG8TU+DZQ/TqFFYk31YvVwkIKiUOOshxj4kSvaqcF56YiZSRcp97EmYu3ekTJCIuBW4CXw8dRlIt1Dcq6WKSSKBEvOxJPYtAa1k++r238xPUl1rIMDaTwpDLtlf0JBvzjyHRAo90elo9JIqAAXLekid1v+GfkV65k1coMH/iJFEhBW5tg2dIpC7od5Ug2GAyzjCnkazDMDhbwE4QFHFwXfvjDMoODklLqJJ1zu3mpe4iB/lEW9mex5zfANqGE21yq64nFS1K44WufSmclD8bXL2X3betpSTfjyukzTwFE3fg3wsq8MfGGDcLCDuteWCKFTQoLBwsL20qTDTzWPFVS/4LU+7nWigmb9kKpn4k63bFnikSJ6g6UYFuHSnwoAy8BL6C6O0TZq5Gg1mPjdKICvqnwGCu2Xa9FJ2GsPU1hfgpb2mHMW5grLAIG3JOU/PGahZkFAo8y851Olrz+B5S6HubQwRRuWXLpJXZcvHnAN4HfYqrz12AwzAJGwBkMs8NCYGn05oEfutzzfRffsxiet4VL1uzle1uKyHyGlPQRo0V4s4TLmCzsOlk/LEn86F0DSjZ989t5aO1Sdjvbkf7MPWBSTuNmFcmbovbqDmnNhao6PVhC0NNjk+sFO0qwSHF2nEnCwrnEQ4m4m4AlqMxUF2WR24LKXoWKAzKp84T+HD10q6LeoSHcNrwUSrZf9dlXyjgLBv1u/AS9JQHhw919hwHB+xdupPkn/4T+8X4+89kyx44H8eF/DbwPlbphMBguAIyAMxhmh6Wor3o8T3L/D1wG+h1KHdtY96G/okf0s/OQCw5kAol1qqiyHHMJMxWY6iacjNdy2LWhk0evW0hP7iDZIIdEIuVMRdx0zUptsAQFAQULvJQkJSIJVzlOfy0RDB4+QaONEjoeMysPWyserNax9cLtZ1K65HQJUIkLG1Eu1dWoZBIXVUfueVSiQ4GKhbTWNSX1f41faxoOr07jiADfd6s+U1+W1CPw6C4dYMQfQMrqzyErHHYPDfJbOx6lVc7l4k39uIufo6dHsvUFT6//JlDFVOq14TAYDOcZI+AMhtmhi7AK2/4DAd09EuELijd8mouv2cKXn5TQOILleswZDFS9NJdkPZWl2vpmQYDg4EUd3P3O9Tx5WY7BzCAEwaQ1bObEg+z0PRI7bbF11yA7//QwI797mOe+dpAtnKIx5ai4t/AhhKWeLcFYsUjn3SdZPRclsnRX4bkiSfxMlwBxNueIlip6OMAV4SMfbhtG1VnbgxJx8UQTSBZqVu1zFZolHVYjkoBA+rEhPoEsEUiXcjCBS6nqNK4l+c3lm9gyMsx9A8e5vnUu41078Dx4dovP6GiVyL8clX9rMBguEIyAMxhmh6hLJy/v9BkaEIzN2cJFVz3NCzt9evp9aBRIGeAXPGT0JW5rjwhdoPjgZRx2XnEpD18zjxP5foTvIUJzijzNBEKJJJBl9D8VQgiEEKTsFH09fbz3r07wl1vG+bWD49z5+SLZu/vokb1YwlE5rEK5TSUBWdHI8IHj3PgFHzFGpVxGnUD9utSKfTvTeLizIT53EWVnvQlVQLmM+tyGUG7VIerH/tW7D8BP2ww2B+R9J/xcA+J+9Cguzg88ykGJgGDSCufigZ3inzdfx2dOPksjGbqW7cOyPXbt8nh5V5UgnANc8wqunsFgOE2MgDMYZoeoMhu+DyAYazzANUub2N49Cs3qm13aEl4HVpTxCNWxUzHxNrxwAc9dvZkXV7jI8hC2z2m4S5OwESLNVCucpJRK0fGdQa5aC7wTeAOsfC/8+n7J8u1pUlYjjpXGshyEUAkMFpLubWnaR1AWqTyV5kxnKuLiTFf4t56r8nRIijmM46OscVcCb0OVBnHDsS+gujk8gbKi2rFHlMgQvY8slWGW6tHmPKeaBfjKLKvEtke15zO6PIkkoEwZH48AH0nAMBMsbejgzsXN7CzuZfVlL+K272J8zOL55/24G/V3gTvDT81gMMwyRsAZDLPD5Fe+7QgQATI7RAmfnjRQAtvN0vLoW2m7aLHqYp7kWgMlCIRN9+IF/PDqRezoGmbC7aG+GpI1H5ZQpf8tkcYR2aneOwm2ZbH/1D42DbqwgKq8xHyT5KITJ7E8i6zIYmGTEjaOlWGEQVa9fJDMPFSJjRTKthOvRDJTUZU07kz+qr2SlrnIONaIEnILUC7UEpU4uBdQCQ8T4b4JVF25EVTRjpHwEXpBpQsvLBhH5AWudCdvQBIgqzKM1aIGuHiyhC/LlGQJP/xPSskI42xq3kR7ai7unAm8hU/iuw4vvewzNFT1M9QC/DHwh2e4ygaD4Rxi6sAZDLPDpAXOEiq4vHliGQ+fPM5EoyQTtLH2279PV/9H2DP2IbjsaPIsAUCeg6uXsXVlEwPiKLYL9X+1BY7I48sSlsgQF3oCCxG6PxXV+20hKVsZxMsTrMoLdSeONsyCjBRhDoFNKrT+IFI0HjzFtQMBmYvDYyKv35kKqNM57nTKiZzrUrVhFwxagavC9+NAH8q1egplneul2hIZ1YSLOlU0AuvAnYCTNjiOB0FGW0MRirgAIWwCyiBTKvk1CPCFjy3AlWBhqX8YSPCwaUl10ZB+CTb/ALn9Qxw9luH5LR633pJCVNYmB3wc1UTsrldgpQwGwwwxAs5gmB2iqm2kHPCCgNzxaxj+9v9k8YKtND36E3SOvAU/kyMoNyZ/TUqQjVle3HAJz8w9ii2GcQJrBnFuym9oi6z2vnpiUbNRpyTlNHJ44hhrdkC6WSaWMJE+iEAqMYiFBHIFh9X37GbeXFRs2DiVunVpzs6dOR2nO+9Ma8/FS4Lo25PGR9mnl4f3PYBKbDgOk00q9Mb28ZIiAjgGDMPxzYJ2y0f6Ep8Clkwhwn6zAR5CgiVsJCUEeTxZxpIOQgosSyKxQIYZw8KiRJkrW9vZv+k5RnN7YfRS/uOLJQolyetvTNHUOLkoWZQlrgfV2M1gMMwCRsAZDLPDZMT5JZfYbFhvsXNnBvHInSy1AvBT2BkPt1SmsWEkeQYBJauZ3c0jWNKHQMxAvIEldHNZLabuF6EZpmCNkdk7wduGQLSSWA7Dil4gEQRIHDqf2c7cHk+1BAPlPtUL2tbqovBqJ946S1BxOXeirHJrqCR0QKXWm36MRPVeBYQLQRECGe0UoWgLsIQKKpR4BFLV3gtEANLDC8oIywLpKFkt1OILqUR2pz2HyxYN8M2bP8ec7/4Jvb05/uXfSjz1tM/P/3SG5csnP6T1wD8CdwAHZ3uJDYbXIkbAGQyzw2Rq54L5Fr/80Sxf/mqZsXGJJWxaW2HbdpujxybobO1LnkGCFYzSEixgKJggYzWH7rP6sW/irFSRhS/KrH2iSEut+msS8MbAG0FkOvHoIH9iNxft3Ido13qnagVpX3OOON077aCiy/R9eg073TJ5uzpG7ga5MIUXuAQUsMhCmJjgyzI2aRCqlIgQAildECk8XGxSCGkRiABb2gihxB9SIKwcb2u6gj133Muz2VMsff5OvJ61PP10B93dRX7qA2muvcYhpQovbwKuBw7x2vsEDYZZxwg4g2F2OAA8h+qHyvJlFr/2PzIqQcCG0VH46K8WEBSY2zpY0yWXLhfYtF9yauN8CqkxHN/D8iWWVAogED5BaOyzpMAiH7bHmkkj+xgqewF7IsdKH9WsPRJjsTp0+fZraU7dxBA7yPRuYf2je0m7shL3NjmnNkfcVQivTgvc1ITdCqLG6yjLOHKfRu/j2bl5Nf/gmzPkr7JosAIICsr6hoNAtT7zKamuFzhI6REID4sAZEA5KJKyJLZ0CISFkErUC2HhSp8hUeSj867Cue05vtj5dm5uXYtz9y9x5MUP8id/UeBXPp7lLbdPts5Yj7KlljEYDOcVk0lkMMwOJ4GPoKKfAEinBZmMwHEExaJkYiLAsgI6nFJdITPvyC7e9PwAlx7N0SjnE2S7GMunGM1ZuNlW0s4iMvZiRHou5dQEUJ50h54uAgiKHk4L0ES1+CJ8nxLk3BzrXtjG5Y/s4cr7X6ZtqFT552JcrEVlMmrFwNUr9yFnuO1sOddCcrrsWRHbFq1VAAjBy4ssjrYUSftRDKKLlAWknKgsg/TxZZkAiS89PFkAIJAunl/Ax0XKYNLtLgFLCHygLHx+YfFmfnx5nvuOb6P0C7+OWPgwpYLDnj1VCvUyVASjwWA4zxgLnMEwexwHfh5VX2s5qsAEABMFiecJUlaJRe2DU6060Re8D0KUmHuqm7nHu7kynaHkCEZzKruwaeIUqTIgwQ8Ex1osnt0ocLtaEGIm1W79sAWThbBUjJ2wLBX2Fok3vX6sAKREHPk+zVHT9un+mXg61ja99yvUFnDxBNp47bzzSfwaI4uavj1emDkal3DNXpPNzvYMXlAgg6o6UjmVh5hMC9ZPHiDwCaSHEA6BAD+Mh7NlSsUtCkEgJY4AJetSfGTtjWw99ATHvF5WrXwS99ANjI5WNa69GNU87KnzvKoGw2seY4EzGGaXe1FxRL+HykcE4PhJSSAh44yxqCn0TlnaI97EPoybstwSubEiXb0FunoL5MZcnJKL47pkesosPVlk/inVYF7UfFjaI4UlUghhI6QV1ogLkxcj4uJST2qI/4VJsr4l3dd0zGRcLXGni6fpxiQ9YKoAq3XupBIp8RjApDWq9T4HQ20pjrSNM1cmO8KlLFQdFFnZfOnjywJIJeR8GeAFJTxZIpCqJpzqmKGYwCXvZPnpaxZyshuC5pOkMmUOHgoIKp/xPODWGXxiBoPhHGMEnMFwYfAs0BG96T4VEASSfGoYRwSnV9hWF0K60GkDiYXMnp0ZSghBELlg64XSxQVOkmiL76/3mOl5ardvTT4uSaBNd47Tod6xSb1Q9e1WbLstODTXZkz4rGsUFGdwnzJcDImPROLJCRUXh4svfVXgFy+MlaxcjIWgjzFe376GO1Y3MTz3MNglTnUH9A9O3pRAJTOY7xKD4TxjfukMhguDDGEsURDAwJBEIJnbdBDH8s4u1iv6Th4HrzHFcLtzRjFwWq3YagtcrcHxA2ciVEgYF09uiD9Od21OV4wlCcTTmUO/n1pWxnjyRo3jZWBzaLGDJU7nApSPWzW8j7qm+kgZEEiPQAZ4sqyyWwmqLsHBYly4/HjTpbRf8gJutpsggIMHq2rHtKF+fg0Gw3nECDiD4cJAorL5kBJKRYCAzvwpUin/zARcXAzkob8xw3hHDqDKUao/bJGq+0AIZdMJqC1uarkQp7Ou6cLOSphb1JjnTETZTI55pYpj6KI0Ltys2CPaZsN4p8UJx2VxTlKcsWFW/1CU8ApkCYkbyjoXX5bxZYksabKkwq616uZdPBbkOri6LUd507eRBJzqrloYvSCMwWA4T5hfOoPhwmDya1xKKJUkQkBDegxh+VNHy2lmShjvZ232XbycctrDFqpqf9Jj2gsVFlKvU5Z0TXpxXt26NJ07UX+ti7ta1ql6a3K2Aq2eO1Xfl+TGFHWOteqMiScuCJRd1gFS4GclpcCjKdOMK2v0IBPp2AUKZJhNIvEJVPPcULSN4wdlpPToKXRz/+hz7PZPIfyAFhrwQ5Xu0sDybDPN654CIRkeqbppm5lqSYPBcM4wAs5guDDI6298H4SQpO1i9S9pFN810zgv7bBjy1ZzdL5HU9Ayo44NyfNIHMuGgg2VHurJ4i3JTagLsiSXaNyVqgu/Wr1KZxInN93i1EpWSBobZ6ZJF/XG6tevxwimw/cp9ciVfZYNt5C1FxAEyfNJ6YbFnCs7VZJCKOKkTyDd8HYCAkqAy5As8MUfLuAPvin4XPej7C/spYEsAosJxlmSXUxr1zBeuhvfr/qpjArBGAyG84gRcAbDhUFz9EICQfgFbNsuWKFqSHJZ6tQqEivBbXbYt6qNPA1YwlZZqEKc1sMSysXqWz4l258qdqKyIXFXp35NcZdnLWGTdFz8fQ0DVBW60K2XeToTzvb4JAEbF7L6X+RIFqWZjJBMTwTcOpDCKU1g6wV+qwiQjFPp1zX1IlSbLbVfCBufMiJdZMHdv86Gf7+Lw//wW3x+31G+MfptBjlCinE6RZ7GXAYhU3jeFBeqEXAGw3nG1IEzGC4Mog6hSMlkmQY7cp/O1NqmCxutTtvBVSsYbrZwRIYg8FTl/ZqZA7WxpCCTbuDF1jybT42GQXt1ri+ITV/PKheJwenKakxeDDMTcXGxV6usx0yIC6aA6vVOOnf8nFFB3qQxkaALXaakp65RIW/hO5mKBbSGiIvfV4CHJZVgU+5U1XbLksp13popk79oJxx+P43bPorc8362LHiCrVf8B11XvoxfaqT/s3+MNdFJurp0r4mBMxhmASPgDIYLg3nRiyCQlMoAghzemZs2JGBZnFizjBfXzCcTFdnFxo7FSan2qaFYnEw1RXuvsBA4Is3utgYGe0bpCkTUUb1CvVi3euJJzGB8fNtMy4vojeJFjed6RO7KuNg8HWtcJDgDapdQicSbw1QXswQsh91dgqHgGOlpLlz1SG2s2qKyTO3YOI9A+jRZNpn5exE2NLQKeno6cYbfhdj7Nrq/MIoQKRyRx5MB69ZUzWFjvksMhvOO+aUzGGYfAVwSvfE9mJgAsEnbw8lH1BNI2r7DG1axfe0CsiIgCJSCEUJgx2WhAHCQyDB+CoSl7HQ6qrSvjZ/JMPAidF0up08eqJVpmnC9U+aIOjkkxb+dTsxbUlmT+Ota3Rviz5HVLclyN52FEaotcPHYt3h7sdic4x0ZeltbsIIjM1iAuGlQhDXhkkyGEhubUnYM25PcdGOKpibB/Q+4jIwKbLsFYUHgS66+KsWVV1T9/BSA8dP4NAwGwznACDiDYfZJAQujN2NjkoFBZS1JiWGmKJyZuFMF9K5exotrFmE5EgKBJSwCGTdDxQ8T1CsRpzycNlkrQ3mYqXF5kaUrnj2qb0tKfIjeixrbk2rJ6XOcTqHj+LHTxbbp1rugxlwzPbcu4nSiddKdkbH7DdIpDi1ex6CzH9vnDAkIZHmyo4ZOWcKKxjL7fHXSD7w/zXt/LEWxiPqZEGAJyOerbtwF7sEIOIPhvGMEnMEw+4Q5hoqxMcnwMNhigkz6VLVOmGFpjIm2RravXoJI2QgZuc7iIu70EJMWJ2WtCXThE12kLnRski1f8RIcSa7MaHvNQH2qxVuS1a/WMaLGc711nq7nauKCJYyxqRa9unVRT2KIF+aQMNqYZ/uiXqygGLq8z6ROirLCSeki4uVGJAjbRwKer7anUoJUqu4J/ip8nNkPlcFgOGOMgDMYZp8sYRcGgGJZUigKUnKc1vxJtfE0Cs/KDDx3+SWMN6VxCLsmhMcKBLawCcL+mPUQ0X+hSU4IQSB9BBaWLQjKwFFgLpX+p7rVKBJhcevZdJY3fVzc1ZgkGqezwtWy2s0kqzTJ8pf0WcykqHIt61tSZmrCdfR1LWbU6cYPCpwdggAfe9I/rd2qUB9kgsaPS+0y8DfA76KscAaD4TxjBJzBMPuk0QScWxZhja8C85sG1XfsTF1mQnBq5QbG2hux8MJ4NtVjQRVzVd/BlpiqEuKCLh7/JlHNzkGQ8QUpvTyHLrCSMkmJja2cpFoQ6e5KqE4eiHt/Z5IooScMnE37r1pir1bmaZKFz0qYJ6krhT313F5jhkOLmimzB+uMWk8k3a4/JRPZclTbNr/6560AHAD+CyihfhoHgO9gxJvBMGsYAWcwzD4dQEv0ZmRUIqVAiBIdjcXTmmi8eS57Vi5DUkbIigIQwkZK3SQ2FTGNwhFSdYfwCFh6yqVrGCU2Il2o22fiAqaeuzIiSdzo+wS1rW0ziV/Tj4vPJWvMVWtM/Py1YvyS7oEaz3X6wfbOX82etgPglpleida6yOp9gQwQ+FjCrlyfFXZeqJZlJeB3gPuBiRme3GAwvMIYAWcwzD4daIV8x8clgbTI2oOkT6e6loT9qxcynvMSQ8csoYKZpPTDbMTTR2DjBi7tB0/QmaG++zLJqjZdIeKk7Mz462ieeuVE4mIprl2TWmHVstzVWOsp50gSqLVcyLUKHEfZp9ra+U0N7F0SEAQjp1VsTUwWkast2CfFW3RZtgdCxl2oFtCPEW8GwwWFKb5oMMw+TUAuenPyZEAQCHKpUZX9N0NvWeA49M6fGxUDqTlOCFv1PT3tyxRIIbGwmdtvkZDIWCESKXG3YT0XZDy+rZbQqde9oJZI0121+iPurtWrbAR15hIktwJLipmrV5hYn0sXb9qcI3O62N90EhlMMHPr2/RIJIEsV25OKheqAIJqAeegufgNBsOFgbHAGQyzTx4tC7W7N0BKi6bsCVUKbCYCzocg14DrOCqESk4j4hAg0ggCAqn6XwWWwMMlCFVXA1lAhK5XEMLCohE50c2cUxNYK1Bf60nCTCRsFzXGRveoB/PXcz8m7YvXVovPPdOETUt7DZVs2lrXXq+OnKUdk/RP5Xj9t7jF0QKEYP/8ZoqpXmxXn3wmt1NGkKKe6JOoZBaBUJcpJAiJ76tEhjBUMrINGgyGCwgj4AyG2Sequw/A8JBE4LOoaR/WdCUuNKFhl0rM755goCOFl5b42EjAxsPGCr+o1WkCGYT13iwQKisx6D6C9+QR5u2zGc8HHL+umYa1XeQyC/BxcUo+846Ps+K+bXR2edBAxW5Yq6RGkvuyFrVqvdVyz8bFli784uesV18O7fik64knWUx3rfoxtbJvdbGq/xRE9xXOUW5q4lBrGd8fPwMFNcOCgaFSU2ViJAjVXCOQk6otsg8aDIYLCCPgDIbZpyl64fswOgq25bKg9aD6DY0axOtMCXADUS5y8aMP4adsJvIOheZGhpas5tjCNvTG5lE2qY9PIG2CwUOs+94uVh1CRTk5wDDw5V5GnH762nYQZKG9D9olquhJB5Xm9Qk1y2omHNQrpFvVMqrGvSbFnMXHJFnrZI33tURbUomSeuesJV7jcxCbD6otfDHXa39bC32ZQYJAnqGCmq5YHWFJEfVVIIRECEkgo/ZqU67WYDBcIBgBZzDMPpPxRWVXhl+VPq258dPrtynBCjysskfLaImWY+PMPSmRN76eQ51jpBChJQ6KuKRkno6dL7Nq+2GaTgIZlEVNEznNfkBzESiG+yPBo2dd1qrNFi/fMZ1lLS7O4pkYcWvaTDJba81ZL9kgfrxVY1y9DNt6Lt34vHrcm60dLwVjzV2UxC7EK1wmVxLgBwGWBYgAgdQFXHSVBoPhAsIIOINh9pn8PfQ9QldnoHU+iCHrPOsCIg1irIelj99Ncd1C9i1rwk2DCCTzekus23qYzn0FnLI3tWtCoM2jP0fUKqwbcwFOJhzUckHWyuTU48dEjfH6fLpgImF/UqxafH8taglHnXi/1qQ1S0IXbPE5LPDtFIH0qjTeTBHVnvlpbjDAkz5jbhlLOmHNwKo7MQlvBsMFhhFwBsPsk49e+GHmo2X5ZGx/atbkdMTHBJDvGeOS3t0sfgFOdoDlw0WHIDNGtWhIElnTldLQX9cqlaEX440H6sev147NHRUxjlvOZurG1MfUSrSodUytmnHRdUkqcWszJV73Tb/P6P1k/1hBIFwVlwb4MhwmKofolzv1MnQlXR8J2BaMjLZiWVJ9PMZpajBc0BgBZzBcQES1di0CHPs0/WZxQRWVxRBKA3QOqIeUIHwqv/16G6x4zFcSSbogSbjFXY+1XKnx44nNVUuDyBpz1Fqb6boq6NixY3WLYNTPtNZfz5lEjOmWTSu2XRdyCXY3AfgCjo9kKBcaEPkxUk6ZhVnOEAFCIKUFY/PA8snnhXKnVq+AwWC4gDACzmCYfSYzDDxPuVEtS4IIpre+1SptUacWmoheR0Tux5lYkuLiLW7BS7Lo1QrSj66jViydjM1bq1vCdOglQWoJq6Tri7tO9WuI7knX2DOROHpcYBTzlrRONhAENE9kyIk5lDiGIywcJ2BCwgPPbmT8mTsQhzbhbnyQrpv+k4tWjFHwhJZ9cHqL5EpJ/8E1pFIeCxc6UwcYDIYLCiPgDIbZp5IiqowhCCFxrODMhduZEC+BoZOUFZrUY7RWNmqSDSdJzNVLMIjPG99XK2N0Jpmt012fnnCg74sX8Y0fm5ToEM8+TUpmCMXd3BMH2dw+j77mMhOFCZ7evZIdD/4E3q47yE2sJJVxcQ++g96RJnb9wl+wKiMp+aefMuoI6B4P8PuX0doI69fYugWuCHSf5pQGg+EVxgg4g2H2mYwYFwJsS2BFNTriHQTqUSu5YSZEsWZQuwRIfHwc3e0Yt6zFOzIkFeuNUyvbVNTYn7QW8W1xN26tmnFJ1xCP45turSaL8SasiZ68kCQyw+eUdYprdpwCJ417uMyOp67FO/prLF7ic83tHpdfmubvPu1T3Ppedh38T5avO5ngcJ3mB0EIEC7bDiyluOM6lq2Hiy6q+oC3ArsxGAwXFEbAGQyzz6QFzhKq+r0bZBgca4dyuGOmWZJQHUMloTqhUCOeuam/r2WNSqplpluR6sW36ST1PK3nIk2KK6slapMyVZMSNeKWwaQEiSTRliQik2L/kuL+IsEWb8Olnyu+9jZAmVQabCePdFxWrBT8ws/lCALo7PQ5djhN31iKk0VYnIZykLSIyVjAqCgw9Mz12OML2LjBJperWuztwOCMJjMYDOcNI+AMhtnHjV5kstDcBJ5M89yJZbylCxybSn22CD2uKxJpeuKC3tezNbYvyuqMGrbrAsRKmDtJPNVKSkiquzYdtcRaPYuY7sZNil2LC7XodVIdOyth3lr3lXSueDZpksUtvi8pVjCe0Ro7vixhx/gCBALHEQgBlgXptEAEFq60KaL+EZBk3LQsbZtUnRaEgFTa58D+hXiP/CzZVIZLNjt6BuoEygJnMBguMIyAMxhmn8nfw2xG0NRkIbC558CtfHD5t1h96HjFihaJjEB79lE2vOi1PrYMvI6Ky85BdV3VM1Cj8ZGgi46dA5S0cUmxb0nWpuj46bop1KLe2KQs2SSLGbFtcUubHd5TUuZtPdduvWuvJd7iblK9c0X8fS0LpgcDhRy9g5djSUlLkxooRFRWxIJAIAPiBXgnTzRaUEkynpRYNjTlBOOlFGPPX8mer36c3NglzF9UZs3qqpq9p4DnMBgMFxxGwBkMs8+c6IUEcmF/0bI/h/HSHOg9rgRaLTETL+Sri4MU8Dzq+GgO3VUXWeWi8br7dS4wD9U6qzOcK4mkuLDTiZ2rR71SIXWsVZPE23yJ2L5a54q7SfVadrrrNe6GTXqdJBD1kiQw9bOLX9c4HE3lCdzNpLOStWsqFx8lGwyNQd8wXNwAEz4IESAJyIg0ZeHw+9/tZmxQQgqalsOtl0PPd95O7lv/REo242RK3HpzBqf6W+EFYP9pfmoGg+E8YAScwTD7TEqH8XHJ8RMBQgSsbH+IJe0vQSMwxvSFaqFiKdOL6EbZjQHKoqa7U+N1yHSL1UHgaLh9E8qN66HKDq/QzhedRy+rUUtcnW0xiloZn0lZs1bC+HjSg6gzj6zzHC8pUmu+pNd6okIt12z8miT0jzSDlSedLrPp4qkCLlVo4vsHcty0xKPJswlEDtuymZfZwD/v2sVYIFUPWwGjA4It3ZLl5UYcvwVpe2xYb/PWN6d09+ko8Heonz6DwXCBYQScwTD7TMbAuWUYGwPwuaxlJ+2WDw0o4aWXsIi7ECO3qL7NQgmuMtXxXUG43Qd6UVFOccuUoPqvw4va6xQqKqoFJQh84KJwXyOn5y6dKUn3XGtcdA8RSRmqSZbAmYpL3SWbFGMXd+XqQs1O2JZ0P/F7lbC7dxUp2yKXhfb2yg3YtsQqt9A0tpBdhSF2Fdqw/BylwMUtlvn2cw9zaJ8DXdq1epKBo7Dw1u9g7fsCqZ0/wb79Pvv3+1x+2eQHX69ynsFgmGWMgDMYZp+qlgtCANIlnz2AdCRiHeoLPy7Q9Od420sRm32yPRPVGaAe6ks9EnQCJegGUNa3EW3ucaAQHj8GDAPHw7l2huOWo5Im5gNtVNy2cXF0Ok0mkjIzk9zJFtXWMDnNHGfSAmu6bXFL3ExEp05SUoavEg5O9G3GsqC1VahCz+GgdFZCkMMamQu9Of7fP+4D1w8XIwNzstBRrp7XgfFewb7WMVa9/1M4n76C8aGLeOIpn0s2O9hKaLYAfwi8FxULZzAYLiCMgDMYZp9KGZHQQiMEZFMg8qgYtCSxERdsSe4/PdYtcp3qgfp6ckNEA8paswYl1PSYrqdQJV2zVMfVReLyKHAM2IGy1JWBjahYuijJwkFJA/0648wkoUBH72IQv/8zdd9Ol7AQH1vVAithjloJH/Gx8X2u6pE7XtqIZbksWWwhND+nlCD9gLG2/QS5R9SaZ8Pz5akI8xjSgt49MOea/eQ3fgMe/m2e3+riumlse/KAK4APAJ86zdUzGAyvMEbAGQyzT3UdOAGQUuVDoLa1Sq/vlmRhgqlCRi+jMZP2WfH+mm+mEl/WDxxB2Wb6qVjydHdnBlVF7EWUoIvupRnlfrVQgnElFRGYZEGrtQbTZW+eiQNQTLMvqc6cVWNsvDZcvWuNtwvT9p10mxhyFyKEz8rl6ardti1wnALH7RJytBlsD9ITas4y1R0eqg5UJ9v9sot78z+x5PAmug+8i29/1+P975nMWMkCfxB+Av9AJS/ZYDDMMkbAGQyzz6Q8sewwKF0IUqlpUjaTsiZnKlgiEaaLuBrioeocE9r7DLAWFf8Wxdg9gXKtBlQi+yIB4WnnG0C5XyUqw3U3yv3axNQyKe3huRyUnIjuU88MTbruma7F6Yi8JLGmWyjrFTrWn3VBGq1PrfV3YHfvJnrHNpDLSZYtr76AlC1xyw10uq30zxmBAQE+pNpVTGVN8Rtmwfqjgr09PaR+8aMs/LP5/Ou/XUprM9z+xkkR1wj8VfgJ/gO1S0MbDIbziBFwBsPsM5nEYIkoq9DGoun03H9R2NPpCJJ4BqouJJJKeMStYnqYuwDegLLRBCjrjy6kRlASoDe840jkDYbbTlCxwkXnKlIpX5JDlTZpBBajhF0T1QJlOpdpvbi16bATxscLIUf7o7Eppiaf6GNtkrtSaNcqJTxz5FL8oImOdlhzUXX9k0weZJBlzv7r2b98J15fB81XbOXtN8E3n4GJQ0A64d4n4+Ek9An6W/pZfvsXKX/lYr7+LcGKFRarqs91eThTYYYrZjAYXkGMgDMYZp9JAZdKCbJZQSDTeMH8ypd6LZtH/Es5EnFnii4iIitYvTi1+Gv9qz0dG98ZzrWQSvzdKErAFYHDVKxuUaHdXioi0wf6UEJvN3A9sI6ZJUScbS5l0prOJJZta3iPegZwCbhSO94J10p3b3tMitn9o3kePvAxBNDaLGhvrz7p3C4Ly/JJHXwT2QXfZaz1JAuDiyk+0cKGhS/w7NGx6iLNNe5v4KRg+7Jvs67llzlydAmf/ZcS/+e3czQ3CW2UwWC4UDACzmCYfSYFnG2rVloIGHc7kGIa7ZHU2in68j9bdNfgTOLlpiMSWnp/1zTKmhag4uCi81jhuD5UIH4k6iLR52nbI8405m06asmWeh0gLJQw3YZK7FgYXq8d7ntAW88clVjDIBzXDDSA1wFfePZjIFZiiRLveEd2ymWsW2vR3BYwMbKGTS9+gqEF21n4pfcxMDiHlvf9Ies2/wO7tvjI5jofoC1xy9A3cpLC5V8g94Pf4cBBn+PHA5rXTi7A6dp3DQbDK8jp1kU3GAznnjFCKWJZ0NAgEEhKfku1FaxW4kHS9/LplOmYjshaZmnP+nlP9ys93gmiiBJrLpW2YJH7dQVK/CxClSbpCl+vQLlT4wLuXFPrL+R03SYClHv3DuCNqPi+NJXPMIMSbdnwnkdQsYOj4WNcrcvBiS529b0HS7isX2dz/XVT22EsX2pz840phAX5Q7ez6On/iVVYQjafx378w6z1lyMzsv7PRCiaixMS96r/xM3txZIp/GrLr7HAGQwXEMYCZzDMPgMo2ZIWAvINauN4uT3Z6JUknOLb6gX4nynxHqjxuC/dElUrlq5efFrSfQ0lHJ+itutyug4Np8t0BYNrrRHhdTZRKaB7EvVJu8DLNa5Nj53Lw1h5IePFBaRSAbe/IYtdLSgDwMrl4Od+Nk1rq2BsXJJJOxTL8PAjLkODKygdvYaGhXsZPynAip00ZsEVArzsBNIuIQOBH0y5OmOBMxguEIyAMxhmnz5CAQfQ1GgBPqNBM6MIWqWcammKC6bZICkGLqmsR6QZ6tn7a1mH4sckJRLoa6Ija7w+k/uLb08Si0nHlqiI3Xkod7GNKqGi37Nely+FKsvSCBk5juMUkKIt3qPUBQ6FszblsoIPfqASdDgyGrBvr8fgkEVp5+XMv+NL7DvqQUq78Oj6IyubHdaUe/Z2UqXlyJSHDKpOerZy2GAwnEOMgDMYZp8xtFpwuaxACEnZbcZ100yW3tKzFaPneiLOY3qbSZLQOhumKzicdF79fVJP05kIwOlE7Ola4+rVZYuus17fVCv2HGWbRq7hldr++GcgUFY7G9qGemjL76R7ZBFDQ1UXcxT4Jqqwyyfjl9eQt1i71uGllwPEyzfQ/L4uRP44UoYn8yGzSDAn24wYbKScGSGwfdqPXUvLA3+McBuYt4h4wkQt26fBYJgFjIAzGGafESqh/TQ3gS3AC/J4QQasUu3YtyRXZryNVr0MyiQBV68u3CtFrSLE02V66s3pZyLiXon7SuqwUK82XdSjttZ9CybLfrRkxmjPHuXUSKgZZVTomTzwl6gIwsuBa8KjO0Elw1yyyeZr3wAxvpK5D72LltWfZigq1eJBvtFh9cMfxdp2B+XFLyKFS3bfWykPtrNwmeQjP5dl0aKqC0xhMBguGIyAMxhmn3F0C1xeYDmSsp/H9TPVtcIi4gJBLxNRKzaNaeaIi49zkXl6NrxStp6ZCLl661anY8Lkc1xc13M369tjY4fdJnrGViCQlMtVo6NSzCPAR1B5q68HPoEqrczFGx1uudnhwQd95H1/QHvnswzbTyM9gT1Hsmz3m3Ae+XXyuSxLipdiWwKWu9z0wRS33ebQkK+6wF3AZ6ku5WwwGGYRI+AMhtnHRYW3zwPI5QSOA2U/R8kPy0ZIKrFKFtWdFE63b2g0x0zHRBmwFxLnIv6vnvu43ty1xFt0TdOtbZAwTrfiaQwXu+gevpSGxoA1qyy0Fqj60d3hYy8qR/f3AJHNwid+LUcmU+S++wTL7v4bJt72UfqsHbQMraDtB/8bv9TEootc/u8fpEilQeCQzU658ReBjwOPncVqGwyGc4wRcAbD7OOjqoYBkM1AygHfTeMFTqVjgU+1VWemgu10hF0SetP7V1LMRedJii2rZTWL7z8XmafTkVR7L8mqVi+RYyafhw0H+5bgBY1ks4IVy6t84bUk5reA96GanCEEfPDH05w4UWTrC+vZdNe/MLDyBXKH15EeWI/dUOLmmzI0NydekI/qZPvzwPOv8KoaDIbTxAg4g2H2sYC26I3ng+cJHCSW8NTXdJGKSzPqCRqPSIrcdnHOZUkRvX7buV4BDyUT9B6tKiFXleOYT8XRnAZaw7WI3Md6f1SJVh454R6Stp1ppup07unpLHl2jXE2nBxcj+s30NpSJJ+rGvAC0JMw61bg14EvAw0AnZ0Wn/hfWX7jNwv09q5h4ZaNSMvDyvq88+0p3vLmKaFtw6ieGncBn0L1vTAYDBcYRsAZDLNPGk2O+R64HuQdn5SjJTC44XMJFfnUhop8qlVTTY9lO9clWE8nIWAmYyxU6YxnqW4rFWXRBqi/VtFfrHR47x0omRIVyI3EXke4PrrFMhJ60bjoPiKroi7iTifjtV7ign6OMyh4PFhoAQE33+SQzVXtfZLaDda+B/wp8PvhCtLZYfHr/zPLgQMB6QyAQy7rcMXlDtlM1YXtBH4LVdrmKUzjeoPhgsUIOINh9smgfb2XShLPBeH4WFZYQsSjEljvo3JWe1GFbhdSX3DEg+7PZYHben1aTwcflT+5GPVXKRJuo9q5XCqlUYrh/R+k+q9YtJI+cAkVC56k0ou1EVWmI16WJRJZ0VrH7xWS3bvUGJtEkpDTXeKx7bt7LscWHgvmV33ALqojbD3+LFypT6CadbFhvc2G9XWV/AHgo8DDGAyGCx4j4AyG2SeL9vXteeAHAkt45Jxx9XUd724QCY0xlDVqIdWWJJ2kPp3nknPhUo2u+52x7b3hs0TlPwpUPuQQysLmxu7ZoyJYH4vdd4ZKi6t5VOLtWsL30X20UrFsetr59RjEiLgemqmVbTqLXPh5D46uZN7cgIULq/5UHwLun+YMJeCPUFL//4R3X4/DwJ0Y8WYwvGowAs5gmH3SaFKgVJZIBIIiTbanrE1xy0/0yKIilppRlqWkkiMzQXcdnq51Tk8+OBshF7mHo9cC5QqNhE7UzD4Sq6AEXoFKj9YAJW/GUUJsBCXy9NprQygHYVSWVmhzj6OK7K4IX6+n4tzOhectU33P+jqcwwSK8TGBL1OsXmaxcGGV6h5DOZynw0O5UseBD1H56Yg6zvrh+xIq1u2ec3f1BoPhlcYIOINh9mlFSTEASiVAgqBU/xc0DSxBiZH94bZ14fbpapzFqRXTdjqi5FwkOMTjySLro6ASA6j3A5hPtUVRAAu0azgCHA/XqEi10PSpWPAikSdQIfu7UbJmb7g9C1waHr8EJX90y19U1qWeZW0mCQ9U5tt2ZANFdw6NjTI+ZBtKlM0EH/gb4IvaFcYfAUrWGgyGVxFGwBkMs08Xyn4GQKEIARaOCL+jowB8/es2QFmKUqjKX3NROYnPA68LtycJqZkKiIgzscadyyxV3UWpJ2Xo6DF4Mjwmagu6DtiMqrI3FptvGCXuSqgiLsepWPOiOLxj4VgLZe3rQonlDeGjSEXMRZa5gGoRHbeezqBjRAAc6V2HsLNsXG9hVbu970Lr3DFDek9zvMFguMAxAs5gmH2a0SxwAwMBMrCwRBE7Xo4iEgCrUM2UIpejg7IMNaNERZrk7Mfz0clSrxsXia3TseKdzXVGQicSdZF1LUNlhaN16UC5SgXKnjUeHjeMclCmqXSp7QvX+mA4PqqKJlH20xZU/4MMKsZuqXbvDVRctFFyhr5GkfCLsGGo0Mxje96FY/tsujijC7ghYM85+ZwMBsOrGiPgDIbZpxGtjMjhIz5BYNOSO6Uq78ddbx0o8RaER0VWOQ8lHnSX4HQJC2dQ2uK0SodYsfdBjbG1+rKeLbXm0WP9JEpkRTGES6hY4IaplDDpRbWQP4my1A2iLHsnUWLvRdTnMY9KKRQJXI9KuIg+J/3ZBzZS/ZdYwlgxx4nhNbR1CubNq/qQngRePkerYzAYXsUYAWcwzD5VZUSOHZdYwmfNnK1YUXC+E44oUBEDkbsOql2DkTB4GLiZijv1bIrV6nOf7jH6+5n0dT1TZlqsOKmSRlQjLkp00AsGRywD1qA+g0jUBShrnUC5YLdSkVdR0eVof3QegfpMGlCWu41UW0odeHrPBoYKC7io0yKTrrqp48xuh1qDwXCBYAScwTD7NEcvPA/KZRDCZVnbkYoFK42yqnVSLUCi/boosqkUJjmCaqpUSjjruerOcCEw08LCtUSslTBX3HrpUalDF1k+HSqJFPNQcXE7UAL6GJVUA32tJcrN7QBzqO4kgXq/ff9VlL15dM0t6lcwjulHajAYQoyAMxhmn5boxfh4gERiiYCO7EglKD9ysDaTXOpDFxtRpuZ1wJfC14sTzno2dpx4D9LT4Xz0K6113nouZd2lGk+e0B+RhVMfH8XcZYBrUTGKRZS17hQVi90oKp6uHxVfdymVYsOhiBsrWJwam4fAY/PFVebCIeDpWVg5g8FwAWIEnMEw+zRELwaHwHMhYxcQIlQIUVZjFAQ/HVHJjS6U9a0b5f47l02R9MLCrxYRN9PrjFsmkyyVkRiMbw9QdrJt4f7IUhfta0LJ9VWov75RAkNUNDgD248t5vDAHThWiYaGqvq7x1FRdwaDwXDOa7IbDIbTZ1LADQ1JPA+yqTFydqEikGyUdUdvfJ6U4IA2voRqJzVIpYvBueRs5xPUv4/ZIBJmujhNSrJIEm/xdYkSSwLttYsSbUUqWa8xy9/h7kVYdhdtbQEL5lX9ib6P5Ab2BoPhNYgRcAbD7DMZKj8+IfFcST4zRC41oTZG4mG6Buu6iw+UYOgANgEPkGxvPxc9UeU5mCfpPmb6sDg7AZgU/xZ/rZe9PVOLoy4Grdi8FmDDmLR5dM/7AZfmZouOzqqTnTpHq2wwGH4EMALOYJh9JmvAjY9LvAAanGFSdkFtjFxxkQCbznIVCQULZelZgrL0HGFqWQ8Ze30miNhcF2KO5Ey6ICS5TuP7Tlco+jW2Ja1/Gh5/eQO7T70NKWHjBptsxYPaBzw028toMBguHIyAMxhmn6boRbEokYEgmxonkypUZyhGlpukh021Wy8ScSlUnbL3oARc5NKD6szVM7Us1WK2RNzpiqzp3KBQWVfdpXqmaxHN61NtjRNQLsJdT/4CAYtpbrZ41zvTpFKTF7IdU//NYDBoGAFnMMw+HQBSQtlVG9JOgUwq7JYUibh6cVdQ283qo7IeV6LsOFER4GjueIuuM6FWh80LmVq16pIscXHRJk/jEbWOj9ZX/5zC9ZfAt5+/lr29v0DGLvCT70+xcvnkhzkI/PZsL5fBYLiwMFmoBsPsMxdACBgaBCkFKVHCFkElIUEvbVFLxEltnC7QOoCd4fsRVELDUiqN4vWSIHpx4KRziRrnrEU0l8XsWOXOpPBw3PoW336mlspAOz6gYjUFhsey/HDXr2BbJVpbLW69NaUf+SiqRLDBYDBMYixwBsPs0xW9OHTEx5cOLemD2EEYQKVbbOoJqribNRJ8US/QsXD/cLjPZ6p1KLIYJVnodCudPn4mvJLWuLgAnWm82kx6xL4SfWTj6+nAlu6N7Ou5GZDceJ1DPld1ss+TXIrZYDC8hjECzmCYXWy0LNSBAYkvbVqzh1QD87gQEdNsi36jo+csKnpqhEoj9QKqNlzUWUAXclHQ/avBBRonyX15Ovvjgi+p48W5EHGRG7Wo5g1s+OcHP4IUnbQ0C97ylpTevL4MfHM2l9VgMFyYGAFnMMwuHYS/h1JKhoYDCATN2eOqkX1ZGzmTIr5QLTY8VLX/PBVL2ziqpr9ep0x/jl7HMyUvxOzSiLPt8Rrf9krVpIv6oI4B+4A0PHKkje6B9yFEgY0bbZYurvqz/NQrtWQGg+HVjYmBMxhmlwWEcmF4BCbC0m/NjUcrHRUyNY5MikeLtutZk2mUTBxGWd+iZuyRlc2n4lK1tbn0GmUXQpHdc0m8nEo8AUQXwedK1EnUZ7kP6AUuBjz4wTPvJ5XOYNs+H/7JKR/2t2Z7qQwGw4WJEXAGw+wyj1A2DQ1JgkD51hakB9XeXMIRtbJN46LLomJNi4Rcd/h+BNX/wabyVyDeCzQKtNdFnC4MT5dzXarkbNC7K8SzTEVsTNKzPm4mROu8DzgIzAcyMFKy6Rm5ASF8LlppMW9+1Qc7DDw520tlMBguTIyAMxhml1ZCKXCqJ8B1IWWfZI4oVAr46tmLek2yOLoY0TNSQYXA2yhX6kg4Zx8qRi5HpU1XmUoChBObL8qejDJKLS5MUZZErWLH+rrG56p1jvjr6e7fRmX+bke5TnMoyypwfHwRh/o2YzuSK6+wcard5E8Bz83OYhoMhgsdEwNnMMwuk/UieroDPN8i5/QhbK86kUDPLp1OMMQFSWRF0y1rfeGYEqpG3ClUXFyU0BD17IwSG3SXq17fLL7tQqXWtcW7SCS5THWxJ2vMXWv+KN7tCdT66iK7Ce7dtwkvWI5lwdo1top7rHA36hMwGAyGKRgBZzDMLpNdGEZGJYEPbQ1HyWXLU9169do+xdHdnhawnIpVzUe58SIiS9oYMIASdQFKxLlUkhsiIRdvBZX0fKExk3Ig9bJXk9ZWf8T7pmbCdTyIEm8BSsyJcP261LgfPPMxLEuwfJnFpZuqHCIjwOdme9kMBsOFi3GhGgyzh4WKgZOAcF1BgKAl20/G8arFRL36b0lN1oV2BgG0oMpWeAKkDUUJwq9Yz6LxZZSIy4ePyNLmMFmzbEpyQ3RsFGtXy716obhaa61j0vt4KRVb257UuSEI1+0ocFe4bWm4bnrixDz4ryeuoBRchev6/NzPZLGr/xr/KSrdxGAwGBIxFjiDYfawUQIOgOHhAEtImlITpNMyObA+ju5aheQ6Z0VgD3CNxWjqDzg1sYPRFf8Heqzqum96kP44yrU6jhJ1pXCe6FGiuoZcoM0D1e7V80mStaxWk/q4tS1JFNd6Xctt6gAHgC+Ha9BItfs5XN+gDDv634FtZ+lok8yfWxX8NopJXjAYDNNgBJzBMLtcBFAqSQaHJZbl0ZHuwYqX8/Bi7+PEY+Sih4NyxrlAOsCe3493fDXjJ38eb2C5ssxF7br0uUAJjmFU7JYbXkOJakGnx8rFuzboZUouFNdqPMM0/l4XnPH4PkH9zhSpcL2/HI7NUd1KrCncvwhGUw30DF8H0ufKKxw6OqoU+kHg+dleKoPBcGFjXKgGw+zSAYhyGQoTEtvyaHTCEiK61cejuhdqrYzLuLXJR3VaXaDmyDX9Pc23LWL8yduRokG5+spUeqamE+Yro0RcHhXbFRcwUbYsVMfdRa5UqBZG5+ufjdPFskXbamX2xl3TQZ3jLVRiyH+jBPNibX809xzUX9wuGG1opndwPum05KYbUzjVf4l3hbMYDAZDTYyAMxhmj4AwiaFUgtFRiSV8UvZgdYwVVISU1gC9ZiFfYsdFAlCCWOPR7P4WTVf/X0RhvNJh0wJOotymeaY2n/dQkiKFqh8XBeTrteI81F+UKF7OQglIXQDprsRz2Z6qHrXKrsTXrpZrVRei8bjESPzZKNfpQ8AbtXuMd8/IAF1w/EgzIxPzWLZUsGmjHb+Sv32FV8RgMPwIYAScwTB7+ISlej1fMj4uEZZPNtdX7QbVRVDkjtRrskFtEeRRLZb6gbKHaB9RtckiISZRljqAl8L3pfChW8wia10z6q9HKAyrEhegugBwtC3e/SCKv9Ov/ZXu+pDUVSGpUG9Sdm3c8qkLPh9YDywM36eotlBG9+4ADfDVh96C5+V465ssGhqqbviZ8GEwGAx1MQLOYJg9GgltNEEApTLYSObne5ECRIGpra0sKqIgEnH1SorELUAtwEYqhX19bV8kMjaF2yeAbbFzRP1Vh1BFgPNUYsAii1uUtRplXsYzN+NFdHVrV9L1TFcyJc7ZljRJSl6I14LT7yNyIc8D3gZsQbmsA6ANZbGMhGw7jHTDvp430t4uuPTSKX+Cv8xkmV+DwWCojUliMBhmjzY0ieW5IISkLTeq9IruRnWpDpqPLHH6tumazusZo7XqnelxX3ngddpVRta2SEROoEqORMkM0cMLH9H7eJJDUrJD0jXr9zqTbNYky9l04/T3gba9XrKCvg0qQrUAbEZZJzPh/pZwfyYc0wjffv4WxrxruWyzZMXyqj/Bx4DvzeBODQaDwVjgDIZZJOpGSrkkCSRIbPLZsKO9jepdGlWK09tYJbnxoHZLqJnEgcWPiTo3bEQV+e0H9odzZbQ5i1RcprrIieLjdBditE0nyZ0ZJ5qzXsJBvffRtnp19WoJO33N9f0BKukj+itaBNYAa1HCtpOKVTKjxg5PZHjywIdIp1JccokVv4xvUV1i2WAwGGpiBJzBMHu0E+Z9Do8qAeeIMrmoiG8aZf3SrT969f+kGmbx5IeImYi3pD6fUXJCDliCcg0eRiU0FKkItShWzqYi5qLX0faoELB+vZGwi/bXy7DVRSxMdcXqJCV41OvAoK+bbo3TYxDja5ilkpUbxRkWgFXAI+FzKhzTCSyCz3/vfezveQcNDT7XXJXRZxsD/gLjPjUYDDPECDiDYfZYhvp6pzABvm/RmBrE1gPB0lSEQ9RoPhJEet03vXH9dA3mZZ3XtSx1ukVtBUrURfXgBlCWQhFebxQT5lLJxIweqYR7sKkWQSLhWuIJA2jHxe8lqZtC3FKZ1Ps0GhfEjo3G69bNVGy99ZjERUCrds8CaIPekQwP7/ppApmjs9Ons6PKXPpllDQ2GAyGGWEEnMEwe1xEKAtOnpR4rk0230sGt9p9dwgVS6XHvemiISrbEVmKziaTs1YpEn1/NCaNkp8NKEthPyq5IerQEIm5eMydRXUyRiQ+I3djPLM2Xmw3opa1Men6467kWi5XWWdMJOZsql3IcWxUzbfIOpcCGuGu+25ltHwdgV/m1pszWBX9NgD82xl+YgaD4TWKEXAGw+wx2Uarb8DHCywanH6ECE1M0Zd/O7APZdmJu1Gj5IK4NS7iTIXcTI+LhGQTKumhC+hFWd9OhtfnhPuy2tyRgNNj5/RYOagd76afe6bXqo+NW+OS5kiyRkZjMtp2XXBGYxyUNO8PX6+GfcfncP/Lv4tteSxeaPH2t6T0s20BXji9D8hgMLzWMQLOYJgdbJSjDYCBAYnn2+QzJ3GEW7H2eKhiIw2o+KosUzMydWtRJIRm6k6tFxemixe9hltAbQtWFtW83UdZoaL5x1FRXi6VeLd4pqd+3fHSIfEkjZkIu4igzr74/UbCslaiRJpK14la80SiFVRHBgFfffjHGSxtxLIC3vKmDPl81cJ/Plwhg8FgmDFGwBkMs0MWJc0A6B8ICAKbpvRxUulQOegiailwgurit3rHA1t7HdVq00XQ2RbHTSrPUatBfOTKbaEi0vIoQXcMJUSjzEx9fr3XqN6KS69Bl1S8WN9Wi3r3H8Tm0p/jpLV9utVTP0+gvU7Bw91L+cG+T2A5FhvWW7zpjVX9yp4GvnSWn47BYHgNYgScwTA75FGRYwAUi0oFpPO9pNJUWlxFIi6NymQcYqpIi7sjIzFkM9UNOZMMVV2UBDXGJG3TO0foyQb6uIVUrG9jqFpy0X3YseN116qe6BDvUUqd90lu0FqJG/GkBv2YgOq4t0hgRvcYF5CN6piSD1++506s1Hwsa5z3vzdL46Rsx0Nlns6kyp3BYDBUYQScwTA7ZNAEXKkMtjPGMvoqgibuGs0Bo1QsXElN1nURorfdgplb4/RuCE5s7pkQ7/AQT0KILIctqKK3ZVRJkonYMVF8WSRWI/eqT3UtuaRM1fh6JLXG0s8Vz0CNl2mJ1iLuqo4Tna8ByMMTu9ZxbPBt2GKCq1+X4sorqorgPYAp3GswGM4QI+AMhtkhQ+hC9VwoFiUpq0DemagtzAJUssAQ9a0/kdjRa6slleaI5o0H4aON1V2x8QSAeoIusgoSmztu6YosW1lURGABJeTGqWS56qLJjr2ON6HXSepfWqvjQ3yf7lbVe8nqolIXjvGM2AB8BPe89AGK3gJamgPe8+4pwXNfD+/YYDAYThsj4AyG2cEizMsse5JiUZJxRsllxqYmCeiJAymUsJmgWljooijuSo2Lr7iQ0p/jSQJJJTVqZbzqJIlQEo6xYuNy4T2+iCoa3BeOWYGKAexDVc9rY6rbtB665S3ezaJexqmDKloM1S7UeDmTeNKIDSXX4sjQYpCwYrnFqpVVf24DlAXOYDAYzgjTC9VgmB0mbTaeC64rSTsFGtIjU3uE6u5ISUVIRL1No36jbvg+6kNaCh/lhEfUs1TfFlDpYxqvORe/8vgYYuOTMlUjkkSXLgpt4ApgPqr7QwA8DCwHNqBcrwLldq01n078GqPrDmKPpN6sLvASSljqY/WesoE2r7Ym+QU+79lwD0J47HjZ56mnvfgdv+tMf3gMBoPBCDiDYXaYlGV+AFJCJjVBS9Og2pgUq6WXumhACZeoG0IR5XYcRVmMBlGu1oHw0R8+D4djxsJj4mIuEiG6kIseSc3o44ImPqYW9USXpc2RB9ahihmfQNXEy1GdoKGvjb5W8fULauyPCzzdYvk0SkRG2aeSqS7X6L5F7L0Lm658gtaGI3ie5BvfKhHjreEnaTAYDKeNEXAGw+zgEkoBpRUEWTw6RLEyIhJOEVGsVSQW0tq4SGxF1rgoMaCEirKKYssmwu2RaAuoFm3lhPeSqVYnmCpk9O26u/ZsS5iAcqdGVsd5KOezBLaG91MrGCQu0PRr1vudxhvXNwA7UC5bO1yHaI314/WyI/Hs2X64aMVRXn/x5whklj37An74YFWr0yuAjedgdQwGw2sQI+AMhtmhIisE2A74gYUXCQGPqXFaSWU7MlTKb9Q+QwWfaqtbJOIiOam7RyNBou/TrXFQLeqms4CRsH8mWEyW5SCjXcfKBnjrlaq23NOoDhCjVIuyJOLWQd0yF4nbQ8BBVEP6ISqpBrpw08+hZ7Fq+60UvP11nyefPkqpbPONu1xGRydP3gz88mmshMFgMExiBJzBMDu4aDJCAL4U+L6otgxBsjDSma7/aTy2KxJskYiLBJpuydNfByQLvug4XdREwhOmuiXh9CxzukBahRJXee26mjbAWx+GP9gHP/NbkG+AHqGsZuWENUnKUtW3Ra5oD1XcI0t19qkuXOOxdHrGLtoxFixcPMLrNv81kOPAfp/ntkzGwgngFmA9BoPBcJoYAWcwzA6TDjhLgGWDH6SUgIOKKy8eq6UHzNeqbVarxIdMeOhJD3Hx5mn7/ISHnvQQd63GLXO1khvqiU79dTzZQAB9R6DwEmRXwjV/DHfuh5/6bVj7K5C+BPagYv6SSqckWQiLqPi6Z8Njmqi4TKN71GvFwVRLXDz54wiIAvzU9V9iXvOTBFJw730ehUrxkAXAR87wZ8hgMLyGMQLOYJgdKlJGgG1BIC28QFT26iR1H4iIW7VmUt4jEm+6BS2euKC7U/XtetJDtD1yy+qxdUlZnvH7iV9TPCM02t6KasVV1Nah7xT03l9ZTjEXNvwh/NjfwIefht/4S2jKTS26GxeVZZTr1UIlejyFctnG67zJ8N6qP72psW/63KEAXjh/gI2r7kJYHgcOeezaowc38uMoG6PBYDDMGCPgDIbZoWJDEyBs8AMb37emirekGLMIydSuBLqw8JkqnPTXkSDT3YFxIRe9j5cgqZX4MN1zLTdtvXi5LMoiFh0fjfXKsYGh3zSdhjm/Bj/7MvgrYTfVCRm6Ja+Miq0rgXwEZBqYS3K2KbHtgmrhFu/6EL62Asn/z957x8tx3vX+7ylbTlfvvctykS3L3Y7juJfYcZqTOJVAAiQBcglwgcC9XAih5HfhXuCSBAKE0NKLYye24xr3JsmyJKv3rtPLtpn5/TH7nH3m2Zk9e6Qjrcr3/XqtdsozZZ/ds/vRt9791n8j6x6mu9vim9/S75tJhG3vBUEQ6kYEnCA0hmFpZQOOZRHgEJidEeJKX0B8v05zuxITSijpAsQUMnoWpVkaJEmIKYubZywXqI6tU89xr2WkhAZTQOW0e7VGODg1Dz7xOrzzM/AtO8xaVVa0LsJ4uT5gPfSvhSOvELpRa30zxiWTmO+X6aItwoLpB1gx51/xaGXd+hI9vcMnsoELke9jQRBGgXxhCEJjqITEl7NQLcsGp6wG6unfCZXyGXEB+nGWPCVebMDpgGIHBHZ1woRZOiRO0OmlS/Rl3T2rJ0roY5OsfHH158zaa33a6/C6IBiiZlaE0wRX/jV894ew8B54bSo8BmwFdgMHwvP1vwDFIliZ8jUUel063VWqLqfuUX8d+vtUfi+ztsdH7/xbJjY/S3e3y549EQF3M6F0FARBqAtppSUIjWE4icECLBsCHBzHDn/OzSQFv8aZLML2UzkLvCz4aSAHVr4iLBxtbAkCZxyd2/8JtjSTmvA6qYkvkJ66CSe1A+z+ihVKt5yZVj7NYxnpuepRyYy1tWXfWFfnMK2G5nbdcqiXUWt2YeAA9D8CLdcRaZxqq/oqGpPugN+8Bfr7oP9F+PvPwBubw/N2QuYYFNS96Y3rTUumnpm6H5hLpaAyhPF6mfKy3tYsBwsXdLFg2ksc6LyEzVs9zl8x/H/oGYSV/QbG6gMmCMLZjQg4QWgMw05Ny4a0CwWvg+cOX8fCKd/EUrXd9HgviMa4KaHnArlm+oZ+hYEH3kNQaIamIk3LXqBj/t9g9a2HbeVjcsASB8+7gcHn78F2ITdwE+wDP2dhuZBuKtA06+ukrOdxpr6G27YdmktYDIHrRcWkEmsKvcG8rT0CY10XlGaf1jgRp5aHtGXHAduHwIPub4NfVr22D82rIHt59azbLrSPh/Zb4I82wBMfga8/xuCz++kagrRKZFhKWMw3VX645Yej3aNNKLt0oeoSyrA4i2j5/Zw3dQ0vbh5g375WfUS6fCVBEIS6EAEnCI1ByQJSKYspk22272jisT3v5dapDzC5ZTD80U8T7cigi4fhZ4tS3/V0/9sX8PpTWE7Ymqu4YyVDy++l45J/JHvhv2Ef2QgHPHgFvJkLKqLCt0I3bja8oxJpend/nMD6OKme/QT795Oa0k/T/B/jOGtxx23Dad0eWpkK5VeS1u7RIWqRi+vpar6WOHQ3smmlKwKZDhh/VSjgrFbN4BbA0Gaw2iGzvMZb4MD1/wpXHiH7zfuZ818PY88l7PQwg7Btl3KbqkQNvdWWEqJKwB0kbFG2hKgU062UJVg2fwOZF/rp7WvWb6YJGA8cPvkfPUEQzgZEwAlCY7gGmALgOtDRHiqUXt+md9Bm8l5CQbCIivUnTcXq5hAKqLKFzm91CCwPUqkwq9WCIAve3sl0H/kd0gvupXXSP5Ba+hzB1Gb8w+/GUsLCLHZrgZ0Or+GXZmDPm0ExgPzu6/H2QnZOF6kJL2EVttI88/s4fWsoDBRxJvhYqSJ+3xC0geOH9e0sCK1ZLeXX4JavOY6KdU7dg0p8MO9Jv9fhdRvS7eGLjYS/WeG+/mcgNQOsZob9n34QJj7kOmFwN+z/Jgx0Yc/fhf1ZQjfoYPk+BokK0Li5UqKxRJi5uoxoRq2ZPezBgum7ybgDFKKtUdU7LAiCUBci4AShMSyg3Mg8lwvYsdPDsj3mNq1lpj8IhwijoV7RjlBxZEVCsTC9vOwEpN2naL32IfofewegJW464BfB2bmE7l1/jj1uCDsDqVRTdcx/jCXMsiAo9xq1U+AuB68wHq/7ZoLgZgaevp/mBdvJ9/Uy2DlAk3eUQt8m/PwB2rueJlPYSjob3rfvgzUJUunwvMwhtFS1EYq5AJhF2GBKxf0pK5eKrVMu2wAILCj2QcqGoBBa4kp2aFEsFcILHv47KOwNBVuhBywPMkXY+SYc6obmwUqcXxNRl66aD714b2DMle7idYFdhJa7NnMiK6+h2SnhOkMMDET8rDaSVCYIwigQAScIjWFYPuUL0NcPjlXg5pn/SabVD112epV/PVEgTdj38wAVYeD3MGHxx0lfdYSuNR8hGKwYcywL/LI0KHU2YRWhYIM1XruTWi2uNJES5MviywmNXNaSdvL5lVgZmNgC+Ty0zgsTQ4Pmdbhvvhdv4yacyeBmwe8MBaHvgreZimxJl7VROtxHCdwZkJoMzANy4XiV9eH4MNByDPdv/4SgzaHJta7vylgAAIAASURBVLCKJZgeQMqHpvLzfCAYKFsqg0ocWwqYSDQrNyluLfZdM5aVZXEyFbEZVzzYhpRdJJvqpxjpa4+DZKEKgjAKRMAJQmMYjgjzPBgccnGCN1nQcQCrhdC5qqw4R6i4TZUo2EUlaF6JvC2dtDb9GtbyHg699LnhiiS+D6USocvVhsAPRZiti0Mt1swaqZtDeRx22ToHkIacF2ClA7yShWVbOBNnYd8wjdTqTaE0KYGTAu+7EBwGLxVqKgC/AF7ZkObZoa7KboGOHeA9Ay8PgZuG8eXXe8iHRVMKTLy4k9LrkBuCpiXlOZsb3k9kfjJUMkv1LgmKOPFmvNaq7boVTsX42dq6b+wvvx+uWyKb6sHzIxdVtkhBEIS6EAEnCI1hOJfTtsEnRUfqJca39IddB64gkrlY1Rh+GaGLdQ9hKQtVQDefo4XfY/JVbXRvvB+/t3W4ooZVFhxWGxGLEFBxU0K11Ukj8MOuEVWtvazwnwArrK3rQtBVgKX58LUcI+yGcAE4c4FXQ0EWKTHiE3WXAkwIx69+HWgCe1w4bp4F9iRgIqTfRZidqtygETer9igQFWPHw0jCFmO/Ps9ll7Blhz7bUqnqzOJCFQShbkTACUJjGHagOTaATcodJGV50QK2phtPyb5xhLFi0wkF3H5CkbQXGCrSlv8NMkufovvwn5DbOx9LWZ/K4suyOHH0um6mJQ/CWLQhNyzLYRFmZxaAZuA64uWKKY6K4WuzryJSG2/40EEqGxwqVrVabbnM3qhquxWzDeIFrXl8Uh3hUvV2x/JxnQLFagHnIAiCUCci4AShMQzLM8sGa9hsRZXLLYJZXNcnTGiYVt73AqGoGciR3vwfTJn1Mn0z/juDe26m2DMzanFLurFAC3tTy37lmCBGAAZlq9fwWA9otsPXpTJn1TmUu9GLubh5XynCOLY8tePR1IzWO/N6LTvTPWrFjDXjBOPeH22OokKWSIydbftkU110l6qSGOT7WBCEupEvDEFoDKrplOXY5UQDzw1/480yGiZKEEEluUGJJuV69YBbgKNbaFv7y7TMXkZhxo3kBm5noPctMORguWEiZyTurZYoMsWlHvdlU7E2lWP1glIvVtuhaCxY0utKirsz22glHWt2TRjJwmiU9ogIR/N43X2dZDXU50R3Cce9fZZPodSMX1X7RCxwgiDUjwg4QWgMw5FtjmNhWT6u44SJBTpmOymFEgnqZ1+5Fwva+ICwpMVteexgLdniWrK7v8S4/U3kOn+P7k2/hpdpHY6NG0avXRaU6+Sq4ryOtk0vUFt2zwaElTqCEmSyT2C37KiITbMmWtzrHI1rN25sUt/YWu5QiCYgEDN+JIubvs1KGKvVvOsemIvTYuunlRg4QRBGhQg4QWgMwwLOLouAlJ3G8pUyM4gTOLogcrUzmkVnVaZokbDO2oQhsrnfZ3zLTo4891VoH85BiJ5bL12irFSa4gjKt2mZJTgyYBUPkJ7yV1htpTDBAEa2wNXLaOP3gpjluHPo4iupnVeQsD+u7ZevPTRplvd8Sr5DW9bSb0O5UOtJkxAEQZD/8QlCgxiu1+9YYVyU54/DD8r/pzJ/wnXrkELvy6kTt24TxpOVysc1Q2blPzDprbeRHfcEAf2xAffqPgI9bq1EJaatbI0LvPIYH4K0R3bql8msWB+KR/0eE9yKdTMWyRfqdcUJO+Wy9WPG6i3B1H59OajxrB4OrN89l76hybjpyJtsceKzIwjCOYQIOEFoDMMywbLDdlqB1UypZBjF66nJpnCpFnR6fX9l40lVxmTn/4QJ19zOxEvuJZN9CL8AfqkiyggYbm8VBGWrm94VoURF0JUFoH1oI81Tv1bJszXj0/RWU/psjFR3rpZ4842HV+OhrmWKNcN1HBmvX0ftV4JXjQ0Szm3Ujntz+8XkSrNobal6BbvqfKcFQRDEhSoIDUIlMWBZkEkH5Hs7KHhpYHBkwaLQxZ3uukPbpj+rY1IMixDLzZGd8QjZ+Y+Q33YDffv+kELnfOhoxvIyBCVClRmkIJ8K24mqvqyAVY4FswBrENrH/wN2856wfIhDWFTXpyIebe1huobjYsj0mm4mxyN34s6V9F9ZXaCpdX2sXkrFN47T6+UpPOjqnobvtzB3Tt682iCCIAh1IgJOEBrDEFovgHQmoK/UQtFPVY+Mq7GmMAP0zebw5nmU+PAJuxP4gBuErs6iRWbhY2RmPE2pMIPAnoNXmAKBA55DMNBB6cgMgtI0cv13U9g1mSAF9lQLqwh2LzRNfor0Vf8cnk+3RilRplpZqWfV1kq5g5V10I95fSPVdjNj1aB+l6spguNEpJpbU8zp19YTSnRK4WvLDdgc6J2NZZWYOjVyc31Af513KwiCIAJOEBrEIGF1s1aAbAaKQRMlLxWfTFCvpUl3ucbFwunN2H3Crg8lwm+CfBAuZ4q4zi7wd5FKUbEyTSCsyeZDW/fvUVoxlaAwntz+91EIziPTto2WS/8UBnoq1zOvXaDapaqLH9VTNENY8DepsIYeV2a+trjYtqRzKMyadLqVTQk11eFBvyddaKp1vcyLErHlLNd9h6az/dCdpJwcrpPRr/gaYXdbQRCEuhABJwiNYYBKfiaZDPi+Tcmza/flNImLkdMFRNx402KnW8NUTJtPNLZNWbnKXj+r4wipjiMQQHra02A3gZcLBw4QdvUMEq5p3g9U4sXyVESduqc0FWGn7lnt161ltSx09aDfoxJrJnrRXzMbVRd2ypqY1d7lAqzbch6DxSlMnAgXnh/x275QmV1BEISREQEnCI2hhNZOy7YhqDvwzcAUL7q7T9+mMK1zuttVtaTyCQWIKeDUOfUAfRvwhyp9W9OELlS1z6I6diwJM77Mp1LbztLGlBtXDK8rMecY50m6rlnvbaQ5HemedcumEp4QitljQDsEGXh6/bsollppbw3o6Bi+sRywrs6rCYIgACLgBKFRZAglEgClUugPDI5XwKnYK4USEHHxWHF9PHV3pHKvKtHmUsns1IWckp96ZqZtPOvnVVatuJ4DcYIqqbivGqOyQD0qjeqhOobNodqdq2+rx81qzqOe3atfUwm4bPmYvvKzC5t3z2Bb57V4Hly2Os2EicM3tQ34KYIgCKNABJwgNIYU2t9fsWjhWkVsxzv+M8ZZjZKC6tV4vVivLmiUGzap6btuidNdmH7M9rhjS8Y9QLXVsB6CEZaTskP1EiBJx+uvpx53qppv3YWt6u9Z8MymG+jxltOU6mPlSnu4HjJw5DheuSAI5zgi4AShMURaqvtBgOPkSTmlkY9MMtIpYRK3vUZvzoi1TC372nFaf9Ph7XGZmMrCNlISQVI3CVMsHW/RXvOa5vUKVIvFpCK89VzHFLRQcSFbwFR4eft5/OTQb5NigIULbFavcvWzfJdKvwxBEIS6EAEnCI0hYmrzSpCyPRy8aOzYaDFdqfp21XA+DrMNlN42S3ex6p2+lPsyrhCuWdIjya2a1DQ+6f6OZ07iBF2ctQ3jtdTCjNUz3bbl57xt8/NdV/KVbf8fvcynucnnrjuy+pl6gSfruKIgCEIEEXCC0Bh0RyKWBa6VJ+16J9YuShdftfYl7dcFjB6rZlrHdJHpE3WPmkLPFEhJAmokl6Z5r3DivWTMe6vVDkufF1WxLQWMD416+aJFqWRxrNDK9sI0uoYWsCO/mucGPk6OieD7vPudGW54S6TW37PA6yf4KgRBOAcRAScIjSHi1LRtwl5VVpBciLdeamVQ6oV840plxB3rUslE1S1NunBTWatqXJJ7Ms4yZ147SWCas2ee3zbOo5b1Z3183P3FiVF97vQkDBe6plv8+6EreX3HfdjOZApBhn5vEn3BdPL+TCzLxbVytLcFvPPeDPe9K22+iv9Tx6sVBEGoQgScIDSGSJdN2wrwAxvPc07s53w0pS9U2Y+4faboUgV9S0SFku4+VBmrEM1ijbO26Y84t+VIrd3jMkiTCvmaGahKnKnX4VLJHlXZpWmghTBXuL28rOq6qdfXDptemsgPnvwiQeoq/KKPZQW4tk82GzChxae9vcCc2SlueKvLpZdUfd0+DTxW93srCIKgIQJOEBpDJInBsaHgN5ErZCp7T4R66pgpsTJSooE+XpUUMWu7lYjGgOnJEHGiDaKuUxVPB9VZoxjH1tsj1lzWrYd2zHKGSmuvNBXBpgoJZ6h8Y5Y7Shx4cz6BPxfbH+TO21IsXeKQzbhMnGgxbpzF+HHQ2lrl5/WBDcB/Q6sFKAiCMBpEwAlCY/DQ0g3cNAx64+jLjQdr/+h7eR4PqntAUpkRdX3TMqa+NXTpoYSdaXWrVQDYnA09yUFlu6plPaZOv/9a85NUF04JVythn1mCxCyTotaboLvYypDXyuLZNp/4eJZslpHYB/w18E/A0RN5+wRBOLcRAScIjWNYknS0wUB+EoeHpoP1RmVEUjeFeqi3m8BIZUbMDFVFiqgw0+Pr1HjT6qaLPH2sEzNez6bVCwrr86K7QpPuPU6omV0b9FIpelcHxzhOPzYLQwR4vk06Sxi/GA4MCHvdloBu4CCwhzBZ4YfAmlG+k4IgCFWIgBOExpCjksvI7Nk2g8V2juSmJguvk2mVUyKmVh3hWt0SdEueHTNOCUSXajeqsmqZFjzdIucY5/a1a5vCUy+BgvGsx+/pCQnKsqglKES26ceo5QwUfQfLShP4AXblfSkBnwceBnoI+zH0cuKOcUEQhGFEwAlCYxggtMwAMH48+EGKnkLryD/zcZmbVsy6T/3EdVOoNTbuHvWSI3q5ELMQcFxrLP01qAxZ3Z2pW+xMq5vZRN4sSRLXj1V3mTraPhXnp7fKUuePec0BJSwsHDsglR5+YTngCeANBEEQThIi4AShMfQDe9VKS5ONhc9gqSXcMBorW1Ix3NGcQxc7epeFWtesVapEnSeuQLCfcK44gedr59Stcvo9m8foYk137dYSb+ZDvYYU0b6p5px4YNk2Pr6+yyJMcxAEQThpiIAThMbgE/bABMAtx5OV/PKf5KlytsVdR29mX4uRmsGbRYOViLON7fr5zHg2syCweT2V7KCfIzDOZ4ovM4HBrO+mrIWqW605Xru2XQIsG4KIsktqaiYIgjBmiIAThMbRoxZsGyCg5DnJo09mRqpOnJUsjqSCuHGCSS8noguhpGbxKlbOI9pZwnTNxrmOzXvShZreQcKh2s2rx8OpUiK6gDPcs4VmHytAj39Tr1gQBOGkIgJOEBrHcCEO2yprCyuoJBOYFp8T7dAwWo4n61Xdp7lNTz7QRZuZfWoKJb0jgp6JGhevp8smM/5Nd5+62rJpgVPrbvlhZqrq+FBoBoLA1LIi4ARBOOmIgBOExlHpxOCARYClYsd0kWO6706FkKvXCleLuPuMy1DVOzno20wRpyx5LlGBVjWbRBMPdPFmZqHq11PnUy5UPRbOfD3l+00FNrZtEUQVXFI3WkEQhDFDBJwgNI5hf6ntWBD4uMoXF9cX1IzpOpkkxanVg9k9Qd+mn9uvcZw5B3HN64OY88ZdK66cSNyyniBh1oCLc/F6kE6HjentqM0t7ghBEIQxRQScIDSO4br9dgBYAbbl1K4Dp8prxImV0w39dcT1JDUL/1oxx0G8pQzqF5dWwrO+X92PaqWlJzOYblj1rVmCtiawLD9MQqk+oyAIwklDBJwgNAYXmKhWPD90obquM7LlS6+zpsdvwehlQzDCurn9eOPi4s6vFwH2E/aNpSMySbjFZaTqBXyTItp8SKfsJLUmLlRBEE4qIuAEoTGkgUVqZXDIx7VLpO1i/T/9erspFR+mLEf1YtZc04WUrkwyVJcE0Y+JO1+t+zbH6n1P9ddvWumS7n00rzNpm25pG6lFFxAU4WjvPBzHx1f3XTmnCDhBEE4qIuAEoXGMUwv9/eA4JVJWLtxwPJY0s36baaHzE85rdi6Is5rtINrSKlU+XxMwgYrVSomfHJVs2jgpYzaK1+8XqosJx3VD0OPj4mrK1SoxkrRfb6WlXzcmFi436LLv6KU4NnS0W+YlRiOjBUEQRo0IOEFoDAGhFQ6Avr4A1ymRtvvqb0IfhxkjZlro4pIJStQWjAHwI2ArcDWVEicBYSGUOUAzYUSfih+bXT5vE9Gm91Dd7J6Y66tM06REh7hj6p0XXQzqAtEUh8Ssq9ftgJd3GMpNx3Z85sxxTQHXOoq7EwRBGDUi4AShMUQkwlAOUnaBtvSB6hi4sQiHN7sZQFTcjSQYlwBTy8uqFluhfOz28rlK5fNkgfHlfbOJdlPwgRnl5Q5C16xubcsSikKzw4I+a0mWxJGIK2Fi7tOTFuLEot4vy/LJpjsJPHh9vYfvgV35Rp2IIAjCSUQEnCA0BtWyPVzxAyzLI+uWmzOYGZyKkSxlJyP30QbeRqXDp00o1voIRZZHKLp2lrcdBo6Vjz1inMcCXisfN5HQcqfcrCVCu9VlRC2GpkWylYqrWI/BM7NZzZIjcVZIqGSbquK9KUJhqbtS9e4N5Ws3dxRZteS7vL7vXjo7oVAIcN3hk889Ce+EIAjCMCLgBKExRML/bQssKyDtDjYm/H0kt62yCqpvjDQwhWjs2GxCITdAxYLWDxwltKxtBPJUEi2Gyvt0kXYYOEQlHi5bvpaaKZfQgmcTCkCLivvWNe7VrKOndydV23XrYLE8pgD0avtKVMq35IBLw3UrBRfNXQcBFEvQ1Q3NzcNXmNKAd1EQhHMIEXCC0Bgi4f22E6oYywmiLs1aZT4aXWlM2Q/NtlXjtHtrB2aV980i2mXCJ7TQDVGxdlnAm4RiKiAUgHp2qge8UV7vKB+XLm+fTBhzp1y5egsudT2zyLCeTasve8Z2de1W4EqGXcZZN4/r9DGUa2fXLo+ZM4a/Umc3+N0RBOEsRwScIDQGPcWAlAvgkPdH0UbzVPdGTUJ9i+gJB7oAVSKog0pmqrJuTY4533xgsPzoJHTLKitdP2F8nS64VMJDrnxMUn039VAdFhxtnyrg20TFlWpTcad2lLfNJrTQlee9Y+JRpna8xO7DN/PmVo+rrhz+Sp3Q6LdFEISzGxFwgtA4Ks3sHfBw2dU1C2/2Kzh+EIoHJTqGygOTavwfbyHfuHOM1oWrJwCYrlhdj+ouzFp9VjPlx3hCq53efN4xzqtb1fRyILpgUyVO9PZYZqmQuIb2eisthVd+lGPhWpoLtLduxztosW9v5EVFezMIgiCMMSLgBKExpNDipCaOt/H9LC/teycfa3oQZ38hjO1yCK1KtxIKiWJ5Pa7sRa0WVKNhNELONBiOdfxeQGjxUtdSkrdWX1i9IK9PxZKmW9xc7Vx2zAOqW2lpJUTUPTS1woL2zazBZmAwIuAmUknxEARBGHNEwAlCY7gFuEitzJhhYVmwMzeNdT0tXHq4EAb0A7QBLxCKkQywglBIZKi4JIvlh5l5CScm5EYSZCfbhatb3WpdS09y0JMTdOuafk6faqub2eA+6XpG/bj2piOAje9HJmsmMA3Yd5JnSBCEcxQRcILQGJagudk2bvKwbSgUimTaSmEigCqwmwU2lwfa5eWJwAJC8dZEaK2bQGidS+p8cLrEzNWD3pXBqjEGom5TqHbpmkLNJMlqOVL7rfJxmVSOABjoh5IHbig4JxFWzhMBJwjCSUEEnCA0hmlqIZ+HNes8LDxWT/8Hlq/uh3mEAu41oJuKhSlPKNp6CYWcRSgDFxMKlUsTrqaLt9F2MBipvMgo8i7qvqY9wn7zdcXF4dW69yRBG2fBTHrd5fOksgUsy+PgEZ/duz0WzHcgfFfGjfHMCIIgDCMCThAaQ5ta8P2Ao8dc0rzIh5c9ipsPoIVQXKiSFf2EJTfeIKydBpWYrkHg9fL6JCqWORNd1IyliBsrRhJu9Rxjvj67xnG1iCvfEndMAaZM3U3W3U3nsans2x+wYP7wlTtOwawJgnCOIgJOEE49LqHjE4BCAfoGUiyb8CzLJ/ZWgvah0i21BZhO2Hd0kFCgHSW00inr3LHy/lph83p5j9FY5JJEnCoTcqJWuKSEBPMe4o6rtd983fq4MWpRdt7sHXQ0bedwzzSOHRtOZHCAZYTvdem4zy8IgpCACDhBOPU0odUJ6+8PyBUsZo/bi6P6jJqFfFX5inYqdp3pRIWJCtqvVaJDZywsccdjNTOpR7yNdE9xSQjmuLgivmbGrTkn5nkx9pdgUlueie0HONxr099fqc0MXEGYaiICThCEMWeso1cEQRiZLJqAyxcCPM9ngtsbzRyNEzWqabyyvJlipF7xpjA7EoyElXB8o4mzKOpzaMbIWTHL+nni5j/BAmk1w5T2I9g27NnrU6hYUBcTCjhBEIQxRwScIJx6soR5pAD09kKpVKIplavfEmUKtVMpokxxU4+IsxIeI+2v9dCzVB3ihVmcBS1uzvyYMUmvKab+3pyZr5NJ9bNmrcf+g8Nvzgxg1Sl4RwRBOAcRAScIp54sYeEPALq6Akr5Ih3Z3kqLe1NcmA9Itp6NVghxnMfrGZ/+KK+hUN0RTga1BFvS3JnzS8y6ec4SXLjwRZoznQzlYKDiRu0A7j5Jr04QhHMcEXCCcOqZQCjiANh/wMcv5RjffKi6h+hoXKKBcdzxujdHc4wu0EbrvlXH1HO940lgiIuDS5qTOEFXTxmR8muYN+0oTek+fD9g126foLJ/MoIgCCcBEXCCcOppRSviOzDoYwUl2t2Bsb2KLujqHR+3XA9KHB1P46jjdf+ayQvm/dR7Hd84nz7WFHZx1k4f0pkCrdmjeJ7FU08XKQ53uWURUk5EEISTgAg4QTj1zEUrIzKUA8cq4lrHY8Kqk9GIuCBmuV7KLsUxubfjiYuLc/EmZcrGWdxMwVtrDrQM4eZMPxcsfBCCgJ4+8Lzhg84nFHGCIAhjigg4QTj1LKXsQg0CyA2Ba5ewA0PJnKiAMR+6W7WeuLjjFU2qD+lo763euLl6qKcNlp7xa2axmuVE/JjjtPWU47N8znpsu0R/X0Bf3/CINCLgBEE4CYiAE4RTT8X6NhjQ1eNjWR627dd2C8KJZZuagmSkc52IJQ5G706tZSWs917NdbNfqhWzvZ7r6yITYkXouJZjuE4/h48EHDocOdns45g9QRCEmoiAE4RTz7CTsacv4PChgGyqgG0Xo0kIcY8gYdvxujtHI4yONyGiXovaaM8/kls4LqYt7ljTZarPc9Ic6MdYQA4mjd/DuOYtDOZsOrsiN3cRlZ4agiAIY4IIOEE49QwLOM+HUhEyzhAZJ3d8Z9MF3PFmrtY7ZrRC0S+/2nq7PoxFGGC9Wab6WFOsmbFwXsy5jXPNntLNjAlrIXDp6orsuhatcLMgCMJYIAJOEE49w9LABiwHHKuEa49hx6W4enJJ1CvKamVjjoRqBaZi5HTMuLekGD1IjpNLqukWxJxXP0bfHieAa9WOM6x0lgvTJ+zAsgP27I3czDTCJmiCIAhjhgg4QTj1DCs1ywbLAi9w8D2rtngxGU2R3rEaZwqg0RYM9srH2cSLOXXeerogxN2zuU0t21QXHNbP5xEVZl55rL49znWNtuzB8nlP05w5xIaNETHuoJWNEQRBGAtEwAnCqWf4192xLVwXcqUmhvozUKQiGkaKbas39s0s7nui43T8UR6jxFFJG2/VOG8950u6hjqPWtYzcc3XbEGVmzggKub0fWY8Yrl8yuolG2hOHaBQiLwoB/muFQRhjJEvFUE49QyXec1koKXJIldspqt3POSAPBXRYIojU1CgbY97EDOuHnF0vAkLo4lhU25VSG4eH3e+OLdm3D3HuUItola1uLlT4+LmV+/mEOOiHTehQDbdTRBETpBUiU4QBOG4kS8VQTj1FNRCKmXRMcGi4DfTOTQtlHZ5QgtVUnZkUmblaGu2jeQCNQVNvbXZRmuR01+XXnxXHxN3nJWwrI8xXaHq3GaJEzPzVB0T50LFuJ5RX8+xivjV9yzftYIgjCnypSIIp55OtdDUBMsXOfikODQ4ObTA5YBBKuJDFwkYz0mN7tHG1BJS9daDq7cAcK24vVpCMU5kWcb1k5Ia1OuodR8B1XFuReItcaZo0y2epnsboqLPAiyfwK+agBMtTSwIghBBBJwgnHoOE9rZsCyYM9fGclI813UtfsGCAaAX6Ab6CO11KuBfWYXihFdczJa5L46A+uLj6hmXdFw97lWzl6pphYt7TXHHJvUv1YWgTRiZpotetaxb3vR7V5GLxfKyiuXTO08AQWDpzewV7ihmTRAEYUREwAnCqed1YL9aWTjfZtpki9f67+SJAxdV3Kg9wNHyyN3lZZ9QeJjuPpNa8WO14uNGkxRxPMWD64m/0xM44yxxtYoLJ3V/0EVcKWabKnESFyvnaQ/l2i5py4XysgXHjqUYKo4nqJ4YscAJgjCmiIAThFPPzvIDgGnTbK6/3qVkLeRbxz5GKW9VRIEew9UHbCO00KWpWH4gvs8pRN2Bo6mrFrdvNDXYRmIkIadnqer3Uk+ShC7iTCuamk8lvlRJE/2a+ji1rFvcSsa6Vhrl+XVX0l9YSjpddaPyXSsIwpgiXyqC0BheRZMj996dZlxzP9utj/G97reFQfC6uxRCy1sH0E9olcuV96m/4rgYrqQCtRjHxG0fbUmR44mTixNpulgzz6e/VnVM3PHmsebr0udWj4UraduKVIR0KWa9QGgpLYT7CkPw0ubb8f0WZs2oMrjJd60gCGOKfKkIQmP4MrBXrbS0WCxdYoMf8IO+P2JPbnrUZacLOsrbuoEjQFd5u0s0qN90J5riztyXxGh7rY62R2ut0idmMd2445Jegz5n5lgl8nRLmqrBV9TWVVmXnLGsxFue0CLaBv/rv36bF7b8Ipm0x+WXR0LeDgG76pw9QRCEuhABJwiNYTvwp5RlhePAu9+ZYVwHHPYv4n8f/Qt6veaKoFClRZTg0K1NQ4RpEfsIRd0QFeuTGatWyyJXS0gFxnGjzV6tt/ZcUrKCLmbNfaZYjHsdZoJCXIkW0/JWJBrvViq/D12E8Yhd4Rjfhb/57i08u/FzFIsZ5s5xuObKiIB7vPzuCIIgjBki4AShMXjA3wNfoCwnVl/q8Iu/kMGxPNaUPsD/OvzXDFqpitvOzH7ULXIqOH+AisBQQs+MAdMxa5uZMW42tWPgarlAa7lM6xkXJxD1bFCduC4KGNvM2S/FPMyYtzgxeBDYCOwBHHhixyx++sYfkXKbaO/w+dSvZGlvH3ah5oAfU7/9UhAEoS5EwAlCY/kS8Jxauf66FJdf5pIJ+tjo3c2jvXeEO/Q4LCU0zBpxekHbEnCMsBxJ0biiWaAWkl2VcXFoSV0Kjqd4b72Y1zdfg0Wy1TBO3MWJRVUbzkxmMGPwVgC3AEug33L48lNfpOidRybt8dEPZVi+NPK1+jjw/VG8UkEQhLoQAScIjaUL+APCoiG4LvzKJzPMnGFTDJr4Ru/vs9OdXqlZptck092CcVmoHqGAU0IuSbhgbIuzyJnjVF26JKvcaIRcLTGX5BJV6G7RWtc2z6GuqyctFKh2OetYhNm/TeXl2fDU0Tkc6L6ZIIBlSx3e9tZIz/qdwK8Tpp0IgiCMKSLgBKHxPAF8Q61MmWRz99tTWAQc40L+6cBnKgkKumBRQfe6u890bapj+giF3BBRy5UZ16aI2xYXy1ZPeZF63Kz17K9V6sR8HV7Csj5/ep23pI4W6vwpoBVo1l5bM1x03l4mdzyLZVls2uyzZUskSO/7wOax+5gIgiBUEAEnCI3HJ7TUDAFgwV23p1l5oYvt5Xi++Gl+0ncdQSvRRAa9BIZuhdPLbegiKE8o4rqICjn9oQf4x5Ul0e/YzDbFuKZOPRmpI7lW4yxxZqJCQLxr2bS86YkRHqH1rUC8e9kiFND6nDpAH8zsKPJb7/jvNKd3USoFbN3u6V0Y7gcWnfjHQxAEoRoRcIJwelACvqNWbBs++UsZ2trAsuFfj/0563MLIEO1pahEtaDS0ddtQqHSXX6YCQF6GRJzfSRh5cecK869OlIXh3pj5JIEnXlPcVZGVT/Po1IWRI9/01+7Emzmaym7qJdN38W0tjfxPJtXXinhVRJFJgF3IQiCcBIQAScIpw/fQks5mDfX5v3vzZJyfY5yIV/e/QcM+W4l41TPRFXrOmb8mh6zZhNa5LqJCkCF6S61ErYlFd+N26/Hzalr1JOJOlb5m6alrr/8yBMVv/pr0e9Xn0PtnpqzORbOfJQgcNi42Wfjm5FU37cD7WP0CgRBEIYRAScIpw8/Ab6nb7j3nhTXXpPCK5XYVHwv/9b5zkqCgqpZppfA0AWITXWygdk/1SNMn1DuwzghF2ddS7L4xVnaIN7FalNtKSPmXPp9nOhDzVsPoXiLE68K23iOowSplM/tqx+gtWkTPT02P/hRAb+i4S4BrjyuT4MgCEINRMAJwulDAfg8YZQaELpSP3p/mokTwMLj0f7f56jdEg3E1/ulQvVftUMlCUJZj2yiPUB7CS1RcdmcpuUqzkWbZHmDardmHKPNYI27jn58XOzbUHlmlWA1X0NcwoSaI4doDJx6DsJzLV+0m9su/DMcx+fxJzzWvTFsDm0HfsW4S0EQhBNGBJwgnF5sJrTavKo2TJ5i86UvtnL+eRbd/hz+8tAXOOw2V1ypeucAM1ZLt8S5hNmUKiDfdFcOURFyZsxYnCBKEnIe9cXMKerJZDXX47pC1BKHneXXZnZhSMKMG0xCuVnzcNHyn5PN7MS2AzZsiFzkAmBuHVcVBEGoGxFwgnD6sRP4JGHOKACzZll89jNZpkxxeLH/E/zJwV9nsIMwqSHO9WnVWHYIhZwe36XcmR5hN4cc0QSAuHpwtcRaPWKunjZbI3VmqIVFKGy7qCQn1CpfYj7HlWSJs6OVW52tnr+XBZNewnHghZdKlCoxifMRN6ogCGOMCDhBOD15CfhdtOZXs2fbfPbTWdJOgQ2lP+RPtn2Gw6lM5QifigUOkgWHEm4poq5BR9tXIlrYVomsuAQEtDFx1NsL1Sz7oTNS6y1ijikRWt76tfsd6byQLH6DGtvLr/HipT/BtYfo6wsYGIxcbAWCIAhjiAg4QTh9+QrwNX3DypUOqy91sMjzgvd7/N3RDxKML+9MUxFwcQkMcZYnh2rxoqxrqpm7mdQQt6yolYWq76+n1ps/iocZr1cAdhO6hUfq+FArU1btryUq1XU9WL3wNTLpTnr7oLMzcsDbgJZRvfuCIAg1EAEnCKc3vws8om/46IeyzJ1j41jNPNX91/zPI/eTa7FhDhURYgoQPQ4OY59epNasgaaXKjGTEZLC8keyuMW5TkeysNX7sAlF296Ye7QTxicVPjaJS8owLHGzJu5mzuSnyOUdevsiAm41MGWU770gCEIiIuAE4fTmKPAxYL3asGC+zW98Jsv4Dkg5Ac/3/Cnfy11ZcaEqseZoDz3rNM5lqI/T0cWbaclKKv1hWtzi+rSaCRRxFrWkh3kttPs+BGwjWhMvLgkiDlP4EnOOJJdt+b47OvIsmrqGUsniwIGIgnUIkxkEQRDGBBFwgnD6sxd4D/CG2nDeMofP/bcs7e0BltPBN499hoN+S2hN02PZRlO8Iu4YvZXWSNmg5nZixutJDfW6UmvVdFMlUQLgAKGAUyVTMK5hukj12D/TCmcWHCZmOY4SzJy8nsDrZduOqr13EUYeCoIgnDAi4AThzGAj8H5gk9qwaqXLLTemsKyA3f0XssOaUBntjPCIi5HD2A7JwkvtMzs1QLJ4MhMe4tpcmW7akfqfqlIqOwgFnHnftRITTBdqUqeIuFZc+jen3p2hBBcseplMaj8HDwaUihHFtwrIjumnQhCEcxYRcIJw5rAOuHd4zYJx4yyCwMKxCzTn/Hg3aBy1Yr2gWrTosXBxXRlMi5x+Hai2tiVdO6kJvSni9PvfRlhwJR1zrSQBqYu3uCQO8xpm8d648xPOz8I5QyyY9iQvvgxbdkQE3CxgSR3vjiAIwoiIgBOEM4vVamFoCF56NQz2mj5+MxNbe+IzKuMecVaoOJGj1lWxYFXURE9qMEVNUukNjO3H2+dUHeMCW4G+8rIZZwfVQtG0OuruU3Mc2jnikjJ065we85eHW1f9J13dJbZuifRFnQBceByvWBAEoQr3xE8hCMIpYgbwG2rl1ddKvLHeAxxunvqPzGjqr50dqhNXpHakrFFVViRLRfCYtefiskqTepweT3Mp9fpKwB7CIr1p7Tpx11P35WjnUMtxrbP0dmP6sbpYC2LGqHPl4Iolb5BKFdm23dHvwgGWHcerFgRBqEIscIJw5nAhsBQgCOD7PypSKDrY/nbunPYk9mhKcijMwH21Lalum2oGj7GtVkN7UxiOts6badlzCWPe9lIRVvp+HfVa9MQO3QqnxFxS2RAlCvVuFEmuX217U1ORlmwPb2zwKBar3KjyvSsIwgkjXySCcOZwI2HzLHbu8tmx06NEM8va/5OZHUPV2acj1UszS3Ak1UNT21UsXIFKayo1NikBQZFUHqTWPeqiSAk+m7CwSifQlDBL+j0rK5lVY5w6P9qy7jb1jXXTday/xvI4hyLtrUfZtcujfyBy1flA81h+KARBODcRAScIZw6rKP/Nrnvdo68/wGIvd8x5EFcvnVEvulhyjG36GKgIFZvqRAa1L64wLwnrGMfEPaA6ISIP7KMS8xb3mswMUfMeHG2fbYxLcvua7tkRYvccy2fm+F0UinD0aMQEuQgYV+9bJAiCkIQIOEE4M5gKLAfI5+GNDSUsYHrr6ywZtz0UVbq7UD1cKrXh1HqclQ5j2cxm1QVVofxAOw5jbFwLrtHWfNPPpwTULmCA6pg3s2SIWR4lKe4uLmbQLImi1j3jehhjtHmy8Bnf0oVlW+yPFvRtR1pqCYIwBoiAE4Qzg6uByQDFYsDuPT6WFbCo5Tkmp/vDEXpWZS0LWJJL0bRGEXMuJVxyxPcYNd2oeukRn2hR4JGyUM3M1r1ALyOXwo0Tc0kts0z3cZJwU+5bn2orXUKv2ObsUWwLtmyJCLgMyc5fQRCEupEsVEE4/bGBO8vPdPfA4SOhSlnQ/hJuxju+M0I0e1LvaqDHvSnM8iAqAcAUWnFWLdOiloQ+Trk6U4Qxb4eIF57qunEWOP216mLNPFZfNpMi1LmVlVO3/MVZ+cqvr6P1ELYdcPSYTxCAVbmOFPMVBOGEEQucIJz+zAauUSuHDnv09YPFIAsnbcJR8W/H83ASrmhaqBRKrJUILWJFouU5dEGYRJy7NC7JQfUzHSLMOg0SzpV0v+q/p6ovbC1RaVrtTAubLm6TypQY55vUsRfL8ujsBD8qWqWpvSAIJ4wIOEE4/bkQmK5Wtm33KRTSdKSfZknLgdoWrXqIK/5rWqVsqkVSiTCpwBSFtXqdxiUzJLXPsoFB4E0q1i81zjfG6fdmlgwxrWpmMd+krFf9OsoCZ7YPM5e11ze+tQvb8ujp800BN+8E3zFBEARxoQrCaY4LfBpoVRuefKqEbQ9x07x/ZlJbPhRSx1sUF0LBowfom4IuLmDfL9/ZfkIRN5lKl4ak6+iCR088MIWefg8HiVr5dGrVuIsTZnHr+rmgIsL0TFUl3lJExaZ+vpiiv9lUDsvyyeXA8yBVid2bfRzvliAIQgSxwAnC6c0K4Eq10tXtc/CQz4TmjVw378Xj0m3D6AebyQ9xFre4eC+HMCM1qRiuTlKtNV3A6a7IbsKkhSTiWluZ2afqHs1x+uuIsxTqQi2pN6s+1oz7C6C1aQAsn0I+oH8gcoHzR/EuCYIgxCICThBOb25Fs75t3OQzNOgzZ+JzTO/oCTeaYkUvGaKvx1mnahW51ZfNbwp1nEsosg4SjYWLw2wCr4SRylQtUclU9QgTFwKS4/DM+9VLqKjj9KQDM5u2VjKDfh29bZgZt6fQhWd5ucnpx7HzFEswOBi54UUkRx8KgiDUhQg4QTh9GQfcq1Y8D9auKxEAl056nCavXIzNJXTvpahuWK+vq3FJwiUuwSGu9Igp6CzgANUlNpISFPSSImaJESXicoSuUxXkkWQl02PQ1La4MipQ7QqOs5zFnceMhTPFW9z1Asik8qTcAYpFOHQoIKhcfx6SiSoIwgkiAk4QTl8uBBarlYGBgPVvgGt1c+GUl7DrbVxvElcrznQ9mtmd5rJ+jDrfLqrFm4lpcVOPYvlRKO/rJxpTZyYXxAm1pKSEODFXS9zpY8ySIrUSRvzocZnUAM2ZTjwv4PBRXxdwLppVVRAE4XgQAScIpy/XEVbuB2Dd+hI7d0Ozu58l44/WV7IjiXrTl8zab4o4l6rqkYpxjGl5g3hrnOqvmqPSbSHpXsz7MYXbSK8l7jjzvElxbnqR4riuEeXzZjODtDfvx/Pg8OEq5TetzndAEAQhFhFwgnB6YgE3ocVKPf+8x8BQigXjniWTIdnyVM8DogVu47o4mA81LkW16HGpNLrXhVlcnJhuefMILW9quURY980Ugiam6xSSC+yahYbNsXEzb46Ji3uziLfIlbdlU3kmjdsPQE9PVS24dgRBEE4AKSMiCKcnq9GyT/v6A15/o0QpyLJy8nPHZ30zxYods00XQHHiRjWzV8t62Y0SYd22uPB8PetUf6hz6TFyReNe9HP4MfvUdtXgXq/9Zsa3mVm0+r3pSQhm/Ti9TIgu5pyY85XHZVyPqc1HsQjo74+4UAFmjPLdEwRBiCAWOEE4PfkltK6fmzZ5dHYFpOx+5ozfeuLFexVx3wBJFru4bgV6pqdDGLvmEt/3VFnZVOJCSXvWLXCedr24e9PdmUpsqfG+cZ92zLniRFytZTOTVb+OOneC23ZCx24goLcPilGr4o1j9A4KgnCOIgJOEE4/FgA3q5VCAR57okSpBOMyG5k3fk+4I6kYLca2uC4LcfXeRnrEjYVQsKksVw/oIir6dNGmRJ1eMsQsHxJXtiSuW4N6fWayg74tSDg2rpabSVKNOr3osVlaxHC5NqV7sOwSXd0+Q0ORiyw5oU+IIAjnPCLgBOH0wgZ+HZilNqxZ6/HMc0Ug4MaFX2ZKc2e05pl62DHbkq5Qa9tIdeGgus6aXgOuh0ocm4pvMxMWzJgyfb2UcD1dLMW4LGOTD8zuEHFuVF0MmpY63zhOF3Pmtcx2XUBr81FsivT0BPT2RgTcTOT7VxCEE0C+QATh9CIN3E5ZXgQBPPBgnqEhh6y1i1vmfxfHCKaqaTGLS0ygzm1xcWJxx+ixcErQ9RK6U00h52tjzW4M+rV8Y1m30EHU0hVXf46E7aZYixOrcTFxeh9U0yIXxBxT3jalYz8pt5+hIYvBaDeGJqB5DD83giCcY0gSgyCcXlxL6EIF4MCBgLWv+/hWMzPHPciCyV1hpme9CQzKUmdaopToihsfV55DHx8nfvTkBotKFukQ1R0adAFnCiA9pk0/RhdrLtUiUrllbW1cUh/XuNesL+sxb+ratnEtdR/EXCtgOKFiatsxMm4vAwPT6e2LCLgUoYDrr/OdFARBiCACThBOLz6AJileW1skXwiwgyO8/7x/xz6e7FMl4uJ6h+rPatl0G8ZZ3pQoVIJGF05qW47wG6agnd90PZpWvjjxpmet6tmfuugj5jiz4K+eMWuKszgxGXdOHTOBwjL2OdDR1kcm1YfvW3T1RG7UJbTCCYIgHBfiQhWE0wcXuF6tFIvwymseBDCx6XWWTd5R3SGh3ppvx1NyJK6Qbq3MUP3bxCd0ozrG+ZJctFAtpNCeWwmbT5mvyYyhK2nrPtWCNKlpvVXjeaR4vLj4PJXEkArIpo8BFgNRW1sKaaclCMIJIAJOEE4fFgCT1cqxLp/Nmz0sK2DppOdpdoZOrPtCUsap2UZLjYVksWUG9Zv7HcJOrnltW1KHBBLGlF9rtzOBR3rfyZOFG8ml3errmUWDa8WpmRazpBg401Kosk8xjo/LZjXi4bJuJ2DRP1DlQp1a71snCIJgIi5UQTh9mI/2N/nMsx5HjgW4VpHLpj9A1imbl45XwEF8PTRzf612VGqMWWvNjzlG7feILxqcdG2/ct6+oIM/O/IV3shfR7PVSdPEj3KZ91wl69aMT9MFm0d1dq2e2GBedyTM2D/9/HrcnT5HQCrdDdjkchEXagqYW8dVBUEQYhELnCCcHliEjetTEGafPvqzAr6fImO9yao5r9UvNEa6Slz9uKTtcfvjLE/6MWbHBM84ZiQhV7YIBpbFv/f8Bs8P3UMxyNITzODHA79A4BLvCjW7OijLotqvWy/N16LG6HNsWjvjMlhN96yZqQo0Z3oB6OwK9M02sPAE301BEM5hRMAJwulBANxGWTJs3uqxb7+PF6S5YuZXmdZcGF3cW5Lo0qkl5GyqxYvpioyzZBGz7hCWERlN5qwFA0Er63PX0ZIpMG+ujVey2ZR7CxuD86q7QMSJQrMzQ60YviQ3sdlzVReKZpmRBKaM2wn47NzlU8xHbmAx8h0sCMJxIl8egnB6MA24AsDz4emnS+TzYLOdu5Y8Wm1ROh5GsrSZy/p63BjT3Wpa5nSxpxIM6r3/APYUF3HEm0XG9XnnPWkWLYRDhbl8rft/Mminotmner041U9Vj4nTY9p0V6tubVP7zRZgcUkVGNeDqPtW2z5zynYsihw9CoO5yKsch9YuTRAEYTSIgBOE04NPAxMAjh71eeyJIrbtc+Xsf2bRlP3JWZz1ZqEmldpQy3EFfeP6iJpZpbVaUxmiL6hhpYpjR3EFvd5kmpsClix2uPIKFyfIs6nwVjYXV1S7PJOSCvR9etFhnVrlU8zrBDWeY+Zg2tTdWBQZHAzIRQVcG5AZ3awIgiCEiIAThMZiAeOBW9WGtes8ensDbDyumP4gqcCvjDweaom/OGGiUEH5cUImyWWZcH1fr92WdI+6ELLhsDeHoucyf77D1Kk2112dZvJEKFpNPNn3Lgq2YbwyrYFxbbSSyn5AdTKEflycdTEprs9wrS5qPYxt5/B9i55oLbh2pBacIAjHiQg4QWg8FxLGQwHw4kslCiWXVLCDC6ZuCTeOpun8iTxIeNaL4ar7Md2QprDTskFtB6yRBKhRkuRocQZF32HJIptMBmbOsrjgAhcbj5dyd7E7mF2xCKp707so6AkVZvcHs3NCLYucfm/6vOiJEXoChT7Og3GZPK7dB1h0dkauMg6YNNoPiyAIAoiAE4RGYwHXUO6LeexYwIaNPr6fYfr4B5nWegKdlvRsUH1bnMtPt8aZrlddHEElRixJkI3GOqfvUx0Syq2o9hQX0pSB+fPCC7sO3HC9Sypl0VWawSuD10Q7Mqj7Vc+mhU1lw9raci1RaVr09LnQxasZX2e8XsuBTOYIfmDT1RUxC45HBJwgCMeJCDhBaCwucDNlW9Jra0oc6/Tw/EGumP8E6TS1y3nUsqRBvHUtbt20WsUVuvWM45MsVwo7ZozZEksXmCUgB4Fv8WLf1WzMXUdbq8/cuc7wkPPPc1i8yCbvNfOznvdwzG+uWOFsqvuu6i7TOFexbpkzkzP043WXqR2zzzyvlh3r2NCcOQTY7NoTUdTNwIzj+dAIgiCIgBOExrIKuEitbN7qEwQ2bZlXuWbmutoxaknUawFLOp9ZciNJ/OjrcaU8csRb/NS6KgNSvp7nwwF/Ot8b+CB/ffTLYFnccqPLzBmVr6m2NovVq1wIfHYVruL5gSsqVjWfSistXZhBVJiijTG3jZSFWyuhIU4Ylu+tpW0PARa7d0cEnI0IOEEQjhPpxCAIjeVGoAOgUIBdezwcx2fxhFeY09xVLZ7qFXEmZr02U+BgrCe5V5UFqkT03swWVT7ht4vZgSGALm88O/Lncaw0hR5/PIN+MwDdpcm8kX8rB7xl5L0sqy4JuP/9marYuRtvcHno4SJ7D7bw1LF3c3vTY1jK/arfj/4albWv1n9ZTXepY+wzLW9WzHFxLbtcWDT5DTZthYOHIm+gRdh9QxAEYdSIgBOExtEBvE2tDA0FHDkcYFkes2Y8i5Pyq9tBHQ+1RF+cxSmpHIgeA6YLOn1b+RyltM2LfdfwdPd7yQWt+IEdloIL0nR5U9lTXEYxaKLopwgCG8sKLY+25dHa7DNzqsWnPtFEJqbIxqRJNqsudtj/YJEd3jV008R4b6gSQ1fLvavEnIqd09fj5m0k66eeOBGXiVo+//KZG/khAX39AQOD0NI8fEfLqMhNQRCEuhEBJwiNYymwQq0M5QK6e2yy1g7eOvnnWF4wNkEOcR0Vkqx6cXXdvJhjbW27XjOuvP5S/1X85YF/pdubQVsrNDVbWFaAbQVYVsCSiT5Tp1i0t0FTk0VTk4ttBaTTKebMsZkzy2bixIgC6yQM+rcAbr8lzWtrhjh8eCbPD72V29oerLbAedqzG72/2MLEcTGEeiygLvR0N7DpOlXb1HgPFk/bhWMfZSjXzq6dHuedN6wYLyOs/3d0DN5pQRDOIUTACULjuIqy+xRg3TqP3r40l8z6IcsmH8GKa1d1IpiWM4i6RfVtSUVrdSuWfowm4F4fWszfHPwyfaVJXLAszxf+qBnHsbAssO3w4cRZvOIpAH8L/BD4EnAJwKJFNve8Pc3ff9XnPzo/zQUTnmNWsStaa850ZZrWMrVPt33ZxItm3dKoly7R58t0R2vbWpr6yaQPUyp0sH2Xrwu4NmA6IuAEQRglksQgCI3BAe5Ga17/yGMeVrCRd5z3b2Qz3vGJt1qdGOqNn4trEaVj1k/TrpN3XL5x5LN0erNpa/V433sztLRYZLOQyUAqNSrx9ibw28DvA08A/6XvfMu1KZYtddg3sJJHu64PexqYcXlF43UkdU+olYxhild9WS8roo/XxZ0P2UyOpqZ9eIHFzh1VLSnm1D0jgiAIZcQCJwiN4QrgUrVy+HDAgQMeU9o2s2TK/nDjWP33yhRvpstP324KHLPGWVxXB826dbA0lTU978AHVl+a4pKVNb9iCsB2YCOwBzgA9FNJkXgM2KqN/3fgF4FFAOPGwfvek2bt6+N5cO8nuHn8z5jh9lYnK6g+rGYbMKh2lxqu4Ai6YLON5bi51baNz+ZYNmsdL258Kzv3+AzlApqywxdYcGJvsCAI5yIi4AShMdwItKqV3Xs8unt8Fk/dTGs6H9+vc7TohXzNGmeqe0CSq1RfNpMU4lpqWUAKnuy+gaFgKpPa+njnPamwjl2F7cCvEsazBYT2saPAofLySOwF/h/wRcqWy5UXuUyZlKez62q+ffhuPjXlX7FNV7BZy07PUDU7Muiv3axjV+v9iLPSae+BlYYFMzbx0qY8XZ1peroDmqYNn3Dqcb/HgiCcs4gLVRBOPR1ovU+LRXjmOY9i0WfuxL2k/FEkJMa5S/Ven0mFe32SXbRmrJzZMsujkvGp13JLwcvH7sQJClx2aYoliyO+0jzwKeAnwIvAS8AaQlFWj3hTfB34uVpJp+HSS8M+Xc93fZwtzKrMgdGaq6pZvd5iS203xWlc4WLTyhaX9GDGw/kwq2Mbabefru6AQ0ciJ1k+itcvCIIAiIAThEYwB5inVnr7fDZvLeE4HvMnvIltBfECLO6RVLrCJG5bnHCp1SJKjXHiz701N5k9g6uZMK7Eve9ImyN+CPx0DObuKPAv+itavcolnfLp9lbw8OHbq5MM9NcAoTvV7DRRKzYuTrDFxcyZbbwM8Txr0h6as0cpFgOOHY2cVGrBCYIwakTACcKpxQLeAkxUGzZs8Nm3LyyxsbB1Y7X1q9aj3Cwej6hFKamlFlRbiZIEX5w1Kog/51CLw7/v+0WG/IlctspiwdzIV8sA8PeMXa2z7wJPqpULVjgsmO/gkeGpIx9hvV22wuktu8z6dUn13eIsmkmtzOJqzSW5Y32Y3N5Fa9NRPM9i526PoDJm3hjNiyAI5xAi4ATh1BIAF6PFn27Z5pHLOaTYzfSWw9WuyZEetvFI6n2aJEj0O1PbPWM5riiuejiwNr+Ylw7dh2XZ3H1XGjcVGf00YRbpWNEH/AVl1+uECRa335bC93y6got5ZN9doVI0+7vqr12vbQfR8iKm+9XM5tVlqBVzjJ4Moc1be9MQkzvewA9stm718EqVXcC0MZwfQRDOAUTACcKpZRZhBqoFYfeFNWs9PM+lObuG9pbRhIMlkFQKwxQeZr/TOCHiES9StPN2t6b4l/W/wkBpEeevsFm2NOJj7QW+wNh3GvgZ8DV1R9dfl+L661JYBDzX9QneHJwXb0WEeMuZOU/6/rh50/eZ5zLFW/k57ZZYPOdRCAK2bvc5cHi4nIgDvHWM50cQhLMcEXCCcGpZRrkMBsDuvQF79voEVo4LZj1Kqv4aacnEWd0g2eJmovcQNa11hpWvmHH4p00fZefA/aRcn/veFel9lQN+Ey3pYAzJA78DPAWQzcAH7kszeaJHT7CU7x+7n1zejVrafKKuZvW6TOucHv9nbjfnN46EeXUsWLrgDVy7m8FB2LolomkXn4Q5EgThLEYEnCCcOmzgfiANUPLgZ48VGBwMaHI2cdf5T4UB9vW4TUcq8lurgG9cQVqjlykeyVY3Kttf7F/Okwc+A5bLBRdYLFsW+Ur5GfBvJ3E+uwmzUgGYMcNh4QIH2yqyfuAOtqfmwiCho1XPPFX3j7EcN6dxIrbWMXrcnSkMgfkTj5FO7aBQdNmxOyLgpBacIAijQgScIJw6pgBXqpV8LmDvXh/LCpgz8Rlmth6t7WiMExhJwq5WFqvZ35OE4/RrxNzLsZY0X9/4WQa8hTgO3HNnmubm4cEF4K8IJdTJ5IfAEIRdHm6+KUU6BV2FxbzYfXVlVFxMm2mFMxMc9NceJ+LMpJC4Y+zouLaWAVra1uCVUuzaGVHGFxG21BIEQagLEXCCcOq4GJipVvYf8Nm128eyYM74LbQ4xeqEBP2hqMcqV88+PTvTJK43qvYIUvDg3rexe+huAq/INVenuOpKF6siZH5EaIE72Ryl3K3BsmDFeQ7z5joU/GZe7ryVnuZMeM/Ksqm7Uc14tzhxm5StawriekSvD+2Oz4SOLQSBw7FOD68y99OA8adgvgRBOEsQAScIpwaL0MrSpDZs2x7Q2QMOXSya+jJuLfPbSOUuRnLtqX1mIH9cWy2VvBAnGgEK8EppLg/s/C0CK8PMGTbve08auzL+MKH1rd7uqyfKT9TChPEWl1zsEPge24Zu5qXe1dWJBkl9UM15MJdNy5tprUxyNWvvke3CjEm7CChx+EjAnj3DiQztwKRTNF+CIJwFiIAThFPHMsp/c0EQ8OJLRUpFl4yzk/PmvInl19A7tWLfzJirkdCL9ia1yDKtSZpQCabCjza/h+78pdi2z803pZgzO/JV8i/Ac6dwXh9Fk1o3vCXF5ElQCNp55OgH6LPT0ab2yrpo9oE11/VnEtb1eatz/i+cvRXP309fHxw8NLzZJezQIQiCUBci4ATh1BCgBaofOwYbN3kEgc30cU8zf0LvyIkJSWetJRySOjaY7kPTEmcKQosw77MPvndoFS8e/DS+b7FkkcPb70jprtN+4M+p5H+eCt4k7KcKwKxZNpdf5pJy8mzN3cyGwaWVkbZ2Z+rbT+97qn8j6u7rOMumWXtPj3dLijn0YMHsA7Q07SJfsDl2dFg1usD5VPe5EARBiEUEnCCcGtJopSLWrS/R0wtW0M1VF/yUJoKR49fMMh66RSkuVk5hFrS1tePMZvdx11HbU7CzeRw/XP+7+M5ksmmf+9+Xpq0tojofJYxLO5XsI+zOEN6qBbfclKKtBQb9CTzdezPFrFPdcVW3OMaVTlH7S0Qb2/vG3OjnMzHfDw9mTuliQsc+8C06e3x95FsoZygLgiCMhAg4QTg1zAGmAngebNjk4XkBbZntrJy2J8zZHE3ZkDhXp77dtBzpFjezFhpUrFJ6QV+FOsaGb3a9g0MDb8Gxi9x6S5pVl7j61Uuc3LIhSZSA7xF2aABg7hybJYttgsBhS++lHHObQtuW2a9UCbS4sium1TIu+9Sc+7jteneMAFpTAdMmHATbYucOn3x+eOQCwlg4QRCEEREBJwinhlso//R39wRsftPDsgKmTX2eqVMOhiKiXpLKg2AsBzH7zEQG/RmqBaEiAw8UzueJ9b9LKWhi2VKX9703rbtOAb4NPNyg+f0Z8P/Uq2lpsbjpxhSpFOzqu4GH9twFKSriFqJiTXf4xlk94wRcUrkQ05KHce4ALlzwHOlUH6+t9di9Z1hJTwLOa9D8CYJwhiECThBOPg5wo1rZsKHErj0BjjXEJXMeY1yxWH/h3qR4t6Ttce2y9H3mscrFagiYrsEmvr3m/+I5M5g7O+APfi/DhPERhfIQ8BHC1lmN4v8BXWrlkotTzJppUwjaeXjPRyjpVkfTdaxee63uCv4IY/S51Gvq6ZRjCZfNf51s+hi+HzAwODyolTDRRRAEYUREwAnCyeeW8gOABx4s0T/g0pZ5iVsueQSn5IcSrx7xluRSTdqmlwaJy5a0Esbq5+uG14qXcGRoOU1Zj49+KMO4jshXx17gc4RpDo1kN/CaWmlvg1tvSpNOeRwtrmJPblLlNapkBlPQmZm4cbXwzPlJeg+Sjg1g5sQjNGc7KZXgaCWRIUVYakYQBGFERMAJwsnnBiAD0N0dsP+AB4HFnMlPMCObS3aJ1iPeRrLQxblQ9XElbZ/pBixzbEaKb234EIViC6tWuVy2uipR8ivAxkZPMqEM+wGaQ3TVKodx7QElazx7e5ZEXdUqicOjujMDMXMZFx8YR9x+IzGiKVOktekwQWBx8FCAX4lHXIB8LwuCUAfyRSEIJ5cW4DbKf2vPPl/k0OEAgiEuWPZKfTUj/HoGUS3y1HF6X1N9nNl1QMkeI1bun155D9s738XEiRa/8JEMqVTEh7iBsGxIvXd5svkpmpicPs1m5UoH1wl4wzsfxlERcbq1Tc2Rmu+RxHMtSygx60Y8YtbJMWX8ZnwfDhzwCSqibw5S0FcQhDoQAScIJ5dLgYUAhQKsWRu2zupoXseFszbXzj6F+sRDnDUurk2WmdRgSi7TApeH53NzeG7vr2O5WT78gTQzpke+MoaA/07jXac6O4DH1IrjwHnnOaScEvu6LyRQBX11MasscHHts0yBpu9PSmwwCwbHxMylUwVmTnsdCOjp9XUL3FxgUaMnURCE0x8RcIJwcrmJsvu0q9tn48YSth2wcPYzLOk4HEqfWoHzx0MQs2wKE93KZHYhAPCgOM7hmxs+zpC/kAnjAlZe5JpX+gZh3bfTiSLwCGFBYQCWLHSYODHgcG4hnUG2Ir50waoXL45zRcdl9NYSzlDdZ1UjZQfMm74D2yrQ329RKg1fMAssRRAEYQREwAnCySMLXKNWDhwI6OwGxxpk9aKfkKFUO6Mxqam9WWwXqq1x+vY4l6m5z6hVhgXf2P421u//VbwgxbJlNlOnRm52DfD7wGCjJzmGF4E9amXWTJuZMwKODC3kze6llXpwegkRvbixiZmpGiRs17fpljc9tk4ThzMmHSSdOkxXd2id1bgM6cggCMIIiIAThJPHhWhZhfsO+AwOOWSdXayatx67yMgxVSNRbyP2uDFxhWp9wIH1hWk8/PrnwW0mk4H33xdpVl8iFG+HGz3BCRwBnlcrzc0WF55vM+SPY0f3BdGODHoMXK05g+T3JsmdrZ/frCtXgo62TlqzO+nvdyhFG4/dhMTBCYIwAiLgBOHkYAEfANrUhp07fDw/zfRJjzKztXP0LlIzA9KM04oTb3GxXHFlMNSzBz1uG//vlf9Jt38RrlPkFz6SZtGCiEHoXwgL556uBISu3SKAbcPqVSmcdJanD93L7szE6vg0PcPUtEjqxXzN48xx+h3oJUti7nDO5C4WznmGvn6XNzdHFNwMYHmjJ1EQhNMbEXCCcHJYQSjghpXP62942F6JBQufI5si/JF3iO9lGuc2TXKlWsYxprs0xj1a5YZ1w32FjMU/rr+PbcfejR/AXXekuOltkfacTwN/DOQaPcEj8EPg52pl0UKbpYsdtvVdx9N7rg+d27pYg6gVUq0rzPlLarOFsV09m/MegG3BRYufplQ8wmtrI6a/DHBH+V0RBEGIRQScIJwcPg5MVCvr1vns3usxccqT3LnseRigWoQlBLzHYhab1YWFR7zYCBLOHwCdUMg4fHXDh3l065/h4XLbLSk+8fEszc3DI58B3g7sbPTk1kE/YUmRIoBlhdmoQ347z+2/lyM0V8ez6UkH5jazBItpzYyzpprnNwXhEFyx4iVaszs4ejRypA1cSViCRhAEIRYRcIIw9lwMfEit9A8EfO3rOSx/iHde+ecsmtgZb92xEtZrjTEFgik4zLFJmZRpePzQKn666XcJApfFi2zuf18k7q1AWO+tu9GTOwoeIOzOAMD5K1xSdoE9uat47egyApswC9gUcTrHU94FqgUfxnYAD6ZNGqK9bS9vbg7C+oAV5gKLGz2BgiCcvoiAE4SxxQKuANrVhgMHAvYfsGhr2sFblz2LNRAcX8KCiRkT5yWMq1UPzgIcWNc0ka8+/VfkrVnYNrz33RkmTYx8PXQBzzZ6ckfJTmCtWpk312byxIAhazrr917PUD5VPU/6sxLEeoFjc1/cfOpW0bgSLcYl503bxP79Hjt2Rt7AmYSfI0EQhFhEwAnC2NJC6D4djn177IkCnV0uMyZtYPq4ofAHPc59qoLkaz0gKiTshHNZVJcSwTi+fI6SB//+9O/RH1wMQZH3vCvNW66tCr/6MnCUM4sBwtZaAcDkSRZLFjs4VpEXOt/L6y3zwmizElELJVR3Y6jlRk3KTIVq16p5TBGuuvRxoMjr6z29I4MFrEK+owVBSEC+HARhbLkHuECtDA0FbNjokyumWD7t2dARmfRXFxebppNkyQmI9vg0g/DjMlE1odJZGM/23FuxKHLVlSk+8N6MeYVXgL9s9MQeJ08SdmfAtuHaax0ymYD+4jxe23YtpIkW8FXo86Q3vVfolrVapUeSigMr61wJlszaSyo1xLPPlRjoj7zp1xE2/xIEQahCBJwgjB028A5g2Df30islNm7ysKyAFfNeS26dFUet2Dj9d95P2A5Rd16ci8+Bdfnl9PTMoqPd4r73ZHCjnsU9wC8BfY2e3ONkF2FnBgAuX51m/hyHQtDKi/vvZK/TFr5b+hybHRTM0iFx70ec+1WhRJx+HnXeIrSmO+loP0B3j8/e/RE1uIDQlSoIglCFCDhBGDuuAm5VK4ND8NOHi2DZTGxdy+LJW6N9N+tJXtCJG69X+Yf4FlAeoUM3Rmh0p1y+9tTnKPptvPX6FEsXR74SisBngVcbPbEnyDcJY/joaIdLV7sEgc/hgVWsObY8nBslsPR5U89xc6uXHNFd2Aq9NInpvjbeo7bsIBPaj1AswMZNkcb2AOc3evIEQTg9EQEnCGODA7wfGC66sXunx9ZtPq5d5NJF32Niqj+5ZphJLQtdkDA+Lm4rrihteazXBt9Z8w6ODryNhfM8PnBf2jzrj4HvNHpix4CnCRvcB5YFV17uMHkiDDCHjbuvpFByoi7RuDhCjP16fKHaZxb9xTg2oYxLOpVnyoS1eD6sfd2jWIzs/j20hBhBEASFCDhBGBuuJRRwwzz0aJGubnCdXm686NtYnhfKu3qsb6a708yAtIkKCi/mGIi3yJWtRi/uO58HN/4hbsrmffelaG2NKIstwG8RLxfPNIrAn1G2wi2Y73DVVSnS7gDPHPx1XhpaFm1sb1rczPdFj2nTS7fox5joAk4/rw2pksfi2a8CHpu3lNhZnY26pNETKAjC6YcIOEE4cSzgC0CH2vDGBo9nninhBVlWzPp3VszdHP7GJ1nJkixmUC3ezPpvkCz4Aqo7MaTgle6lfOmRf6cvP4+5s+DqKyOBb93A3cDWRk/sGPIqsFmt3H5LignjA/LBRJ7Z93bybqp6bk2rmS6U1TY9O1ifa317XJJDEL3OtMm7cOxOjhyx2LErckAzYVHfEyk4IwjCWYgIOEE4ca4j/JEFYPcenz/70hB9AzCh9Uk++o4/py0ohU7WuFptSVabODEW19IpaQxUC7sSHC018U/P/TF9xYXYts8nfjFDppJ46gF/CGzk7LC+6a9rvVqZM9tm8aKw0svaI3ex058ettfS3aMOUfGV5NbWW3LVEt9qLFRZ+1YvfZmJ7RsIApet2yIfkjRwOVpijCAIAoiAE4Sx4G36ymOPlzhyNMCxcty0+qssGd9VKR8S99ATDIw4tUiMlSKoY9msawahhMnAw5vuZmf3W7DwePudKVZeFKn59jjwtUZP6EniUbWQSsG1V6WwLTg2eB4/3/eWSvRiXAcMc9nsc1oPZkKEduyE9iITOrYBAevW+xSLkZNeC8xu9OQJgnB6IQJOEE6MqcBdaqWzM+DJpwuUSmlmjH+Mt1/2AAwRdanFEVeQ19ym1nUXnykwzOvo1rcMbBiYxg9f/yyloInJk2zuvitS861AGPfW3+hJPUk8iyaFL1vtsHCBQ95v5pWdt9ObT0VdoElu07h5r/UwS4rEHVOC+fOeAops2+aZbbXmABc1evIEQTi9EAEnCCfGh4GVAEEADz1cYO/+gCAocfn5/8m01gEYpLqLQlK5kHqzThnhPOYxRSg6Dv/17G9wtHARQRBw//vSzJwROfjzwGuNntCTyD60OLiODouVKx1sq8DevsvZPTgzOZlEZ6SyL3HrapseL6c/+3DZZT/HL/UDFk8+XTJOwrsaPXmCIJxeiIAThONnDvAramXvPp9HHythWQ7tLc9zy+rHQ+ubKhSb9GMfty/JmqPCo+Jqkumu18A4JgMv7r6QDUfvAr/IqktcbrghElb1GvAvjZ7Qk4wP/CNaJOJbrk0xrj2g35vDs9tupZSxkrsy6MumiItrs2XFHO8nH3/JzCNkWtZg2xZPPV00y4m8G5jf6AkUBOH0QQScIBwfNmHP07kAfgAPPFjg0EGftNPN3W/5P8xp7w5bXNkxR8b1NrVitqMt68HySfXd4ixHLuwOJvG1n/8xfaVZjB/nc+/b06Si7U7/FTjU6Ek9BXwT2K9W5s21mTnDxrXzPLP3w2zrngOuVT2HZnsy5UbVy4jUUxYmiSKkg4Dbb/wXAr9EV3fA9mg5ERf4nUZPniAIpw8i4ATh+JiMFvu2bZvHzx4rUfLTTBn/HDdf8EQYSeZQLbR0RioOoQuHuN6bpqvUqz6+kLb4yqO/xu7+t1Eswk03plm50jGv9MNGT+gp4jBhf1QAHAduuyVFc8bjyOByfvLmByim7Wjrq1qZpbVc4UlCHONY9UjB5Qs3Ytk9DAwEPPtc0Tzr24AJjZ5AQRBOD0TACcLxcQ+wQq388IEind1g+8d4xw1/xvT23uq6YCMFuyvMfplJwgHjeL96XODA87su5o1D90NQZNXFLve/L40btb49Cmxr9ISeIvLAg4QJGwBcd63LpZe6lHyHp3d9gMO9k6LWTqjOCjZdpWb9Nz3mrZZo07f3wfkL3uDaK76M71l8+7tFHns8Egs3F7ih0RMoCMLpgQg4QRg9E4DPUa7NVSiEhXsd22HBrB9zy4rXYIDQ6TWSaKsne1EXa6aFTY9zi+m60Oe38p8vfo5caRJTpsCH70/T3BQxGW0AfrvRE3oKCYBvA3+vNrQ0W3zi41mmTYHDA8v56eb3Q4ZKn1OI77SgF/r1iQo8NbaWhTUmXq7Z9vjYHX9Fc3Yz+XyKf/7XHPlhqYkL/EKjJ1AQhNMDEXCCMDrShF0XFqgNmzb5HOuE1qY9vPeGr5IulcIf5Dj3ab0PhW5ZUxY9XVSoZvW69Uddsxm+vf49bDr8LvwAPvmLWc5bHnGdbgHu5OzOPI2jSPge7lQbJk+2uOWmFK5d4Lldd5NP26GtDqLxh3qCiNqnW9uSyoSYwly37hFdnzl+kDuu/xOCwObwkTC2UuN64OJGT6AgCI1HBJwgjI5PlB8WQKEI//ZfeQYGHW645M+47sKXQkFl/mXVKvlhjtEJqCr6GunC4Cecy4Mh3+GBdb+ORYHbbnG59moXq3L+EvDHwA7Oro4L9XII+C/9tV93XZrpUzz2dF/CU1uuJWizqOpsoeLizMxT/f2Jyz5FG6sLQYh+NjygBLdf+RjjJ7yC71s8+WSJ3t7h28wC/63RkycIQuMRAScI9TOT0HU6zIsvF3ltrUVb0yu8/drvYuUY2fJWbzycbq3R1yHqsjOP8yFIwYMbrmewMJ/5cwPuf1+kYC/AS4QZmecy/0woYAGYPdPive9xSaVdnnjzQ/TRFMrcOJTVM66R/UgWVahOjNCFYgnGtXRz9dVfJe3m2bHbY83aiO/8TuCqRk+eIAiNRQScINSHS9gjdLilUf9AwLe/XaRULHH3W/+auVO6Q7fbSG5Rk6RxZukKiIi0qngrCMVjFvrtFh56/ZNYVsC735lm0qTIDXQTFu3NNXpSG8wWtPZaAG+5JsXEiT4bD72FFw5eDO2Es6QEV1I/2rhkhyRLXFJSg8KGrA/3XvQgba37KBbghz+OuFE7COvCuQiCcM4iAk4Q6uMDwEf1DY88WuTNLR4tLUe5fuVL0EMooOD4Y95MK47apjetL8Uco49tg2++dAe7Dr+V9jab666t+p3/MvCzRk/oaYBHGAs3bIXr6LA4f4VLz9BUvvP8Z+iymqGFaheqEmm+9lBnrGV5iyPhMzFzwmGuXPF1Sl4Tb27yePqZSFmRd1KuQSgIwrmJCDhBGJmlhD/0w0po3z6f736/QIDFjMmbmJg6WF0yRMeMMov7gY/rY2oepxcGNmOuyss7Dkzix2t/h6LXxKqLHZqykZvZBvxRoyf0NGIX8Df6hmuvcSiVArYfvpUfr7s1bHKv1+BT70uJqIDTRVxcrb4gZpuJJuBcJ+Dua79Oa/MuBoYcfvLTiD93KnBroydPEITGIQJOEGqTJRQ8M9SGXC7g776cZ+8+8Es+V134f2nL5qprgNVjedOPUT/qupVHoQfJxxEARRhKp/jGM59hyFuMa3u8/a6UOer/EHZnFSp8n9CdCsCqi1zmzLEJrDQ/XfMZtvTPIOiwqsu7KNGm3hu1rgs4M8ZNbUsq/mtY+uZMPcz1F38N7DQbNkWSGdLAexs9cYIgNA4RcIJQm/cB96qVIIDvfr/Aa2tLuG6aObP/k/tufLi6PptJUOc2qLa86QIhyZoTABl4YeclvLT9fiBg5UqXeXMjZUM2AN9q9ISehmwHvkpZdrkpuOeuFI5d5OjASn7y2r0Ece21ICrcStp6gbBYiarPF5dFXKvuX/lhAW9b/V2mjNvA0BBs2xH5oF2FlhEtCMK5hQg4QUjGIvyBHHadbnzT4wc/KhIEFpPHP85/+9AfkimUkl2kZuB7rYxTsyivOqfpkjPddmVLXreb4euP/w/y/lQyafiFD6fJZoeP8oBfBw40elJPU/4B+I5aueXmNNdf5xIENo+t/wyPbLgudKUqzGQTpasKREWcWlcPzziHbpkzXfBOuH/57De56fKvYFnw2BMlPG/4w+YAvwcsavTkCYJw6hEBJwjJzAcuUyt9/QH/78t5OjsdCnm47vq/ZvmEgyNnnuruUoUu+HS3q1nXzaz8HxdfFUAfWf7up3/A/t6rsfB533szLI8W7f2/SOJCLboIk1ReA2htgU98PMv8uTbdQ/P51yc/z8FSR3XepynO1LMSaj7VVjjd9arOEedWVbFwbsB1Fz/A+JY9PP9iwLbtkQ/JNOBdiBVOEM45RMAJQjyzgX+h/MPY2RXwJ18cYstWD8c9wI3vuJ/7bngotLA41J9pGlcLDqKWGP33WcWte8YYdYwNdMBfPfJHPLPtk7gp+OQvZXj3O9P6a/kKYf26c7Fg72gYAP6Ocg+G8eMtrrvWJWUPcajvah5dfzNBhmTLqekqVdZR/b0zhVxcBjJErXDAglm7ue6SL3P0aJZnnoskM6SAtyNN7gXhnEMEnCBUMw14CLhGbfj6v+V58SUPizx3vO1z/Pe7fsC4Hmq7R5MKuyr0rFPVhkm3zugCQBd32n5/HHz/lTt5dsfHyBUyrLzQ5fZbU9iVv+wh4A9ILkkrRPk28LJaufP2NPPmOtiWx5MbfoHdhSmhZDLFtN43FaKdMnTrnN6FQS8NE1czzqqMd4KAO676Jim3m+df8Onvj2jxywlFnCAI5xAi4AShmt8EVqiVZ58r8fAjBVKpJpqaH+Pe238MR4la3uKolW1olhpRrlH9B1+PrdJ7cKq/2nZ4YcdKvvXiH+H5WdrbAz7ywQzpSOIp3yZsGyXURzfwsFppa7O44XoX1/U40H0xT7/5Nvy0VZ1tDFFXqmdsg2j8my7WPWrbRt1wzKwZB5kybjvbtvu8+FJEj1vAJ4GmRk+eIAinDhFwglDBJizY++tqw/79Pl/+ah7ftwmCbXzw/V9kZmu5y3k97lL9WT9Gt86Y5Sc8wgzGorbfxIVN3XP52x//HccGFtPa4vPLH0+zaFHkT7oA/GOjJ/UM5GF95fq3uMyeZVP0m/nBc7/JloEZYXFfiCYi6JY1iNaGM+2fZjycb2zXrXMANlgOLF3wHL6f4iePFBkciqi+y4BVjZ44QRBOHSLgBKHCcuB/UemnwNPPFNl30MOiwBXX/iV3X7ImtGfVChkPEp71/cpSozIVi4Q/8mpdFYk1y5PY4bZB2+Xvf/pFDg2solT0ede9ad52Q9q8k++juQOFunkV2KdWpk21ueO2NLYVcGxgJY+8/E7tE2Jg9kVVy0qsme+nLuSTav2p7UVYtfQJXDfP5i0eL79S5RV/P/KdLgjnDPLHLgghzYSZmvPVBt+DHz9UwrIyTJ/6bT79jm9gdwfJP94wsnhT7rUiFeGmLyvhlmR584AMvHHkUrYfeRu2lee229K87z0ZnOh9rQd+gzAwXxgdBeC/9A133JZi8UIHx8rx5MZfZcuR2cnfnmbNvrhYRrUdotY7dXxchmoRVsx/lYnt28nnLV58qYQXFYRXApMbPXmCIJwaRMAJQvh38PvAW/WN3/penn37AlL2ej52/58xOZWrzhyEZNGmP+vFXvPEi7d8+TnOFQfDAqAn08I3n/tlhgoZVq9y+KWPZbCif8m7gV8A9jd6Ys9g/hLYpFZsG97z7jSplEdfYRaPb7yXwMwkjisDorfgUs9mGRjz/Y6jHPs4Y/werjz/uwQBvLbGZ+++iMpfAtzU6IkTBOHUIAJOEMLYoUij+pdf9vjWt4tkm3q46+4/4poF28Nm9XH9SWuhB7ArgaaeS1REXJGoYNPdbmqbC14b/OMjn2btnruZMN7m4x/L0tYWUQ5DwK8grtMT5QBhkdwetWH1Kpcbbkhh2x5r9rydgWJrZfRIVdh0Ea8fo3+W9OQHjH1loZhyS9xx3ddob97NwcM2P/hhQb9KM+F7b1arEwThLEQEnHCukwa+SFg6BIDOLp+//coQXT0Zls77KR+75YdhmVeVdaoTJKzrzx6hWFOuU9OF6htjFca1Bpua+MrTn+KxjZ8jnXb4jV9vYt7cyJ9wN2HniB8T74AVRsd3CXvHApDJwEc/mGHyJJudR5axvzSjtnAzO2qYZWJMl6lZEDjOlRrAwtl7WTz7McDmiadLdPdErnolWt9eQRDOXkTACecyLvB54Aa1IZeDr/5jgT17bKygl4/e8wUyA4yuzr3pOi1Rsbbp8W1xP+ImVniXxzIZ/uJHf8H3X/5TBotpPvrBNFesjgS97QXuAf610ZN6lvF3wGG1MnGCxXnLHXK5djYfXgptNY5MKh8Sl+BgWlyTet6W3bJ3XvsvONYgQ4MBr75WNK98eaMnTRCEk48IOOFc5m8IY98A8H3467/J8dgTRTLpXt5z969ywext5br8jOw+NfeZTc71TMS4H3J1DaOuWCnr8M3nP8nzOz9IsRBwxy0O77w3knHaBXwYeLLRE3oWchD4mr7h1ptTOI7DAy99kILthDZcGF1msi7UzA4NZhJEYJy/AMvnbGFixxY83+KZ56qSGa5t9KQJgnDyEQEnnKtMBT6ub3jm2RJPPlUkIMvCWT/lXdf8MMzhrCe+KSmBoUS1G22kTFWdFnhq51U8vP7XAJvly20+/KGsPqJEmG36WKMn9CzmW0CfWjlvucOSJbD90PW8uGNFpTODidnHVm3Tq3+Y/ymIs8JRPb69pY+VF/wA2/LZutVj996Ix/yKRk+YIAgnHxFwwrnKnWgFQfbs9fmHf8pR8h2y7k7uu/NPmZAeqowebatwM55NbYvLWDStb2pcFo4VmvmPpz7PQHEqKRc+9qEMkyZEbuYvga83ejLPcrYDL6qVVAruuNXFo52n1r07FHAQ/xkxRZz+/upjzP8E1ColA9iBz6rFz5BO93LsGLzxRqQm3JJGT5ggCCcfEXDCuYhNGC8GQLEI//mtPIcOB7jWAHe85U+4asWbYZIBJP8wJyUw6PvjYt3Uc61ODjb0OS383aN/wu7uq/GKHve9N82qSyIJho8B/4PaNjzhxOkBvocmyZcudmhphT1dFzNUszBgmTgXqulGV/vjPi/6crlv7qpFrzBz8jqKns2LL3v4FbHXhiQyCMJZjwg44VxkGbBarWzb7vHssyXAYcH8B7jn5h+E+ZyjcXXGiTe1bMUs65g9Uy2gA370yrt5YccHsAKPyy51uOO2SJPTHPAlKhF6wskjAL5DmCgCQHuHRWuzT+/gDHYdnBff4D4OJdqKxtn1ZzXON47Rx1vQ0dbPghnPEPg2mzZ5DFVaa9nAjY2eNEEQTi4i4IRzDYuwWf1UCBMXvvO9Il29Nq7dyXtu/iumut3VNbiSqNX+KKl4qzpnXM9UG0jB5n3z+cFrnyNfamb2HJtP/UqWjvbIjWwDnmr0ZJ5DHAS+oVayWWhvC+jLT2PbsfOS28ibbbL0Hqd6/JvZCxWqrXGK8nF2ANde/COgwMAg7N4TGSiZqIJwliMCTjjXuBB4r1pZ/0aJ514oknJSzJ/xEFddsC60jpjiKs6VlUQty51ppVHV/NVzAD2lNv7hqS/QObgQAp/735dh5oyqP9X/D+hv9GSeY/xYLWQyFuPHWxT9Fjbuu5SCn04W+kmudm+Ecfo2swBw+VrL52whm95LvuDw2OORciIXA1MaPWGCIJw8RMAJ5xIO8KuEFevpHwj45neKeB40N+3mA/f8H9w89ZXANS0j9bhQdWyi4k079vkdN7PhwE24ToHbbk1x9ZVVhfX/EqO0hXBKeAPYAJBOwUUXONi2xdodt3B0aBIjhsIpwVargb3ZQzWupZqiBB0dOd562d9TKqV4ZU2JwcHhvRcDKxo9YYIgnDxEwAnnEquBd6uVNzZ4rFlbIggcVi75DqsWboRBbXSc9W0k9OzBOCGoRFvcdsBvtfjZpg8wVGzi/BUOH7k/gxvVbw8Bf9HoiTxH6QUeUCsXnO+QSVv0Dk6jr9hcaWAVl2FsfhZUPUCz64L5mTP3mRnLNpy3cB22laOr02fjpuFsVAdY2ugJEwTh5CECTjhXyACfBToAPA/++V8K5PIpJra/zC/c/SVSOW/kv4iR6n0l1e5SzzaVlly6FQ4gC//1wi/z8o5bWboQfvu/NTEhWjLkW8C70DoDCKecn1N2XU+ebOOmwAsydPZMSf7smMKslnU2qUNHuQNDFQWYO2k3bW07GBiEHbuGB7nAVY2eLEEQTh4i4IRzhXeXHxbAK695vLnFI+0c4f57fos5U4/E9yGNE2dJ7a/M0iFm9qleA8wxtmXghR3X851Xf4tJE30+9tE0kyZFft13An9I1EYonHo2AXsAmrKQzYDnu+zvnFP721S3xKn3XHXpMMfEHatb4PSPhQ+zp+5n/sy1gMX+A74qJ2IhFjhBOKsRASecC6SBW/UNGzeWSKVh/swnuPrCN8I6+3HFVY8XXbQR86zjwoDXzL+/+Fv0Dk3gskttLrm4Ku7tb4HNjZ5IgSPAMQgL+k6aZOMFKQ50zh/5yCTrrf5Zs2K2mQV99f8g+NCUKTBpwl4sK2DvHp/+/uELTaFSZlgQhLMMEXDCucAy4Ba10t8P698ISLu93HHdP9Ie9I+cuFCPmEuqpg/xYs5m2Pr2nRd/iU0H30I+D7felMaOCr2fAF+mOm9ROPXkCKsEkk5ZzJju4AUpdh65kCDu2zROjKm4N2WNM5vdJ2FmopbPafsBi6atxXXCYtT9A8Mf1lZgZqMnTBCEk4MIOOFc4GpgnFrZu89j1x6bcS3ruGTZq+FPcr1/CSOVCKmFWbA3CK+7bs8qHlj3GTw/4PwVNueviKQz7gU+h9aLU2goHrAPwHZgzmyLwIfDffMpjFTIN66emxnzpo+t1e3D+BzNmLaVVGqQwYGAXG74oCagDtOgIAhnIiLghLOd8cD7qOQI8sKLJQ4ftrjgvO8zbVpf/XXd6h3jEbW2xblRy4+S4/DAa79IX34i7W0BH7q/qp7YF4GNjZ5EYRifsIhyCWDxYhvLCugdms7mPefVLiUS17Te084aN07fpsfBGWOmjj9Eys1TKEFv7/DmJkLrsyAIZyEi4ISznTuAa9VKLhfw2hoP6OPKVc+GKQH1BJ/ry0nWt3rqx+niLA1vHlzB8zvuxvctrrvG4dJLIiFLDwD/iLhOTyd8wub2JYCJE23aW6G/MIWNBy4Noy1NAabePT15Qbek1dsT1VxXGcwWdLT20ZTpxPOgpzfSUmt5oydMEISTgwg44WymqpTC2td9Nr7p0dZ6hIsW76xOXkjiePqgjnQOF77/6i8zWBiPbQW8/c4MTsWCcwT4PKGDVzh9CID1lLOBp0+xWb7MouSHcXCe+kod6TOgu07jSodAsoiDqrIi2eYC49s3Uyq5HDwU+Z/ESkYuMSwIwhmICDjhbGYW8E610tsb8O3v5rFsi7kz19Ocz9UXsxQn0JJi3/wRzqElMGzacz5rdt+GVypx49vSLJhv62f5G2BNoydQiGU38CJAKg0rL3LJpHKs2XsnWw8ujZdLKnEBqj8vKrEhyY06Uu1BH1qCHPNmPE/Js9l/IHLALGB6oydMEISxRwSccDZzAzBJrRztDDhw0MemxHnzH8fOJxTurdWgPgl/dOfwLYvHNryX/sJEJk8MuPO2iOt0P/DVRk+ekMgQ8LBaWXmhy5RJAT25qezrnh//n4IkF6neXSHODR9nhYs5t5vymTF9G0Hg0NPjE1TGNVMuXi0IwtmFCDjhbGUeYecFG8D34dHHihw4aNOU3cHlKx7GdmJ+DUdb+22kfpUK/S/NhS1Hl/Lkm/fh+wH33pNm0aKI2eZfgAONnkChJuvUwuzZFhPG2/iBxdZDKymSqp2IYK6brdeSPks1PpsWMGPSflynn+5udAHXijS1F4SzEhFwwtnK3WjNvHfs8vnu9wrYlsO0SU9y0QVbkks0xG2rp2zISJmEigy8uv0GenOTcRyLq6509dg3gO81evKEEXkNGABwHIvp08O+aFsOXspQ0BzvRjU/Qz7x8W1xx+nttMzPYNniN3FcF82Z3eRyturGAKEFbk6jJ0sQhLFHBJxwtnKPWih58MSTRXwfXOcAd974b7hmakA94i0J9WPpaePj6nUB2JDLZ1iz6wZy+SznLbeZNDEyaB+wtdGTJ4xIJ3AIwo4MF57v4DhwZGAeQ/mWyqixcMXr+8zPk1XZ19I0RFP2MAODNp4XGSG14AThLEQEnHA20oZWOqS3J+D5F0q4TsC0Kc9y8yVroHeEM9Tzw5uUOZh0vnID++c238img9cARVZd4tLcHPlVfgLoafQECnVxEMCyYPZsG8eB7sGpbD58fvjN6gFZbXRcuRCoLi0y0n8m4vb70OYO0dR0jIEB8LzIoJlIJqognHWIgBPORs5D+5nbus2jszPAosj1l/4Iu68U/Tk7np6nSbFuI2S1FrwsT296B3mvhdmzLK64PPK7mgeeavTkCXUzHAc3darF5EkWvblJvLL9pvDzZRO+o3GYcW6qpVZSTThqbCsvNzXnGN++l6Ehh1z0urOAFgRBOKsQASecjSxWC0EAr60r0dVtk83sZdmC17HqqXpvLidtU+cqJew33KlH+yezaf+VWARce5XLrBkRATcA/LzRkyfUzRa1MGmizXnnuQS+x6t7buJI/+SwCmG9NQFN/JhxesJDzPma0j6zp24lX7A5cjhygelAe6MnSxCEsUUEnHA2spCyja2vD555poRtu0zsWMPKRRsrVrLRxicljU1qYG9iw46jKzjUuwDXgSuucElFqofwDTRRIJz27FYLtg2Xr3bJZkvs7r6Q57ffEv/tWqtMSFw9OH2c2ZItprfqpHEHIRjkyLHISaYQtpQTBOEsQgSccLbRBKym/DO3fafH7r0Bjt3HJec/SCbt1xZZOkkxSaZlzWyVFHcMQBbe2HsZ+XyaCy90WLwwYn07Rijgio2eQKFu1lFOZAC47FKXC1Y4pJwcP9t0P925GM0UF8sW1+Qe6ouvNCx0c2bsJJ06wOYtkcFSSkQQzkJEwAlnG8uAGyF0nz77XJGUa+HYB3jXDT+t3TprpOr3ULGO6M8j1YBT2LBu13W4ToHLVrtks5G9zwBrGz15wqjYTlizL4AwG/X+92Vob/XYdmQ1D294L4FTT582otZbvWuDvn8kS68Pc6fuo6Vpn9mNIUOYyFDnzQiCcCYgAk4427iM8AeL3r6A9Rs8XNdn3swXmJDth8IozxZXc0uPT6qngT2AA1t2L2Vf93LOWwZXXBbxneaAf2L0dyc0lhLwn4QlRQBYuMBh8SKHop9m69FV+H5M8qdphYv7DCV9rvTPoynHijC+o5eO9iP09UX22IQdSUTACcJZhAg44WxiOvD7auVnj5fYuhXSqWO8/aavYWvFsaqoJ3EhznUatwzRn0ob+ottfOVnf0LBa+e973KYOjnyW/rvwIONnjzhuFhPuS8qQEsLnLfMAQJ2HV1OV25y9bes/h+AWm23RhujGUBTpkBzppu+fotS5ePuANOQUiKCcFYhAk44m3gXoauIYjHgZ48V8fwU41vf4Nrznw/tWyPZIEaKjdP7V9bjOg2AJnht15Vs2nclkyZaXLba1e/DIxRvYn07MykSWuGGPzkLFti4DuzuXMG2Y0trf8uaYs2rY6y5rG1zbZ+25i5yQwEDA8ODLGA2IuAE4axCBJxwtjAOeDdlabR7T8C2HR62VWLJ4h/Tkq7X11mmVs9KiO+6YFIu3OuX4JG199E3OI7zVzg0NUVU5KuExXuFM5cfAEfUynnLHSZNthkqtrJ2zzX1OS71Lgsqvi2p3E2tor42tLUdY2DIo6+3qpRICkEQzhpEwAlnC7OAi9XK408UKRUtCLq4/bqHYCjhqFoCLIlSncdY4GcsvvfSB3h11134nh9a3yoUgX8kzEAVzlx6gJ1qZcJ4iwXzbKygyDPb7yWopeDq6LAwTNxpYra1N3UzNOTT2R054ThEwAnCWYUIOOFs4UbCcgkUCrBufQnX9Vkw7xGWT9oXLbSbxEhFV+OKqybV9QKwYO/RuTz4yqco+VnmLbBYcV7Ei/U68FCjJ04YE36E5gC99poUmYzH3p4VHOqdXl/mcz2MEANHABPGH2FosMSxo1UCblKjJ0kQhLFDBJxwNmABd6mVgYGA3l5w7SGuuPhBMk4p/Gk1K+PXs6zQxVtS7JuRxOCnbL7x9GfY17WCjBvwofenzcb1/4FWDFY4o3kcGFQrl17iMHO6ReA7bD12YXX0Wa2kGZ/kYr7mekwpkSkTj+AHHt09kZM0ARMbPUmCIIwdIuCEs4FZwDy10tPr09dv09a8myuXPhMW6bAJrXAnWkihXvdpGp5640ae2fRB8nmbiy5yuPrKiAdrHWHwu3B2sAF4Sa20tVlcdaVLKlXkpR23jE7AQe2eqLV6pZZg8rSjWFae3XsjAi5LmIkqCMJZggg44UzHAq5FE3BHj0J/v83kCa8zZ8qR42uPpa/7xrOZhWriwOHeKXzz2d+i5DUxdWrABz+QoalpeEQn8NvA3kZPnjBmdAF/i9ZJ4+13pJk312fd3ms51De1MrKeDgv62JHKiej/KfFgfKqHlDNId3dAqRI6kCZ0owqCcJYgAk4400kBN6D9jO3b71MslLh0xYM0Z4rHb3Uzfzxrxb4pXOgpdfBPj36ebQcvI5v1+eD7MyxeFDHB/C2hy004u3gU2KxWJk+2WL7Y5mj/DLYeuSD+21b/DwFU/pNQS7iZiQ+GWz+bypFKDTE0GBFwLjC50RMkCMLYIQJOONM5D7iDskwbGoSfPFyitXULV1zwAuQTjhptL1TV4sgi+YfVgSO5cXzhu//AzzZ8FMe1+OyvNXHbLRHX6XPA/yD5zoQzl17C1lrDXHmlS67YzIa9q6MxmHFlasz/FKjPWxw1Pr+uW8K2iwzloFAcHugg/VAF4axCBJxwpnMfWmzPMy8U2bS5xMplj7Nw1t4w/s1kpA4LEN/z1Io5Xj8k5fAPj/0+63bejGP73PfuFG+51sWO/pV9lfobcAlnHt9BK1qz8gKXlGvx/PY7GfKaRvwMVVErUSYBxy7hpPL0DwQU8pFivm2NnhxBEMYOEXDCmYwNzFUr+Ty8/rpHJlXiokUv4RRjjqj3h1OPc4tzW5mk4emN1/PchvsplmwuPN/h7rvS5qjngQcaPWnCSWU/8KxayWRh1myHfV1L2H5sYbQSW1ws3Ehu01r7ys+OU8JN5+jvh8Fo/cMmBEE4axABJ5zJLCes/wbAsU6ftetKpNMFFszcVsk+HS1xXRdqtc0KoFBw+fenPs9QsZ1xHfBLH8/S0RHxfx0DPo5WsV84K8kBT6FJrsULHfKlDA+t/WA0G1V9lky3vE9t92ktAkjbPq2ZPgqFgEIhovwyjZ4cQRDGDhFwwpnMQrTaVj09PkM5i2xqgEkte2qXW6jFaOrDBYANG49cxP6uC0k5Je57T5qFCyJ/Wh7w+8AbjZ4w4ZTwGNCtVpYvtymVHNbuvYWuQkulnE2clVcvHxJXSkQRFzNXxrV8mjODeJ5FLhppKZ0YBOEsQgSccKaSAa5H+4l7+RWf7h5IpfqY0NRVX2N6/VnHLNyb9IPpAw48veHtFEsOF5zvcvPNVb+T3wL+qdETJpwy1qMVaF6xzMV1fQbyE3lz76rkOLh6CvXWcZxlB6RSeXwfSqXITpcTr4QoCMJpggg44Uylg7B8iA3gB7B9h0ehYDO5bQvZVH50mabmtnpqdAE0w0uHLuKxde8hk7X58AfTtLdGfiN3AZ9Hsk7PJXrQYh0nTbKYN8ciV2pny8FVYUndej9fSV0Zaoy3bB83VcQPLL2MCIQOXBFwgnCWIAJOOFNZBSxSK4cP+Wzd7mPbsHj+UzjNQfTTXa87VXdbqdIhanvM8UN+ih8+9Yt09c/jphtTLF9mltzni8DWRk+WcEoJgH8G+gGami3OO8/GD2ye3f4ODg3OjH6ezM+bbvWtV24ZhX1Tbg7fqxJwLtU9IQRBOEMRASecqawEWtTKxjc9du3yacr0MG/65mjz+tHGvqlnFauUYKXzUjY/fPle1ux8Jx3tHnfelsKK/uB+H/h6oydKaAhbCUUcrgP3viNDezvs7ryAh994R9gXYaSCvXFu/LgSOOZxFrhOkSCw8LzIXhf5zheEswb5YxbORCy02m+5HLz8SolMBia3b+G6ix+DwnGc1cw81beb41rg5X0X8f1nf4tcoZULL7CZMSPy57QV+AO0BufCOcfP1cLMGTazZtqUfIe1u94WzQetJeI8bdky9pF8Dtsq4gfgRwWcg3znC8JZg/wxC2caFnAp8Itqw9FjAWvX+zRlh3jrZV+nzS3VjhuqFfdmZgPG/bim4c3Dc/mrb3+VI73LWDDf4lOfzJKu5C4cBN4NvN7oyRIayvPAGoBsGt5ybYpC0WJn50Vs3b84tMLp6B0/4khyqcZ8nm3HI/At/CCyUwScIJxFyB+zcKbhEiYvDNswtmwt0dsLKWeIFQvWQj447hpasYV7dXzIuWn+8+e/RNfgeWTSHu98R5opUyz9LH9L+YdbOKfZSyjiAiy44AKbTCagNz+ZZ7bdHn6Ca7XWMpfNcXHrZRw79P971UkM8p0vCGcJ8scsnGnYwOXlZzwfXlvj0dtrMa51LxPaD9V/JvNHciT3aQC0wsvbLmbt1ndiWSVWXuBw1RWRsiFPAl9p9CQJpwU+YYP7AsDMaQ4Xr3QpFNNsPHAl+ZxdX6/TkUScud0Cy/IIAihFrXmq+pwgCGcBIuCEM40WtPZZfb0+W7f5ODYsmP4ic6btrn10kPCs9zxNsr450JVr5l8f/u/0Ds4jk4F3vStNa+vwiBzwx8DhRk+ScFoQEFrgeiBsq3XJSgfbKrL72IVsPbqsdlybmcSQNC7mqqlUniCwTQHnIFmognDWIAJOONOYClykVjq7YfMWj+ZMH0vmvIBzPJ9oJdpM24Txo1lKOXzr5x9h55GbIChw4w0pLrrA1Y/4PvBEoydIOK04gNaBY+kih8kTA3ry03hj7+X4KTs5XlNlQNtEP5u1bGjlYxwrVG5GEoONWOAE4axBBJxwprGMshUhCGDXLo+SB02ZLi5e8XRoAzselAvVS9hnw5b9S/jZms9g2x5Ll9i8/74MduUvKE/YbcGr63rCuYKPlsyyYIHFnNkOQeDy3La7GAxaw09zQo/dup5jjnFtDz+w8KNjbMQCJwhnDSLghDON5WohXwh49rkSmXRAe/MB5kw6Eq3/Vg9GAdRYbOhJu3zj579K98As0mn44PszTBgfOWAv8FKjJ0c4LXlZLTQ321y80sHzYdexS3htz0XVLea1WLYISRFsMUIu5ZQgsAiiCs5GvvMF4axB/piFM41hAXfwYMCbW3xSbokVC3+Oa/n1F+1V6PFFcdXxAdLw8oZreXXrByiVAi652OGSi13zTP8EdDV6coTTkseAIoBtw223pFi2xKFnaCr/+cxv0k9T1C6W9K1cqzuD/nn1IZMq4gc2XtSyJzFwgnAWIQJOONOYpRYO7Pfp7YVsuo/Vy5/AVmXnRxPlo3daSCjdcLhrKt985vfw/DRTp8LHPpwhHa3h9Tzwvxs9McJpyz7gQbUyfrzFnben8P0imw/dxOObrww/h6bzXcW/EbN9BFKOF36MowJOYuAE4SxCBJxwJjERWKFWdu/16emxGNe6hzlTNkd/AOsN+lYk/Sim4Kktt7PryGU0ZTw+9IEMs2dFjBi7gd9COi4ItfkvtM/IpZe6LJgb9kd9ZdM95F03tI2ZLn1fW7a05Vr4kHYLYU1gKSMiCGctIuCEMwULeB+hiKO/H554oojjwKzJa5k9a+/oz6iq3ieVa7Chz8vyb0/+D4pFmw+8L8OtN0dqvuWADwFPN3pyhNOenwKb1cr4cRbnn+/g2kU2HLyF3Z1zKtJqhDZZVftjJFnaLkIAfrUL1UUQhLMCEXDCmYINXFh+ZuObJTZu8cmmc1y46Aksf5Rnq8MN5actvvPsR+jun8kFKyzuuN3sfcQ3EfEm1EcP8IC+4frrUrS0wkB+Ii/ufCuB/nWsPp9674S45IaETFTXDV2oXjSJIU11Ay9BEM5QRMAJZwpthAIOz4Nnny2RTsG4lp1ct/qnYRGPekmKedPXbdjVOZdH132SCeNzfOgDGVqaI2fZAfw5tbuuCoLCA34EDKgNixbZzJ1r4/kpNh+8nCBvmNKSevEqamSlulYJAigWI3tSQFOjJ0IQhLFBBJxwprAQWAXglQJ27/FwXZ+lc55lQnawEv+WFPs2Ussi/YfShiAL33/2Ixzuns+yJTYrL6pK3vvfwIZGT4pwRrEWeFattLZYXHSBSxBYbD90AV1WR3Wmqf75HEX0WsotEgBDQ9HNQHP9ZxEE4XRGBJxwJmABv0w5fufIsYDOLrDwuWDxC1hFwwhWyz0aF0tkWt8yCrxCmAAAgABJREFUsH7fMp5+437yeZvLL3P1gr0Q9rf8MqMvWiKc2+SBb1P+3FgWLFls4ThwoOtCtvcuSy4noic0YGw3CSCTGiIIIDdU5UId1+hJEARhbBABJ5wJzAHuUStbtnocOBiQcnOMaz+EZQW1LRVxLlKz9ps6pgC9+Sb+6/HP0JOfR3NzwLXXROK+e4H/RblBuSCMkh8A3WrlgvNdZky3yZWaeHPPxaHE0q1vSUV9RyCTGsKyIBf9lKYJW9EJgnAWIAJOON2xgJvQLAcPP1KkULSZ0LqHFXNfCEVYUj03HTOeKM6i0Wbx2IZbeH33PTjWINde7TJ+XOTX80fAC42eFOGM5RDwM7XS1mrx/vsytGQKPLnpvQQulW9li+P7hg6gKduPY/t0dfkUi8Mf+jQw9zjPKgjCaYb8IQunOyngWsrOpVwOXnzZw3Fszl/4EJMn9MYHe5sWNtPqZnZdCIA0HByawo+e/VXypTamTbW4792RpL1O4C8ZXcqEIJh8ETisVq67xmX5cp+dxy5m19EZ4SfdTFCo9Z8SqrelU0O4Tp7evvBvpowDzEa+9wXhrED+kIXTnWbgGrWybbtHqQRNqS7uvuafQQVpK9dpQLWgU4ItSNhfZihI8/VHP8Wuw9dgOwHvvy/DggXDQUke8GfAmkZPiHDGswV4Ta24Lqy+xMGxXR7d+A6CNJWmV7o7NS7rNEHAtWR6SbsDDAzAwEBk0AyknZYgnBWIgBNOJyygFZgGLCDsuvD58jIAa9Z5pNM+N132NRZO3hXKKjO2zdeeVaFeX1vXx5QfXirFPzzyWZ5a/0nS6RIfuT/NzW8bLtrrA18AvtToCRLOCnqBb6HJr9WrHNrbAzbsvoFcKVWdQa3+c1JnVxE3M0QqNUh/P/RVBJxFGE86pdETIAjCiSMCTjiduJqw5dDjwJPAj4HPqp2+D1u3+jRnB7h44eMQBFHRZgo3L2bZtMb5QAae2HI5D7/6qxS9DCsvsrntlrSeebof+L9Ud6sUhOPlZ0CXWpkzx2HKZIujfbM5MjSlUsBXdS+tp5WW9h+ZdGaQdKqPoaGAo0cjFrgVwH+g9RQWBOHMRASccLowgbA0x+3AMsIfmLn6gP0HfLbthEnte7hwzkvR+Db1HFecN86lqtZtGMhn+N7Tn2GoMJnmJnj3vRna2iK/kg8CRxo9QcJZxR7gGbWSzcLMGRaD+XY6ByeHBXNcwrQDl2oRp39zm597wM3mSWc68Xyb/fuqsnWuBr6BZtkWBOHMQwSccDrgAJ8mFG4RAj98ALy2xmP/fpflc35OW3tvfNKC7iJNemiCzncsHnz1HWzbfwu2VeCWm9NcvDISIuQBX230BAlnHVcAN6qVkgd9/QGWFWBRghLhI19+KCuy2u5TsdDZVEQeQAB2KqCpZR+Bb/H400U2bPLMcLm3ENakE3eqIJyhSGNj4XTgHuC3KP+Hwvfg1XUeO3d4HOsM8EoBAbBjR4DvB9xx+T9jBYQ/ZBCKsZIFeStsuFUKwofpcjKr3Fuwt2cmD77yq2BZzJplc89dKfPeHiGsoC8IY4UNrASyasOGDR5btwW47iE6Jh6GzqnQ0waHh2DZeFg2FQIHLAcsu/w/m41Q2BcKO6sIGcL/Cg1Biw+LZ/+M/XtvZcsWly/+xRC/+oksl18W+cq/mDBk4dPA+kZPiiAIo0MEnNBo5gF/TLnFTz4f8K3vFvjmt4v094PvB+CVSDkBvpNl+vhdLJq6HooZaFoEzhJotsFpgczksLx90Yfu16Dn8dB6oUSbyupTpogU/Ovjn2Zf5ypsq8Rdt6eZOjVilD5MWLS3WOdrEYR6sAkTdYZ54skiPV02THmRqZd/CYLl4E+AUj80TYB0W/lzXPajBgEEB6C0LhRwh38PDuyEYgGmpPBTc7nxrg1s3vs1Duy5n8OHm/nTP8/xmU9luf66SGeR64HvA79AGHcqCMIZggg4oZFkgI8Q9jkF4CePlPjPbxbwPJt8YSu51GsUZx6gOVPiPGsGkxaswZ3zWWi6HlquB5rLP2pGNMB0IPc12PePsKcf7F1Q6gPPD+OKgD1HZvLEuk8RBB6rV7vcfqsbnqrCv6H1rhSEMWT4k5bLBWzdEdDdc4AvfHEmTU3vH+EItdwW/gcGYN47YMaTcOARmHI5VtP1XDa7mVl/tpG//vuHePX5xQwOXMDffTlHb2+GG29waW0dPuFC4F+APyL8zEudQ0E4A7CCQNo5Cg3BBf6A0HWaAdi12+dzvzNIT59NrrCOd39wHTffcy3pVpccLgM7DtPSup+lk98xis5CPZAfgmA9dP4YNvwVeOBnHf7vz/6YH7/6a3S0eXzhfzWzeFFEBO4GrgL2NXqihLMOF/hd4A8Bu6sr4NOfzbHj4BM889BqYNKYXszzC2w69AK//GvraR36BSwnTzoNl612+cyvZmlpjvw1fQn4zUZPkCAIIyMWOKERZAmF2++iFRV9c7NHZ5dPKX+EhTc9wKfu/23CoLYy8+cfx6U6INMBTIMZN8KUS/G2fYknn2/nqTfeT1triV/6eNYUb3lCcSniTTgZlNAqGNo2OHZApqWAhzPmVXYdO82K6dfyiT85xJd/72/g2E1kM3N46CGPaVOKfPTDkW4j5zd6cgRBqA/JQhUawa8Dv4Mm3jw/4MWXSjhOQMF6g9/42Bwi4m2scD+As/QhHjl0NUe7M3zw/RluvKEqceEvCGtlCcLJYCnwbsqff9sKRZyXz1IMzB5vgN9NofchCA4SlLZCMDTqCwJ8YPG7+MaX38Z9n3mOQeuHpFJ5Hnq4wKHDkTIj8psgCGcI8scqnEps4FeAPwWaAIaGAr7/owK/+IkhnnyqRH9hPVe+8yWWTr79JN7GVMZPupqc18nCBY4e99YFvJew+0Oh0ZMlnLV8ArhIrdgOWFZArn8i3d07tGHqg5nCsjvAmoTlzAUrO6qL6cwZfxG/cvcv8Y1vXIXV8TA9PT47d0UEnLTZEoQzBHGhCqcSl7AS/DA/fKDAN/6jQD7nETgPMfPT6/mTm3+NtD1CeargGASFcpE49bAgyIMzDaxWkkvWe/T3HcYJzqcU7a3wNPCjRk+ScFbTTFgDDgi7izz5dImDhwJSbgnb0ePfyunTdgup1qvCTfUHf9Zk3vgF3HrLYzzy/QIEzfquMbqCIAgnGxFwwqlmuCRHdw/89JEShaKDnXmZr/zDfOZNfJ8x3IOgBEE3gd8H+FjOdCAFWOWfG1UbxAar3Burxu/QELt5ZfMmmtLvIuWaFxMLhHBScdBKUO/f7/Pt7xXwvYDszO20Ni/Rho6BlgryYA0Rhp2my5LQJiBgYkczBAFe9D8x8psgCGcI8scqnEoCNAE30O8zNGRRyuWZceXTzJv4+9pQD4IcBF0QuGCnsdxZhD9qaSribfT09eXp2zuNtuYmJk6MnERVihOEk4XqEwLAnr0+nZ0BfjDI5ZcNkHHax/hyqkWDT+D3caD7ZxxrmcSLW4/x4DfbKJVc0wotYTWCcIYgf6zCqWbY+mA74LgWvYN7uOPK8YQfR58g6KGYewX8o2BNKbtEJxBaEWpb1+oh3+9QHJxKc4tPe3vkXMoXKwgnk+H4yvDD5lLyd3DLVe04FlQ0XhGCIgQeAcdZ7slygA6gGctuJ5Nu5dGtf8//+e8HGRy8kdZWlwXzIz8DesdVQRBOY8QCJ5xKVAOssKa8BRYBGbeV17YWeSv7eXrHE7QF27lmxttIObMYW49m+HP5ysbncfwVNDf5/z97/x5sWZbf9YGf32/tvc859+bNrFdWqbqrpZK6WmpVCwEqCRAIkSAZYTCSjVV2MGBkT9gOM46ZMBFj4/AM7ikIx/iBPWHPeOxgAjOGAYxL4BkG8Jjx4AR5DCNRaj1QqaUudVd3V3d1dlY+b957ztl7r993/lh7n3tvVmZVPu7NzKre34hzz9nvffdZ66zv+j2+P9LRKcxbwP7DfkgTPtQ4XHqe5EWHOsc+aTuj/vNY9RFy/xWU98qu1pKq7wB/4j4vbTx56nfzj596hr/avkVUFf/Uj1Y899EjnWCLMpPK93aNCRMmPChMBG7Cg8RoWhBgVTLMxdaps/z9v/ld/Iu/8Nf43N4lfuCf+yK/5fl/iXeTt0zxwN7OCpdR7GL+2G0u7Xy9/1X+7+c/x/b897FYvGuMegPu1dQxYcIdY6ziS0oAIvEEly58BfvERxELUnoC/FlKc1wh33qfUx4q8qt9pD3MT1O42FGZnNNPPE1uPkNtznd+8simrwP/GVMfmDDhA4HJhTrhQWPDms6cMX74d9acPm2can4777zxffzQb1jwJ3/gj7LjZ8tO2kNxdTjC2cS/3Qpakdu/j/pfhvxVjnpDyzH/0+6b/PSbp/DU8NGPGiltzrUGvviwH86EDz0G32jBU08YTRM0zbfyk3/xNJ+7/LMYHeJx8B3wbfBnMOa8N6861CeswewU6t9E/Rcgfw7oEHBl/QY/+Zf/O7a7HySzPpzA0AP/KvBnmMIIJkz4QGAicBMeJEYXqgPUNfzI76556klHrPn+H/0F/t1/7Q/zkZ3vw3GUL5DbXwBdGw6/Rc3Tw7Bt0uwc5guwW3uA6i9tM3v71yGJ5z7qVAc26H3gC0yYcPLYEKTnnkv84A8kUnLefvO38S/8xM/zZ/7uf8BV/h4H7T2A1V2cvgJbYNW3Y9XHIX0MSKy5zE/8x/8p/81//Snq+iyzJg4n8UykbcKEDxgmAjfhQULA3wd+blyRe9H3EFrxB3/kU+w0H0GxR3fjZ+j3fwqrvgXSt7zPKQ9gtgB/HvxjHG3e4sr+P+Sv/udf4nF/idnM+K7vOlK8/v8F/PLDfkATPvRYA18eF+oa/sgfnvHDv7OmmS3Yyv88/+V//E187ktvDns4RzKv7wpGCUOYA8bf/czf4vJ/90+x2P711BX8839kxgsf34QpOJPrdMKEDxQmAjfhQULAfw/81+MKG1ugKj77q7tc0C/z+Ut/FurHqE/9GJ4+8j7D1p0NaqLnP/5r/x2f++z30sx2+L0/UvN937Np/teBn2SqvjDh5BGUtrYxqe2cMv6lf3HGT/xzDfOFMWu/lb1rN7v/7++nWmQ+++ZVmuqjmPX8wX9mxu//vc0QgweUKiSffdgPZ8KECXeOicBNeBjYtLv5DE6fFinN+TP/54o//pf+I55+8jdTzz4BVt/PNY7AcL7zY6fAb1A5fPI7RssGAF8CPvOwH8qEbxicB/4o8M644tS28fRTTu7F/NQXeP65T3KTZNx9wXA+9a0Len2VnJ1rN3SYvF0H/g0mC/SECR8oTARuwsPAZlQ6c8b5iT8855ueMWi/g/yOs+O/+QQumfjeT36K4KtIxqXLR7xFf4UpgWHCg8VfBP6XwO644q2vBHs3rvOJ7/o6zz/xvRxUGDkOON/9ie+m334dZee1n+25dn1z7n3gdaY4uAkTPlCYCNyEh4Er4wd3eOpJQ4K0+Cp/+Pt/04ld9PHFi1h9hZyNG3tHBsaeafCa8GDRAT9PiYkDYN3C3v5X+e7fuRqyTuE4dRCf3P5OPvGpL7Je73L5HfG1r22a/JPAS0zjwYQJHyhMHXbCw8DngCUU+8IvfTZz6RI8/21v8du++3ec2EXrak4130OC3d0jm+b3eMoJE+4H4pCsjgEte7z0kWdO5GKJBX/gh2bsrt5kuTa+/OUDPWHgO5jGgwkTPlCYOuyEB40E/DCwAEDw9ttBzs4zH81sz8+e2IW9MqrZkghx9eoRg9vUDyY8DBwhcClBkAk7KWNw4hOfPAdbn6Ndi196vR914Bz4LsY+OWHChA8EpoFrwoPGk8APjAsR8LWvBYpE8/QuxqlbHHI8cUB1XXH6iX0iZ/r+yKapIsmEh4GOQ1UZqiRMMyKfXBWrF599kd/wG98gx5I3Ph9cvbrpW58CTsb0N2HChBPBROAmPGh8J8VdA8ClS+KNXwv6bDy+1XJrWZDjIXDJnPn2GknE0VNOBG7Cw8ALwM64kCpw7XDxa/19nPL9MOexj+0RrLl8Jbh6IFfSHL6XCRMmPPqYCNyEB43vAh4bF37lcz1f+xos9y/y8eef5tZN8niaaY5Mu3sKT07EEaI4EbgJDxoN8M8Cj48rTp8xtppn+Af/cPfez/q+2OHXf8v3YX6FGzfg6tUj9/P0w34oEyZMuHNMBG7Cg8Rp4I8wVNder+H//f/pWC1h3/8HfttLz5/oxbt2RX/jcVJydk4dMcE1D/vBTPiGw2PAJuU6An7lVzJmzm63vvez3gG+8xOP08wukzPc2DtigXvhYT+UCRMm3DkmAjfhQeLHge8dF955J/j854M+9vn4r/ssT81+3QleukUyRCI5bJ860vSnEkITHjR+kBJOAMAXv5z5//5PPUv7LD/0wyc7nzj9mFE115Fgf3+zuqFYxydMmPABwUTgJjwofAz4VxjanIBf/KXMtesiuM53f0/FYJg7AQi0h1vCqhZJ6Gii39WH/XAmfEPBgB/hkMjbL/9ysHsj+I7v+iV++6d++EQvPptXeF3ctJevCh1MX771YT+YCRMm3DkmAjfhQeG7gU+MC3s34Kf+x46+N7z6Mt/3Gz52gpc2sMfAIVUBZrTtEaPb9Yf9cCZ8Q+EpDlmi9/fFz/zDHsj8lu/dZqf6gXs/8x3gdL1NWlwhAt65GMTBZOaxh/1gJkyYcOeYCNyEB4WnOWRi++mf6fnMzwcKOPPRn+V7Pv79J3x5w8yoqgw6YnWA45S7nzDh/fE8xSINwNcvis+9kfEkvumjj2Nm937mO8B28wLf9LQD4vKVI31hiymhZ8KEDwwmAjfhgaPv4Wd/vme9dq7u/hK/55++wtlTHz/x6xpGqspoFXEk8O2kfLcTJtwMAz7OIcmOz38hc30XFCu+7aOnuLWUzvEhVXPOfvMNFJnlEvKBBc6ZxoQJEz4wqP5te+xh38OEbwD8SV3NDJxptRKXLgWKllNn/x5/6Pf8Ph5EIqhR4WowVyFwgsHYMQ1aDwn/tj12smzlhPEndfVuE2CMEkqwaXOv/3KwXifW3a/w7d9y8koelTvf/nzDT3ODtp2h0HBbOCfNHk8Q01g24RsNk7n8w4lH7kc4cg5PB55KM+j7Jd/y8WvsPCD1gt3Vm6z255h5SWTYjFtUJ0gkHrnvYsLx4W7bzR/7tZ/beexbv+WHzKwCWC7F67/c03eJ5ux5zpz63z6Q+37y8QTaJ+cnD8fAVe/8yuea/+ST39cd46UOE1y7xboJDw7Tc/+QYSJwdw7joAN8kAblR+Vexfj8DFIyRNDMTjL79Ch+6Qu/zKV3PsYiZba20ubBRN83fHDj4B6V73fCHWDxxOO/0cxeGpcvXRZXr4p1u8sPfuoaD6YvGN2yxtOMnLX5UZPku29fSHywLNKPEil5lO7lVvf0qP9WHB5fH8Vn+cjhw0TgHkTjvNNrPOrWnPs9z10fn9uu90XSeLA7pDTj0pe2CV3H7cwxP6qj+MLqL/Ef/l9+gZT/GFs74jf/pgofhqno+8zx9IWH/QP5sK8/4X2QmuaH4aDg75tfDK5eE11/kY9988nHgQJI4vVfbCi164+Mk37j7a/NgJNSEj6JQfk4B33d53mO4/rHffy9/CacFHl6v/PabT4/jHv5QOBRInAPa/B54GTmLo85iX3vZL/j2Gezvdvbs2o+w8xYLIxv/phjNudrn/8B/sZP/R1+9Ad/4i7+zbuF+Puf+zm+9rPnOHNmh9/8fc73/IZN018ur1x9nbsLwjvOtvqonutRxIP6/07kx/3bf+/vnlnyXz8udx185ucyOUOkL/Mtn/jog/nv7Bo/9/oVItdsbRl1NTxWKV3/yttb3B2BO85ndTfnupfr3ukxx30f77fPcZzjYf5/d7rvSRS6vtfj7/e35JEggA+CwD2oH917vc5xE6T72eeOCdEDXn+3x7xrXbdcaTE0enf4Td+b+Ot/o6Oufj2v/pW/xw99/1ts18/dwaO7F4jl17dJ6TR1Bd/1qYp68FRFzl/70v/4D34VmN3BiU6arJ/E8R+Ua37oUW9vbSu0yT69clX84j/qMQ/OPvMGv+VTJ6v/BiAF//nf+Et88bO/mcdOVTzzjNE04zbF1Te/VAPzw4fc7yVP8Jjj2O9BbtN97nuvxxzX+vs97lb7nASpuxPc7zXu9DfyRP+XD4Lb6CSJ2b0Spnvddkdk5y6Ov5fz3ckx93OftzzXO7/yuQunP/rsLlZ8pd/+iYpv/mbns58VX/n8P8G/95Ov8if/4B/jZCBuXKowS8znxrPPHmxpb+x95u98+n9/gWKBOy4L5oOYTDyK55/wHmhv7DXKefODfuFCcPUaSD3Pf9cNduYnncyT+W//wX/LX/g/fozHT/1GzDPf9xs3Q4By2339C+d/Knj/ycxJuRiPi7idNPm5n33v9HzHca7jPO/93vu43t5j2wh7j203405d3ndCHO/0f74bvN917uv890rgTmIguNtzPgyCdpLE6n6X75a4Pchr8TP/+X/xlY99/2/6pWZ76yOAz2bwB3605v/01TV7ex/j7/z5b+Jf/sd+luee+h6OG50+z8Wrb2HeMJ8fchkBy0uX37j4y7/ivNuFelzW1vvZ/6TP86jiUf3/7uvHtl+t6sgHqmv7S5Gz0a7f5nd9/zZ1uhMj8L3js1/7HP+H/+Qdzsz/Scwyv//3NXz/b90kTWh15errNy5cPI5knrt9Tifthrxf0nYvJOx+ydXd3oPu4lwnea17fUb2Hvvdb3zjexHH97pfuDPCeT94r//7fXEnBO5hk7X7tYo8TJJ2P6Tow7Bts+5zf+tvr6+/9ZX/4anv+MTvHjf8jh+s+bUvBD/511pW17+bX33jF06EwLk1eJ5T2Taz2Ub7DYDVteuXuXU/OMmElQdJUB5VMvQNh365Ssp5s5wSGE6fL3N6J9/Hmd8LAflXID3PhS/vsXvhozx+KnHut9f8oX+2YTZMWyLnvbc/8/M/tb6+ez9acA/TXXq3BO5eydud7HNc5OmDvO1WxMRus3zzOW5F2O5VguZ25O1OLXJ3Q+xOwlr3nues7uJE94sHGWt2v7FfD9Jadhxk6UEdc6/noFuu7Bf/q7/6d3/g3/jXfrFezL8bSizcD/+umr9zvufS5QXr/ZMJyUx8hK1TZwn1YLBYHNxat7+/5tayCQ8q43giWN8gyF0HsLHA+Zg7wIy9G5njV7IZfvvTdwBOVSekYDYzfsfvqDl95qDpXX7j83/ur/8rf+wf5rY17q5N3q9MxXHGu50UibvVuuO0ah03ibr5s93Btps/c5/b3ouQ3atF7f2I4a3+R7uD9bd6tu93/P3ue6d4z3NWt9nxOPGgMiNPIu7sQVjU7pdwPajjDy/f03P4H/53/+6Fs9/5HZ/+1I//2J8z98cAdnZgawFSS6rmnAwqtngCc0fBYeFSos+ZO28Pt8Nx952J1H0IIckkbUxtTWNgmfnsef7GX32Dpv5L/K7f/gkW9m3ANtACgWgwKkAIGz7fCdk7zMWCz3/ua7i+CTdYLDb3lL/+j375T/+n3/1b/8Khg277L9zmIvf8SO7z+PvF7YjE7SxAd2Ilei9rk+5g3/c67v3OcSfHcJfHnwRuRcTeb5n32ee99uN91r/ftrvZ5+Z9j/M5vuv6FSfTgY5z8LvX7fdD6B6Ete2DSPDum8D+1//sv/ALf/zC5/769tNn/zkGb6YZmAeVt9wKYhexpBgvekQPGitzqXy2fHAR64GWzDZXlhUXvnSDn/npYDY7i5SPFLLPbdu+xz3fDg97sjPhA4joeymiH5e//dsTf+DHan7yv9niK1/+Mf70n9rn31n8RV780X+PH/72J/n4c5/iW5/6XrYbR2SaZofKT1NyDMaypY9xJwo4P/1rf5M/819cYWfrd1A3mdOnN00tX/nCF3/tDv+F4x6U7tQKcvO+9zLA3u2gbnew7m7chO9nxXqvfe+F4D3I4+/lOnf6HN7ru7iTWLnbtdn3ast309YehlVuc95HSQfunv+J+1j/sFyljxJBO+5j3nd5fX33K9tPnw0GM4IZbNVn+cm//df4Tb/5C1QJ+j6DApHxtI/5HlJAdGR1ZLUEK0KB1BFkrl8J1v2K69f2+Jmfv8QXPnuKL339DNe/8nGi+2FSmnPmtHHmkOvI3NNt7nnChGPF+vpu9MvVlXG5qeHH/0BN08Bf/5sdX7uwRdX9C/zqX/hefjb9N5z5pr/J9qm/QL28Qf10w2/4zuf51PPPk2Ydz5x9Aqqanfmz7MyfpLIttre+hWb2OIqGHD1fvHSR6zdWfOYzf4+/8pe22Uo/jlnmt31/xTc/dxA14Mk/aOPAnViI3m+A1h0eczdE4U7dhndrnbtXsnUvx9zL8fdyz8e1fCff172s/0DgJDruw3Q9PexrfRBJwAO/54iIsZL8fO68+J2JL7+1zev/4J/mX/8TP8l8nrn6TiJ3LW3s0jdfoG8v0Kqlix51DbZ/FvVn6CMTMqJb0IWoeY7afoDkn2Q+P81s7jzzpHH2rPFdnzJ+7J9oOPvUwb/cr1YnpTo/YcIRXH3zS90X/8e//7c/9eM/9kOpaZ6F4kb90d/f8L0vVfzdn2r563/D2Kt+A4v4JN07X2fvnc/iW2+yvrDkiz8TvNpmVt1FWv8FZmfE4wt4emcLEJU/xbp/GiLR9XO+duk5cv8Y8/SPcWb7ecKM7/te55/6sWZThQSwdm+5etjP5hHHozrIP6r39bDv+UE+l7u51rHf10kQuIcd1zDhweN9v3Ova3P3YjHL0Y+poFtb8L/6V+e89D0df+7Pfwtf+uwfxb0CvCjUhxG5pe9vYHRIGbMG/BRQU5tAYO7ghgzcg7NPBX/oD9Z8+yecJx5ztk8dCJaO6PaXv/yPXv1/fNaryqLvmTDhpPHXfuJf/Uy9tfUnXviRH/rj9WL+CSiWuOe/xXn+W+Z84uM9f/Evr7lwcYvd3efp+28j72VqjHoudrZsCBG4BupQ23H1nRLG6WxjfoqQY2Y8uUhUtVE3MGvEr/91FX/kD8352HMHXVU5X3vjb/+dL6SmMQVE337QCMGECR8UHHvfetim8/sle++VImzHtO5ulu9023EecxzHc5/Xue3zP0zcCpwv//2f/ukzz33k/9fsnPqtULJRf+C31uyccr70VgAiZ7h+TXzm53suXjSWq1NEjDFuMJ+LZ54R3/ycUSXDE5zahroRp0453/WdDd/2bX5EMuQw2r39n/+V/+d/+x/8wl/+ycsYpKZBERZ9Pw1gE44dXjWGlT7wk3/4X/7pP/Bf/mf/3nf8vh/5t6r57NsO7/f9v6XiE59IfOlLmV/4R5nLl0WORJWMroPLl4Nr1yuWyyfJUbqZWcloNYfFDL7pm5ztbePxx41vfyHx+OPG6R3j6WeM+ewQeZPW7/zqr/35n/vz/9U7NuQ7fECI3ElkpN5u/XFonL3f8r1mlz7oY07ymveyfL/r3mv9neKh9hP7E5zZfD7uc3N3BO1O9rN72HYncW53uu644sDuNs7sUU6SuO02b+YG2dycEFhpDjY7veO/50//qe948Z/+0X+zObX928b9Ixg9q+VEBvv7YrkSkiEVsucOVYL5rFgXNhe9gxYkqe32l7/82b/+t/79v/G/+F//fLu3F+MgKAXIib59/xPd/lkcByYL9ocEB8Rt9Fke/CT+nj/9p779O//AP/HjO888/bu8rs9yazmbI8gZdm+IvT3oumJ9FgOBM2jmxuNnjGb23o1IUnf5177wZ3/yf/Yv/tm3f+4fbVyopR8M7xHcNKE5icHqbs75fvve6/YPO3E7yXPfy7nuZ9/jWPde699v293scz/739H5DhO4w3jYg9L77Xsv2++G/N3t8s3r7mb7w0hIOPH9qvncIsCK1cGOjE2SpfnMfuTff+Xj3/0Hf/yPz3ZO/Q7MjlsEa7xW7vaXv7C8cvUXl1euvnn5C29+4as/85kv/8Jf/MkL19566ya/aaGOZfB6TyvE/faPDzpB+6Df/4nDq8rMfch4vlXSInhd2daTT6bf+W//65/8xO/54d9/6pmzP+x1/fQJ35oUsbz8a2/+F3/ln/nn/6/v/Oob6+g63XxvN01o7nTweVDWjHsdfI+bwB3n8sMgbCd5D+/3/E7i+b7ftpOaANzvvvd8ztsRuCP7nMCNPGwy917bTsI6d7fLx5H9edLnv+W+PmsslYHLpHfvm5rGhDaezR/5D/+dj7/4Y//4H2x2Tn2PuVdmvpPq6pswe6+6QjryLmVFXJPIQCiiR8p9237l7c/8wl/8W3/s3/qpK1/4YodEFDHVIyeJrpMNNjwzBnevgyC69fulmb8fHnb/mfCAMVrdzBzdovX44VpuABinnn26Ovcn/o3v/OTv+91/ZP7Yme8z9zll1hOAmVkF1Ji9r5VuhCJWSL1C+91q9Wa/XF3s2/bS1Te/9Iv//f/mT53/yj/8zPJwhER0XQwfj5q0dV8u1ZMY9I6TwN0pqbtbq9BJWaBOettx7Hccy/e77k62Hcf2e933WM55JwTulsedwI2exKB4Ly7X2227UxftvZC9O9nnXi18d3uue75ums0cAx9S3EICycCo5wsLCQMThegVhmf2nT/2e3ee+e4XTyukfr3W4vHHZh//oR/8nbOdnW/25FuAKZRBvUJZUi9FKJSj7/fX16+/ff2tt9/q27aLro9uf79t9/bbK59/c/e1P/t/e6cYQWRmhij+oVi3MjtE4tZH3aY69GEgcSdN2j5sGdnfkPB6NswFAhuCBgoMb2obZzUCvG7s5jDTx7/lm+vf9Ef/59+6ePyxbQwiR3b3tHjy8VOznVNnUl3Pzd1wT0iKnLP63Cuil9Tnru+Vc5/b9fqtn/nMl6596a393bcvrN/5lTdWN77+9QzlkuMMKrpOktj0DUBdf7j5bz7cNJm5l8HqUXWX3m79vZCM+yV677f9JGPKjtutea/73Omxx7HtXva7231P7Jz3SuCOnOME/pF7Pf/dxN0dt+XuXo45Lmvfnaw7KWIJYGmxbYO7lMGQBWb4bD6MFSoWusXCTIYssMDKdhVLhYNVzUbhYOupJ1Kzc6qMOBEmQT6ku9uvWyHZ+saN6HZvhI5YDWRS0a0HUWikk9fLEjuAmRl0q3UxBw5r83ql4RArpykxd/1qdXPnelBWuInYfUBwQN6OPkhvGmMgSI5hVW0yMGmICj0ceFbeC7m7+fyVDT9uRwx7NsxENDTa6N6diBNdq/H8I7HcXA6Ru1Zlfbl+Xq019OJh/gM4xLv7we1w3DFCjwKhu93643LBntQ+J3l/d7Pu/badpCVt3MfucN+7Oe/94L7OfxwE7n2v8Qif/1Fx5b7X9pNM3LiX/d+1vto5ZXY4gGyId0uLhZeVjiHSqS0jhqy5+dyVAzMjzedlYJKQZNWsMfASg4MhAp81Fss1ko52wWEUkuLgvkbKuF5rTJ6QsFivy+Em8mo12AbL4JfXS0lmEMRqpdiQv3Kp5NDu7et2z+AO8UEhco/yPTyS2ExUDj8hQVosSvaNIM1mpfEjhEgD4ROGCWSlzflsNsQfjFax0hKtaewI0RtQrGdsyJ/aViNBO5wVVPoYA1krjCyvV5t4BhnEanCVmpRXqwPr3KGghXES9B44aXfrcQSZP4g4uvfadlLE8Tivea/HPIjt97rvcR770M//IAjcHd/LB+haD8JFdlzZuyd6nubJx83NhzFFZlREZLafOms5egyjeuyMWRi5a60+tW1mCUVQb2+bFJglqsVi5FK4u8uKC3a8aJrNjAhGBVL1vREQRLGsdWuNo4wBMicvl5IJurBoC3lDUfYdrH5aLjUOTu3165iXMS/v7Skiir5cGX+RoL9x7X4scffz/Tyq5/+GR9o6tSFvG2eoQb1YWAzRlb61ZTZwqWq+sNFaZvP5QMqgauYbQpfqxlT61FEzuiDM3pWuGoBLg5172NcM96TcdTKBHJDoVyu5OXm1r5Gc9fv7m5CCfrVf9sfI+zdUkpGG/0uAoN/fPRqHeu84SVfscZOA47ruSRPQh3Gee933OI47ruMf1WvdFo8Sgbvv/+Vh38Ax3sNx/i8nSjDOvvhJA2jbFrOGnDtOf9Oz3vflR79+7Iy5GRGZ2WNPWnimWeyYlLGqop7PTGFUi4V1y5UZUC3mFsXFSkSQmqYkFzAMXGO+ai4DlxBe3Ksqbp62DH6Du0cSsW4VwwAX65XUZ/L+UuYaCNu+JNFdv6LcdWZprtU7XyP3mbHalgQhaC997X4778Nuqw/7+h8a1I89ZW68i7w1p3csMFzQnD5jEYG7kxZbhiXS9tykoLKEz2YmFWIXKskPPpsZVtqmRZBmCwMbCFpJsnHA63pQWAyE46XF03druTkG5HYtDROWWLelzfcQq32FQ9xYSmTMEnl/VxJ0u+Vdgu76ZUUGc8pkZni1V75+p/FM94t7cX3d7jzHdT8P6rhH5X8+znM9CuTnUbiH+8aHicCdFD5Ig90Dvdenz/2TVlWQElRpD/Nt5p/8pLVf+pq5Q/PE4+YOORmLnScse8dsPpC37S1LYTCfmwtsVpV3KqhSIWwWJK/MzMg5IDlGHLkH4Rs+t9y9aoQkCZfI61buTqceLXu5i67tlAM8Au9bra9fl7tYC/LlK/JUESG6K1cVAau331TbtlRVUwbAGLS4fvXn7uUH4IPUlh4UPtDP5OyLn2S9XmM2w6y0jVMffcZ6N9xg6+xZy9lYnNq2CCPCmJ3eKROZ+baFG81sYRGGzStzGWaGVY2FFRkeqxqzKKTNzAjLh1r9AC/XrszJ5JJI1HYKqSRUd71MsF6tZA62WisClES+sacIyPvXFV6Rr16Vu4iA7urQDy58WV3XkVI9ELglkYO9L375bl17jwIe1v09Ks/lUbmPD9u9PnA87EoMHwQ86g3opqibB4Nv/Yl/05oZqkcCV0H9kWetrl3pWz4p31lYSqYqOet5bVVvarYWRjUjck/V1EhGqis6ZTw5HobqyjyyIjJKycyQYYQymFlFOmKBK6kK5T/fyr3kCeUsPIF66FGYsD6rvXLFur7V1jPPqu96zbyi3b+ulGrWeaXVm1+05eV9VZXIWfRXvqb88Y+x/PKXFblY3yKuc/r0aX7p3gjchA8RxgnM/HGo9mDdrnji2z9h69apto1Tz36Tpc5I24+ZJyN7YykZ1lQWbljtlryhSo11ylRNbR6GqmRSSMp4VZtFyeUuGd7JsBJNMKJkfccYFyf1QAILYWU+Qx9ZHkIWxbK2auWeUL9WziLapSKLHK1SFsvLVw/1g2vK+SUu/+pnNWsgdINTp04B8Eu3JnAnjdtd095n+4R3Y3pWH2BMFrgJ94Q/qasG8MYbhbzNZlBV2O7uFarqcVutdqlr53q3srraJue11dktoiOSWQpHMgvvTXLcMUXgjlkY8mwRgRlE2KEYo8N8NSMOx6hJ7oPLNNJgRZBqT+QsuQfZkswrPEs5C7NQSiH3mr4PpTSn60JNI+bzrL4P2jazXPZ68sk1+/vPs1zC7i78nd/52KP64/eBtmp9EDBMYDg6gfmk1TW07R7bTz9lVeXQnCrvlVnOhlVuwktDntWWUk2ZYpR17oayTG642xAjCubJDseiQSIiA+CeSKm0eyhWYosYEkpNYY4FzJ9+IiKEeZL1krvovZL3wkxKSXJv6Pv9m/rBji70l3l+5wm6DvX9mx+UfjBhwocaJk19b8IB7KbiobdqH+fPYzs7sFiUYvSXLr3NYlFZ0ySWy2SzmdO2Tl2b5dqPkDdVbmp7S6mhU7aUzBSGpzAFSGHuZhEZL7mtpTbjEOljYAcWuBii30a5D+Hm6nPGzImQzB0zySzJQ2QL5ZyorVJvIc+CWaXUF4JXSFzQdVmrpqdZbWuxeIz1+gJPPPGMVitoW1guX2N3d5eLF8/p5Zdv//wmfPAx9oFXXoFPf3qz+l0TmOvX37G6TqxWydZrZzYzq6rS/nM2onZj3VuEUVVmnTKSWUpmfR8kZZPM3I1eYe4lwUcRZmZDOboyh0meiMEM5+5DFiqbWLeqiAhLLiySzISZKxuYJeUs1SayS1DJs+hMmntdiN1A4up6S+0c2neubvrB3hPP6OzQD158sTyiV1+FO+kH03gzYcLx4Y5VvSd8Y+OVVw4+nzsHi8XrNA28XUFdP2spneVG5dS1k5JR10vLeX2EvIEbXTZw6/swszCjvEc2U/QuySJkbm5DLSKTy9xU5Esdcxte7lYMFXJcPlR/cDM3N5k7rpApZBHh2cKMZFXl1tvajGyqHKK3XJlFOH3l1nVOVZ2yenmGpnG7UV+hevaZjaWlad4AXgLObQatV4YHNA1QHzYcfJ+f/jS8+mqZwLz2Grz+OlTVm1y69DZXrly0lJy9PbeqMura6LoVezeRN8moa7ee0g/MwiJktZmFubkP7d1lMrdhhmJCjuPubu5umWzuZu5mchnI3M0R7jpYNnOTh8tlNvQqMzO3bNmGGRK9qTKgs1V0FmH01ZZ1ndG2e7a+eKP0gxtXqKpnaIZ+8OKL8Npr5Xnc3A8mz9yECSePyQI34QiOzpx1RDH01Vfh7NmbrG8zWFTYcvcKi1WypnG6bmU5O3WdbCU3oqPGTXJTMqPPRioDhjBj0F9zMxNhklEGmkGaZBRHHYTmYkhkcJyIjJkriCK5INdouBsscSpGC1eOXqmqZVlkk+hDVDNhkvUBVLJFKHWibbNSmmu9DpomWCyydgYX0mEr3EsvvaRXX32V119+mU/f8hlO+CDj/axvFy++xfZ2bbNZYrmsmM+TtbWR+5XNciJnN6kzSFYC2bKpckNmlgMlMxSDjGLgbpZzmGxwoeZACjMSZkFKqeSh2piHWqR0XOP92qB16JhLhkvKRLhS8iK2mJPCpKEmSskp7aXeRF1Xwmt1/UoLa2iTlNrY9IP9RdZi5wmeONQPDqxwr/L66y9vntOt+sE03kyYcHyYCNyEIzj8o3u7wev111+naV7k4hy2a2y5e5mtwXVa107XuUWsbSW3Rj2SW3EZuUG2sbwjxEDeZMhMXta7ZJa8kLcxBsjMRpfRqAV3OJJbg7KbzElDsy7h26bYOFmrYdAKVbj6XgIXVRK9RJ3AJfNQ6kLrdSaluarqFPM56rp3OH36Ka3X8Mv9Gzx97QV2d+HiOfTykWcIUxjahwOHfx/LBOa87ezssFi8xNbWm1y6NBvCB87SNNilSzeYzcyaxtnfbwfy5qh2q+XWkc36Yn0rk5iRvKm8K8jIXEXszczMdDCR2ZTAKhStLDjyMQ50uGmpaDNSinfJy6nlyRUhJZw85JOKVARyeom6kvVCTaWuW2nhM61TkNZxy36wv88mFu7iRW4KJ4Cb+8E03kyYcHyYCNyEI7gVgYPDg9e5d1nf5rtXWK2S9b0zm7nl7ESsTY1bHW7QW/HWm/W0wzA0JJgOA5i7WWSZPHCZyYbgNyui8QfFuYq8CIDL2RgexhqTkkq97yH9DleYqRRmdY2SpyCRQ5KrqlyQ1HVrUSfRBWa12GpUtUFVFQvEu61wr/NiMT8IjhLdyQr3wcd7xX+eOfMGVfUC169fOGJ963sn55U1TTLJiXDrrLdaduA2zTGUnXMjmZHDwsY+kEvtEi99AILSGYqMiEzmjDFvgZuX6RDgpSKDsoqhzczFWH3VJAsfVdwAFyH1cqWUpI3KoSQq1YQ6V+kHSUM/2NZ6fe2++sE03kyYcHyYYuAm3BI3/9CWmfU5gBL79vZb1H7Bdq9d3sT9VJVZSkZKa6sqt+RGVEakBsmsV7akakPerGjKW3Izw8ySWcLdzCyZzMzdLVlKbjK5JZk8LJlbKrE9hoXZEB9nbpa8RA+V4dBL+gJmZnIruX0DcTQjuVGZ9X1Yq+LaCrmlNKevjNytLSVjlYxl7bg/wRtX3+HChRIDBC/y2muvcf78eXv11Yf9jU04KbxyKAB0jP+EF6gqeOaZZ0jpKdITZsulsU5LS8noe6PvzdbqLLlREhYcy0GxvBXyFhFmlZuZTMpmZpbSSN9kqUS5lYjO4lU1CDfCzdwFXtq/WRAmwx2ZlT5jKEonkFnpPfKQG2aWMauSWc65pMhSUh2qElRgqZ9R5Za6s6Ef3DjaD9LhfsBBP/j0PT3mCRMm3CUmAjfhPfHu5IXyuWkS1SWnciMlY7Uq711Xgrb7ZCiKB5SuNylbGtymSV7yF3CLKEHcUjaiUC8rVYEMk5WQbnnykaeZGxpe5u7JbQzNFi6TJdwlmUwly1UMxM0spKGOvca4oxKXp2wpDEVva3VW9Wa5N653K6q12WMOe3vXrLrq1PUFe/vtt44kM8ARNzNTEPeHCZ/m1YGhv/baa8CLVBVcSHDJi0e/3ndOn4aqNVLaspTm5Kr0CankQUMubS2HZQbyNrRLw8w8mSWz0nbdKR4SG7bYwLC8zE1SSdQpkxWTyd2Se8liddeQqzCAQQXYSnSCKQpBzBFWDZLBSWYpzDplizCTOut7s75f03X27n5wEXv77TKhKzgHL9/M36Z+MGHCSWFyoU44gtHl8X7u01E2YTarWNWP2ayF3bw0cmuNfBiwHLNsYB4x6MpbWKLYFEqETx4jewzywMNkxdIgrOxLsSDEUE+n3KONg4P5xmE6VOyWhSmKjFb5Z7y4USUpRzHHlRV1SCFPLilUkdQSZRuVzAK8UYkBCpbLrMWi5/Tps7dxH73CpwcmN7lRP8i4fQLPUffpM8xm0La71vduTePkbLZed2bWG4z5nl5eRCFu5qYok4nkYUUpRJtYOC+t3rysKVOOMaFnvC8b5t+Kg4L2OBDCyvxHEYSZnKLSU+QWS60ShlkOSOEueoW7l06SSl8oLtdaZsI9tL6pHyyXvXZ31zz99PObZAa4fT+YxpsJE44PkwVuwi3w3u7TqgJ3LCXH3axa3mC12reqNTzN6ZMRyZB6i8D6PhNukMJcZrGxfskiiksI5BQ7gzlD/E9xG5ljjsucooTgyB35qIrgyMzwNJzTSFbS78IZB8Uo14ziXRoqV1aUGLww+rAks4jeUjarslnVt0VJf72iaJgUi0pKdpP76DWAwUoz+Y8+DLiZZ4zB+S+9BEfdp6UvePFK0rZGl2xoLw2RDPdSdURhCNtYfgFLjsVgDRtSFsrnoSPI5FZK3LsPfcO8tP0irTP0Azd3GORzRquejJRKCAEyG6/tpSAXjpHMMlEyYj2blE0JC5mto7fsZn1qrXNYpxImsVwe9IOPfORZnn/+eYBDbtSpH0yY8CAwWeAmHMEw07/lpjH7dD6H69cv2nxe0TSP23p9g5yTRZit6cxkVg/Wt5yzhxW9q41HB3OpHwYsGcUdWsiXq2iVDhRulC41G0OxVQR+gSJbSqmntbEchiTG+O/RCleCtKNkpRaphQhRrG5mlaQIlyvcJSS1oaqqBFlrD2EzfBWqqsz+ftZi0bG31+nq2dVBNupF9PrrUyLDhwF31gew+fwKq+Zxm61vcCOvTZFsJjfJ6QfLW+Q8uPnDFG5FmFej39+sFLgahXMcMzZ/pCIpMpYgMW0ERDTK64yZPKW9aZTTKca1oe3LBjk5Bv0QKZeLSvKQJDdTIHl4KElSKCgJDiI0p5FZsBr6wWKRtb//BHt7b+ns2ee4du122aiTBW7ChJPAZIGbcFscDt4+HPuTEqRkXHfjwv4u67VZ2y7pujXegbsRqbc2enOvcWVKbA6GwnIckk7wYXTyksTAQPOKVK/ZGKA9Zq662Wan0WCBm5egn8H95O6DYr0ZUSx0mFHqSA7WNzOEuaWN/pY8TMrmuVhQVtFZn8xSa1a1y83/XRI2nI997Dk+wQslDG7AFAf3YceLVNWbXEhw9ixcv274jV2WbphvsbA53VAGy722iFJ5QVGqLpTAzUNtcHSZ+uhkTcVA5mUCY176zWia9kHst0S0lTZf0hswd5kjS+6GazhfEf4dw+wwTMgCDW2/ZHe7YyJKKa+UTcI8zFLuLRmW3Kx1rE1GOn2KlM5w7ZpRVRf52MeeA4bkjnNHKzIUTP1gwoSTwETgJrwHSvD2+fPnDV6CEuPCxYsX7Gpy0q6Z75VxwX1r41bJuSNn8CEg2r0yuZH7KKWCTIwx2abiFtroYJXP7j4sm5s5lgxPPgxBo/J8Kr6j5AyZrWZpNPHZSPAGuXrHfLgAhDGq2KNNkLl5NZBPLJKZeyGjvhj/x/J6/PHHgbNcuPA2AIvXX+fcuXcPXJOx4YOPw0k8B3iejwCXL8Njjz2GO8MchGESY2RnmJvU1EaZwBiIQB6l0Q+6hxraeTlAm3bLYHsui7Ix09rMrbhLhygCL2EB5YOVsANjuAYbV60PsaUOVpmXfmCYWxgypKJa4lbhZoRDJCNHj3eQujVtu6Ra79lyuUtKxpVkXLgAb731JvDiEGhxFFM/mDDhZDARuAm3x6cBXmYT//YGvF29xTPPPMOTPDEQtpKFV+jSzPrBwuBm5nWFG3QKG2qcDvFCxaaWUhmkBtsApQ7QYCMbiFkq4lY2yph6KhYFL5W+DSvWNR8tFWk0sdmGwmkUDC7uWg7i5kbjH4OftWTfec64DeSts8GquMAd23O4fv0qKb0DH3l2Ewc34cOLcRIzxjpCmcTwJOzuXrM9N2xp+Hok+dD3HX3usFwkOaxKjAnQlSXcini1WYmhK0rWbGY1vrGgYWljly7RoT7OegYL3BjcVrJSjWSYJ7dNWEIJRTAc09BHhlJb+MYCuLHCIWXzwQJXcsWhTyW2b9u3NpOZlGyTlX04Dm7ErcnvhAkTjgsTgZtwEw7VfoTC3xiDt+FjPMelSxdxv8Lp06cZvTOdr+m8xXOHZyOiJyITCnMDt4RZKSckiZLIIEpu6RjAPThIkw/mgNFOV4LES6CcHWAgc+bY4Q1ug0upBN8UK50N/qM05j44ECaKFc4tmaIMvhqSGbw3cm7p+9a6bm3r9RLfKwPX1atOffHCJrjn8OD+yjRyfWjw6SOTmJcOcfVnSFcvc+bMGXY4PIkpPsnGGjybueeSsqBS89eNUhqr2J03UXCFYA0aIAc2uMGSPJC6kawd5LQe6ISMIQWbTIdyTPLRFn1wnIHJx+zWId9bw3zIkoWGKsWRKRMas9RjC5uNqUWkBDeS8eST5Vm8/fZbfLF5Ayhix5Mu4oQJJ4/qYd/AhEcbYwLqGLx94cLbLBbPAnDjxi7b207OQyC1wJqG3GcsG1bbEInthMIgSGOOnYo1oMwg3MxV5EO0iWwbhi4oQ5o2o9DB3W30FIrAQpT47XCXC4siQwKoFOsKCoEcBBlUJOxluEkhN7OIXMwb2cglG48q5oLMaOpIyXjyySfY3y+CxlfPrnh6+RLnz5+3ixcvasrA+/CieeMNqvmcZ555jt3dJ7hx4zqlAgmsbYWRaA5ZlXMGqw0PYZaGCU0qdXtHYTewoVBJaY42WpcPJjCFxHnpOOOejBFs5d5UhBOLTVoQbqUwCWNkgqB0CsbupSEryCLkmEXpB0QJfRA5yMkIddAJCDRvsG04s4Zr14zF4iJ87Dk+sYJrD/sLmjDhGwgTgZtwBLePV3mRt6o32eF5UnqH616x5YnlEosZG2W2cUCxujKLKLK7kYuVC5l5KqNHGTyKlc01JtcZB1aGzTDlXoppqYgwbMat4ZIq0m9DLmvJMx2MDEYQZfDKGq46sDoDEoosMxWjSBn7KjMLhRuejTo1hMWQSVdcRzduGCldYbHobxq4zj3sr2/CseDugra2t+FGNuaaAx3dQPR9FAwp3YCIjMsJLyXihpoghka3/kDkEF7KwWGjkA7IfZOVLceHmsKOShsvb6UoqqBYrBVIZqhIwxUhOBk2FA/GMSJKmqqKbjCMPlpZNlPK2vQDAFZDeEFV4kFXK2guvA1nni0JPefLbu9O6JmysidMOE5MBG7CHeN5nmf2Ebh+/SkeA1rAbB9fDzq8DfRdT2NNcb+UQcw0iI/aaHkoMiGDEGmRKxWyBCWXoVgjinVuKIFqo9XAODQOlKBrQ+BIgYVZKeztxURhudj4VHxXMslIhvIgNmIS7pZciqBY4NzNQliN+rYjIlPXFasVwL6dPj3XamXA2YOB6xA+PRngPth4T/72wi3XLoCVrQHHuxZrEgfTGjASILMk3LAQiDAnUTQO2UxYBvHqIRGhNGS3zQRmo65TZjzDu5WGP3A2kyGXEXZQRFgqUiNGCIESprDBRCellMxV+gFmCgP3znAf+kFQ10Vt0R3b20Or1VX29nrm85LI8HS7z0vnppjQCRMeBKYYuAm3xPuFcZXg7RsAmK2KP6YF67Gc+zGPgMiZOOT63MTcWKFvg7GCsUjWoNpbBjQfpU1lw6Fl5j/wOTczLxoHjCTPh+DsQS8BHywapuF07gOZLAQvWcIVKCgMcDy5VeQ8Sp+W98Viwfb2Fnt75RlcufIOUAauSULhQ4S7MhSdBk4BMBte1A3WQx7bveVN/jMUIuVDKx/qlQxprKNsyKiuUwxyo+pISf4p/aQk+HCQvGODRskmXnQMOxA2JjIMaouHPLwMNA1IpWzJYDV0y2bWY1YReVDrGbOy3ViasbMD8BhPPQUwTmJuQ96mbjBhwrFjInAT7gpFQuQynGETvA1zYDYGcdOPgiAksEQy8OSk5BS3D2ZB8dRAiUMrcqOU+vPl597A3EsMXUobu8NA+AZ9hGLHs6L85kV94cBAwRh1PbBFFa+UgzmWQMIgDUQRFBDZsJypDTNrcG/uaOA697C/nAmPBOrhvQJIUJEwMkYcdf57keMdgjOBIbMHZD5k+PhGTMfcIA0ac5vGP0ww3J1BY45RhGQ4Di+6PTpQnxuCFyTDfUiq2Ij4mFkQGSKMnPN4HTMza1tsvV7ZFrC3Z6R0zeApPvIRNhUZboWJv02YcPyYCNyE98XhDEuAJ4EznGG0PKxtRWstfW9Q19QVZMAsjxkHZkCph+olaM2HiLmRwnFgpPDhT5HC0piHcJC+UEwHh+wIxf6WNkJZGysEDOez0fDmZci0MUqITfYgBpYSWOQhAL0n587MsNawta3MV/t3N3BNI9cHEMcbq5XJQJnEjJMSGCIFYFThLXxu1Jsu05HNBGTsGMM0g43WtY8lUccOohJ7YINy9uEOWAqR4MU+B6NI3LBPRCmYGoFFscZtiF1v0A1kcT6fl3CCnXLc1auXi6zKLTBlZE+YcHKYCNyEO8BLt1y7v38D2GLOnBkN1GB9T98DuR9YXBwkNox8zYsLqeSMDma4UQCOQ3+GEcQPCjOQ0qByv9F+GzUSODTI+WjCs5LQNxgbRr3gEiV+yLIAEYAlIgyrEnHIunHA4GDlxjIVH+o0cE2A68CN99/NslnE8IMbRa4GYe5yH2IEDnIYRvI1TCxidKcOWdkH+oVH5ERglHs7ONfhZr4pxzXcEqHBNYsUlhJExKHth15mNDQwg/UatrYg7cONG+9u/kcnfFNA6IQJJ4WJwE24J9y4cR2A1Wq5WXfEdVRVkKD8SYUgjUNKDI7UAttsKdIJZaUdts0N+2wMZgzWubLN/YDuDVaNUYEeGApvD/E/IzssFriSTBERpIQpgurQiFXIW0dnLWbQurEFnGKbG8mKKZJnNv/INHB9I+AN4K27OiKlhHtSCWgbVvpQ0dQH87JTEhjSoNxLaeMbquaHJhQlVm60uA0qvsWgVrqCzNOQ9eNjWIEGK58holikhxg7UYJFB/J2eAZV+kE2aqrSD1qYz6Ek8QBngCefYKMF98U3HvYXNGHCNwymLNQJJ4YcgPIYjEMQGFIaXaM+CMKZF0WDtCFvB4PHOEBxUNl+TKkbBzAJS44iBi/RaIWwUuw+ilbDUI9IEDI3lCPAXcmMvg9SSkSERc4yd3oYMmmNzlp8nVk1Ffg+Z5izvGZQD1pwV1c8/fRhLbiX7/WxTXiE8ArwIq8CZxllYr4MbANbN+27piQxdEBTVeQcR7YXS1fxqTtejMRR0nk0ukBDRioW6jJrCXzMNt2EGBz2i9qBGqJp6BuUeIEi1QMH50aSubuiL5eXEIYSKA8TGw54oSoSUYlePY0agqBt10ADFP7WAPs3PYupH0yYcPKYCNyEO8Br3M6NeheQj1E4KqTNNwQs8FRi43yTmlq2jRl4Qzwco9ac+eAmxTCijFejSgJIIYQ2FbSKlIlMSI6XGgzuUNTmMbPxdBs5fRv1HDqwAM1mLNTgBDduBCnB5eoiM57jE5+Aa9dg0oL7kOEVePnTLwPotddes7Z9iWcruH6ZDYPbo7TMmWasraOpgR5SEuZJijAyY9CbSgxcKfthh4QNR6ubM2Y/D0GbDBY2GCx2h83SA+mCoXiJQEOkgIPFGDZQ+kLZEcORR9mUS6CD3JMiynTHEDlnzEXuHU81na0JS9SawULFuL6+1UM7JAY3YcKEE8PkQp3wvnjppXeTt1OnTrO1dYr5XMAKaOmO7NGTHNzTZs1oj7ANyxIRJRxNMVQ7lYpNQcGoNo/G9ZsaQeU8HGQ/HPhhNxfZ6PXKtLHYOYM7CgwVIdRB14pQHi0dm/yKqq7oDWhmWAtrX7Jc7hungcfhaeBjH3vY39CEB4Gj/eACcLl83AOWxQbVqIEWOnp6gL4vk5KUBg7nh9JaSo9IPkxUxva7MaKJcWYywofwzVEkeBNmYGMyw4GxrkiQjB9GeZDxPL45SdHnjSILnFKxnJNIVQUkqhqMjjFIorU1q9WS5bKc7Nq1K1y+fPFhfz0TJnzDYSJwE+4al4BrXGMM3l5xMBHvoAxch1CMZWWw8qHJFZeRSlzb4UxNOzQaHRmgjHIObXY78CSV6LdkhywXJcm01H/ExiKnG4uFuTPEJBVpuIEwjmRwDNy23qjrButgNqOIFm9vkfZukK4bcJYLF95+1zOaxHw/LHjvZJRTpwTsMZ8vGCcyAJWqwQo3pGSTcUcx9gP3Q1ZlhqxsNm1+jOrEjm4bS5GMOCT/MSz7Jj70cNG5zfEaMxlKXxKlqzkOEaYIkiMsD8dlct/fIlFnAdwiieET44dzTO7TCRNOFhOBm3BL3I6AnD37jB7LT9y66GHXUlUVVQWoIpeBS1AGrDEDr5QgPSBuKoPOuMTBhsEAIYYEhyG/zjaGiUOVUcvAuMkaTTZ6rAAdjIEKGAib45hiSLDYjHFFiysb9IMbte9wb2ndYAG+XDJKqLxLzPeWmLREPqj49G06wtmzzyg/9gTXgK2t7SPbRkt0VQ2TmZRw94N+4ENrDY5Yk71MQg4ayziBuakfbNR0hlBQBqN1WX+woEPn2JzUh8+joDVjjwsY7y0ygKJ0YEqkTY113RD5Vujbkf/6aeBjz/GuShXvKqc1YcKE48IUAzfhnrE7vM81p21voGaOdR2dO8l6UnIpSikt5RiySF2OLBBpEzRdKB0M4TkGZXRzzIbQnUHHShtNOBu9q0N9U4cxRHwIFDcvwrzl2ELcBkmuMdTbGNSEpcPJEwdWjd4gGdZiVG3hkbG1JV9d58aNhZ09i27ceBZ4E3iRc+ce9rcy4YHhEsXgVoxRaDYHGZU6ur4fkg96wEU2S16IUoSR0iZes+gVHuJt47T6iHt0mIVs1HaHXcdEHca0hRL/pkEhZCiftek+MHaDIbNHirEXDpOZwxa1VEzWBH3f4UDXtczqaqJiEyY8ApgscBPuHbswD1ixQk0DXYeqmiqBqIrHMjmRKX5UFftbDDW0i5zIoOqrceAQMSr9lkU2gXBjFJ2Nzp9hkEKoVHIYQuLKQDZYLMqHQYKkyDeUHeNAZXdjyYsIG618h0lcU9e0ZjCf46t94BRnzsAk5juhYL94UFlDC1VVMhkqigs1E2RKZrYf+dU91K4Ht6YPHv+NsDUccq2W+FApGDvNJhZUGuLmdLByQ96GDuYH68az+3gbI1IaXkXMejPLb2BjgpswYcJDx0TgJtwhXudN3uSrALzDzs4ZbW+XX/2Z5mqEqqpWJdT1Ze5ORjlnPB3QMzvw62gYmTQUIh33GDJCY2Rog9KBqYj6HhqwgJHEHcS+FTJXQoV0wPII/LB7FmHEkQBxsyiRdsqlhBBHY+FmM7D1Cncj3UbM97AW3CTm++HHzs4ZxfYpYr4FrIZg0A66jqSKnh4lVMrIZXzD3gayNmYVHFEc2SwM/UCDE/UoMTsIJDi8rpx3IHQaSV3RDZZJUSYuXjaX9h7v+r8iZ4hsCXSExL0PPnGH+02YMOH+MblQJxzB6E68Jd4Edt6GUzVXr15layuhhWB/yaDaS0dHJae3Xp7cNnkHo4d0yP6MKCWDEhwMPiGRxoTRAwtckVrQQVDPoUSGI1Ru8JeWmqbaWO5cKKIMZT4oggzJpyVBtcT8INno1rWokIVhlofs1xZrK8xteD7bpBQ8+STs7xcR06tnVzy9PKwFN2UyfPjwOkU/5HngHeCpEkuQYTaba71ura5r9X0+MCmDFfKWRpflofMdJk+bSczhxs744XBM56bT6HBu94Gt+l3xZoP5zganaD6c5b1BkfUdS3xlKCNEDCsFRekuHxxyGmjg6VX5uLrpaU09YMKEk8NE4CbchCMhz7z6Kpw9C+fOvUjTwLVrb5PzU8BVdndhsYCYzWHZ4g6VanKVNWj2Hgw3o2fHDvE5QVjgg2NolEGwjSXBi+kNHQiMviv6JoablswMKQrBMhvUrRhi2oaxTdLgfsJwsvLwD5dxNRSFiwrCiiWulOtKmLWUwavCfZ8bNzpS2mKxuMjHPvYcZ1djbsc5YMpE/XDjbYqsxlXGaiMATTOT1L07azNzyB86TDT8aF8bcChqjVtst6O7Hvl8+HyHPw+nLNY4xSbgLm6arMVN578Z9XDOOTeZDCdMmPAQMLlQJ9wRRs/gM888C8Dp04+xPaahLUs5rZLNKSqJdIi8DUROsPnZ11DdvizFEB1XUvNEjEFtedCDG0xl4/AzHi+9+8XI82Iw5Y0xRgfv5qPrKA91vwNTmBGDUSPwCMOgNqjN6Ptu46Z1B3ezlJyUCmUbpUTGTNSXJwWFCe+ZdhkcJUFDyMBN8XBHzjTGdB5q67dq/++6tG5aLue+v9DMrfs5eMKECceBicBNuAdcBK4AEIFivijjRyNaOqRNBZ+h0hWlpBa5EDDzIYGh0LQYvZ8MCxu6V6BNjJyGrLs8uI6OErOy37g+UwphhRWJ+jBDuMUQ+yY5gzXOzYIoRC7CbHBLWc6YGTn3w3uHuw0WOWNn5xTwGGkoAfZW9SbAbTJRp0yGbzDc4gvPHHE/bnYLHTkkdDQM7pavuPU6jZ3u4FVyX1WkQmJjfDt8cg6TyYh8KzPcwf8zH963mTBhwkPEROAm3BbvjsE/KOR95QpE7JTV+0vUzGANtYr2laqqDB3SQN4GHV03ESUX1QxpYyXTQawbQ2YpIg/HHh6YikUvBndpHjPyOLBqDJY2G69d1hlhEYXkmTJmUWLc1OMEEb2ZdaQEZpnKynuxunU0ZtZ1rZmZrVawt7dHSmZXrzp17fY8zwMv3pTIcOj2J0wAbrK+6b1JWckGOtyuNy/lQwkMGtIVDkjceM5NPOh4SWlQYyyJEXGTO9Q9vW9rXa+WD/shTpjwDY8pBm7Ce2JwBeq117DPAY99Gba3z3LmDLTtdWLhKC+w1RrNHFGjnDcxb54SblJGZu4oC5IVCV3JkksRZu42fDBCQTIbCqcCqUS1KTTGyQ3u0fGjDukkjMsxhIJr8C5tslORrGQohDSG/Qz6v4NrtzMLFIZFNvmg45C9w8Lpumu4J8xqUtrlySe32Nl5hs9//i3Onl2xXL7E+fPYxYtoioP7RkZPmSP3MMrlHIIiY2lstRvBQg7UDcfGechI5oemAmabyVHJ5tZAB3VYlkdmppAwPzBmu/nG/M3mSpuECN47Fu4AQw7Du5IXJkyYcPKYCNyEO8JLL8Hrr7/A1rNw/foFoObUqSe4evUGaJ+YpU0dbakkHpQRwqw3SgXICFGZEUEYcjeTnCJSrzEsZ0inG8sjSBFlrEo+KM+jwXp3oBZyU+ZdCdkeiNzhIG4kM5WTWikIoZIlYZgFhJuUZeZmhtwxzyhKuqz6vqOujfV6zWLRbFyqly5dpGkS8AKLxeu89NKLD/srm/AQ0LZrq+sDolbRYziRuDk/CIZUmfLxJvI2yuMwdqYYlaYPlzA5kqdqB3kPikOBb2OHjNHoxpDsM1ynCPsGYQdFtuLWCQ2THXnChEcIkwt1wm3xXtajnJ/g2rVrbG1BzBfMNKdRcxB7Q4+nqsSr5QwS7o5yIBsicYRCuTAtxVBlIaQIEZIVFqexVlAcJmRD7JDGmLch4aFY3nqk3qQekYWynF5Gxsig3lAPyoNSfjblTk4gtRhBqEPqzCyTPVvOGbOe+dxIXcf2tpHS0kppJCMl4yMfgap6k9u7Uafx70OJHWAL1uuVAXRdd8vdIsLSgZt/SNzZyB0ObVhIPVKWlFVK0R1u4wftHA4+j6EE0hCewEbsV8WYPdbgKi7ZQBBBDNVZ3V0mLwa5wWObHNEPFr6b/qXZfPGwn/qECd/wmCxwE+4aZ88+o+vXsZ2dM2pbbB77GyOYgJRq3LJF9CWeJsI0hLvJXYbMNgdoNNRhEYSjURuuaGYNniMTdogASZuajwcip2PszyZbb7S+FatGCRMq3NEsTIPtTZIcsywpmdGHzMzkiD4yHiV4z4fxlcWM9bq3xcK1Wu3T99maZksXL7rt7VU6e/aNyY36ocezFB24x/C9rzGrT7NfNmwEb3LucXdyzlYsyGKwJsuT2ViH5JBOIoWoDSZjO2Q5HssyHDbjDXI5OiwZJ4Ypz6CfWLR8MYxQlI4iylIpWyepWOCGQiUEpexdzmApkcIHi1wHVGK1gkUDe9zdCDLNXyZMOFZMFrgJd4U333yTr34V4B2uXr0K7CKJJUtWrAeBgg2Nou/7gYCBXIMO2zhMCTMvGmwRilFYF5FzDORusDZEsbYp8mB1G8wE0Q+vDOpQ9Egd0DFa3IzeTJ1BZ1JnqBMakhesw9WZ1JEsI3VU1mNRLHiVZTMzPFoiipK+dx0LL27UYoG7gftVqsppmsRbb1UsFq9z7tyBnMhYlWGywn3Q8SJFxBfgKXZ3rxmcYrXaP7KXWVeK2fc3Z50ODsrIJqlUB4mMlEsMmno2WdSbjOqyXKzV/WBtO3gVg3b5PO5rilJNYTivVOLwSvJPPtCBo1QesY3QdikwVwqRlHvv6QtRa4F2XQ7d564xtfwJE44XkwVuwrtwq2oM54FzL0LTPD+I+T4LXN1Iuc1izpoWAHmLWidcJE+YhxQyqZTCEpIbFiG5yfBiAnOFwsAlcytDSRGA36TPEQRpk5wgfCx6Ogx2ZXG0bASGSsluHVjmTLJhlSkKaSwWQTeLUFga9OaKoTCUrRQcz3I3uq6jqRuqdYth5k3S3t6eNc1p1fVFe/7509rfL27U3d1du3jxoj49meE+9JgDmoHWJW0Byg+sAUEmZ6gcaRP3Fpuypc4YRSArSaBjuz4k6DtGy22C3UySbIyWG6rTD7Ojcbl0DZMX8pcpVxurj4TAnFIdBcBIXgzbORwMUlVJEdR1TUTisOTIdYqE8Z04VN+zysuECRPuGhOBm3AL3Loaw2vn4AxFzPf69Yvk0xXXW9gKFIFpKKgggSpIVikizIcMAymjcCBMBpaG2j5ARASGpzKiqbwVdmUhwjEjy0uZLJlFcUFtJBMOxcYpNMqNbGqjaojiHnxWDiZZHBC7oZqDY4pOZl7SUA3zKDK/irCceyyJvdxplmasbY2tTlFViRs3rrNYVFRVRdO8wYsvvnTkqb7yyit8+tOfZqjt+rC/5AnHjTlq163VTTrC4HK0eIAbiohi0U1D1mdoqGC18fMToYOC9wfVR4Ss7L+R27ESGEDJrAYGG7ZtXKljoRIhIkqqdeQsMy+p4SWDQdpUSDGESxgpQaiHzqmSs6ajItE0M63X+8CMU7HD8sqVO2NwEyZMOFZMBG7Ce+KVV+DFMaHyNeDMG3z5y3O2v+05zuxCG9fpF6VoQhUzjA6nHoRvS4LCQbiaI3IpSG9SKU+PhgoIhkKRMS+SB8XyloV8qGkfgXwYahSYBSIwG0xpm+DukbDlEgEXMZTzKkOTJHIRDt4YBQwr3iYzVZL1gSxVqAvM3ByT5ESsUSQWVcWajrRKOGtbdpVKZYZESomqqnj99ddZLpfvtsIdiXma8GHBer0CKrquxSzR9z11nY7sUyzKmYiiU+gldnOQ1DmodToWmlcG842uSIlvOxT4MtYeKcTrcDycSxKBEzFI8phTel3RE5EhSuoOyBmt3jZOuIY/VkGnjlpONLBer5nPF6SUWa+vc+bM4+zswG1yNw7hlqXDJkyYcI+YCNyEO8CrwFngHG37As8+C9cvXICtmnwqsdXCrvaK2Q0nSVrl3prai10sJHeZFCVpwAfORFZxLw0uJMLMrVjqBsk2LCOFlGWysBRIlg1CpiiVUpXZCJ5uBH/zAZkbyd9Q7YHBaaRc4rlNQ5FvGREycFXmptwr3EuiXy9zqxCmyqGNnq060VYl8PsMDe1y39KpRn7Rrdqr1JxtePHFo3IiGyucdMgVNuGDhosXL9jWVs2ZM4m2ffd263sqg5zXVIN1KyJIleGKEps5lJgzydzHeM9B39BiI20z+EgPOL8O228HyicrciUaWnwMdmaFzFKxM0dJoiiO2iRyMeaZFWdsxnDzITO8kEJkJUlcNaoSjQKaGcvlHmYzqmEEuXAB9vaKDiK88LC/ngkTviEwEbgJ74NXePnlT8NgN3q9lPo8yEQN1MauxZC9MGtmWredpVSCzNyLkzTCBdm8MlGSPCUzC+VhXh6D6Fu2wq6iKFUp4yaTB44IZZw81GkIWeTiJ7KDMlpSHpUTBimFsFFLa5A5ETEMipIkNwtpKH+K8BImhxWPqhcBuoieFJWteyPNZ/R94CmUEMlX+KLixo0b5L3M6fnp97bCTfjQYH9/j9ks3bS2mKMqICJjFvJkFiEz9UP5tcBLWbchkTrARbGTxQFH26SqHgj6Hihaw2jXK25UHwjeIJWNFVkemZAPcXE+JEsYESFI5JIijpRxknBpJIPApr7xugVpxWKxYL3epfhOLwNP8Oyzz7G/SW44D1zklVdeZmryEyacDCYCN+E9cSvC8eabb7KzM2Pxzc9y9StXmc8TIWnWzNFyZRVO78Ow0qOwItYrcyJ6c1AOFaHchKTwQSbE5DEkamaZ5JaGLLwIYQGWTREyzzZkomrUz4L+QBdrtMZpLCU0WOPiIGB8EGwoFRlwM4IILxkUSkZRMjEnSebI3SI6PKFY95AMVFHPG7mtqZYdT1SVtc8k+b5b9fbtrHBFY2+ywj36GC2mt8ONG7tsU5NXK2lWWcMaEH097BA9g+abFR3rIZ4gj+1ZJpPZMAnxIWkm+WibprTjGJMYBhPdUDoExvKmPiQ8GCiV1h4jmUtD5d8QUQIJTKlEz1likPgt6T54yUrN4FTCRagfjk9qmkIi9/f3tbOzzXKZuXQJFosLwDPDP/0a586dU3l+D/sbnDDhw4uJwE24JW6ZiXq+FGpvmueZz+H6xYvkXBEhZrMFyhB1iYOLTmAt8lSoUZRYttFF46PEvLBiBYtSymqo6GgWJrIiRyF/ZAsLPPoy8OWesCKRUBy12UYpBqNIjVhxScmLS3YQPC1JFljxzpZgPKzoCRc9e4ukYkHxkhOrKMOuuTwZypURwZDxQHcjc0PSzjbsVwtW72mFOzfpwn2gcAdf1jaQwVZrullAB3VTkXNPH9nqkr1g7irWuCEOdBTndQWkQtLCgzRqF4615Eyb0LYhp2GgckP2qWzQgxsTGJJMY25ryTg1qiHLyIslutQeVhSJX8zS4CrNckH2hJlIAZYqJXNBi1QJpPkcdndvUFULHnvsCU6fRutBYeSllw4n77xyZ89wwoQJd42JwE24DW6TifoanBkTGbaf48yZyywbkVtgryh7NjNXnWq6IrJB5DB3iRDmQzkrQwoVj47JSgxOJlEcq8qBeSFmFiEsQ+6RBaZsWBbRG+RibSPrMIkj8iA/EoakMQPViOJtZQwWKol/hszCAYqcr3mxyplZr4QrSRhBBepJKUE0dNFBdJxqanw9p+qWB1a4Hbeqq9Q0DXDzwFYwWeE+OHjttddYLF66/Q6z4b2Gvl9iZlRk5ayBvHUk09AGBd6XxqcgFQuzFdHoUiWBkoU96vAOGMJHh5q+JVDUYayiIMdIJUI0HMlLbByBNFjecClCoUSpIZyIKOEFlhyLhIfkjkI9KWqgI8IpVU8r3BfEdpD3s+AdvvrVp3jyyTc50MgrmEIGJkw4OUxCvhPeFwdukPMAQyLDc5w9i3IO8lD9ajZbUNehnEXOIqWaFOA+1jOVLAS4IgbLgrKwXFidREQWkYWKcCnKCvVEdKW8UHRStIrcYmqFWhRrpDXEWsQaaYVrDbHavEwr0BK0lmmFxQqP8o7WZtFirLBozbRGsTJiLUVnzhrF2lzZklqcbKFsoX3zSpZqWZezdX1PqltSvaS6cYOrV69uMlJfHMprnT9/3g6e6yTu+0HAq6++uvnemuYNquotnnnm1vta22F9iX+zPpMtSClDrHAyREtEK2ghOogWp5Nyh0dbRORiXd6H9l0+D21Z69KOY41pVdp+rFAsIZdjItaYOoxWZr1EJ6mXKQ/u0MFCbVlmgSzLhpf6jNSrEM4SL9rREanaGAUjyms74PTpx8j5KeBt+v554PWH/XVNmPANg8kCN+GOUCoKnNskMmzi4BbPkuMKOSBij5x30GyNrdfYOkHtiiwzc5mZZXXyKJmoxhh6JsmCZKPoSJjUy6PEBUk9br2I3syziYzRKdSbkwWdFWHSjNGrVG44pGSvfKADN6rMjTHiwmyoumpyis8qWSGZvZXQ7WRejpdIFlQCDVY40UVAbYTtWe5m2r1uVJZtmbNyznb69Gm90bzB4pBY1quvvjpZJz5weAl4A4BLly4xX845vWi4utxnHpl6VjN4EbG+B8tUiMh9qcGbe3CT01up2ZtxDxHZsEFMkUyRYRvSRUvDHF4w+F4Hxj/WtfehmmqiaIw4aPychZKMkoRjJEkVphRBiYtzq4lSVg73krAqIaVeISOFUG6JOjGjYb0uMigR4sqVKywWPc888yyrFbz44oucPw8Xz8HLh57cZGSeMOH4YdPsf8JhHHXn6VZxcLazA2fOwMU5bNfY1u5llstkfZ+Yzx1pTYQb9GaWrLdskcPqKhFd5+6yMMyVzSzMDDN6N7KZZUzZsd6cbGa9JcsY2Y3ejA633qA3t96KpaGnJDAMxemjDJ6mw3IiQwZqlMCiiBJsJ/NSoStApBBpkI1Lg2pcFYRJXstUqdSJSCGrJXOISkqNTEk0SYmZ2vWSyndoUtJ6sWC9XrO3t6ezZ8/ywrUXYBc4xxDkfRAkP7lSHx0c/l0cwgeGdv8G8/mc69ev23w+p21bm/UzcmRkMrq14W6991Z7mKm3UDZTdnNZacMxtOUwtzAsu5PNPAyymcncwowwSkiBFa/pKDEyRsOVV1E9LPFukIjSbiUlQi6olFVFWU7CqojwkldqlaQUEUkyk0WlMA/3pE6mCMOThWRSm9CsFqteOztzlk1m0Wbt73fs7XU6e3bFtWsvsLsLFy+i118+iH4b2/Y03kyYcHyYLHAT3gO3joMDaFt4toJZQtdzWM6uxUL0vQYtNVDTYOrJfRHmyBHmlZdYOCtZohZFkNdcOpAAyXLGOo4ZkU3q5NaDOpP1GJ0o7iFDHUZnpU5QLhIJm8+D2n2JCipFGig5DBIQXkpykSKHGziJpIgeSKUMg1eKnDFvkBmiKbdLHZ0Mtfs0XmP9gtb2LFUzpbRWVRlxI5MXC5qmoXqr4vWnX2fJkt3zt5IVmRR+H2W89BK88ca4dJby87mvpV+zGQHrUkoLh7rvyXmQwVFrloRFyOhKxikZ6MEHGRxyKUBaMq1LBZIiwKMhg9pGzlZyFkYC5yXU07xkn5oD1VAbNalkpIaIHrNaRlJEAPVgc9OQyCAZleR9sciVJFk1SbQyqvCiJZJDPlsQEdoJsc7B2bPP6PRpBgmR1zh37iW9+uqr8MrLU/7ChAkniMkCN+EIbrYCje1jlL4Yd3v9dWgaSjbq9Yu2XFYsFommcbrO7VZWuCLTIfPozUwuZasqsOhd9GaWrSQo9GbqLVnv7hlXb9Ca0Zt7b6bWjB6jM1PLaJmD3mywxKGecaAsrilJijIwlSFR0pi550KmLBNUKlQvCXkYtfCkHElSFaJCuJw6sFqyWsVLVcliLquTXLXS9oK2cq3XSxb7NTuLBd3enlZnz9K27Sgtovd7/hMeDm7xu2ivv/46TfMi1669zTcvKvtKu8dWbmkWje0v92lmYXSd4dnwsNz15p4PLG6ezSJbsSZ3BtncskOY0xdrdNnfzHNxs7oOWeK0Kb1gJY27JC+YFTkQkqSEzCVqhRKKouCWSUJ1YDWhFFEsdGFWF8uzaoUlKVxmdfRC7mnTR4qOYxLUcu9VVQuapme1epzl8m2dOfMsbbup2nJb6/I03kyYcHyYCNyEI3g3gXgvN+obXLw4Z3u7ttnsGZazq8xXiX7mxO7aoLOS0ZkMMsVdGkXM1Hpzp+iqKdy8N1M2s85QmFnrrs7c8uAy7YZBrjOLtrhSvTNTa9CZ0WHqrQiUDjFHoxUuxli4IZliFGmIoeiWXMglSxsSp/DiXqKKCJN5A6qixMRVErVErWS1+pDkSXXalofTqpYvQu1KqmyHVbPPYq/m9PzbtH5yzfP7z/Pa8jV2d3cP6WVNrtRHB+9u8wwEbuvrW8x2Zlw/dd1myxntVkvezTZbCK1WppQNy2YhyxraNL0bPea5hAlEb0ZfwgSs9yJ907lZWAkjiDKZsVGEOsxcG8dpuZuBwA1SwJDAkkKl3UJNqLTV8l5LqsqEY3CpYrVUJiYK6pAlmVWSN0XYJyqlhKSZzHogyb3Wep1VVR1Ns8XOzhN0HVqt4NoLsHsezp07OjGxQ3UkpvFmwoTjw5SFOuF9cJRMvPoqlGzU12jbF1g/29N1oZwvki+VwOZ5FnU9p6oapRQyC7kncg7lXFRJs4Vy7kZpeZFDxZUUMoofVoSgl6IT6pA6yK3MOkFLRIvUyqIV0Qq1YaxFrEVei1jJYiXTsE5rOStJJfMUhow/1sAKi7UltUasMVpMrTlrMzqjXMtkHYoWWW+yns46vCrq9qHO9tXS10v6PkhVY1W95on0JOmZZ7iyuGJVVfFG8waLxYKdnZ3hmU4JDY8SRo7xyq1UaJ8HPgLwJLtpF9/bw33Fer02c7eu68z6g0mE0WKUOE31HRatYR1oXT6r1ZBxiuU1djjjNK+sZJ6uSvuNlYjl8L6SaSVpJVMr0yoU6yFrtS3Z1rRSrGWUbFesF7k96E+5lVmPWS+zDqlHISxaPEvuJacoYk3OUm5muhF7zOdbbG2dIucgAvU9tC9QaiVzfviNOIxpQjJhwklgInAT7hivvFKyUc+dO6fdl15i+SI81/e0babvg1OnMm0b9L3IWeqqoO8bchW4S2ZByUaNkgeXTInQoOGmUFZEHpZ7Eb1CucTz5F5EK6mTcivUydSqEKt1IXAxSImopQQkFXkRaZRlWNso02BaybTGWJvF2lBrsJa0xmlNas1opdyZWzapw+nx6M0JS7klkS0prEQe9RbqSRVWZVnKYXWfSXWzkRVJKXH58mW7ePEiTdPwEi/BeezlkuI7yYo8cvg0rw5s5LXXXuNFin/w4sWLltJVznCG/ZRgC8zWtNZiQ4WE3LZUuYXoDesU0ZrbmlAn9a2pEC2ZuqFdFtLFIAsytNfSprUaSN2ytGUOrdu8imyOxVoWaxSFDFqR2ZHUirwG61TCDHoZPcq9FD1Sr2Qh804KKVKQUuAeRAyvvSWzvFDEdSKKVNBXv/o2b/ImvF5iBM+dO6eXX54qMEyY8CAwuVAnHMHt3Hfvzso7bzs7OywWL/H1r4+SIpU1zVmWy2v0/ZKIymYzR+pNcqvrZH2/AgIzucfasmVzZUytSb1bSVCwZJ2jzozWiiu1tXHZaC1ZZ9Caq8WsxdQN2zvMelP0mIZECBvLa2mofVpsfRamkrHnECa8UkQq8W9UgqSgUUQlLMlsFhGV5AnRhJTkaQ5RhajVeRIplXPFXKYaX8y0TqaqMubLhtViwXK51JO7T7L/9P5YoYGLFy9qJHLlizii3jrhAeLWbf1cyUC9OKf+ttp2d3dp25ZZ35Mlk5WQAfowi+LON3VuqTPLxUUq68zUG/Ruloe2nM3p3C0fcqP2hgVGNizMTWBhSByUQD2otFBqmSRk1ZBVWhEkZI1EHVJSqAarI2gkNQqSRBNGLVmjsKq4U20m91qKFJJQVcusyOu4V0qpVtMsaNv8bvcpcI7bu09vfrYTJky4P0xZqBPuCgfJDOd0fvhlfq7pqarnmc3Q9evv2Pb2U7zzzg3m81Pq6pXNcq2IjmXuaCxhfW+9dQozPGfwbqgLlEVksGwoy2yIYSMj9SW71HpMHaLD6CS1ZupMJZlB0BpRrAtFXiSGUkIaPhcpBldRsHcNGlqWBp24ZE4lKchRWRGKC4UqSvJfEFHJ3UxmKNqAUs0oQQmfqipMshbJ+j2qvrGq29Fes2Sx2/PkYmHd7G01TUnpvVWFhikh9dHAyy/D+fPnDjJQP3agAefZ8S1HsYfaDlmij33VLst9a3UKLHqFOi/u1I6SDVraslmHkw06hTpP1gO5VB2J3spEZ8xILaXlyQamgbiNmm9DDJx6SpJNLawSAjMRSoDGkg6KUmhLeD/UBDZcUm8mi5YgScpUaa42xGxWab2uJNWY9YP17ZD7tKW4T3fP8+rFcxyeh0yNeMKEk8NkgZtwBO8VQP9eVrgxI/VyjS3fvMwzzziXLi2ZzU7TNCvbj85Qb40qINP3XUlIsL5YLCzc+tbknZnWlmitWNJW5uoMWndanM5gZcnKfsaQ1GDdEG9UtOFQZ0ULLtBohRsyGIjRFucgkyxREhmSRFKQKLpYtSgB3mKwZqAKeRNSLfdKolG2Wk5TrHbuIi3UyrCYY8pyNWr95oSGudZPPjklNDxyuIMEhtV1m20vaXOmWYTtL1sazOiXRhJ9rKxWuNERdG7Rl3ZurSk69zIJcae3onfYm1nn0OPWD4kMvZkFRthY9H6o/TYUKgbZqP3mChIUCxxErWxjwkKNrIlQJWgU1JKawBpkTeQo7dtsJpmHbIaiVkouqRJ1Dcw31rfZrFjfVque06fParWCtn39SFb14Yz122W1T5gw4f4xEbgJR3AnBO7wD/SYkbpYwNYWXLr09oErtblGf2l0pbbUdTKpN7UlK7S3pZn17hFYdIb3Jq2KhIhaE4XIKdriQi0uU3PWXtym7SApsja3jo28iDo7LCliGnS2FMVYMcjUUaxvg1RCpUEItUgwUElRXFKhZhjkKkUUl5N7rUwVUo2YyVMdWEJWC59JqZJpTkuWU8uYUTtqqsdoFwvatuX06dNarVa0bXtbV+rNLqgJJ4uDNn5Aol977TVbLBZsbW1x/fp121ouaba2aPuezL4FZrS91Z7pY79knqYw0xqLrkiIDNnTUmfJsqO1OdmwzpzOocMtF4HqIqmDWRiUeqkjgfNNEQYvBE4OVjKooUJUCmpQpbBaopGsLq5UGolGoUZmZeIhqlDURGpC0citQV5HlWaCmhY0Z661Jep6tnGf3kq8993Zp3bb5zthwoT7x0TgJhzB+1l8jlrhXmUgGwbFxVRVMJvB9evvWF0nVqtE3y/JubXZrCKiNymbmahpDestt62FjXFDS/eRhHnnFiuSda5YmdPhrJ1C7DDWhlo3Wpx2I+jr9AZdkRJhiIVDFGeRCMqYKIwIw0b5BR0MghupkKgJrwRVhGpks4ioZVYRNGHeFEV7n4lIEnNSXQcpqdOMIqJfKalR2l6oqYxu1fD+FRpub8WYcHK4uX2fPXvWdnZ2OHPmDPOLF6m3t213a4u2vcisF1lmjdYWbbY2iya1hsIyy0LkYmVm2aTWEr2XhJrOk/XFeryJ7ezLZMZ6BgtcIXDqzbyU07INPxqK2VupvCCcQuBqSRWySkGFVEgbXoibaJRpBM0gg9NEtqRgLqdRWK3kjZRqoSRigZVKwXI/xXLZKqWGxeIUp093Wq/X7O8/z3L5Gi+9VMR7j04+JgI3YcJJYiJwE47gTgncaKG4rSv18gVms2eYza6yWiUbSVzTJJMysAJao+/NcrbsSzx6x7N5v8a8NYvB0haFtDmtWZT3IuxbiJxoyzY7JOyrDjQMhMqDNkTGbCjMIDAbrW9J4IQSRQC1KnpY2lg0hDUKijXOfKbIdcgrUFWsG96gEhAeokbuIs01JDQwJjRUyTSrjHbZaEho4Mknn2R//3BCw5jJN7lSHzTe9Xt4HuMcvPHGpoQW8+WSNmebbYkcS1ObTZYht9a32Ty1ViGLvCrl3qI1s95Na6AdymiNwtSb5Btz2pLxXNyoA5ELzLLhbAjcaJUNBuubEhsLnNWD1biS1JREBqsFMwV14DNy1GHeKFNL0YTSDLemlIeLhNKiaCPWW4IZvnalU0nr9YzlstViscPp02e5tfu0tNnbWY6n8WbChOPDROAmHMGdEIX3d6W+yaVLMxaLiqZJLJfJZjOn71fW9C2Z3tRk1K6t75dFfd5aLIYqCyoCvbKlJfU2Sn2Yrc3VWtFway3Z2ozW0EDgiuZWqY9qfbFekHFyiYNjYG4arHCA5CUWjqSgEoXEFZeqjZa4RlitoLxQLflckZPMZ0KlHqqYqacIqSZbgKfBlTpTS42p1qntoK12xgoN2lks6J54gtGVOg6Gd2LNmHC8uJX7lCPxb5e4fuoUs4HAZfZNrKHNhgdEZ661mVTarMUYn2mmlUmtl9jNYnUbBaqNzksIwBgXmofqIqXIfamFqoM69kMZrZHAgRfipiR5NbTdRqGGQtqaQ/FvM6ksb1yqYoYsRfiiEDhfhOSa1QvatbE1n6tb1WqqhnbRan9/h729jptrnx5Jor6DbPYJEybcHyYCN+EI7ogoSEeCXd7tSn2DqnqB2extrlypmM8rVqs9a5qKrlublIkIo11h1lltvfWxj5ks+qVVHgOB298QOAYCZ7F2txZUrHM+xsFZa04HVghgSXbIEB3OmMigIdu1NHppLAbuSEMpIqqiWK9qsKjVkurikrImoAR/B5XM5gQppAb5rLirsuNVLZgH7gwJDRoSGvBFc7hCgxaLZzl9+jTr9Zq+77l27dqU0PCQsPktfAVeffHAffrS4iXe3HqT69evM8S/2UH829poi/XN0mABVlcSEWJtiiKJI61J6l3qzG1tbt2YnDOQtmKFM/W4ZVOJ4RwJXHnBUL9+aLdWMlFFQuMEhEpYTYl1qyOsoViPC4GDWcgaGbNigaOWmB2SEpmp8oWoXGsqFtRKvk27rNSkRuvFetNeD7tP4c7c/tN4M2HC8WEicBOO4E5Jwq1cqcMMfFMz8uLFt9jerpnNEsvlDebz2vq+pcmdhcKEkLX0/dJqy2ZRrHHRr4o1zTv3WGGsnSKsa8ZqcKEOLlWtN65Tt3YYBMtAWOqjZjPLuDJSmBFjlqEKeSv1JEUqA2KM8UOVsOKGCurBEjfbWOKKVW6mPGSjZmaSyn6e5sKGLFaf0cmkaETtHE5oaFcVy6bRYnSl7u6y//TTt9eGu4vvZ8Ld48hv4atw/ix2bgfeOHPUfdosFnZ1d5dmHqb1brG+5dYs94Za3NZG7lzRYtYVbcPculkp+5asO7Aaj8RtfFk/1PkdslCtB4tSB3XEWFfUhqQbS4hq+DyQsiGBIWgQTYwEzmgka4TPoo+yzdOMLholq0ooQFqoXSc19RZrJPdtVVVF0zRarVacPn2a1eq5d7lPj97eROAmTDhpTARuwhHcOUHQoZJDZeb9KnD2fBE9XSzg619/kxdeeJ66vsDubs1yecNms5q+X1vEDWaSrdoWs94sr8y8w7S2ylsLtaa8tpR6s7w2sxL/Ji1LrBBF3LckMqwHod/W3HpcLVI/WuHMlHHLRQ+u0MZNEgOUMlgwkLiSyCBRF+Kmon9VtLVqZWqwWUCjTCW3mbIagiqsxMEF1FKqkc2lcOEJpS1ZmIyKpEatQ+WoSY9pTGh4Ym+P1dmzvPDCCwcP+Z6/nwl3gztyn65WzLa3afNVawLLOOr2TIP7tNe6WH/zIGsTXanxG62JkkltKsLU2LokLtBthKmNdnCfdiVxYSxwT4AFm+ZgNljeSrtlTFqwNFjf6mEy0QivFcwGC1wlbBbFZToLWSFwGkhdaa8JRSWqmVBibTOZHRC4nf0dPn/EfXp+E7O5eWh3KEU0YcKE+8NUSmvCPeLgR/rTn4ZXgJcZymztwnIJT597nr5/k7feCto2s73dq+8zfZ9V1zV91atKPZ57mZly7ocs0SIun5JJWZKFNNRGHf2fkgqFLGXpJUkmCYUiNA54gggsJG1qrTIOiEOguJxeRWYkyy0jsqFSz9LHjEAyRpgpy9RbIYiBlA31MgsjeojeRDbPmZS7oionp1JXXpXUNUGqalLdUDVLq2/c4NmqIjUNVVXB66/z2muvcf78+c1DnspsPRh8eiifdf78eSvls4Dn4WJdk6qK3XTD3BPrtqPtero+YzkwDywL8+GlsCCQSh1UUy4vOkSPRcbocfU4fRGqJsvKO0Qpd4X6UlaOfPBSFlHejSzUDyLWmSP7kSmihxm3kFvIFEUUOHqkkJRBPUmBug4pqKokKWiaWo81DVs5k3OGS5e4wAWefbanHYqfTqWzJkx4eJgI3IR7xuGZ9mizePXVVzl3Dr30EvD66/SHaqV23Wm2tnrN52VAyDd6+r5T9o7kHTNDEVkRvSKLiBL7o9Dg7LShQIGGYLYNhWPwMJXoPAOTMOLg3QIzbUgcGt+zUYgcQ41IRotdiUHqcTLQYeq1kXgYpU7UYpbNy4BongIvpjZEb7LOgkwokzHL686qLKo+03bZVuueqmnsWrOLP1dTit0371PsfiJxJ4ZPw8sUc9JLwBtNQ/X221SXL3OtqkgpYSlhnli4M5s77mGeRZOEd0V3MBS4+tL+VKqJ2KBFaGN7izJJKFqFWQz7DYRsUwpufG2OG9pqaa8xnDdjhDg0UREhlXYuDXqIQU/ksbxcae9DeAEpmarkIoK6Slotl0hBbAc7OSs/9hhnu254UK8fqSByEPv2sL/ACRO+cTARuAn3hcMk7pVXXuHll1/m1Vfh/PnzLJdL2rZlve7puiDnr3PpUtD3PX3fq64qquRUycnJld3wOsktoTL2KDAZtrGzMTI3R5IJKNttzEyA0UhX6JtGA52KgMhA/mywUljIimViU7rLrVhEbCz4rQ6zDNabWc9otRgGVnPrwTrz1EuRB0tcZ7JMcdi2pr4l1OOVSFVYVwepqg4Vu59x9eqMy5cvsyl2/9LRYvcMVo7JCHe8OOw+BeBlOHfuHK8vFlRvvUVqGlJdk9Iuy+Wa9bq1turpqkyfgz4HWR0RPaFC1p3AFBg9isCUUXTF+jtYd2G0yvVlIjESNYWkHpHHSYOMfiR4hyxsIZERISykGMhebIgbYym68pJKdy19wN3kXjoI6kAtUiAFrNfMZsE+e2xHJk5nnsiZrwJ93/Piiy9y/vytnubE4CZMeFCYYuAmHMG9xVi9Ox4ODqRFzpx5g4sXL7K9vc1sNmO2nNHmS9YvwiJgpjVqe8PXRu7Ias2GklqK1iqtS4UGSgZfEUVtcbUOLc7ajXWJHWJtpg6nG85REhl8dE2hElOkQVJkyEJFViozWMnoY9SAU0XQlJJEqou6vZpSWktFtT6YEarkNmhrMZNbI6UKchOyhOq5yEmkBRYmqxdygs7FOm2Pxe5vqw137uI5MWnDnQhun3264M1SfYHlcsnWVmeLXnSBzVijNrOO1iz2S+IMXakIknsvUjZrU27Nfe2KlmRDRRF1htZWxHxLLJxbhwYRarNhwkA/FrIHk43Jp+VuD7VVinivSIoxBs4bKUpVkFAR80UzZW8kzYvor88khjJw1ohUSfkUXVXLMJm2SZ613ocmPabVYjEkMByOf7u5csidC4FPmDDh/jBZ4CYcA2wz7x7J22FXarHCPUvXdeScuZQv0S8WzPqZmtyTc3Hr5GyEG27ggwXOMIWVdysBciUOToOi2/g+3IMVyXpU6kWWyvXDsHHY+nBgtIvBwhFgB64uG7Tj3IJU3FUaRYEHF5bJRstJR7LihkJhJaYpF4+W9SZ61HcksiX1ZPWW1dqe1nS9qNatVcuGvWZpze4uz9XFldoMrtRz587By7dypU44VryH+7Q65D5NY/xbyuYe5l7hKeHKMmUzD5l3KMrkQZFVWnGgiI3LXtGVEE3rNboyzbKMsR0elIAzQoOLdKNnaMV6fOhdjKqGLo2yOYw9RAhXKdfLYBsWosxXokjp1EXtMBTMFUQsOHVqizjT82Tfw5e/PDys1zaP7ZUpAG7ChIeCicBNOB7cwpXKxpX6Is8919O27eg+JefM9XyN3PdErqmSSTkruSkchYE7uA0eHvPCx5IPZM21qWk6WCZiVAWRYYNMCAfJeyXRYRz8hsGryDOMOlshPxSL5BR3qBVX1yAKXCQeUCapbEvE4P7qLZGFZcNapDWKfmCfvQnR9muCXlkdVZZVOaj6oO2vUi8bbsyWXJ3tklLakDiGhIbR0jElNBwf7tV9mqqM58BzyNXh0VOc8YGiN+VcBH09BlKXJWWDXkRvxVVfZEIU2UQGy0PcWyFupgPShmJI7ykxbUM4AOU1rhvac8nmObS9RB6UQFEJBfIgSUoK+tzT9+VZtG2rljWzpmaffeAG14dndQHon32WF9oWYEhgePkOn/SECROOG5MLdcIR3K9b7rA7igNjkb3++ut8/etb7OxcYrFYMJ/Padt3rO9F7C1ttnBg3+hbzHsjWotujdG5pR7PK5PWluisiPWuzYaKDD7IiLh1hoor1dWV6g7FLQXqzS0fSlrQkWCy8imBTEXUt5JIxCjoO7hSRY3RKKvobYXNYCPRULThVCo2YENZLXwmmZdtNiynSianJcmpuVdtuKnY/f3hdrVPD7tPi3hvZ+273Kc3zKLH1LnR4XnQcdPKTC1Y56UWamcWa8M6XGsvdXpXnqzHaIvblc6gM7eeUgd1006HYvaBeZmplGwcR54kEpR2WrTfrAaKq99oFDY7qIFqM4I6pBnyJsznwiqUZ4E1dF6pSrWILVqZthfbtGupti3a/Vr7gwt1f3//lvpvMLlQJ0x4kKge9g1M+HDBRp2PQ56+8+dhZ+dFnnvuDS5efIa6ronYZatb0PY9uekVeW1YgkglazQc94pQqxSyMKdyRyXB04TJy4hWSJc5wnDMRjeqFcGsEug22OTYDDrFWiEdpj8ZSGBBKBslQQKGs0KPZAqz0WFryVw5HDcf5UdUyqx6FPeqS9ahmIH1JlCqKxB0mlGFzAgl5aIN12SeTAtOpUSua7rZjKZpxgHzAANBlqbMv+PCyy+/zBiZ/0bTMH/7bar1Gt/ZwVNJiUmrlVrrrUlhTjXEXQrrR9f6kLzgYZE73GLQHwyMMMhyshtSqdUbKvbmjLlkFiYNcZrFOqwifTOQHwPkw5c+WpAHy3KxVstcOCW9oVivD6x0JpXyqRI5Z5xKVEIWVJFoW6Bqmc122N9HiQVU8Nhjj7F9+gbr9cP+liZMmDBicqFOOGYcZRNjLBy8Rtu2PPtsz9mzQc6ZyFkRwWzW0NSV6pxUOURkhUthwj0hc7m5FC79/9v7vyU5jqPbE/25R2RmVYNNUOQGaZzGEFd6AABg10lEQVQjzZZ9xjkXOldjfAG8BJ9HxufhS+AFcMsxO5v2GfeRzqctYkiCaKCrKjPCfS48IqsaAKl/FEFKucwa3Wg0Gt2V2QivtXyt1dariQ02x9S9DVTSfH8xrAk9XMRd1uwRwM8sgbd9ImtbdK3wHnOlukhzE0olDtEakSFY5MO1ii6VBZHI88KruFfUTdwWkMiLU6miVJI4XhZ8meUiG45lNLnMhnv2/Dn6fdlwnwG/v9w92liNvwevyKcAr5FPNd1wG/IpXT4tIZ+iDmrFzauYGk64R70aoo6boRqDnXpxCbndVSyGuza8xVOSNS7E285bj7+h5xfGloB73KPnfbj+i8o5KEc6Wdf7U93jA5oYq0nw5GGILTgsDENm9AxHgAPwnO+Ar/m/2wP05Zu+bBs2bGjYJNQNd/BjORvd/bWp9uM43qklmmuVcuXsXhyo+1nAhDJTLdykgy6CL+J2aMn1M+JHDfl0Qfykygkl0u3V59bA0KTUeCFkqyi3P+dnBWsRBEb8KIi0jBILaap1o2IMQHYL6RRjbFJqSKeVEaJ/MtyoOjk+4JoNn3BG95TDzSrZXfaOJnBcbEKGvasPPqswKIz5Hebb263s/p+I75dPX+4+Dfl0MKghn4rbc8EKpbtP67HJpwviczQtXMinvfc0yQl8ViFkU9UT4kVEFlFdaDE2gjTzggYTJwDaFz6jAxVN7pJx8iqhwohr1L5VG5wUdVowGjJ5tQF0isqsOrizc0/7qNeyDKYu+YqTi1/t7vmYJk4jfjoNvP18x6lJ+puEumHDm8fGwG34p6EPby3ZnsPhAMAf/vAHSinY/cLVfo89q9RxwG+NwZKbJVQHVDKLC8WriygikaXgklw0uYbb1JHgIiQONncRB/V28rmBx60uzX53ZuAiL8udlelw8GBHIlq/Z8PFgnnEPFSUxdtQ2MwLzdCgBZeK+iwiBczEPTLkMGvZcOUiG07Q7J6ysQwmKS+RDXc4kKeJp9PdbDgeRzzLZmj4cfHJJ5/wkId8zMd8MX5BzpmcM5rDYSop2hd0KSKphrxvRbS7RxOrfOpU1GoI+LbKlyC1u1C9GWeahr+G8EZotMf7Q3Z1LuTRZlLoC5z9mrd8N4ltApoNQhodp42JNgNU3EVQF19dQpT1cfAh+4mTT9Pot8DNm74wGzZs+F5sA9yGfyq6I/Xhw4cONBn1Qx48eECt72C1+m6aMDNsyH40Y0jFzaq71YgUkYRLcjfFPSyqbuJuyTXe50Ib3ETa0k9jKuLPWC16IpxPxYt9OM71W6G21qgd8p6gH5JqhP4WVMJ5qhruwQhdXcBNomor5DD1CPkVMZQFpZIqpBoHf/Iq5kXqcSbXA7kYepo5DAO3h6jZ6m7U/MfM5/vPub4OKXWLFfn78Xr5FD7ff07+Yyb9+c+kb79FU+L2cCKdZlIuFDtSjyeqz0hKqHoMcL7KpyLu4lhrWoh7OK5/PCmIe9oQmlGhu07XocwiTkR6ALU73u/L7qSOb+NuOG9/ryC9oUQjjAQRRAUVQeOORpO0ui2FspBzcoBxHOLz3LbP9xT4v4kQ31//+tV9zI6NBN6w4SfFJqFuuIMfU4p7zb31qoy6OzDPVabiVDvg8wtxcdBFip1QWySnIlZOEvVBJ1E/CZyiGJwI9lVZED+GG5U5isF9hii+D4mV2FMTr4gUwdt+W6t0WFeFTBxJEFKqQ6Z6Rsit4D5kUGOMcF8fafKVVzL46MjOXQc3H1DZeSW7kx0dQ04luctElsHR5IuNyCCO7Ui70ecTZI0A1bf2e+rpxPI9ZfeX4cmblPrX4fvk0/tf3efJOxE6fSmf1tsjJotQjCGdwIqIh3NUZEHqScwXEZ8RPwjMmmSBWAWQcJuewE+qLAiziC5EsX0Lnm4Bvu1FzgX2jqj0pTYi5U1BMy4ZJLn5gGsETpuPbj3Ml8mRyc0GQtYf3XVwZeeF5E5zosreXbOP+S1fjiC+9xMDiYkx4acXA893O+7fvx/33yPgCc6dEnv4S1Pcdt5s2PDjYXOhbvhJ0A5Jrq+vQwr8wx947949buw+Zk8wc8wNy+ECpShJh8hrs+quSSJ3TaM5YZVEU0injVsg/twVRSSFY6/tDAki7uFNPQf7AuEVbQ4/2hlk3eEp7rIaH8RVHHFxDfm0MRrmgjdXqomDLOKuri44haZviaTq4pUS2XDuwFIE18JYMzI4czVJefKUhJwP8ux59ev9fjU0fP755z1WRJ48eegbCfePIdyn8Pl/fg7/J/xm9xuePXuG5szt4TnFwXJhimGfakjvMQ3DQVVpErpQRXrWtIXhpRtg3MJ1KlTRqL4SxFyxxtCucqv08N2Q9vvg0wSTdUY6D0PSGhqaeSFW5QwkQTVwFVd3R8XdhSpG0oFikJJ6MWAB6sw43iNRUVXm2Hrg3V/9inuthYHH8IhHPOHJGny8YcOGnx6bhLrhn47Xyajlww+xBw+i1L5WntW2B+fGUBNm6maCmWCaUNGICnF1N0E9uZBa0LyGyCTq7skRIdpNiWVvtImksp54grqsi0TncF+RszNVWmBqHK6tdJziSkWkyWM012k4VT2ksOiUFF8kGL6CeBFNBaziXiK9qxYUI2GSvfSye3rZfcoDtzkaGr67uUGHgfynP91paFhrUtee1I3h+Et4nXz6+Pox/H+IxoUL+VRT4i1N3NNEKhlNNSJFUkI1oalKBO42D7Q6jiFeW/S0R6OCRIyHylo0L/F2yKhg7o1xa08HXDBPsTTgzU3qrRa4bwN411BaRC+0KnsghjVrfgfpzagWDlQVr0BSpZRmz8mJGThxos1t3LtXsbeveXLx+D2+aGG4i4393bDhp8QmoW64gx9XgnNec3utMup3333HW8cjh3v3qPWp7A2MGbTKJAY1ZFRJBxm0itUTYiFHCbOInMBmSXISfG6hvrOoHJtkOov6jMgc7kBZRLwgsqAeXZO9rqh3evfUuNg4UpCEm4KkcKNGRyrO6PhASKNNSpURZ3B8xGRyGNx6z6QMVEaH0UXCsVpQT2mHS/ZiyV0nhjS42o7ZK7offT46Wa45jre+fzHw9m7H6aWe1CdPHvond6Ss7SD9IXyvfHr//trZ+1r5NBmDOtRbkXkJF7QsYnaI+8pmET+KUsQ5oj6v7lP1k4icJLEAsyAz2kJ8af2nEeJbQar0oa+ZFoJrk+Y+leSI4hL3I5KjA1Xi/qo+IDJ6Xe+7ydxbgLRPjoZDVXVHMfWUr3yx5OieIU2+nECmnZ90QHViHN/x4/GGt9+eOB4f8N13331PqPRfvu+282bDhh8PGwO34Z+IlzPholrrd4dYgv7ggw+ov/oVtVb2+wmzyjjmxsBVLFXSBKoZX8TFUlRqiRCUROwERRp9K6QnmhRaZKlbY+0QPTtTuwtVonNI2lZ4rPD0nklH1Zp5wZxuZpCKUl08GLjOzomGgzAGRHNhCRODFBEpLRtuWWu4ihVcqniteBgaJHnFoieVPDilGCmP5OHEu+k9SR9k9Nev9qRuLNzfgruPTXef7vd7AH7zm9+s7tPbw4njPHPKJdyoxajHWcygpoKmcCZLa+wVDJdwoTYeOMwta8euuTe2LRILG5vW79ZVQu0dvWdGWNdOLD9zbCvn1jqA299GwhaBg1n8VKiKmzUWzkBbBnZKSgFySmQ35rmZGA6wt6n9O9++6Yu2YcOG12Ab4Db8JIjh4jMAf8xj/2j+yEspXkrhfim8VavvxtHdKjZkt6xNRo32BWuBvibeAn0V8exCiiEMcRElKqvUm3Taeoj0rDcBEi2VF7lvctZRIwK4xzSsklcwIRHwSz+UpbRBzhxfEF9QqbgvLfR3QSje3ahhFjTcZlQWUjVcSrgXxTEq5gXNoNW5SpnrnEnD6LfDwZ8/n3j6dCKl5Dln/x2/88ePH/ujR4/47LOzkWHD92NtersrnzrgOWdPf/6zp29Tl0/9LJ9Wj/eZR3QILMUplB4f4o6RmsrpVD/fWeFe7nEirYCeHs4bJgWL/tL29zWGt67BNmrY1m+jxVO32zrua0S8k3XheRDXxjGbgYq4Ip7UPdYKzCtEH2qBBXwYjBO4T2P8O8/wi/nN4X9cFqxu2LDhDWIb4Db8RFj34Pj444/5nM8BeLAsXt8pWH0Ls8o0DYxDJloZRpIOnjTjJhFbZYpELpc3Ji5kTkluqOPaGu21Zb9pTGQW7QzSMuPWtoZmXJC1uOF8ZnaCQ/pBG9VHwczRMuEiGLhJXi06hBqSmlfcTdyXOLB9Fvclorestjy5iuKSMJIbwcIt1OyUaszlBXqaJR9OjIcDKSW+/fZbyTnzxfjFxsL9nfj973+/5hMCjOPIn/70J54Mg6T8NAY47dlvGU1Vis1UQ6oVzM/sW5RWWZu3rO9HRgKhWHvaYNI3Mfvgpm3nTaVVcFFlHdTkfP/1qbNnvb0OIlGv0K96r7pHw26j3dmg0ka/GsVxHkdAzok8vOppe+utqx98HC9TWDZs2PDTYtuB23AH/4z9qVfusUfAQ/jiiy96nIi0VgamK6faQSozIyZzmRF7LuIL1WdRimQtiEWRvfsx9op8FuEo+ILKUYRZeoyDyiLqM84sSQrQ4hsoSGNQVNqBu0pZK8eBiFBNXSRhlnDPQMbIDiPmQ8Q3RENDxIwwuNHK69m5kd18pJXdg2SvTC4y0RoaIlVfslN3uGYXExh2nnwk3dv7mIXlOHKKUnE/nU789va3PD487rtwbLtwP4zX3Yufv38n2qbdi08pDjtmqZJgMcFeIKnEPVZnoR5EpCJ+Eq8nSdEaQoqYG/CTRDzISdRPRLxN7MAJM0lbswhF6CX2TYpHTO7uvwku6t7jbSSB5Li/ZPDKEPE00l7HC94K7WF01wF89MoUjQ1M7nlw6s5JCa9XvuTE5G952gmnNPp0cq7Gd1hu9ywvXvjx6VO+e/99Pv74Y4A7bSvbDtyGDT8tNgZuw0+Kzz77jEc84vHjcLL94Q9/4L3WymBvVW6sUqcBN8Mtka2SWitD0oyKhlgVrtSQQkWx3tAgGjtxntwsDj1zdWvSqveQ32h1cCRiRcz7al2XUeNTq9hZSu3p+GKxF0cFSnOgVqA6XlBqa3boLFyJeAmpiM8oJVyqFFSWcLXioo2F0wQpOyk7uTpLNeblmRwOA7d/FQu3tTO8Dt/rPuXSfZou3aciIZ8292ki5NMi5jW6RKNEFFEhAjpKsHBxR0I4Uj2Y3WDkdG39qIR82m7ji9YFuobPSjS7hrG0NZKsnb69474965DzVW+BJgK4CmbR0BC5OeokJbmSsuKeYDAGzxw5cnsAXsAz4Jv26cqHHzL/9//+pi/jhg0bGrYcuA0/GS6frT9+/HhtZbBp8vrsmVxdHZjnSr25xckc5dbHpEJVL6YypESN3DenqiCCMOBWo2KrZ7TF2ncUBpGi0qrJqv39htDKudyR3vV9N4t0PQqt5c9VD8W1QpelvLp5fH5BUFGMIkpycxEku7Dgrm1vTuMQ94pLEreKUx2tEWwiKk714ohbdhlc1IqneWTW7+T+r658ef6cut+TUiLnzEfzRzx+3Fm4J1s7w19Al08vcwn/9Kc/ce/ePbkqT9F0hXridDxikiHNQl0QK40UE8QjkCPW0wy3gkuRnuXmVE9iglVCZz2X0nsU0ctFrIg02TTMDdJWN89VWe213JnIrVWjCn0wax9FWy2gTYMi0V6/yqhOwnA3rwJeCnmcKCcgn5jGt5hPdx+zPwNvt7c7+7Zhw4Y3i01C3XAH/yzZ7XX32UutDNJaGWitDOLzC1xcqAtoEUm3yDKLUDAWEU4iMuN2lMQi4kfwRZSTqMwIsyhzlIszSw75KuIaiM8T8SKxwyZrrVHP42K1NcRJqZgpkDFP0IrunTHKxBmIl5BVXUY3JtyHkLp8dJcdxuDI4NVH0MFFdkBy98k9h+S6mOKafdSM2M5nH9B9JfHffD4eGR88YJ5n3n77bX+p6B7426Wtfwe8fA8+egQPr+GL+1+8Vj41ZpleL59CDWk0atOOJE6CLwhHUZ+lyaeEfLqgHFf5VJlRLeCzaJdOW4G9Rl1bzGp9XtOQ8i0iRECyI4l6ESGCNLm0NTKYj24trsaYHB9BR68+uqaRyuAeEr8jO9wypCvHMuqTp/095pP7IFfMtwO3++94++3/t9/e3n5vldYmoW7Y8NNik1A3/OR4udyeLqNaifgQq5gbNSesKpZKtDHMMdS4aOv7FncTpEmjInl1oZprC/htzlSSWw8DpkfVSz8c3b3RHD1hBOgEhst5mbyxKN5CfltAa1QfRcNkRajeDQ3hUi0tYiICgNveXRzeGNHIYC1WZA33JSUoBmVw0VxI88BcvpP7v0rk589JKa0sHASrGY7UrSP1ZbxOPn348PXdp10+vfeyfDoX16VgXsVTxL+sblN3nNLCbXpESDcwVLx17Wofzqhtx+0c8huh0edQ6W6uuWCF11vXiVt3zb/x9i0K4cmWVmLfqGXUwQXViNvx1lCSXEmeICePKgbwaYTbA35VAXjnncKDB+85fPmmL+OGDRsusEmoG35SvE5GzR9+SGoyaq1PeFadnQ1MGMd866OMLMtRBs0u4lKJZgYTFUwdz6JUr7agkgRSH+pCKA1lNI7DLqOKhnS61mvFkXmHQ1j/1llKpTVumQh4DWcriiGOKOLJw6GqWBvoFPVwLSqmBSRhXtpwWVFMqpurFveUWOoiKU2+LAVXGCsutmN2I5XK4TAw5hje9IlKfpF9fDC+woycH+u1H2wDd+XTj/cf8+Vvv+TJs0GuSkHT87vyaZkZkjvJRDRJrb0yy5AkiJmIV9wKSd3dq7i0GBDvzmQDMcdMXGMjEzGPPblwpEr7O123bwttzUjTbdKc1dTYsoudzyiCa8NbrxaJj9f2L9ByEcFwVYg8HshKsUL2iaVF83A8Yrt7cGN8l7/jwDurfLphw4afDzYJdcMd/PPktte2MnDZyvC/7/dy83oZNcrtTyc0HSSnqKayuiCcxP0kiRPykoyKzJKYuSOj6gIe78OLaGS1IRSJSFOj91fGUdizGbRJqS2axBUjg2e/aGcABq82gAxUH1YnoMuI++jmE8iFQ1V27pKpZFeZmoMwe0pXFFN8GN1rRobJMaU7Uk9ZOB5H9i9e8PZu56+2Mzzhb03J/1fG3fYFePDgEQ+vH4Z8+mTHs9MXcri+Zr+f4957cRRfCsOuRCPIfASWkN1lEbED4kXEZ7weRHURsSNItC8op1U+DSn/RJdPpUn4Kssqn4qUZm7oDN1dB2oEu6UY/smtgD6H21kG6M5nWd2nxD0WxfYwRdm9j+4ppFWXyUudcBnAsg/pnuuQmdmTZGBMk59GOJ0G3n6+89PNDbfvv/9aCfWvvb+282bDhh8Pm4S64SfC61sZuoz6wTxj7xXM7r8qo0aoL0lBLeOWcVN3CYZCUK+tPdI92hoQjSy4l2XUYOBiEJPIw+8hcO7a+Y67MaXSWDhpvZYeh6z27lOJoU+o0dggwdIoa74X4gX3Fu4r1gbGilgVtYqa4xaF5ppclrqgCrYUjEKqJ3J1NJc1F+7dlEg5o8MgvSP1448/5iEP1+Ht0y2oi1fbF+Dhw4d8vo8swj+PfyYNA+nmhsNXJ06nWeZc0KuERvAbkhxVR1v+m2MSfbelRURXxKMTRHpgr3enaaX1yLd7qLbs3W5siDvXWwZhlNifh7iLHx13uj+BVfaP+rcml7Z/vVU4EDE4isjFE5BzViLx1CORc2Jm5nTs/1DlBuApvPvur/gvoPz61214e/SmL+iGDRvYBrgNbwC9leHhw4fAudz+z3/mbrl9GRhrr9YqbiaoZDeDxQW1GMzclSi277Jo8urq0oI5aAG/cbs3N6oLhLza6rd6KPBq/7t4cffYT3KkpZcQyfsikbRPa2hYX7w4UhFKe5+tga3eCu3dDZcFl9ifcllwFrxWlAXFGJOQDIohxU4s1VhKJc0jt4cDz6cDT29uSONIzpnPP/+cx9ev7sL9OzMfr21feHyOD/nf+N/gv/23GIZTQjRxpYouhVs7cfQZUad6BPjG4GYeZhoHjfehcW1jeIvdyMsgaLfq0sN9494JGfO8X9kLeddFOLmIEYFW09sdNj2PGtx6N0N7MtKHOO/6v+Kx/2ZR6+Aa919SSOZ4AsuM49C+B7hnUWTPk6/44IMP+gPHo0exx7phw4Y3i22A2/AG8OnKEPVIgi+//JJlWfzdWrl3b89+P+FW3YbsZoWsE2kamS1ONZXIghMyotHEIKq4JGcd6HIbzBQ8OYhbpGnFx7Xe1Cit1/bna07c+tX2s9J7FEQ7X1sEhGvkwrVDuTFvZ1YuulK9DXONhUvqkQNnFbFKxjoLJ4qj7hiGe11z4Wp2arBwrnnuHal/NQv37zzEBV5qX/ifvX3hiaSnT1dTyDwvPi+FpVa0ZtHq2FxQA+usagxxuFl7CtCGtGjscKfi5h6MrXs3K0iry1oletxFLAjilmPT998uY0Ta0ObrNqOD+OqwgQgicfM2qEXvb/v74lSnujia1oS5WAuwYK0HYxgyp9MJwN0mvwHgW54A8AcAHr/pS7hhw4YV2w7chjv4Z+9K3bnfPoNHDx5xfX3N/fv32e2eMAz35Obminl+ErtIfsR8FsSgLCL1gPhCpe8XVRE5ItHKQKKKyEnwE2KLJD1FXAMnVGbEl3PEiM+ILMAiSQq9oD411kxWhq2lbHU+jnQhRyViBy7hNvRdOHcy1YaIbrARkdGrj3iLe8AnCjkiHGRwvO3CeXbVCdcRJ7unq/jzmnDNjGnwhczJR1f2ZBHG/5a4Pu4ph8O2C/cavLr/9n3xIZXJb6gkqswitzP4IuSC+C1SZxEpmC8ifiL7LMaR5IvALGIzEPuYEPuXwqntWc6CzySdY+dS4nPFwF8QfSk+ZL1Mff9N285bvEaGiAwh4zK6SY6dN0bQad29RCaKDdH+oaO775zW1gC7+Fw6uqcrxJIvTIjjSTODPmA+vOC4z7z99uTH41O+++799b76/PNP1v7dbQduw4afHhsDt+HN4FP4jLMMM88zpXyvjOoXMmqTUlMruHfcwoknDEEumLqQENWQhlB3kkNq3FbIqEbUEkmwFe69bFKkHUhysT3la+R9rBe1FwnWDQzR1tDQmhmi/7S2pobuXoxye/fGwnmBCPMVp6IJcSwS/t1RZlJn4dy9mpNSJudCaixcfjHy3c3Nqyzcw42Fe/3+W8SH/PGPf+TPd+JDbhFNiM6kUpGdUJK5qkVwDNY6UBfEjWIl4kOsBBvXmFYPdraX17tbsHLa9yeDffO7Kn3/Ui++3pe6TxvVFim/3S/dd91c17/oLbvQPErsRRUVbX/Hwwyh7V5wd/cEbu6eGb2y243Yfgc8w+5f8155txNwABf31bZfuWHDm8QWI7LhjeBTPuX3n5yzyj7//HO+/PJLrq+v/cOc5f9fC/v9FXZzyy3GJCGjkpVyioVwLTOCuqSMWBX3AqirqJirKyqGegrDgpipi6gIyZ0qsf+WcK84SXq2m3kLH4E7YfgRRtLLxrUVHZ1zu5xzrEh8HTWCf6W6eUKlUj0hVNDkZpVogchECGzCrayBwSoee0rVcCp5TELCpR65Gq9kluzHo1KWA+ODjB7znV24Sxbu3zUX7nL/7TK+Zr/f89vf/pZnz57J01K4ev6cvSdOesSkCMUYkqPVWnTIEoUG3l3KMbSJ1DZ7mau4KO5Qxc0QbQ5mMW/tV00JbTVb7iG9azcsnJ8gwEXNQvteusHGHWzNg5P125T2l7vVRkQwF7eeMeLabmJz94GUws26mIEnFqKF4fYAScDeuQdza2H48EM+ur0PH//ur3vgN2zY8E/HJqFuuIOfQmL7B2VUpB5EfEFSQXyOOJEosI9IBmsRDjZHrANzLxZH5STSpFNt6flJZpQi0iJF8EqStq9GC+rt7kBaVVFzvApK7NVFyb2TcR+iiYGM+djbGdx9wJh60T3ukYJfGKJcXHbunqPwXkfck7tOGNHOkGQETY4OyLBHMT8xMSiM+R3m21uu93uWF+/68cGRjz766O4D/ynwN0pev3ScA3zhd78757/d/+o+T955wn/cuyc3hwOzhQBZ5YjJLGMxZltQPwosWL1FZJEsFa9HEZ9JfhJnBpsl6Rz3FUeSzCK+NOl+jhJ7mYmXgsocvbiUaAWRGvtxYrG6trpP28AVW5FYtDAQRVgh05sMmIwOGWfCmdx0RBi9WLQv4CNRYJ/ddbdKq8rgyJ6ScjB4tmf2iXt79VMaGA/XXI3C8vbOT6eQ5v+RFobL67Fhw4Z/HJuEuuHN4e+QUbOCmcTOjyRMkrs4QnaRhJusTlSTYMLMQyYNRiI5EtIpJI9A39RCH7SFncZLl1FF7v6YrKybnJfRW3RECFdevYe9qtT1945F0X2PFonOTFKr8HJfWvNDa2tIEXiSojuTKFBHNIPWI5qyXOd84UideHozkcbWzvD552s7A58Bv//3lVKDfPsEeMjHfAz/B/zmN7/h65zR5j7VdEBVSaVSkqFqFHPMFkTjzvC6EHdYi/zo197ClQweToIuoWMgNYwKq/ElXMwRJXLRvLAyvHc7UHubm4i4Ryhid6HGB/ecwt69ZbQ1A1mDRlRBRQEnaRhyiitLNzF4As9MbtzeAjfwHd/x9foIfvn9D+6/x3OBDRt+dtgk1A1vDH+PjOqSSDpS7ORaRTwlVDKOY6YhX7bxSUnuJFFVN0uCJxeKxFGsmKuopMhvI4GbIAoYNbboesFWF1SJwa295QaEUGsuiFg4VdXAYmMKKioJi1w4tza8gbmrtVL0hGglecKsBp0RO1QiUhySVOb4mpfqVEAHrBrGC1KeyArvpj3zBwm9VslL9i/GkT1np++rFVv/6g0Nr+6/QdxnX/3xK66vr3nreETv3UO54XhbcD1Ef1ksU6I6x+xkoG6YG9kLqDWGtq7XXaO4HqhtlIrnA2sKiJi7m5yTapordc2HuzCVSu/FeulqtdiQ+E3c7yIaeYaAy7of54bgqCOKVcFVUUleEFyzY06sEFh0pY4G7N0OA3I9cX0LJ4D/gt/e/zWfM7/2UZZ/6Xtow4afLzYGbsNPji63rMPERajvr3/9az74IEJ933rr15hVpmlkHDM1J49uVCXpgCoR7ivqboqkFLEhDDF+9Wy46EX1CPhN3diAiPo5zLczGOposG4tFy4kU+4ki0QyRN9bumRizhlgrl6b2aGCV48YiZ4LV6AWxIsrRuzvGaKlLZYX3IpHJlcltYYI8yrmleqFepzPuXDDSBoO5OfPedoiMXLOjOMY2Q+PeI2h4U3fCf9c/FD+229/+1uGYZCnOXPz/Dl6m1CNwFtRRaqh9YSYi5WKeQUtJAXDkVpixqstSoYaPpjIfnPnHBuDmPs5E25l3tb7p32dHqVXd1qz1qHNNcY2uYi58Z4gB/RhzeJNDyPO+QmIqKs4tQoUhWIRcO09A85wG9ytst9XuHnOU+Dd+ivqBx/wBYR82tncDRs2vHFsA9yGN4u/TUbFcvLcBjeT7FYTZgmRvA5xEsyEmwtCAhKuCSEGPItWhjjAmpQa70+xb2QtI66VgXuTUdficNa8VLqE2qQxWsCvRzB+C3P1lgvnvRs1mLe1sssLYoZ4uBiT1pYfZ4IYbnML9zUSqyOVapELt1Rj/q7w9TeF28OB4flzvv32W/n666/Jf8x8vn813PffSUr9/ffkv30AvAeklJAW4LuUilaj1iOqTpvxkW4o8RKMWxvMVSxaGYhcP3r+n1/cF94+By0mpHWjynqf+Kp+rmPb2RBNa19wWhCcx0DnJtG/S2tejZFQMUu4CWZtf86Doaumrr2IwbXVxKX2feV4bSNuE3Zvz9tvF57wFWsG3OPHPKL9vG4G1A0b3ji2AW7DG8WnLdT34cOHfynUFxsygxXMUrg0NaOa3VqeqUiwbqLqVTKi2V0UJ3k3GyDZ8RYnIhoRChJDHC4xBEq3+PUpre8eiV/oX+4hVsXZ6d2S2uuR2uDmUZukjXWLg71Ea0Pfdev7cF4iWNVKc7gWxEocy8nFa0ExdAlGSLOTzKWYs9QX5GEmjyMvDgfGmxt+PQySp4gV2e/3a/zDy1Kq8y8+xP0ePqEFR/+F/be9KrJbGCelmKHmLupoXbDqbXCLHTenumNEr0cMZ2K9oSPCneN+aBG7IZmuQcAtmibaPdamj7stIC3e9+IKCWZ92pP+QT1+mrC7NvZN4mNtjcBRqkeFlqvgOvjl8BZ66YEXvOAtu+Lbb+G993qEyP+485B+uk1wGza8cWwD3IY3gpdl1M9ellHnGSvnbtQyjbzo3ahVqTo2Fs5RGREy1vLfapgW4qjV5O6KuUZTg6eYuDwBGSEkVQt5Fet9Wee+1B7VcEGHwF0JrHWjiq2SqWCIuhOmBmgVSxBvN06ElhEW7BvWQl7bbtVawWWoVddkLHVhkVkShUyhspAHk3vXmes8kIYTwzjy/NArtn5Lzpnf8bvV0PBKT+q/5Pz20jd10X+aX5P/dpwLc3nOUiqlhHlB1Zm9ihVDBLJUUqtBE69oY9W8N2yYg7Sst8h786az9h037/lvay+qXPgQOi5K7EXahllrXHXHV3dqk02lu1RdXXsdnAhYyzOMphG8ejib4yvA6QaGGOKif3hkbzue8Yz796/585+hfPghH83/HeBOtuCGDRveLLYBbsMbR+9G7ejdqPbggXcZtdbKWAasyaieCidTkmZUQiLVJJReo4W6ieIm9BBf89z24DIu4U41WtF97Mq1/bgI/xVVN9cupbq7rAoWvdrIu7zlr754jaR9WZfbXSm+HvpWXWksnFYPZqZAjbDY+JcLtVRcqrjNwbpFpCzmhRQsHC8OJ+ZSmZcaFVvvvUf64AO+3X8rOWe+/OoR+/2e6+vrfwsp9Yf23/jh/TeJ/TdDrAmTWvojHt2nFgOY1xb/4d2MUFG8u07j/dqYtR7gK60D9Ww3bZ2n7abx1zJwbdrTxhbTAqkjnNeg73NippjFzlwYGlqRvYWZIZhdbU5UJSdZq7R8HHAz/KryVr0HX38D/C8APudshgH+bXMFN2z4OWFzoW74GeBTPnnJjVpK4euvv2a/3/u9e3vmucpUnGqVigGT4yKmAixuCwhJIqGtikgCBhd1kVpb92kVjVYGUZqhAQVXQUJiTagbinjwK4KCGN7CfeMQNLpH8CxuXbgHLeJBhJ58b4hX17AhgFTEFJGIBrFWfC5e2kBZiL2mirmilGibUMFric9JJg0VHBZfyCaUw5FhGkn39qR8ID+vXvd7vvnmG96dpjA08P2uVHf/l8uH+/3vY/+t57+N40j+05/44N49vwHmlIJzlYQuR0IVNZEcM9QQEmfbcQMxx726i0svqdcumffuWggmrrGz3ub/FuZ7h3lbzS9nVbT9S/259cvX46JnqzkcxNVNAFPiiwnLS0ililWJ5yaa3EkkEqWop2CoQz717Lix3+1Zbozv8neM77zjD97ecTp9Cbz/+gf4X+t22bDhF4WNgdvwxvBDMirAB/PMe6VgVjCr3Fil1mZmsERK4lrBakaGARVBk2CS3JoEKibu3chAcmvVWkaKSi0SRnYn06WobmwIq4CuEfku0jpQu1OwRTfAKqdKW1jXMwsXwWDtgKeV2ouYe+teXVk4b/tw3nbl6rzGVGAFNUOl4lJxWfCyMJcZZ8F8oQ7N0LAUjnMhjwcZnj/nw3xuaBj/Z3elnqXUy3Wmf8V9uE8++YSHPGS/38c7XrP/Ni8FVWVJFZkUif03RF28GlJLOE8pJLWzgcF7/puFwClnlq0Pd0Jvb7hkZ2mZf3cf8btO596yoLGfuW7O9fuwyaoQvLBEzVzweVENF8NbWx2ocTeX4qgKiyfmkE/dLQwMt7dgtue63nOA//ovKOXX3/vYbhEiGza8OWwD3IafBbqM+vDhQ+COjEqt73A17323TEzTGGaGWvCquIUclCoR7GtRgiUkF1NcEtKYB4naqpBRSQjZjSZLubp7Wv8sdo6UGM0SYXhYpazmUo1YB1m7tJrmRj/IK92NujpPxS7aHWqT31qQr7SeTZxedC5ew6UqBSxetEKqRbwuJNfoSs2DpMHJo5OblHo8FfI4ynfjyLf7PV9//TV5312p168N+P1XmN/O7QsX8ul1yKc5Z9Jr9t80zSylshPtgxvVK33/LdYfnSTx+c2tBTP7ek3l7v5bDHfeTS0xetG2K8P40uV4b9JpazFt3oTo3upPEi5sqWFlcQnpP/bf0KjMCl7QcW0u1BZTEpZaqiuumdLk05wmhqSYD5jVMAvdqzwFav0VH3zwARARIl1637Bhw88D2wC34Y3izDh8ujJCXeIrpaz7b9Zent88o9ZCrRF6W1UwHTDNqAyuIq2RIeGS2nEpgLqQg2GzGOKsOVTXjDgU9/i9EeaHZnpYD9Az+/FqLtzdTLjYUqIV2vdE/mZqaLtvRgT1VncvKLUNbaUNbS1ipLlTRTx2lFYWruB1phsa0mkhVVuz4eZSOc5fc/hf/0uaK5U85dWVen19zaMH/7r7cF0+XeNDxogPeTIMpJzR9FyOpxlVRZeC5ookk2oL5qXHiHjffkuCW2NS00WYs1uYFRorF/tvYWJB1N09WhgaMxcs5xof0gfEi4Do9RlBF+Ev/0C9R4a0Jx8urq4eTzxCK+1sscb9L50PTrhDUjypXBgYjMmN3TRi+wmewdu1AF/BH84RIutP6sVgvGHDhjeHbQduwxtGHFFnGfXuvtIf/vAH7t27h5XC1dUVczkxjHBrR0afONXZR4diiCSwmhDcsxTpu0TuQzg+SY6ISKvWAhUhYZ7QkFVRqeKuSDj32r5ROxxX/0LsxsXu0Hq8thiHc6pIG948yu0tkvypqChmhrYdtziKI5zXSS5SIp+LQmq7eaIVfJbQ3ATVTCE+xkoGPYHscZ8xNwYb0HEiJWGomee3t9RSePs/HpBP8WN/2Wv5r7oP98knn8CjePsLvuA3v/kNz549Q3Pm9vCc65SozNQhMS7OXBeX5CKLU6W5hT2K1sz7WFVxzHGTHt6MxDUX9R4ZIrEruea8+UXwcxhS9e6g/HLOoEsIs4g0U4LS78eQ+0NSjf1NWe9Xb1Ej3h2oKKqp3b3JlxJboN4kYDxiesQre6uc3nJsfIf3bvf8Jy948D/+B7z//l/1eG/YsOGnw8bAbfjZ4NNPz5lwEDLqhx9+yINlob5T+KZWN6u8eF4Z0hVmmazCyRTTjJlHtRCCRUQIZp2Fy1FAb8nRTPWMW46dOI2S8KjTSm1nLmJzaT2R3kRQ6PLpORdudaaG2/Aso7aoYHqgr8SgRjMtOMWhoD2Gwi324byG/OrB3kU+XI26Jl8iENidZIVkxD4cjstJTkuNaJELKTUPJ8ZpkmG349tvv2X6+utXulL/VfbhXief8pAWH/KyfBrhvaKp9Z9Wqi9oTZhXBnekPe5rxAu1/Rst3qWZFZRwnuLniqye+aZ3jKUtXmbNe2uO1Iv8t8tO3n4/0+w51png6ERFvAVMu7oZmCl4Cuepd/ZNz2yyC0lzGGK6AzVaGHCb8LpvDlT4M/Dhhx8y//ctQmTDhp8j5F9FLtnw4+BNsS6v3IePgIfwxRdfsNvtePbsGYfDgf1+lqk44+QUO+Gnyqk8R2oRtCJpQcshZEeKuMwIR8QW4CRJFrAZkVmEE8qMyIL4LMoJYUFlRn1BWERZYh+NJUJ5WxjveeepnjMrOoXiCtYMER5V9PgQWVtkfH17cPcR9xFjwBnD98hEZQCmaJvwCUkD5pPjA5IGXHfUqq46QU6UOoAkXCcnCWITYpk0jcwKWa85jQf2t4Nf7/cs775L+eILbt9/n8PhwM3NDQ+fPIRPYvjpbNwvjYW7vI8u2dz7X93nyTtPuHfvHleHA+PVInNx6u0RkyX6T+0F4lWEpd0zBfMZ9ZOILyQ94XYSsVPcIyyinMBnRGaUWZLMePtY9QWkiDAjuqBSSdqq1MQQrecsQQG0SfTNTIOmeKIhKZ6AyIAzYD66M+Ayrr+P+2XEmDBGR0aqTbiM7jogvsdJXhhRRlx2eM1kHV3SPcSVEwPpemK8fcdP+xe8/XzH6eaG2/ffv8PWdlwaef6e67Nhw4Z/DBsDt+Fnh88++4xHPOLx48d8NH9EKYVSCm+99VbsxO0mah0jE64Wso6Y4klxr1AZMMm4NNeeaRgRPFMtui7DZZrj/ZYQSe6sLBzNueomyd1XRyrnnbqmcfVQ1XMKBLRScmmMi+J4jw/x6hJsjXcDQ7BwfTiM17EPFxVbSWInTr1Ib2vAKyoIvlAWw6UQCXiVjJB9IQ9OqkYuxlyeMhxG8jTxdJr45ptvyC1a5F9tH65/7Xfcp619ITf36e3hxHGeOS0FLRVNhqaMRkEH5oJpl1BbpVb3gcp6nd17iHM3LlhwtWEccGgNC51gC2n9Yux5JSWk/dIYt6alNtZXWxahNIeD4Hbe30RSfKwr7oq2KJEI8gUkk7yzbuI5ic/WKrSmkf1+ght4ylPerb/iv4Dy6+ZAffS6R/qXNdxv2PCvhm0HbsPPCpfsD0Qm3FdffsX19TU5Z+7Ne58PVZ5f3TBWwdIe5Bb1EaulsRqKuCBkMuamJpgjoi6SpVrrJo2oEBGpGK0rlRx7alh7byywt0DUCPpVJ05SiX/Hpa/yNTLurIhJz4GjupvcyYmL50+9NaJEJp1WsBL5cy6rFCYoRkEV3NrBrgJ1IGlpLM0CqGSvvjAgLDhGtgE3J0shv1XFnlfneCTt/oOcT0AvKgc++eXuw/Vhs3effvLJJzy+fsye/dl9ejyi9+6hJN4yqPcSvoCXI2SjVM4DdDciXDSNujrSWjXOoR69acFc1BDabpwbqu0+kMjVpfcsyMVgfJ7/455YWxZ6cX3bfWv3Q+xfhkHBRJtYq7iLm6SQVSMDzsWFiM5JYXHVHHdmNWbP4aZ1A6uRO1jhbd7hCV/xwQcfcTwe+d3hwCMe8eSzJ5uEumHDzwibhLrhDt7kQX1X/oIHDx6F/HX/Pk+evCp/LTtwP8GxghyhZXVJWkT81CI5ZtwWSXpCrIDMiM2CnFDiz+GE+iKqc0iqhISKz6KytL20Sym1tJLydsjTAlvb5lJ8M7F43pfIzZoM5sEEEhIq5gPO4GYj6ID5iPkAMuA+uZFxmUAGzCdcsptMIclqxmXnriMR/DuScoY6OVNCbKJ4RT2h08CsewaF+Zg5jKPv93sOhwPvvfcev7295XGXUtsOIp8Cv3/z98Xfc//wGTy6uH92T54w3LvHzeHAeHUlc3lKvT0ySsLLLSdbED8gLCIUxI5xvf2E+Bz3EyegIHYQZUGbdAonWe8bZlQWVBaBGdV2z0hEwajGPYP2vcjmPm3y6SWbVtEmm2biiUXcF8bo5iPOiNFkVAY3JtxHXHe4D16ZUIl7yhnd04TVJsXK3pMOYBlsh0xCkpFTvmYc1a9v9/znixc8ePCA7777jpubG548ecLnn3/+D8nr23mzYcOPh01C3fCzw+sy4VYzQyl8U4uX/eS7OvpYMikLqU6oZHTMqCRXGYIHkQSqLmQ3TY2ZCFnU6FJpBknuljDLmIe0SuTHRaRIaGvNDZja2NajR4IRW4+zzsLJ5W5635frOXAGhJyKl6jb8lZ436NE5Py2e0Vk6VIqoqV9vkLypTliF8rcQ36dUzlSEdIwstRxjRbJ48nHc+E9OWceffXVnaqtl/Phfu4H7yvmhdZ9ut/vo/t0HNfw3tvDwdM8esoDcy4syUJC1YSou3oNZdzXmqyQwAG30uRI6xLpKpFrC/GNa3tRoSWdqeu9p83MIHdFyPh9z3sD6K7TnjMSgu7abdqeHEQ8bwrmuZkWcEURqmvcxxoGBteBpIMnE+aT4ZZxq93A4G/V6ncMDPMMbAaGDRt+jtgYuA138KaZFnd/RUaFs5lhGL7h5ubA/MQYd4XKUYzE6AveWDi0gC0iXqh+DBaOhcQJsSKNhYO2eA4z6jN09oSTqC9hbmBuDNyMSoFg4kTbrhreU/atDWce57cQSRI0Q0Nj4+zMwjk+YLSB0cfGtoxtgBw9GJYBpDMtIy6Dw9h2/Ebw0V0nqmdUJ0DxvGvBrVMUmueRxTPiA7PAW/d2vhwzu3HktN9zOp1498ULjg8eMM/zurDeZcif0/3xQ/dNx6V54eP9x3x59eVqgrlaFoo7uyvEjydYbmMd0g+MVoFFTA6IFcROCDPiwehiM2ll3ILhVTkFSyezxD0yhxFGS9w7UkAWEakkadl+zcBAC6YB2qwWbmekP0nIGMmRHNff43UwtyMmgxOmhXZvTFQbXWXCdaDaGCYGBowR9T0en8tdB9z2kAbwK4RKup58vH2H1cDw3nvc3t6+1sDw994L23mzYcOPh22A23AHb/qA/r6DeL/fc3V1xTRNPHv2jOlwYK5PKYaME1RmwKC8QGoBNcQXqh9CEvOZzILZgnASkQVl7o5UYJbUJFdZ5bBLJ2o7mFvlVY//6LEgl1Jqz4ZrS0fr8OauzZGa215Sc6N6xhlWN6oxuDOCDFQbcJlwMkhIqnFotwFORnfPIBOuIaeREomdI0qxIYol8sTsCfWBe7uJRd/y3fHIPI5c7/eUw4HTe+9R/q/CR+9/BDfAw3YhfvZSalTDv25/chzH1cW8Oxw47mem4tQXRzGZoRiDnsAKxZtjuS5iPpNtQXzGOZD8POiLzwjNtSwnEjOwxCDHIirhbFbp0unS5NNznIxI7Nc5rQiku08l5FPz1IatV+TT9f4IuX3EZaTKiMrkZhOVMbIPJWRUb8OfpB1eB3fJmF5BTVgewK5QRg6KpwT/r/F9/n+HA/fv34+B/qvfne8F/rH7YDtvNmz48bANcBvu4E0f0JdS2A8dxi1ShFKcqboYJ5hvcT0xCp2FQ7zIysJZj4Io4LMkjUgR1Rn3E8mLwLFFicThre1tZZZgXELGXB2jUsKpuDJwvUqJluol6/C2snCuuEecCPRokc6yDO4+YJ2NWwe2ARjdGvtGsG8gg1cZcJ1QHag0No8EMniLFoE0ITmMHclHssKk176MI/P+lnm+jn24m/e4ff/2FxUt8vcM/cbMJAlfDlAX8EMM/HUWlUK2E9aGteQn3GZRjcgQZUbthMjpYrg/vySZBUqwdRL3SI8PEW2SapNVzx6FtbJtZd9ikMttcBuoxL5kDPpjixGZqD4E02ax/1Z9RBm9eka07cr5Dpcc+5Z1h+uIpRy7mnWP3hs938KY3uG4v+Htt8PA8N13H3Fz84gnTx5yScZuA9yGDW8e2wC34Q5+Dofz95kZuhz2/Qfy0ooKTi+zcEg953G5LZ01EfETqo2NYwE7kVhEeraXlHZo948pLf+rNAm1ldG3GAm5lFL7AIfiVRCRxsCldc8uBrmMeXZ/vZTaM+IcGag+xfAmQ8+Uc5MJlwQ6IdIP+tFTShQZcZ0YNCFpYqEinlEfGfSeL/nA6ZDZDwPX+z3Li3c5Pjgyz/M6xD158uRnLaX+oOz+ZMdwb+Dm6ob5yROKO5O7mJyg3DIkB7ul+IKUBckVqcdmgpmbEeYUxhefidy3E0maXOqNzQ05Hve5SaUzIouEhBryKdINDH5ngEMvst/aAFe9DXAMuOTGuMUgZ214N5kwb5I6E8YUDKyP3oe70vIFxQecnZvE/ZV0hJzB95ykIDJ6DgMDt7d7Xrx4wYOnD/ju/UsDwyf8/h9kYrfzZsOGHw9bjMiGny0+/ZR2YDwEGgtXRnLOaz9q2U9Mxb3UQcrKwsEoGaRQXBEmRL1FhUBWwywjZi6axK3VJlFRMhG1VcU9tR23jHvFNUXZglR3C6lLcDFXkvQ+hkapWDugib5M0eijPC/EV8QlzAlEuVfUIUW8iHlpjtaEorgUqa4uERUSrRMiiCRBFneXaGtASQiuIhieWGIXTybcjmQbkezoNDFrkZxGH+qB57clqrZ2D6KlAfjdoe0+/Yx319fokNZ7+jL7lsY/8/TmyMHusUuJa3cqB3ZSMM/M9iL8CIAkQeoiImChf69xIk7cH46TtUfBWPTOtzBnl966YGhUZrnjLVLEL/wIrXqLLp/S/+Dcuyu9v7c1gvSct2ZWcE092obqKSJGtLUttGHQJXocDEVzcq8JEcGrMEv4VnHDfAJ2iFS+/lrZ78PAcHv/Fg6sZqIwiPz+b7o+GzZs+Odhc6Fu+NmhP7tfCZXP4NGjRxwOBz766Bzsu7z1FlfznrrM1LJ4LcVLEtJ0j6pgFVQSKoqQXBhanlp3mYakhMSfOQOVHveRXRgcGQCNyI7I0wIS1hfOUUeSm2vUbIm2FN9eh+SRuerWUlzjJYLpzEXM1x06jbqmkN8ia0w1dqic4qmzfjajYi3mYnG3AszgwSJ6M1uoVJLEl2MyE7HBJbyvhyO5VI+qrZFxmni+2/Ht/lu+/vpr8h8zn+8/5/H147UMHn6ertSXg3s//vhjxnEk/+lPaCuufzcl8nBC84zm4qU61U4kB81BijlLi9otbZi3luHXMt6k96DW1nNrLphrd6VyZtbc1xxAT+Iu6i4tPdD9sjZLWoFqu1CIWw/ulRjCaMN9fLYeSt0q3SSt8SPe8+Ha+0QyIgMq6m6tPssES0quSq2Jccg+TYPfs0qthXdKYVkWvvzySwA+/vjj9XE+S+hv+opv2LABNgl1w0v4uUhj63350pP+71tMb7twGCfpjtS55cINapCOWFmwcA9K4iylmpxIFOkyqhCOQ221WlGtNEtiCRcqS5NUW0OCNCm1NSfclVI512A2KbWXk19Kqaxmhu5KHXq+F+5nJ2Hfh+oL7eFIHaKQXAbQAZeByojq6JAgjZQ64qIM0x5MKJ561ZZH1Ra/OCn1L+6+ff01z45HDvcWdvMVU2PfqszCcmyhvAVZ4hpXOyBSyBaOUvET6Am3uZkYmmHBTyQWkKjLUplDnm+5gqpzhAFrRMEoJXbf2pAeJgbWMg/awIUEe1b73pukVq+W27UO+dR8dJep9fnG3psRjuTKgMhIZWr7b5N7TWjeU2pGZWKx1Pbfdviorjpy3n/b8/bbb3M8Hvnoo4949OjH2397+Zpt2LDhH8PGwG34WWI9JC6Gtx9i4XbBwjEk9ZKFWiVy4SRTxbAaRVPiCSFHbZYqhYz4CJ68rk0MCZEhlr6lO0azV0+OJneJaIfadpas5XKZnRmTvp1+eVy5WzQxcK7ZCim14o15k/Z7leoikROntBBYWYCWA+e11255sEILsMRCfl1IXsBKSH02k2QhiWPlxLxUrFVtLdVkKcZcKsM48nw68PTmhm/ufcOTJ08Yx5GP+ZiHPHxt4f2bw93ctx9m3967ZN+o1anm2FLihYqxtKK0iluJFw+pNK5Vjce5XUPvTQxScaoHQ2cunbGTMwvXv17pnaewti/Ieo+cGbZezya0wY7k7uKGutEYNo/7GQ0jgpDcJSGNKc6iuKmrKa4DiwmqGU9KSsqQlSEn3CfM9thbV9j9+Jn6wx/+AMDjx4/bF/sZn/4srvmGDRsusTFwG+7g58LAwfc/W/9hR+oLjCX215YjgzroMQwNtlDLsdVtzbhFNETyinLCfYkldQrKSWjl9qk3NnhfVl8Q6zlxRbQNVdB7TK0d/C0ENuJX43sy1naGczacrgwcZGrPiJPGxMmAWTAwIfOGAzG6XCc3zeATtGy4WFTPjYUbPP7eFBkRMoEmsAHJ2qNFXHbT2tKwG0eOvaXhZ+pK/WvYt7zfc3M4MNf6KvtWg30jVYQDUufIfZOK+Emop7i+fmLNCbQjKosIM2l1nZ7aYB0ZcUJBmCXusQhcFqlryK90A8PKvq1hvOE+lXN5PQxeietsMqwmBWtsa7UJdIzyeiaqZVx2QEZ0vzK3LlO4mutA5L9lpjQwS4bdtR+PkLMwjg84nU68/fbb3N7GNe8S6o91vbfzZsOGHw/bALfhDn5OAxy8+h/+o0fNkfrxx3z55V1H6rCbmYtT7UBlxr3IIM5SbqEG6yR+ImvFaj+AYwBz5jbE9fy3uTlVZ1EW8Bbi6kvPhzu/9s6elcaelTXFnztSajc6KG5tWZ0mpZLONVsxxMG5aiteN3cq5Jb1NXpEiuxAcnMpjusgh4y4RixJhPwmigyco0UEsQmx7GkaCSn1mtPh8L1S6scff/xKwK/0Avaf7q54NfftEfCwO0/v1GYxl6csBtPxFN2hehBsAavIcgsUTJYY4NbqrNgrFD/F0G7nQS6G+x7aO5+H+jX7LZjSHt6Ltu7UNryJePO6KIbEXqZotIa03DfvLmMiUsY8rqf51F3GIKOb94iZKfLgGFDfRdxImpqDeUeSEbeBxRJDypx851jq+W+kBPsXA893O25ubnj//fdfG+D7j17r7bzZsOHHwzbAbbiDn/sA1/EyCzeOI+PhEIf1Dvz2xMjCUUxGmSm1QOtDDfmxD3BLZHy1YUwsYkWwYOOCZWvhv+v+W9936m83Bm6txGpl6GttVgT8il9Ei3jUJMVSesiv8FK0CDniIuhMXESLWHvbGVpcRAx5dKZFhsbIJVwnj5aG2JfzlC724XZIFSTvXH1gEZjVyXLNcbxl/2Lg7f/4D06nE6UUPvrubsDv2SX80943f/Xu27Kwu7qiuDOaMcoJK7fi6mALZXnRGLOCyAkrR5IY4kcRFmh9usoJLPbdIvPtJElaZIhehD5LG+q1mU2kmVHE7uS/ySX7tjpGw23q0vbfPLcswKG1LET2m633wRTsmu5iyLOIDTEfEO0tHhOaBlz2uOXYj7QMNoCJy3SP+ejo9RWHw8j+cv/tu494dPPj7r/90M/zhg0b/nZsO3AbftZ43YHx8i7cr371K2qtfFO/puwnap3JWSlJuNKRohmRhJaEkNuGWmqVRBlkcJfssX/U39eKxL11pZIdEnbhYj0X0weDtlYh0SuRJHpSkfP3IYBc5IC1Gq5wlV62OlRou23hTK24L0gzTcRgEa8jWNgIVqmE/ZYZp2I1Bku8UGyhWI19uKwkr1SEyiIvOFHMSHkkDyfGw8Sw2/Htt693pX72WQxvP70r9W/YfXvvPfLpRMozxV5Q7EDNjs0LxhHHMGJH0K3Gf4Yeu29u0V0rfd8Qi27a9vu4ZvH+GMxXtyrdtaJ4K6uP/tN+C9zdeWuRISLtb+idUvtwS0ffbu8+xZPTGhvWlg9RRAWR5O59H1NxS6g5SUF1IKURy4oNCbfKbhx5q1but53SUgofzR/xmG3/bcOGnzs2Bm7DHfzcGDj461i43pF6OCyU4uwMxskxXzjOB0ROMghQK+KHqMPSBaulsXGnVpG1kDhJVCPNTQ47BbPijXHz6EwVFgkJNaTV1Ni3tXKrLbrflVI7CxdhIn0fDhS33pXa2DjPzYWazywcg5+ZmNhtQwbcB2oL+KWzNJIdGSMcWIOJISnOSCJTZCJrYkkTYuLNlcrrXal/uSv1p7h3/kH2DVcX7JayzGf2zU4gM14L4tHEgZ8kS0E4ntnYxrwmTiG5y4z6IqrhXk5rdVaE9irttdp5aO9PmbUxsHJ3/41L+bQzrjICo5tHZRa9dk12RIjv2HYjJ1cZcdnhZIQdELKp60DWEezKxRWZEklH5kO4T3+o//TH3HfczpsNG348bAzchp89Xj40PrvIhZvnmVIK9seF+/M19+7teTBlxiFRlkQpQpIBleyRCWcIA9XDbWquLQhsxEQRyZiESzViHFKk2PfmBHrJeMZJTpSNe6Tm69mgQArWZA1llTvfR5Au3vPEcA95rQ9+3hg4abtU6hUJZypKIUmJ9/kcDBulybrx8UghkugsdrCkknTB26DpUkiyMEt0xOazK5WUB9Iwhiv1EK7UNP6WnDPj/xx5/DhYuD68/XQs3OvZt/1+/zeyb3Vl33p0LmaoBPsm7c7obNw5EqY5hj0YU8U45/h5L79tfbi1sW/9gnPHgRrfTTBw3ti3lYXzqNWKPLjkQvKW8RbMcetJxSPEN9yq2aXJ70JqDJxjmlDNJM2YKZYrdUi8eFF5bhGGbbVS66+oH3xAKSWGt0fnR/3nWqG2YcO/OzYGbsMd/Fz/kz53pF4E/Db0xfVv7t1jmiam6cD89VOKQS+6dy/44ki9FbQiOgfjZnOwcH0HrpkXzBcSs7DuuQXLorRdKOLvi5xrtqQV3BNSpwiNhfE47OnREzicixouXKmCexsqz/twMUz60Bi4YOJ6LliVoe3JxbI7MlFbf6pLBBGfDQ3hWgyGr32uvO+uVJesyLBHfWBWWV2pY2PewpV6w+37739vNtw/09Dwt7JvkzvLXfYN7FZeYd8sTCxJTus90dynotLcp15QOTXTwnJhXmifS+ZeXC8izY3cM9/UInZE20PTA3ob+2YS19sYHG2s60X2WzhRoxZLGDB21OjGbVVro4tG9psz4Z5RovvUZMB1T9bR8YGlsb7KQGLHmIV5P5zrsx484Lvvvvuea/uPX9ftvNmw4cfDNsBtuIOf6wAHf+EA/+qKr6+/Zt/iL/b7mXEsLEsYGowFliOiMIgLeqJ6dx5aSKg09yAzYjMX0qn0AztaEKIfNfWhzvsie5NPfWlxFGU1NGgP9+1sjjvnmLCLwnt6tEiKhXMi1+tCQl0DfsOleh7ehIkqOaqRJGMyOd4cqTpFm4TsoAquESsSEmyYHaiC5ImXpdSQ2PacTifebVLqRx99dPfiXAQu/3Puoe9xnl7DF/df4zx9+pTlCvx4YgznKRwX8KPUdp0zFbET7qc2dLcQZz8hNqOyiLIOc6TVrNAcqZfOUy+oviShikVt1kvRIXJRdYWkGLglhXuYgUpuxoXWfeojriPu04WhoceKjBHirFMM5ISpwWXE60DK4T7FkpOu+F759O0dp9N7/7T4kNf9DG/YsOEfwzbAbbiDX8IA932HeM55jRU5HA7sdjOl3DBWwXzGCRYOmaPcXkN+jNT9uu44QcGtH9CtwJxF1GIfLvag+sfOMbD5Ce1hux7RItrMB3LhSu3L727nXTjhvA/Xg1zdQpLtsSK2sm85DvS299aNGP1gj8M9A7t1B858RHRsLQ0T+EBBSbprQ9wONFHq4CSBvEN8QH0iizC9I8yHkev9nnI4rHtSP2U23F8a3qfrv7j7BrbIHedpY99El9h9q+fokBYZ0tzJp5YRNzenaRvmW5RMkgX0LF+rdBnbIn8wmrFacb22+BjBNaJD3CP7DRnaMHe543jOf4v9t5HqU0SIEEObyg4n4kWkldjTdujcdjH8WfYxD6hfMYuRZMeU47peti9c7jhe4sdiVrfzZsOGHw/bDtyGXwzOHakxJHz22WcRafEx6y5crZV33jnx1lsnlmVmHN+hDEpZ9HIfDhkmh6HtszUXqUb+WmteONcbecYttwaGdF46b3VYoJGAT8Lsoi+17cGtReUiSE/bvzgMI5G/O1LbLlXfsaK5IVtLQ+zFNcanM35aV+ZHbGkfV1w5OymxBfeQd90rSYxiSzQOyIKXmURFMyRzsjm5VuZaOX5dyOPIdzc36DDELtwYsRPX19fwSVyL37+sbf9o+B7nKc15Ov3Q7ptF68K8YMvRNcnd3TdvrQvmuBTclghepuJePZy/NYrq5SyF441VbZ210nflqOt17El/Z6388s2LLi2RuGfa/RT3x3nfElcsGkTAM4K6e0JccAvTi7sibWfTzTGLe9EUT4pnBa8JGwvTOOBt983K3faFw+HQXMafvfzT91P8iG/YsOFvwMbAbbiDnzMDB69n4Xq4b9+F+vrrkFLv9qS+YDDBUI5yCDalFrATg5pgp9iF09iFM5tbA0PLA2NGW2l80i6lzoIvayq/tq7U3pmaLkrlsciI6yxcMH5RtyR9ZutL7ZaChWsHN2TM2uK6DY1hiz24ykDIpC2lP3anPJi4kFKRCfOM6C52ojxHfpgkYhcu4WkiD4Oj0ZWqecfcWLhBlVGEZRxXKbXvS/0U2XB/Dft22brQ2TeTE5TbaOOwBewILGKtdWFl30rfcZyR2ti3Hs7rJ/B5ldDX134O7dXVfRrsW3eeOv69zQtoyOTWpFNr7lNvfafeWFWT8cyuNieqE/tuMLbe09iRc0YkTXiNLDnX5K5XYBnygCCcjgPK2KRxOO2Hn8R9+rpruWHDhn8M2wC34Q5+7gMc/PAh8MUXX/DkyRPudUPD4cBxF0PcWA3zE86CL8dwCeoBqQZ+FPGKcUJrbfJolJZHO0OXzHo6f4uWCEODnHfhetH9OadNWs1W5Le1gF9pTsU2wPV0EWlGhjXkd21pyHdaGpzujG2F9+eF9xbuO7ZYil289hgGRJs810rvVUcKivtEytnRGPrERiTvUTfSbmLRt5iPxx+s2eqhr/+Mvam7Azs8fN3u27Iwe7TCup4YZcGLsdgCfmRIhpRFsNhj83oCWZDad9+aOSGGNlRaZIjNJG2NHL2NQReQNqx36VzKOc+vNS6gdnagXkSHWGNxI7i3tWjIxRDHsDYvuAxePRoVrJsXZIcRQ3lIpgPuE0USmtq+XM3uOuI5Iz6FeUFGkuw4ZXk1vPejj9ZGi0v8mP8nbOfNhg0/HvKb/gI2bPhbIdISGxpeZmUePHjQGhq+oLy1ZzlcUcpTkkFtAaejDLicgAk4ImQXqmTPmApgLezXEYtYD8UQzy2E14LVwlE3D/ksI+LiVpv8ZSgRuCoYbi1KRCTeRs4Sm9D6Uh2RGiwcjoihJhF7IQV3IUlU3AuCiaKumBc30Vbn1SuaBPeCimLdVMFdGbe6knzEU8FrwqVGlhyxG1gHxUpl1u/I4zUvDgf2pfDefs8yhZQKrEvvP7aU2g/83/P7NXfu+voxn+/3XP3xij9fj/zvOaM5cytC8RtGE0wypcx48xAMCUqpqBXEZlyCARVrA5dZe3xCqo4+2xLXPYZtdwoqRdrvQ6qWHrrcgnvpZfeXRfZ9OL8QVrUN6NKyANtrb8wrmt26I7nnwxEyacipinT2FOK1SMTgWCKJuo8p1FwdEYT5FAM/1xP1dOCtt946t2zMM48fP+aGG558dtd9umHDhp8nth24Db9AnBmBTz/9NHaiHj7k5uYmGhrm1tBwuI5suHlmmjLLkBhyIiehqpAko5JRSZENR/ZKdlRit82HGIZarEd0kEbGW7XOiqUmRWYsPtad5HhkxBkJXHDTtanBvWfCxY+fr7+2t9yhpfzTJdcWR7KyeRES6+LV8bLmw2lbpO87cyoL3hsbWo4ZbqjHYKJWw1RRK24F6oKXE0ahzgt2nEnVyMWYy9OXsuHST5cN93v4hE949OgRAOP/HPnT9CeGYeC7mxteHA4cTifSPFLMyHYgmZOyo3nBirWR2rG+++YF93rxet19wz0el9WE0mvRzByqI+ZrNAwObYjreXCx83/5vct5eJN4LW33Ld6f3EUjV5DkbrEHJ5qa9hpDm3uKfcv2OdzC8BJPDhKKuIq6WcbqQE0jZpVqiTIs1GnGrHLv3p5aK8uy8OWXX/I5MYQ/fPiQTz75ZL1+GzZs+Plik1A33MEvQULteHk3qg8PvaHhZSm1l93fvDgwTsB8S54qS1li98ladVKawU2EGbe2/8aM29J2o054XVq5/dxciUuLnghX6lluXUicy+6xCNIVDDE7D2rWCpa6OdViwPNmkujRIuaxyB7O08gKCxdjL74fW4dm253yETT2pETjY2CiSnOkNtlOdSKifydSijw514xkZfaE+oDsJgaFMb/DfLtnvv7rsuH+3vvqta7jdn2/+uqrlXHdHQ6M88zJnSpHTGYohhdH/LaxZS3apR7xOkuSBakz1vYXxU8hjTbpNHpQ23X1U3Mjz7HXyHzefaMg+vLum6Hi+CqfSus9jR1MtMXCSLpTXE8ro/dWXu8yrVlwvdt0lVCZqNpK7BkRH/E0uMsujA1r80JGfMcslavdNcuxXb/9Lde354aNnv3WHcX/yHX7a39mN2zY8I9hk1A3/OLRD/hLKRXgdDqFSzFnyltvoYcDtTxlyIkhO5YmDvMBKZlBHHKlekU8IZgLKtIGqOoZxfFaMMlxQHdHItGk4CTwvPaZhhs1DnSa5CmS2iHmcTi6skptHsIb3mMbPPbk2r8iLsEQdfbGm2TaBgNFMQpiimjFvIAoZoKK4lURUUwKAOpKCIlK8QXVDBS8QsrxX8Nymsg5pMZUKok9aTmQp0pNe4ZhIE8T4zi+Gj9xkQ33j+Dla/vx/mOufnvFs2fPSCmhKXE7joxmcCiIOp4qLC/AoWJQQxJFqgTLVpqTtEW9NClVqLhVEhXvjKW0AGY5u0y1O00v3reyb+K42HodV261O057+4I3KbW5nXuTR29dCMlUqN6Y28bIWf+9BRuXNFMszC/xKeM610rcy14Yxnu8eF65f33FcqzUWrAHC+XtD5lvbwF4+PBhPBH69JMf5bpt2LDhn4tNQt3wi8VlrMjrpNRfH37Ne++9x68OB+qf/0y5N7N7Xc0WTpVELSGlimfEE3h2NHuwI1GzhYbDz9DWNxmL6EZUGtEYln7gdhPCuV7rIgcMWc0LPc/3XMd0HgZCkouYih4tIn7Ol6MXrHtrfZCeP9e7WQ0IKRVicEluTUpdmpRqrkZIqeJ4XZjLjLNgvlBbzdZcCsdSyIcDw/PnfJgzqQ3Jn3/++Sql8hnwD5Xdf09t1n/u+WL8gvynTP4m8/z5c24PB9LpxGme0VwoZqid0OxogtFpNfEFteJ422+7kE1X6bTJ1X3nEVplGYV0Uam1Pr7r7puvruKXd9+8X9xWqWbeq9Wa/NkL6V1Ww4poRNBYewLhkuOesRR7cpJImlptVnIlu0oM9qZ5La7PCfK9PdM0ME0j31mlvPVWVGfVc3VW32H85JNP+JRP7/x8bdiw4eeJTULdcAe/vP+0/RVDw8tS6p2arcOBuUbNVjFAZkZKBL3KCbksu2+u1FazJdIiQ9xOTWab0dbY0CNHehm6rrEi8TqiRUpEU7S9qliW74OArUNb+7bOsSLImjcXcSLR0hAVW6+TUqcLGa6/f7xI9B+iUkuiWqt6wmVy1xGViChxbzVbkkJKTRPqA2oDab9nUmUZR+bb2yi7f/fdNQi2J/m/XHaPsNo2/uJV7Y/Dp/DZ714XHTLx7PiM6d6B+elTCmA6M2nCywFPhliBMiMcMWtNC+WE6CKr85QTYgXluErecIpieo9okV6lljSk8cQCeuE8pSLanMXrC815ylqZ5RLDffWMawT3OnmVTbvsHdEhQ4uBGahMmE0RxOwhpYpMeMq4j+5MrTZrBzVjOoAlhnTFyZX9dI+kxpyvGcfE6RTO09PpxG9vb3n8vbVoP/7/Bdt5s2HDj4eNgdvwC8erhobPPvvsbtn96cSyLNQa7EOZJ8bcDQ1KSUISf9nQEDENhLQlpi6uWG09pZ5jgZy1TLwxK5kIZW3BrO1t4xzwe5eF0zu/74dmkHHBwHV3Y5fsIkuuh/oGU6TNtNBCfFvO3NLyyirqEfSr3kJ/G3PntqDx+UTFcAGXimvB60yitEdhIZmxjGcW7vZwIE8TT6eJb775hidPnjCOIx/zMTziPAz0ffi/5+xu5gVeCe59QspP0ZTQ+4k0LKSS0VLQlEgOVk54mfFqaDWUxi5esm/NGCIeMngwbj3ipQ1nFJJYOFWpsbf4Evt2Hr4vCuwh5NLLa9tkVEFxa5ExF4HQiJ4DfekBvheMrqRoc+htHZIQyYjkIBYVkoLqSE1CTntqLdQyclVm7OtKrfFSStnMCxs2/IKxMXAb7uCXx8AFfijg9/79++earf/8Tw73FnbzFcVvqDvBDzOTdBYuAn5FDfwYg1CNflS3E0lm3E5rgG8E9UZ2WK/ikpYVJq34nr787nOr2PoBFg4H627GEOaEC8ehtyGQhNlaeL+G+BLl5muHZjA4F6YGBkwjN8x8QHSiyuD0rk0ZUM0UH/GUSEQQMJKRdM6GW3BOco8s8oPZcH9PzdYPmRcuO293F8G9djgw6QzV8BSsmpQwG9QazKjWyPSLtoqTKKc2+J7AWu/tRVUaa0BzY9+81WZJ9J7ipbVgRGG9ENVZ3muzemSMtHo0iYGrGxdCer8I75UwKFSmxpZGWLO3Ki3zXVRl6eC1mReUqQ12A8aerAOzZUgZfAeeELr5RJhvB273ryuujwy/f/b/A9t5s2HDj4dtgNtwB7/UAe6vlVJ76OvhamGa95T9DfZiZpiA2XA5UWpBrJL1hHjFaj/Y4/B3PzVJ9IQyi/gS4a8t3FdZIumfeL9KL7hf1gEudtOWdXiLcN+I+Og7b5e1S+eu1AsplV5yH3t51VML7O1SW3OmynjRrxnSafUI8a0yeEhy0aEahfcjqmNEpKQYHpAdJEHSxOwVsQHdj2S95nQ4sB+GkFJfvMvxwd1OzVek1B+8z169jl0+vf/VfZ68E87iw+HA1bJQ3NnRg3sVLwewhVJOSInAXvFoSvDar2FpzRqnCGG20zqw6Tq0nVYHatJo1BBt7Qz0wW1psmltpfWNJdVOtAkmYVwxiRgZk7wOXDBQJV5YGxhiYDPpEmoMdB7u03CZMkR5vY+tuH5CGXDNIbNahnwPUBIjSfecsjCOievjq3225+L6H79F45Wru503Gzb8aNgk1A3/InidlMpLUuqH/HFZmK+vmec9ZT9TysiQhWG5R5KxZcNF8K5JikBcTYhryF5Efpy1tXgnu/clc2+DlQXLAgkkJFSXJqciLVeuZYD5RTZY6JchwfVzrm3By8uOR7GzqUFC7kt9Id9LsENeVvk0jA7N7NCiTJwFao09viYXqlj8HashpVoBWXA5Z8Nlc7K9LhtuupMNx2NeL6XyfQf5eXh7nXmB/wN+w2/I32Qe5ExKibdTIi0LuhTK4UgxqE587yk6TB3HS2M9zYJhswJeRFremzRziHowomARK4PjFo97SM1xHdwr4iFtrwG+NNPJ2oHamzXa7p+fZXOa8B0dW81x6rkNea0b9UJCFZI7/R7MzczQ5FMEM8dqpq7Zb6X9fqHuRq6u9vG+UqitN/h3v/sdNzcfr4/+P3t427Bhw4+LjYHbcAe/9P+8z/Lb+UDiEdCqly6z4Q6HA7vdzFTCYWl+gvkWV6fUW8Qqg8aOlNVDk0hnxIPFQZppweeIo/AjiUXET61KK+Q47IKFY2n7aG0/re+uNVdp7Lhd7FOt0SIXh7/1jtRg4arntjMV5oOQ3XLrzByagWFAiDw41xHzXrmVQaNLs8qAMlG1ZcPJFDVb6ZwNt5jEulbe3cmGm4+ZQyu4/2ul1Lv3213m7e81L+CN3SwL1U6oH+P6eUFtbnLp3OTv+H2KayRr16n3ztPl/FriGquWtkPYcuWkmRe0Rojfms8suLYhXc/7a2E2aFVoEtemtl7bc5/t2E0njuywl80LTT51zbhljB1pmHAdLnpP95ykojqSDzCmdzjtX/D22ztOpzP79lOZF17++dywYcM/jm2A23AHv/QB7q+SUnc7huEbbm4OjIcr5vKUxcA5YSywGKKt7D61wcpPrTPzvAsnVhA/hrzm3Zl6ipBYm9eBTy924bojVZqEKgRT1g0IvSlB5OVduO5K1TUDrAf9mjcplYFohBiwNshF5EnfpYpBIPalRmjOU2/7ciYZ0ZDtYrhospyP4XiUMVypcoVkQSyTppFZ+bul1B/EZ/DowXmP8U7v6dUVcynU21vsdIJ6i2dvTtMZqYeoJCszogWp7Xo0aTt5K62P8F6JfbdzaHN3EQux49iHtu48TVrPwb1S43qtu29ERZZIi5RJuF7Ip7Te0+447Y5hbQG9ZJwd6ORmI6RWWO/hSI0+2xjyNDWncc243sPzgDS5/Yd6Ty+vC5wH6/jx3wa4DRt+Cdgk1A3/YnhVSuVlKbUU7I8L9+dryr2ZskzUMpOzkhchydicfQktCSuK1SaldhnLc9tBGy4y3zJIcvfkTtQiCep49vhRa7ldntaiem9VXc6lhCqvODbXiLiWBydd5uu5cNgafSJdOqVLpxX14oq5SHXxEhVcLMEk2mVu3IL7gpqFZFisSanx3SaUzEL2hdyy4VIeSKfT99ZsvSyl/iWj4+qE/CTCZff7PfmPf+TP48jXvff0cOA4z5yWBc0FzZlkM8nbnmESHEeSIVaDLVsZzqjRCudpxb06Xl08ytDEzXtwr8hFVpwYiLdu1Ivg3oscOGkXToR2n0i7eP27a07TLp826dxF3FybBptcRN17d2qT76PrVpuZRdGWC2c1YZoxqxE0XVPIp2Xg2YXjtL98NH/E4XDg0aNHfPbZZwAXrOgv/Qnchg3/PtgYuA138Mtn4AKXOWIvp8p/8cUXrxoapj2lGPbiwCQLvhxwtcbCxSJ8LQsix8iKkwWxYzAzjYVTaSydnMDnxrRFvZaEy1HUwxkZLtalhfGWtbtUWmgs3narvIXDelwb93PAmL8kpRoZswzd3WhDMzQMGIO7TJhnREeqrVJqk+NaNpzHAr1ouE/D9JAhDW1AHVuu2R5JGq7UaWA+CgMw58zhxcg+7zlcvyqldrfjy1Lqy3i5eeHLqy959v99xuH+S+aFxr6RvRlDQj5VP4Tb1CvW6tCSnVYXqkrUZ4XcXS7Yt7iOyiyrzN1qsyDMEGFgOLNvUZ8V7FsYGHrfaUR+mFzKp8OFfBpMaGVwZArmVJo8uj7209mJKuEedh+xNKGdVdUMetXMCyOvMy8cj/s7tWevY99+ip//7bzZsOHHwzbAbbiDf5UB7ofcjH2f6jKO4rifKcWZqmOcGH3BF2O2BdFDSHNekLpgciKz4NaCX32+swsnflwdjEp/HVKd9KGOi304FqCQXtqF645U/OxIlZ4f5xErggSjh6dwodKGN4/XtI7UygiMvob+rv2aI+iESQYmTEYgh8tRQoJ1aftWaSR5psjU8sims5RqIzORgnfK+UJKja7N10mprx3iLgfuR/D5k88Z/8+R3ZMdz07POJQD+3szkzv1eMR6dEg9tVqxFgNjM1bn9ljH0BahvSGl0ntP1/iXOWTx+HgRXS4k1KU5TmPvMV0G9/bdN3wl1UI6lVU6dVp8SOudjWiXMQZtmTAGt7b/dh7YWvepTEgL86W5hZ3Yd3OJ6+W19Z7mgcWFnV8xM5GurxjHzDzf7T396LvvePQT9J6+9qdyO282bPjR8P8Aib5856MZJzkAAAAASUVORK5CYII="/>\n            </svg>\n\n        </div>\n\n        <div class="connectionLost-container">\n            <div class="connectionLost-title"><%= connectionLostTitle %></div>\n            <p class="connectionLost-text"><%= connectionLostTxt %></p>\n\n            <div class=\'connection-lost-reload\'>\n                <span class="connection-lost-img">\n                    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="102" height="102" viewBox="0 0 102 102">\n                  <image width="102" height="102" xlink:href="data:img/png;base64,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"/>\n                </svg>\n\n                </span>\n                <%= connectionRetry %>\n            </div>\n\n        </div>\n\n    </div>\n</div>\n\n';});

/* global ga */
define('jd',[
	'jquery',
	'lodash',
	'device',
	'pubsub',
	'miscUtils',
	'loc',
	'utils',
	'environment',
	'ghosts',
	'songs',
	'avatars',
	'fastdom',
	'trackerUtils',
	'es6Promise',

	'text!html/connectionLost.html'
], function (
	j,
	_,
	device,
	pubsub,
	miscUtils,
	loc,
	utils,
	env,
	ghosts,
	songs,
	avatars,
	fastdom,
	trackerUtils,
	es6Promise,

	connectionLostHtml,

	fs
) {
	'use strict';

	var Promise = es6Promise.Promise;
	
	var FUTURE_TIME = Date.now() + 30 * 24 * 60 * 60 * 1000; // About one month from now
	var FETCH_RESULT_TIMEOUT = 1000;
	var PING_TIMEOUT_MS = 60 * 1000; // 60secs/1min
	var STATUS_OK = 200 // "OK" status provided by server
	var MAC_ESCAPE = 53;
	var MAC_ENTER = 36;

	// The main module of the game (excluding the landing page). It is responsible for creating all other modules,
	// maintaining the game state (songSelection, coachSelection, tutorial, dance, afterDance), as well as
	// handling most of the server communication.
	//
	// Bootstrapping; the process of starting the game is not very straightforward, and needs a bit of explaination:
	// - The JustDanceNow (JDN) module is created by the landing page. At this point most of the module source files are
	//   fetched from the server but not yet instantiated and started. The landing page calls the JDN method
	//   createConnection() which tells JDN to connect to the server and request a room number, as well as adding hooks
	//   for triggering a game start.
	// - The game can now be launched, either by clicking a link on the landing page, or by joining with a phone. Both
	//   methods eventually leads to the JDN method launchGame() being called.
	// - launchGame() calls loadGameAssets(), which in turn calls loadGameHTML() and getCatalog(). These two methods
	//   spawn a lot of XHR requests.
	// - When the buildUI() method has built the UI (instantiated all the submodules, etc.) the uiDeferred is resolved,
	//   which in turn causes the doInit() (a private function inside launchGame()) function to be called.
	// - The doInit() function removes the landing page, sets the game state to 'songSelection' and fades in the game.
	function JustDanceNowGame() {
		console.log('%c --------------- JUST DANCE NOW --------------- ',
			'color:#FFFFFF; background:#000000; font-weight:bold');

		

		this.miscUtils = miscUtils;
		this.host = window.location.href.replace(/(http\:\/\/|https\:\/\/)([\w\-.]+).*/, '$2');
		if (window.location.href.match(/\:([0-9]+)/, '$1')) {
			this.port = parseInt(window.location.href.replace(/.*\:([0-9]+).*/, '$1'));
		}
		this.port = 3002;
		this.state = '';
		this.ftueState = false;
		this.ws = false;
		this.device = '';
		this.started = false;
		this.logMessages = false;
		this.players = {};
		this.pastPlayers = {};
		this.song = '';
		this.category = '';
		this.tabSelected = '';
		this.moveNr = 0;
		this.controller = 0;
		this.isDebug = false;
		this.channel = 0;
		this.hasInitialized = false;
		this.isInitializing = false;
		this.payer = {};
		this.uiDeferred = j.Deferred();
		this.initDeferred = j.Deferred();
		this.controllerSettedDfd = j.Deferred();
		this.checkUsabilityDfd = j.Deferred();
		this.isRegisterRoomError = false;
		this.isRegisterRoomErrorCount = 0;
		//set in onNavRest, resolved when songSelection.updatePreview is debounced & executed, used by messageHandler.songSelected
		this.songUpdatedDeferred = j.Deferred(); 
		this.scoreRecapExitDfd = j.Deferred();
		this.isPayPerPlay = true; //!(device.isiOS);
		this.isRoomVIP = false;
		this.isAutoplayDisabled = false;
		this.isUserInteractionRequired = false;
		this.isExitGameTriggered = false;
		this.isExitDanceState = false;
		this.isGhostDisabled = true;
		this.maintenanceData = false;
		this.danceMoveNr = null;
		this.vpppSuccess = false;

		this.api = '';
		this.room = -1;

		// Special parameter for large events
		this.isSuperManyMode = /superManyMode/.test(location.search);


		// Expose for easier debugging
		window.jd = this;
		window.pubsub = pubsub;

		// Detect pause feature in android tablets
		window.isGameMuted = function(isGamePaused) {
			window.jd.gui.handleSleepMode(isGamePaused);
		}

		// Detect back button for android tablets
		// Need to handle game states here
		window.isBackPressed = function(isBackPressed) {
			if (!!device.isAndroidTabletApp || !!device.isMacOSApp) {
				window.jd.executeBackBtnForDevice(isBackPressed);
			}
		}

		window.keyPressed = function(keyCode) {
			if (!!device.isMacOSApp) {
				if (keyCode === MAC_ESCAPE) //Escape key
					window.jd.executeBackBtnForDevice(true);
				else if (keyCode === MAC_ENTER) //Enter key
					window.jd.executeExitForMacOS();
			}
		}

		// Detect requestAnimation status on browser tab
		// Its mainly to detect & process achievements for players if they switch tabs during gameplay
		window.addEventListener('focus', function() {
			//requestAnimation running optimal
			if (!device.isChromecast) {
				window.jd.executeSMAnimationOnFocus();
			}
		}, false);

		// Track room no. error count & also error logs
		if (!!localStorage && !localStorage.trackRoomNrErrorCount)
			localStorage.trackRoomNrErrorCount = 0;

		
		document.onkeydown = window.jd.handleKeyboardKeys.bind(window.jd);
	}


	JustDanceNowGame.prototype = {

		// Returns a sync message response Object. Called by the message handler when the server wants to sync.
		// Arg types    Object
		sync: function (recv) {
			var t = Date.now();
			var s = {};
			s.o = recv.o;
			s.r = t;
			s.t = t;
			s.d = 0;
			return s;
		},

		isSongFreeToPlay: function (songId) {
			return songs.isSongFreeToPlay(songId);
		},

		isSongVIP: function (songId) {
			return songs.isSongVIP(songId);
		},

		// Utility function
		getCurrentSong: function () {
			return songs.getSong(this.song);
		},

		countPlayers: function () {
			return _.size(this.players);
		},

		isController: function (playerId) {
			return this.controller === playerId;
		},


		// Calculate the screen aspect ratio, update the main game container size to "fit" the screen and update the
		// base font size
		// Arg types                    String
		calculateAspectRatio: function () {
			var aspectRatio = (device.isMinimalUI && !device.isMacOSApp) ? '4:3' : '16:9';
			
			// Batch DOM reads
			var win = {
				width: window.innerWidth,
				height: window.innerHeight,
			};

			// Aspect ratio default is 16:9
			var cRatio, w, h, r;
			if (aspectRatio === '4:3') {
				cRatio = 4 / 3;
				w = win.width;
				h = win.height;
				r = w / h;
			} else {
				cRatio = 16 / 9;
				w = win.width;
				h = win.height;
				r = w / h;
			}

			// For older android tablets whose resolution is diff.
			// Still need to take up the entire width
			function getXSize() {
				if(device.isAndroidTabletApp || device.isMacOSApp) { 
					return win.width;
				} else {
					return Math.round(h * cRatio);
				}
			}

			var ySize, yOffset, xSize, xOffset;
			if (r > cRatio) {
				ySize = win.height;
				yOffset = 0;
				xSize = getXSize();
				xOffset = Math.floor((w - xSize) / 2);
			} else {
				xSize = win.width;
				xOffset = 0;
				ySize = Math.round(w / cRatio);
				yOffset = Math.floor((h - ySize) / 2);
			}

			// Batch DOM writes
			// Set aspect-ratio and position of main container and video player
			this.jContainer.css({ width: xSize, marginLeft: xOffset, height: ySize, marginTop: yOffset });
			this.inGameVideoPlayer && this.inGameVideoPlayer.canResize() && this.inGameVideoPlayer.resize(xSize, ySize);

			// Set a base font size and use font % in css for sub-elements
			this.jHTML
					.css({ fontSize: Math.round((xSize / 1280) * 125) })
					.toggleClass('wide', this.jContainer.width() / this.jContainer.height() > 1.4); // iPad stuff...

			this.containerScale = xSize / 1920;
		},


		// Sets the game state.
		// Arg types        String,   Array
		setState: function (newState, players) {
			if (this.state === newState) {
				console.warn('Already in state ' + newState + '. Do nothing.');
				return;
			}

			console.log('%c Game state change ', 'background: lawngreen; color: darkgreen; font-weight: bold',
					this.state || '[no state]', 'Ã¢â€ â€™', newState);

			var prevState = this.state;

			// Don't close the popup if isUserInteractionRequired flag is true (to notify the players)
			if (!this.isUserInteractionRequired) {
				this.isExitGameTriggered = false;
				this.popUp.close();
			}

			fastdom.write(function() {
				j('html')
					.removeClass('state-' + prevState.toLowerCase())
					.addClass('state-' + newState.toLowerCase());
			});
			
			this.teardownCurrentState(prevState, newState, players);
			
			this.state = newState;
			this.keydownHandler.setState(this.state);

			if (prevState === 'afterDance') {
				j.when(this.gui.afterDance.hideAfterDance()).then(function() {
					if (this.state !== newState) { return; } // If the state has changed while waiting for the animation, just bounce

					this.initNewState(prevState, newState, players);
				}.bind(this));
			} else {
				this.initNewState(prevState, newState, players);
			}

		},

		// Called before the game state changes. This is where the current state should be torn down.
		// Arg types                    String,       String
		teardownCurrentState: function (currentState, newState) {
			// Teardown of current state
			switch (currentState) {
				case 'songSelection':
	                if (newState !== 'coachSelection') {
						this.gui.songSelection.hide();
						this.gui.previewArea.hide();
						this.gui.hideSwipeTip();
					}

	                this.audio.playSFX('snap', { volume: 0.7 });

	                break;

				case 'coachSelection':
					if (newState === 'songSelection') {
						this.audio.playSFX('config-window-close', { volume: 0.7 });
					} else {
						this.audio.playSFX('dance-transition-in', { volume: 0.5 });
						this.gui.songSelection.hide();
						this.gui.previewArea.hide();
						this.gui.hideSwipeTip();
					}

					break;

				case 'tutorial':
					this.gui.tutorial.hide();
					newState === 'dance' || this.gui.hud.hide();
					break;

				case 'dance':
					this.gui.hud.hide();
					break;

				case 'afterDance':
					this.executeMaintenanceAfterDance();
					ghosts.removeGhosts();
            		this.audio.playSFX('snap', { volume: 0.75 });
            		this.audio.playSFX("dance-transition-out", {volume : 0.7});
					break;

			};
		},

		// Called after the previous state has been torn down and the game state has officially changed.
		// This is where the new state should be initialized.
		// Arg types            String,    String,   Array
		initNewState: function (prevState, newState, players) {
			var self = this;
			// Initialization of new state
			switch (newState) {
			case 'songSelection':
				this.gui.hud.hideDanceTransition();
				this.jCoverflowTabs.show();
				this.jCoverflowContainer.show();

				// Set ghosts disabled flag to always true in songSelection state
				// Will be triggered in coachSelection state & in neverDanceAlone call from server
				this.isGhostDisabled = true;

				var previewArea = this.gui.previewArea;
				this.gui.songSelection.show();
				
				//many mode
				this.gui.showSwipeTip(); 

				// Ghosts are already removed when tearing down after dance, so don't do it twice
				// NOTE(fredrik): if there was no previous state, we keep the ghosts, this occurs
				// when a player starts a song from preview mode.
				if (prevState !== '') {
					ghosts.removeGhosts();
				}

				if (prevState === 'coachSelection') {
					previewArea.setState("songDetails");
					// Don't remove it, coach-selection --> songSelection, tabRest is called
					// For tabRest, this flag is used to scroll in song-grid
					if (this.tabSelected === this.gui.coverflowTabs.tabArr[1].section) {
						this.focusSongGrid = true;
					}
				} else {
					previewArea.show();
				}

			
				break;

			case 'coachSelection':
				this.jCoverflowTabs.hide();
				this.jCoverflowContainer.hide();

				var songSelection = this.gui.songSelection;
				
				this.gui.previewArea.setState("coachSelection");
				songSelection.isShown = false;
				songSelection.show();
				this.gui.hud.maintenance.displayCounter = 0;

				break;

			case 'tutorial':
				this.gui.tutorial.show();
				break;

			case 'dance':
				this.gui.hud.show();
				break;

			case 'afterDance':
				this.gui.afterDance.buildAfterDance(players);
				this.gui.hud.danceTransition(false);
				break;
			}
		},


		
		// Message handler callback for when a player joins the room
		// Arg types        Object
		joinRoom: function (player, ftueDatas) {
			//Kick players incase autoplay is turned off
			if (!!this.isAutoplayDisabled) {
				this.handleKickAllPlayers();
				return;
			} 

			player.name = utils.stripEmojis(player.name);
			player.coach = -1;

			player.joinRoomTime = Date.now();

			this.extractParsedFTUEData(player);
			// add players to the jd core object
			this.gui.hud.players.addPlayerToCore(player);


			if (this.countPlayers() === 1) {
				if (this.isSuperManyMode) {
					this.extractRoomFTUE(player.ftueDatas);
				} else {
					this.setController(player, false);
				}
			}

			this.gui.addPlayer(player);
			this.ws.sendReadable({ func: 'updateRacetrackColor', playerID: player.id, color: player.color });
			if (player.id === this.controller && this.state === 'afterDance') {
				this.setState('songSelection');
			}

			//Tracking coverflow if players present
			trackerUtils.triggerTracking('player-join', this.countPlayers(), player.id);
		},

		// Message handler callback for when a player leaves the room
		// Arg types         String
		leaveRoom: function (playerId) {
			var player = this.players[playerId];
			var self = this;

			this.pastPlayers[playerId] = player;

			this.gui.hud.players.removePlayerFromCore(player); //remove players from the jd core object
			this.gui.removePlayer(player);
			if (this.countPlayers() > 0) {
				return;
			}

			this.setController({});
			// Show continue-btn in ftue state if no player present
			if (this.state === "afterDance" && !this.roomFTUEStates["SongComplete"]) {
				this.gui.afterDance.appendContinueBtn();
			}
			this.extractRoomFTUE();

			if (this.state === "coachSelection") {
				this.goToSongSelection();
			}

			// But first put the ghosts in past players so they can be shown in afterdance
			var ghostPlayers = ghosts.getGhosts();
			for(var ghostId in ghostPlayers) {
				this.pastPlayers[ghostId] = ghostPlayers[ghostId];
			}

			ghosts.removeGhosts();

		},

		// Set controlling player.
		// Arg types             Object, Boolean
		setController: function (player, doToast, switchController) {
			this.controller = player.id;
			var image = avatars.getAvatarHtml(player.avatar);

			// don't publish categories changed event yet
			songs.setFavoritesSongs(player.favorites || [], true);

			var self = this;
		
			this.getApiReadable('getCategories', {lang: lang, configId: player.configId}).then(function(categories) {

				songs.setCategories(categories);

				/*if (!jd.roomFTUEStates.PlaylistLimit) {
					songs.showOnlyCategories(function(cat) {
						return cat.trackingId === 'FTUE';
					});
				} else */
				if (jd.isRoomVIP) {
					songs.showOnlyCategories(function(cat) {
						return !cat.freeToPlay;
					});
				}

				if (!!switchController) {
            		self.extractParsedFTUEData(player);
            	}
            	self.extractRoomFTUE(player.ftueDatas); // will publish the categories changed event

            	// ensures the controller exists in the room before accepting the nav rest
            	if (!player.id && self.controllerSettedDfd.state() === "resolved") {
					self.controllerSettedDfd = j.Deferred();
				} else {
					self.controllerSettedDfd.resolve();
				}
			});


			if (!!doToast) {
				this.gui.toast(loc(882) // 882: Web_Generic_Text_ControllerChanged
					.replace('[player name]', this.gui.playerName(player)), '', image);
				this.gui.hud.players.updateController(); // Show controller icon on correct player
			}

			this.gui.setControlStateForPhone();
		},

		updatePlayerBalance: function(playerID, balance, isRegenOrPurchase) {
			var player = this.players[playerID];
			//fool proof recap score
			if(!player) { return; }

			if (!!isRegenOrPurchase) { // update the entire balance instead of diff. balance incase of purchase or coin regen
				player.wallet.balance = balance;
			} else {
				player.wallet.balance += balance;
			}

			this.gui.hud.players.updateBalance(playerID, player.wallet.balance);
		},

		//Display toast if there's not enough player coin balance
		displayCoinBalanceToast: function(playerID) {
			var player = this.players[playerID];

			this.gui.toasts.showCoinBalanceToast(player, this.countPlayers());
		},

		//Display VIP toast if the room or player is not VIP
		displayVIPToast: function() {
			if (!this.isRoomVIP) {
				this.gui.toasts.showVIPToast(this.controller);
			}
		},

		displayConnectionInfos : function() {
			this.gui.modal.build("connectionNoPhone");
        	this.gui.modal.show();
		},

		//Display player level & gain on score recap screen
		showPlayerLevel: function(playerID, xpDetails, scaledScore) {
			var player = this.players[playerID];
			this.gui.afterDance.showPlayerProgress(player, xpDetails, scaledScore);
		},

		isTrial: function() {
			return this.channel === 0;
		},

		// Message handler callback for whenever someone (mobile client or web) sends navRest to the
		// server. Delegate to SongSelection module
		// Arg types         Object
		onNavRest: function (msg) {
			var self = this;

			j.when(self.uiDeferred.promise(), self.initDeferred.promise())
			.then(function() {
				if (self.state !== 'songSelection') {
					self.setState('songSelection');
				}

				// promise used to be sure not to go to coachSelection state before having the right preview
				//handles the songSelected state too
				if (self.songUpdatedDeferred.state() === "resolved" &&
					(msg.sender === "web" || //nav rest when leaving lobby
					(msg.song !== self.song))) {
						delete self.songUpdatedDeferred;
						self.songUpdatedDeferred = j.Deferred();
				}
				
				if (msg.sender !== "web") {
					self.gui.previewUrl = msg.url;
					self.gui.songSelection.focusSong(msg.song, msg.category, false, msg.sender);
				}
			});
		},

		// Message handler callback for when some player has changed coach. Delegate to CoachSelection module.
		coachSelected: function (msg) {
			var player = this.players[msg.player];
			if (!player) { return; }

			player.coach = msg.coach;
			player.animateCoach = true; // add an extra prop to animate in coach-selection state

			this.gui.hud.players.bouncePlayer(msg.player);
			this.gui.previewArea.updateCoachSelectionChoice();
		},



		// Fetch detailed song data (beat, lyrics, etc.) for a given song and calculate average "pulse"
		// Arg types           String
		getSongData: function (songId) {
			var song = songs.getSong(songId);
			if (!song) { return; }

			if (!!song.fetched) {
				return song.dataPromise;
			}

			j.ajax({
				url: song.base + '/' + songId + '.json',
				type: 'GET',
				cache: false,
				dataType: 'text',
			}).done(function (data) {
				
				// Checks for JSON (an initial opening bracket) or JSONP
				var songData = data.charAt(0) === '{' ? JSON.parse(data) : utils.parseJsonp(data);

				var sum = 0, nSamples = 10;
				for (var i = 0; i < nSamples; i++) {
					sum += songData.beats[i + 1] - songData.beats[i];
				}
				songData.pulse = parseFloat(sum / (nSamples * 1000), 10);

				var songInfo = songs.setFullSongInfo(songId, songData);

				song.dataPromise.resolve(songInfo);
			}).fail(function (jqXHR, status) {
				console.log(songId + '.json: failed with', status);
				song.dataPromise.reject();
			});

			return song.dataPromise.promise();
		},

		// Private helper function
		// Fetch scoring windows for a given song
		// Returns a Promise that is resolved when the scoring windows has been fetched.
		// Arg types                 Object
		getScoringWindows: function (song) {

			if (!!song.scoringWindows) {
				return song.scoringWindows;
			}

			song.scoringWindows = [];

			var swPromises = _.times(song.coaches, function (coach) {
				return j.ajax({
					url: songs.getSong(song.id).base + '/data/moves/' + song.id + '_moves' + coach + '.json',
					type: 'GET',
					dataType: 'text',
				}).done(function (data) {
					// Checks for JSON (an initial opening bracket) or JSONP
					song.scoringWindows[coach] = data.charAt(0) === '{' ? JSON.parse(data) : utils.parseJsonp(data);
				}).fail(function (jqXHR, status) {
					console.log(song.id + '_moves' + coach + '.json: failed with ' + status);
				});
			});

			return j.when.apply(j, swPromises)
			.then(function() {
				return song.scoringWindows;
			}).fail(function() {
				console.err("fail get scoring window ")
				return false;
			});
		},

		// Fetch detailed song data and scoring windows for the currently focused song.
		// Returns a Promise that is resolved when all data has been successfully fetched.
		loadDanceData: function () {
			var self = this;
			var songId = this.song;
			var song = this.getCurrentSong();

			var onFetchFail = function () {
				console.err("fail load dance data");
				self.setState('songSelection');
				self.gui.toast(loc(978), { danger: true }); // 978: Web_404_Sorry
				self.sendStopSong();
			};

			return this.getSongData(songId)
			.then(function (song) {
				return self.getScoringWindows(song);
			}).fail(onFetchFail);

		},


		// Sends the songEnd message to the server, thus ending a dance.
		reqResults: function() {
			this.started = false;
			setTimeout(function() {
				this.ws.sendReadable({func: 'songEnd', roomID: this.room, song: this.song});
			}.bind(this), FETCH_RESULT_TIMEOUT);
		},


        setRoomVIP: function(isRoomVIP, player) {

        	// if the status doesn't change
        	if (isRoomVIP === this.isRoomVIP) {
        		// active payer changed : find the new payer
        		if (isRoomVIP && !player) {
        			this.setRoomVIPOwner();
        		}
        		return;
        	}

        	this.isRoomVIP = isRoomVIP;
        	// handle the new room status
        	this.isRoomVIP ? this.gui.unlockRoom() : this.gui.lockRoom();
			pubsub.publish('vipStatusChanged');

			this.setRoomVIPOwner(player ? player.id : "");
        },

        setRoomVIPOwner: function(id) {
        	// check if current owner is still owner
       		if (id === this.owner) {
       			return;
       		}

       		var name, color;

       		if (this.isRoomVIP && id && !this.players[id] && localStorage.screen) {
       			screenString = JSON.parse(localStorage.screen).value.split('~')[0].split('=')[1];
				if(id === screenString.id) {
					this.owner = id;
					this.setRoomVIPName(screenString.name);
					return;
				}
       		}

       		if (!id || !this.players[id]) {
       			var newOwner =  _.find(this.players, function(p) {
        			return p.timeLeft > 0;
        		});
        		this.owner = newOwner ? newOwner.id : "";
       		} else {
       			this.owner = id;
       		}

       		if (this.isRoomVIP && this.owner && this.players[this.owner]) { //active payer is in the room
    			var player = this.players[this.owner];
    			name = player.name;
    			color = player.color;
        	} else {
        		name = ""; //no name is displayed
        	}
        	
        	//set the new name
        	this.setRoomVIPName(name, color);
        },

        // set the room owner name :
        // first VIP to connect
        // if room is not VIP, no name ("")
        // else if the owner of the room leaves 
        // but another VIP player is present
        // the first VIP player in the player list becomes the owner
        setRoomVIPName: function(name, color) {

        	var elem = this.jRoom.find('.account__name');
        	color && this.jRoom.removeClass().addClass(color);

    		elem.html(name);
        },

        // helper function to access the name of the player in the dancercard
		setPlayerNameVIP: function(player, isVIP) {
			this.gui.hud.players.displayVIP(player, isVIP);
		},

		// Reset the "virtual pay-per-play purchase" flag each time
		resetVPPPFlag: function() {
			if (!!this.vpppSuccess)
				this.vpppSuccess = false;
		},

        goToLobby: function() {
            // only access lobby from song selection state
            if (this.state !== 'songSelection' && 
            	this.state !== 'afterDance') {
                return;
            }
            if (this.countPlayers() < 1) {
            	this.displayConnectionInfos();
            	trackerUtils.triggerTracking('play-btn'); //Tracking connect play-btn click
            	return;
            }

            var songId = this.song;
            songs.deactivateSong(this.song); // pay-per-play : once a song is finished, it has to be bought again

            if (!!this.isPayPerPlay) {
                // This will eventually set the state to coachSelection
                this.ws.sendReadable({
                    func: 'selectSong',
                    song: songId
                });

                trackerUtils.triggerTracking('Navigation - SM - Go-To-Coach-Selection'); //Tracking
            } else {
                this.setState('coachSelection');
            }
        },

        goToSongSelection: function() {
        	if (!!this.gui.adminMenu.adminMenuOpen) {
        		this.gui.adminMenu.adminMenuHide();
    		}
    		
    		this.resetVPPPFlag();
        	this.ws.sendReadable({ func: 'deselectSong' });
        },

        goToLaunchSong: function() {

			var self = this;
			this.resetVPPPFlag();

        	if (this.countPlayers() < 1) {
	          	this.displayConnectionInfos();
	          	return;
			}


			if (this.isPayPerPlay) {
				var pppMsg = {
					func: 'virtualPayPerPlayPurchase',
					trade: this.song
				};

				trackerUtils.triggerTracking('Navigation - SM - Launch-Song'); //Tracking

				this.sendWSReadable(pppMsg).then(function(vpppData) {
					var songLaunchMsg = {
						func: 'songLaunch',
						token: vpppData.token
					}

					self.sendWSReadable(songLaunchMsg);
				});
				return;
			}


            if (this.isSongVIP(this.song)) {
                this.displayVIPToast();
                return;
            }

            this.setState('songSelection');
        },
        

        startSong: function(currentPosition, startTime) {

        	var category = 		this.category;
			var prevCategory = 	this.prevCategory;
			var song = 			this.song;

			var mapFilter = category && songs.getCategory({ id: category }).trackingId || 'N/A';
			var mapFilterDefault = (prevCategory ? songs.getCategory({ id: prevCategory }).trackingId : mapFilter) || 'N/A';
			// send along a map of player colors as well (publicID:color)
			var playersColor = {};
			for (var p in this.players) {
				playersColor[p] = this.players[p].color;
			}

			this.ws.sendReadable({
				func: 'songStart',
				song: song,
				playerColors: playersColor,
				startTime: startTime,
				mapFilter: mapFilter,
				mapFilterDefault: mapFilterDefault, // UI is rebuilt and the first category is selected by default
				mapPos: this.gui.songSelection.focusedSong || -1,
			});

			this.prevCategory = category;

        },

        onVideoError: function() {
        	if (this.state === 'songSelection' ||
				this.state === 'coachSelection' ||
				this.state === 'afterDance') {
					return;
			}

        	var contentLoc = (device.isChromecast || device.isMinimalUI ? loc(3498) : loc(3499));
			this.popUp.build({
				title : loc(3495),
				content : contentLoc.replace(/\\n/g, '<br>'),
				isError : true,
				validateCB : function() {
 					this.sendStopSong();
					this.songStopped();
				}.bind(this)
			});
        },

		sendStopSong: function(id, session) {

			var msg = { func: 'stopSong' };

			if (!!id) {
				msg.id = id;
			}

			if (!!session) {
				msg.session = this.session;
			}

            this.ws.sendReadable(msg);

		},

		songStopped: function() {
			this.setState('songSelection');
			this.currentVideo = '';

			songs.deactivateSong(this.song); // pay-per-play : once a song is finished, it has to be bought again

			ga('send', 'event', 'video', 'finished', 'user_stopped');
		},

		/* Not used right now, but will be used when we show one Favorites category per player
		setFavoritesForPlayer: function (player, favorites) {
			if (favorites.length) {
				var playerFavoritesCat = songs.getCategory(player.id + '_favorites');
				if (playerFavoritesCat) {
					songs.updateCategorySongs(playerFavoritesCat.id, favorites);
				} else {
					songs.addCategory({
						id: player.id + '_favorites',
						songs: favorites,
						classes: [ 'favorites' ],
						playerName: player.name,
						visible: true,
					});
				}
			} else {
				songs.removeCategory(player.id + '_favorites');
			}

			player.favorites = favorites;
		},*/


		// Message handler callback for when a player's dancer card has been updated.
		// Arg types            Object
		updatePlayer: function (p) {
			p.name = utils.stripEmojis(p.name);

			p.ftueDatas = p.ftueDatas ? JSON.parse(p.ftueDatas).states : null;
			p.dancerCardEdited = this.extractValueFromFTUE(p.ftueDatas, "SongComplete");

			this.gui.hud.players.playerFewModeUpdateElement(p);
			this.gui.updateResultAvatars(p);
			this.gui.adminMenu.updatePlayer(p);

			for (var key in p) {
				this.players[p.id][key] = p[key];
			}

			if (this.payer && this.payer.id === this.players[p.id].id) {
				this.jRoom.find('.account-name .name').html(this.players[p.id].name);
			}

			if (p.id === this.controller) {
				this.extractRoomFTUE(p.ftueDatas)
			}

			if (p.id === this.owner) {
				this.setRoomVIPName(p.name, p.color);
			}

			if (this.state === "coachSelection") {
				this.gui.previewArea.updateCoachSelectionChoice();
			}
		},

		transferControlToPlayer: function (pid) {
			this.ws.sendReadable({ func: 'transferControl', playerID: pid });
		},

		kickPlayer: function (playerId) {
			this.ws.sendReadable({ func: 'kickPlayer', playerID: playerId });
		},

		getVisiblePlayersAndGhosts: function () {
			var numPlayers = this.countPlayers() + Object.keys(ghosts.getGhosts()).length;
			var playingAlone = numPlayers === 1 && this.state === 'dance';
			var players = _.extend({}, this.players, ghosts.getGhosts());

			// In single player mode, we can fit 1 player + 2 challengers. In regular few mode, we can fit 4 players
			return _(players).toArray().sortBy(this.playerOrder).first(playingAlone ? 3 : 4).value();
		},

		getVisibleGhosts: function () {
			return _(this.getVisiblePlayersAndGhosts()).where({ isGhost: true, isVisible: true }).value();
		},

		playerOrder: function (player) {
			// Ghosts should always be at the end of the list.
			// Sort regular players by the time they joined.
			return player.isGhost ?
				// We offset ghosts and use the timestamp from the MongoID to order them between themselves
				FUTURE_TIME + parseInt(player.id.substr(player.id.length - 8), 16) :
				// Regular players are simply ordered by join time, which is hopefully before FUTURE_TIME
				player.joinRoomTime;
		},


		// In after dance, when players level up, it is common that they unlock avatars. Show one or more toasts to
		// notify them about that.
		onAvatarUnlocked: function (playerId, avatarId) {
			var player = this.players[playerId];
			if (!player) { return; }

			this.gui.hud.players.updateAvatarReward(player, avatarId);
			this.gui.afterDance.afterDanceBuiltDfd
			.then(function() {
				this.gui.toasts.showAvatarUnlockedToast(player, avatarId);
			}.bind(this));

		},


		// ### Mobile-specific stuff ###

		// Used when running on iPad. Called by the native app to resume playback after the video has been paused for
		// some reason, e.g. the user unplugging the headphones
		resumeAudioVideo: function () {
			var self = this;
			var player = this.inGameVideoPlayer;

			if (this.state === 'tutorial') {
				player.load();
				player.play();
				return;
			}

			if (this.state === 'dance') {
				console.log('Trying to resume audio/video');

				setTimeout(function () {
					player.pause();
					self.gui.hud.pauseHUD();

					setTimeout(function() {
						player.resume();
						self.gui.hud.resumeHUD();
					}, 200);
				}, 100);
			}

			if ((this.state === 'songSelection' || this.state === 'coachSelection' || this.state === 'afterDance') && this.audio) {
				setTimeout(function() { this.resumePreview(); }.bind(this.audio), 300);
			}
		},

		extractParsedFTUEData: function(player) {
			var datas = player.ftueDatas ? JSON.parse(player.ftueDatas).states : null;

			player.ftueDatas = datas;
			player.dancerCardEdited = this.extractValueFromFTUE(player.ftueDatas, "SongComplete");
		},

		extractRoomFTUE: function(ftueDatas) {
			// if FTUE data is empty, then dont execute any FTUE conditions
			if (!!ftueDatas && ftueDatas.length < 1) {
				this.ftueState = false;
				this.jHTML.removeClass("ftue");
				return;
			}
			// Execute FTUE conditions only if data is present
			var currentPlaylistLimit = this.roomFTUEStates ? this.roomFTUEStates.PlaylistLimit : 1; 
			var currentSongComplete = this.roomFTUEStates ? this.roomFTUEStates.SongComplete : 1;

			if (!ftueDatas) {
				this.roomFTUEStates = {
					"PlaylistLimit" : 1,
					"SongComplete" : 1
				};
			} else {
				this.roomFTUEStates = this.extractFromFTUE(ftueDatas, this.roomFTUEStates);
			}

			if (currentSongComplete !== this.roomFTUEStates.SongComplete) {
				currentSongComplete = this.roomFTUEStates.SongComplete;
				if (currentSongComplete) {
					this.jHTML.removeClass("ftue");
				} else {
					this.jHTML.addClass("ftue");
				}
			}


			if (currentPlaylistLimit !== this.roomFTUEStates.PlaylistLimit) {
				currentPlaylistLimit = this.roomFTUEStates.PlaylistLimit;
				if (currentPlaylistLimit) {
					this.ftueState = false;
				} else {
					this.ftueState = true;
				}
				/*songs.showOnlyCategories(function(cat) {
					return (currentPlaylistLimit ? cat.trackingId !== 'FTUE' : cat.trackingId === 'FTUE');
				});*/

			} else if (this.roomFTUEStates.PlaylistLimit != 0 && this.state !== 'dance') {
				this.ftueState = false;
				!!this.jHTML && this.jHTML.removeClass("ftue");
			}
		},

		extractValueFromFTUE: function(ftueDatas, stateName) {
			
			var state = _.find(ftueDatas, {'state' : stateName});
			return !!state ? parseInt(state.val, 10) : 0;
		},

		extractFromFTUE: function(ftueDatas, states) {

			var result = {};
			
			for (var state in states) {
				result[state] = this.extractValueFromFTUE(ftueDatas, state);
			}

			return result;
		},

		// Automatically hide the mouse cursor after a set amount of time and show it again if it moves (during dance).
		hideMouseCursor: function () {
			if (device.isIpad || device.isChromecast) {
				device.isIpad && j('html').addClass('hide-cursor');
				return;
			}

			var self = this;
			var hidden = false;

			function hideCursor () {
				j('html').addClass('hide-cursor');
				hidden = true;
				setTimeout(function () {
					hidden = false;
				}, 500);
			}

			j(document).on('mousemove', _.throttle(function showCursor () {
				if (hidden || self.state !== 'dance') { return; }
				hidden = false;
				j('html').removeClass('hide-cursor');
				clearTimeout(self.cursorHideTimeout);
				self.cursorHideTimeout = setTimeout(hideCursor, 1500);
			}, 500));

			hideCursor();
		},

		// Stop hiding the mouse cursor. Called e.g. when leaving the dance state.
		resetMouseCursor: function () {
			j(document).off('mousemove');
			clearTimeout(this.cursorHideTimeout);
			j('html').removeClass('hide-cursor');
		},


		handleAutoplayMode: function() {
			this.isAutoplayDisabled = true;

			this.popUp.build({
		        title : loc(3702),
		        content : loc(3703),
		        validateCB : function() {
					location.reload(true);
				}
		    });
		    
		    this.handleKickAllPlayers(); //Kick players incase autoplay is turned off
		},

		handleUserInteractionMode: function() {
			this.isUserInteractionRequired = true;
			var videoPlayer = this.inGameVideoPlayer;

			this.popUp.build({
		        title : loc(3548),
		        validateCB : function() {
					this.close();
					this.core.isUserInteractionRequired = false;
					this.$PopUp.removeClass('feature--autoplay');
					if(this.core.state === 'dance' && videoPlayer.getState() !== videoPlayer.states.PLAYING) {
						this.core.video.play();
					}
				}
		    });
		},

		handleKickAllPlayers: function() {
			var self = this;
			Object.keys(this.players).forEach(function(value) {
			    self.kickPlayer(value);
			});
		},

		executeMaintenanceAfterDance: function() {
			var self = this;

			utils.makeHTTPRequestForMaintenance()
			.then(function(data) {
				// Update maintenance data within game
				var maintenanceData = utils.processMaintenanceData(data);

				if (!!maintenanceData) {
					var currentTime = new Date().getTime();
					var MST = maintenanceData.startTime;
					var MET = ((!!maintenanceData.endTime && maintenanceData.endTime > currentTime) ? maintenanceData.endTime : '');

					self.maintenanceData = maintenanceData;
					if (!window.ignoreMaintenance) {
						if (!!MST && currentTime > MST) {
							utils.renderMaintenancePage(self.jBody, MET, self.mainLocObj);
							self.ws.close();
						} else {
							self.gui.hud.maintenance.show();
						}
					}
				}
			});
		},

		executeBackBtnForDevice: function(isBackPressed) {
			if (!isBackPressed) { return; }

			if (j('#content-wrapper').css('display') === 'block') {
				this.gui.iframe.hide(); // Close iframe if displayed in game
			} else if (this.state === 'songSelection' && !!this.gui.modal.isShown) {
				this.gui.modal.hide(); // Close the modal, if its open
			} else if (this.state === 'coachSelection' || this.state === 'afterDance') {
				this.goToSongSelection();
			} else if (this.state === 'dance') {
				// Show back to song library popup during dance state
				if (!!device.isMacOSApp && !!this.isExitDanceState) {
					this.isExitDanceState = false;
					this.popUp.close();
					return;
				}

				if (!!device.isMacOSApp) { this.isExitDanceState = true; }
				this.gui.adminMenu.buildPopUp();

			} else if (this.state === 'songSelection') {
				if (!!device.isMacOSApp && !!this.isExitGameTriggered) {
					this.isExitGameTriggered = false;
					this.popUp.close();
					return;
				}

				this.isExitGameTriggered = true;

				this.popUp.build({
					title : loc(3707),
					validateCB : function() {
						if (!!device.isMacOSApp) {
							window.webkit.messageHandlers.jsHandler.postMessage("Quit");
							return;
						}
						location.href = "uniwebview://QUITGAME" + "";
					}
				});
			}
		},

		executeExitForMacOS: function() {
			if (!!this.isExitGameTriggered) {
				window.webkit.messageHandlers.jsHandler.postMessage("Quit");
			}
		},

		executeSMAnimationOnFocus: function() {
			if (this.state !== 'dance') { return; }

			if (!this.gui.hud.players.isManyMode) {
				this.gui.hud.players.detectAchievements();
			}
		},

		// Attach keyboard events to this method only for song-selection method
		handleKeyboardKeys: function(e) {
			if (this.state !== 'songSelection') { return; }

			let text = e.type + ' key=' + e.key + ' code=' + e.code;
			
		    if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'PageDown' || e.key === 'PageUp') {
		    	if (this.tabSelected === "" || 
		    		this.tabSelected === this.gui.coverflowTabs.tabArr[0].section) {
		    		if (!j('.playlist-grid').attr('tabindex')) {
			    		j('.playlist-grid').attr('tabindex', '1');
			    	}
			    	j('.playlist-grid').focus();
		    	} else if (this.tabSelected === this.gui.coverflowTabs.tabArr[1].section) {

		    		if (!j('#section-songlist .item').attr('tabindex')) {
			    		j('#section-songlist .item')[0].setAttribute('tabindex', '2');
			    	}
			    	j('#section-songlist .item').focus();
		    	} else {
			    	if (!j('#section-playlist .item').attr('tabindex')) {
			    		j('#section-playlist .item')[0].setAttribute('tabindex', '2');
			    	}
			    	j('#section-playlist .item').focus();
		    	}
		    }
		},


		sendWSReadable: function(content, answerFunc) {
			this.ws.sendReadable(content);
			var nameFunc = answerFunc || content.func;

			return this.getWSReadable(nameFunc);
		}, 

		getWSReadable: function(nameFunc) {
			if (!this.webSocketDfds[nameFunc]) {
				this.webSocketDfds[nameFunc] = $.Deferred();
				this.webSocketDfds[nameFunc]
				.then(function(result) {
					this.webSocketDfds[nameFunc] = null;
					return result;
				}.bind(this));
			}

			return this.webSocketDfds[nameFunc];
		},

		getApiReadable: function(apiFunction, params, method) {
			
			if (method === undefined)
				method = 'GET';

			return new Promise( function(resolve, reject) {

				var platform = userAgent.device.model && userAgent.device.model.toLowerCase();

				// Please note that MAC OS architecture is different to that of Windows
				// Check MAC OS & its browser
				if (platform == 'windows' || 
					(platform == 'androidtv' || !!device.isAndroidTvBrowser) || 
					(userAgent.os.name === "Mac OS" && (userAgent.browser.name === "Safari" || userAgent.browser.name === "Chrome" || userAgent.browser.name === "WebKit")))
					platform = 'web';
				else if (platform == 'mac')
					platform = 'ipad';

				var xhr = new XMLHttpRequest();

				xhr.onreadystatechange = function(event) {
					if (this.readyState === XMLHttpRequest.DONE) {
						if (this.status === STATUS_OK)
							resolve(JSON.parse(this.responseText));
						else
							reject(this.status, this.statusText);
					}
				};

				var url = window.jdnsApiURL + apiFunction;

				if (params && method == 'GET') {
					var paramString = '?';
					var paramArray = [];

					for (var key in params) {
						paramArray.push(key +'='+ encodeURIComponent(params[key]));
					}

					url += paramString + paramArray.join('&');
				}

				xhr.open(method, url, true);
				xhr.setRequestHeader('x-platform', platform);

				if (method == 'POST')
					xhr.setRequestHeader('Content-Type', 'application/json');

				xhr.send(method == 'POST' ? JSON.stringify(params) : null);

			});

		},


		// Respond to ping messages with 'pong'. If we have not gotten a ping message for 30 seconds, assume that we
		// have been disconnected.
		onPing: function () {
			this.ws.sendReadable({ func: 'pong' });
			clearTimeout(this.pingTimeout);

			if (this.isConnectionLost) {
				// We got a new ping, which means the connection has been reestablished
				this.isConnectionLost = false;
				j('#just-dance-now')
							.removeClass('connection-lost')
							.removeAttr('data-conn-msg')
							.find('.connectionLost-wrapper').remove();
			}

			this.pingTimeout = setTimeout(function() {
				console.warn('PING-PONG TIMEOUT OCCURRED');
				this.onConnectionLost();
				// Track Ping pong timeout connection
				trackerUtils.trackClickEvents('Ping pong timeout occurred - Session: '+ this.session + ' - Device: ' + this.device);
			}.bind(this), PING_TIMEOUT_MS);
		},


		onConnectionLost: function() {
			if (!!this.isConnectionLost) { return; }

			sessionStorage.homeScreenErrorMsg = loc(2443); // 2443: Smart_Home_ConnectionLost
			this.isConnectionLost = true;
			if (this.ws.readyState !== this.ws.STATES.CLOSED) {
				this.ws.close();
			}

			var self = this,
				$connectionLost = j(_.template(connectionLostHtml) ({
					connectionLostTitle: loc(3656),
					connectionLostTxt: (!device.isChromecast ? loc(3657) : loc(3764)),
					connectionRetry: loc(2759)
				}));


			// Initialising elements if not found, mainly for landing page
			if (!this.jBody) {
				this.jBody = j('body');
				this.jMain = this.jBody.find('.main');

				this.jMain.remove();
				this.jBody.addClass('connection-lost')
						.attr('data-conn-msg', sessionStorage.homeScreenErrorMsg)
						.append($connectionLost);
			} else {
				// Remove elements from DOM during connection-lost screen
				this.jContainer
							.addClass('connection-lost')
							.attr('data-conn-msg', sessionStorage.homeScreenErrorMsg)
							.append($connectionLost)
							.find('video').remove();
				this.jBody.find('.banner').remove();
				this.jBody.find('audio').remove();
				this.jViews.remove();
				this.jHUD.remove();
			}

			j('.connection-lost-reload').on('click', function() {
				j(this).fromTo(0.2, { transform: 'scale(0.7)' }, { transform: 'scale(1)' });
				self.reset();
			});

		},

		// Reset the whole game by reloading the page. Called e.g. when something goes terminally wrong.
		reset: function () {
			this.ws.close();
			// Track websocket reset connection
			trackerUtils.trackClickEvents('Websocket reset - Room: '+ this.room + ' - Session: '+ this.session + ' - Device: ' + this.device);

			clearTimeout(this.pingTimeout);

			if (device.isChromecast) {
				// Normally we return to the landing page when all players have left.
				// On Chromecast we terminate the entire app instead, following Google guidelines.
				_.delay(window.close, 4000);
				// Track Chromecast websocket reset connection
				if (this.countPlayers() > 0)
					trackerUtils.trackClickEvents('Chromecast connection terminated - Room: '+ this.room + ' - Session: '+ this.session + ' - Device: ' + this.device);
			} else {
				if(navigator.onLine) {
					location.reload(true);
				} else {
				    this.onConnectionLost();
				}
			}
		}

	};

	return JustDanceNowGame;

});

// MIT License:
//
// Copyright (c) 2010-2012, Joe Walnes
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/**
 * This behaves like a WebSocket in every way, except if it fails to connect,
 * or it gets disconnected, it will repeatedly poll until it successfully connects
 * again.
 *
 * It is API compatible, so when you have:
 *   ws = new WebSocket('ws://....');
 * you can replace with:
 *   ws = new ReconnectingWebSocket('ws://....');
 *
 * The event stream will typically look like:
 *  onconnecting
 *  onopen
 *  onmessage
 *  onmessage
 *  onclose // lost connection
 *  onconnecting
 *  onopen  // sometime later...
 *  onmessage
 *  onmessage
 *  etc...
 *
 * It is API compatible with the standard WebSocket API, apart from the following members:
 *
 * - `bufferedAmount`
 * - `extensions`
 * - `binaryType`
 *
 * Latest version: https://github.com/joewalnes/reconnecting-websocket/
 * - Joe Walnes
 *
 * Syntax
 * ======
 * var socket = new ReconnectingWebSocket(url, protocols, options);
 *
 * Parameters
 * ==========
 * url - The url you are connecting to.
 * protocols - Optional string or array of protocols.
 * options - See below
 *
 * Options
 * =======
 * Options can either be passed upon instantiation or set after instantiation:
 *
 * var socket = new ReconnectingWebSocket(url, null, { debug: true, reconnectInterval: 4000 });
 *
 * or
 *
 * var socket = new ReconnectingWebSocket(url);
 * socket.debug = true;
 * socket.reconnectInterval = 4000;
 *
 * debug
 * - Whether this instance should log debug messages. Accepts true or false. Default: false.
 *
 * automaticOpen
 * - Whether or not the websocket should attempt to connect immediately upon instantiation. The socket can be manually opened or closed at any time using ws.open() and ws.close().
 *
 * reconnectInterval
 * - The number of milliseconds to delay before attempting to reconnect. Accepts integer. Default: 1000.
 *
 * maxReconnectInterval
 * - The maximum number of milliseconds to delay a reconnection attempt. Accepts integer. Default: 30000.
 *
 * reconnectDecay
 * - The rate of increase of the reconnect delay. Allows reconnect attempts to back off when problems persist. Accepts integer or float. Default: 1.5.
 *
 * timeoutInterval
 * - The maximum time in milliseconds to wait for a connection to succeed before closing and retrying. Accepts integer. Default: 2000.
 *
 */
(function (global, factory) {
    if (typeof define === 'function' && define.amd) {
        define('reconnectingWebSocket',[], factory);
    } else if (typeof module !== 'undefined' && module.exports){
        module.exports = factory();
    } else {
        global.ReconnectingWebSocket = factory();
    }
})(this, function () {

    if (!('WebSocket' in window)) {
        return;
    }

    function ReconnectingWebSocket(url, protocols, options) {

        // Default settings
        var settings = {

            /** Whether this instance should log debug messages. */
            debug: false,

            /** Whether or not the websocket should attempt to connect immediately upon instantiation. */
            automaticOpen: true,

            /** The number of milliseconds to delay before attempting to reconnect. */
            reconnectInterval: 1000,
            /** The maximum number of milliseconds to delay a reconnection attempt. */
            maxReconnectInterval: 30000,
            /** The rate of increase of the reconnect delay. Allows reconnect attempts to back off when problems persist. */
            reconnectDecay: 1.5,

            /** The maximum time in milliseconds to wait for a connection to succeed before closing and retrying. */
            timeoutInterval: 2000,

            /** The maximum number of reconnection attempts to make. Unlimited if null. */
            maxReconnectAttempts: null
        }
        if (!options) { options = {}; }

        // Overwrite and define settings with options if they exist.
        for (var key in settings) {
            if (typeof options[key] !== 'undefined') {
                this[key] = options[key];
            } else {
                this[key] = settings[key];
            }
        }

        // These should be treated as read-only properties

        /** The URL as resolved by the constructor. This is always an absolute URL. Read only. */
        this.url = url;

        /** The number of attempted reconnects since starting, or the last successful connection. Read only. */
        this.reconnectAttempts = 0;

        /**
         * The current state of the connection.
         * Can be one of: WebSocket.CONNECTING, WebSocket.OPEN, WebSocket.CLOSING, WebSocket.CLOSED
         * Read only.
         */
        this.readyState = WebSocket.CONNECTING;

        /**
         * A string indicating the name of the sub-protocol the server selected; this will be one of
         * the strings specified in the protocols parameter when creating the WebSocket object.
         * Read only.
         */
        this.protocol = null;

        // Private state variables

        var self = this;
        var ws;
        var forcedClose = false;
        var timedOut = false;
        var eventTarget = document.createElement('div');

        // Wire up "on*" properties as event handlers

        eventTarget.addEventListener('open',       function(event) { self.onopen(event); });
        eventTarget.addEventListener('close',      function(event) { self.onclose(event); });
        eventTarget.addEventListener('connecting', function(event) { self.onconnecting(event); });
        eventTarget.addEventListener('message',    function(event) { self.onmessage(event); });
        eventTarget.addEventListener('error',      function(event) { self.onerror(event); });

        // Expose the API required by EventTarget

        this.addEventListener = eventTarget.addEventListener.bind(eventTarget);
        this.removeEventListener = eventTarget.removeEventListener.bind(eventTarget);
        this.dispatchEvent = eventTarget.dispatchEvent.bind(eventTarget);

        /**
         * This function generates an event that is compatible with standard
         * compliant browsers and IE9 - IE11
         *
         * This will prevent the error:
         * Object doesn't support this action
         *
         * http://stackoverflow.com/questions/19345392/why-arent-my-parameters-getting-passed-through-to-a-dispatched-event/19345563#19345563
         * @param s String The name that the event should use
         * @param args Object an optional object that the event will use
         */
        function generateEvent(s, args) {
        	var evt = document.createEvent("CustomEvent");
        	evt.initCustomEvent(s, false, false, args);
        	return evt;
        };

        this.open = function (reconnectAttempt) {
            ws = new WebSocket(self.url, protocols || []);

            if (reconnectAttempt) {
                if (this.maxReconnectAttempts && this.reconnectAttempts > this.maxReconnectAttempts) {
                    return;
                }
            } else {
                eventTarget.dispatchEvent(generateEvent('connecting'));
                this.reconnectAttempts = 0;
            }

            if (self.debug || ReconnectingWebSocket.debugAll) {
                console.log('ReconnectingWebSocket', 'attempt-connect', self.url);
            }

            var localWs = ws;
            var timeout = setTimeout(function() {
                if (self.debug || ReconnectingWebSocket.debugAll) {
                    console.log('ReconnectingWebSocket', 'connection-timeout', self.url);
                }
                timedOut = true;
                localWs.close();
                timedOut = false;
            }, self.timeoutInterval);

            ws.onopen = function(event) {
                clearTimeout(timeout);
                if (self.debug || ReconnectingWebSocket.debugAll) {
                    console.log('ReconnectingWebSocket', 'onopen', self.url);
                }
                self.protocol = ws.protocol;
                self.readyState = WebSocket.OPEN;
                self.reconnectAttempts = 0;
                var e = generateEvent('open');
                e.isReconnect = reconnectAttempt;
                reconnectAttempt = false;
                eventTarget.dispatchEvent(e);
            };

            ws.onclose = function(event) {
                clearTimeout(timeout);
                ws = null;

                var e;
                if (forcedClose) {
                    self.readyState = WebSocket.CLOSED;
                    e = generateEvent('close');
                    e.code = event.code;
                    e.reason = event.reason;
                    e.wasClean = event.wasClean;
                    eventTarget.dispatchEvent(e);
                } else {
                    self.readyState = WebSocket.CONNECTING;
                    e = generateEvent('connecting');
                    e.code = event.code;
                    e.reason = event.reason;
                    e.wasClean = event.wasClean;
                    eventTarget.dispatchEvent(e);
                    if (!reconnectAttempt && !timedOut) {
                        if (self.debug || ReconnectingWebSocket.debugAll) {
                            console.log('ReconnectingWebSocket', 'onclose', self.url);
                        }
                        e = generateEvent('close');
                        e.code = event.code;
                        e.reason = event.reason;
                        e.wasClean = event.wasClean;
                        eventTarget.dispatchEvent(e);
                    }

                    var timeoutTime = self.reconnectInterval * Math.pow(self.reconnectDecay, self.reconnectAttempts);
                    setTimeout(function() {
                        self.reconnectAttempts++;
                        self.open(true);
                    }, timeoutTime > self.maxReconnectInterval ? self.maxReconnectInterval : timeoutTime);
                }
            };
            ws.onmessage = function(event) {
                if (self.debug || ReconnectingWebSocket.debugAll) {
                    console.log('ReconnectingWebSocket', 'onmessage', self.url, event.data);
                }
                var e = generateEvent('message');
                e.data = event.data;
                eventTarget.dispatchEvent(e);
            };
            ws.onerror = function(event) {
                if (self.debug || ReconnectingWebSocket.debugAll) {
                    console.log('ReconnectingWebSocket', 'onerror', self.url, event);
                }
                eventTarget.dispatchEvent(generateEvent('error'));
            };
        };

        // Whether or not to create a websocket upon instantiation
        if (this.automaticOpen == true) {
            this.open(false);
        }

        /**
         * Transmits data to the server over the WebSocket connection.
         *
         * @param data a text string, ArrayBuffer or Blob to send to the server.
         */
        this.send = function(data) {
            if (ws) {
                if (self.debug || ReconnectingWebSocket.debugAll) {
                    console.log('ReconnectingWebSocket', 'send', self.url, data);
                }
                return ws.send(data);
            } else {
                throw 'INVALID_STATE_ERR : Pausing to reconnect websocket';
            }
        };

        /**
         * Closes the WebSocket connection or connection attempt, if any.
         * If the connection is already CLOSED, this method does nothing.
         */
        this.close = function(code, reason) {
            // Default CLOSE_NORMAL code
            if (typeof code == 'undefined') {
                code = 1000;
            }
            forcedClose = true;
            if (ws) {
                ws.close(code, reason);
            }
        };

        /**
         * Additional public API method to refresh the connection if still open (close, re-open).
         * For example, if the app suspects bad data / missed heart beats, it can try to refresh.
         */
        this.refresh = function() {
            if (ws) {
                ws.close();
            }
        };
    }

    /**
     * An event listener to be called when the WebSocket connection's readyState changes to OPEN;
     * this indicates that the connection is ready to send and receive data.
     */
    ReconnectingWebSocket.prototype.onopen = function(event) {};
    /** An event listener to be called when the WebSocket connection's readyState changes to CLOSED. */
    ReconnectingWebSocket.prototype.onclose = function(event) {};
    /** An event listener to be called when a connection begins being attempted. */
    ReconnectingWebSocket.prototype.onconnecting = function(event) {};
    /** An event listener to be called when a message is received from the server. */
    ReconnectingWebSocket.prototype.onmessage = function(event) {};
    /** An event listener to be called when an error occurs. */
    ReconnectingWebSocket.prototype.onerror = function(event) {};

    /**
     * Whether all instances of ReconnectingWebSocket should log debug messages.
     * Setting this to true is the equivalent of setting all instances of ReconnectingWebSocket.debug to true.
     */
    ReconnectingWebSocket.debugAll = false;

    ReconnectingWebSocket.CONNECTING = WebSocket.CONNECTING;
    ReconnectingWebSocket.OPEN = WebSocket.OPEN;
    ReconnectingWebSocket.CLOSING = WebSocket.CLOSING;
    ReconnectingWebSocket.CLOSED = WebSocket.CLOSED;

    return ReconnectingWebSocket;
});

define('streamReader',[],function () {
	'use strict';
	// This class is usable from both node and browser
	//
	// streaming JSON datareader using printable ascii chars
	// each datachunk is preceeded by 'nnnn' which is the length of the following data
	// keep adding bytes and chunks of data to addMoreData() (if it returns false the data is bogus and connection should be closed)
	// keep calling getMessage() and it'll either return false (no complete message exists yet) or return the message.
	// call makeReadableMessage(msg) to create a message that can be read from a stream with this protocol

	// You can now add compression functions through addCompressionCapabilities().

	function StreamReader () {
		this.dataBuffer = '';
		this.myCompressors = [];
		this.myDecompressors = [];
		this.myCompressionStrategy = -1;
		//Default compressor is must plain-text passthrough
		this.myCompressors.push( function(a) { return a; } );
		this.myDecompressors.push( function(a) { return a; } );

		this.addCompressionCapabilities = function(compressorFunc, decompressorFunc) {
			this.myCompressors.push(compressorFunc);
			this.myDecompressors.push(decompressorFunc);
		};

		// Stuff data into the reader. If it returns false then the stream is broken and unusable
		this.addMoreData = function(data) {
			this.dataBuffer += data;
			return true;
		};

		// returns a full message, or null if no full message is available.
		this.getMessage = function() {
			if (this.dataBuffer.length < 4) {
				return null;
			}

			var header = parseInt(this.dataBuffer.substring(0,4), 36);

			var compressionStrategy = (header & 0xE0000) >> 17;
			var msgLen = header & 0x1FFFF;

			this.myCompressionStrategy = compressionStrategy;
			if (this.myCompressionStrategy >= this.myDecompressors.length) {
				// Broken data, someone tried to manually send corrupt data, etc.
				return null;
			}

			if (msgLen <= this.dataBuffer.length - 4) {
				var tmp = this.dataBuffer.slice(4, msgLen+4);
				this.dataBuffer = this.dataBuffer.slice(4+msgLen);
				var r = '';
				try{
					tmp = this.myDecompressors[this.myCompressionStrategy](tmp);
					r = JSON.parse(tmp);
				}catch(err){
					return null;
				}
				return r;
			}
			return null;
		};

		// Creates a message that can be read by addMoreData
		this.makeReadableMessage = function(jsonArgs) {
			var ret = '';
			if (jsonArgs instanceof Array) {
				for (var i = 0; i < jsonArgs.length; i++) {
					ret = ret + this.encaseMessage(jsonArgs[i]);
				}
			}
			else {
				ret = this.encaseMessage(jsonArgs);
			}
			return ret;
		};

		this.encaseMessage = function(json) {

			if (this.myCompressionStrategy === -1) {
				this.myCompressionStrategy = this.myCompressors.length-1;
			}

			var message = JSON.stringify(json);
			message = this.myCompressors[this.myCompressionStrategy](message);

			if (message.length >= 0x1ffff) { //128Kb
				return '';
			}
			var header = message.length;
			header |= (this.myCompressionStrategy << 17);
			var lenStr = header.toString(36);
			return '0000'.substring(0,4-lenStr.length)+lenStr+message;
		};
	}

	return StreamReader;

});

/*!
 * jQuery Cookie Plugin v1.4.1
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
(function (factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD
		define('jqueryCookie',['jquery'], factory);
	} else if (typeof exports === 'object') {
		// CommonJS
		factory(require('jquery'));
	} else {
		// Browser globals
		factory(jQuery);
	}
}(function ($) {

	var pluses = /\+/g;

	function encode(s) {
		return config.raw ? s : encodeURIComponent(s);
	}

	function decode(s) {
		return config.raw ? s : decodeURIComponent(s);
	}

	function stringifyCookieValue(value) {
		return encode(config.json ? JSON.stringify(value) : String(value));
	}

	function parseCookieValue(s) {
		if (s.indexOf('"') === 0) {
			// This is a quoted cookie as according to RFC2068, unescape...
			s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
		}

		try {
			// Replace server-side written pluses with spaces.
			// If we can't decode the cookie, ignore it, it's unusable.
			// If we can't parse the cookie, ignore it, it's unusable.
			s = decodeURIComponent(s.replace(pluses, ' '));
			return config.json ? JSON.parse(s) : s;
		} catch(e) {}
	}

	function read(s, converter) {
		var value = config.raw ? s : parseCookieValue(s);
		return $.isFunction(converter) ? converter(value) : value;
	}

	var config = $.cookie = function (key, value, options) {

		// Write

		if (value !== undefined && !$.isFunction(value)) {
			options = $.extend({}, config.defaults, options);

			if (typeof options.expires === 'number') {
				var days = options.expires, t = options.expires = new Date();
				t.setTime(+t + days * 864e+5);
			}

			return (document.cookie = [
				encode(key), '=', stringifyCookieValue(value),
				options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
				options.path    ? '; path=' + options.path : '',
				options.domain  ? '; domain=' + options.domain : '',
				options.secure  ? '; secure' : ''
			].join(''));
		}

		// Read

		var result = key ? undefined : {};

		// To prevent the for loop in the first place assign an empty array
		// in case there are no cookies at all. Also prevents odd result when
		// calling $.cookie().
		var cookies = document.cookie ? document.cookie.split('; ') : [];

		for (var i = 0, l = cookies.length; i < l; i++) {
			var parts = cookies[i].split('=');
			var name = decode(parts.shift());
			var cookie = parts.join('=');

			if (key && key === name) {
				// If second argument (value) is a function it's a converter...
				result = read(cookie, value);
				break;
			}

			// Prevent storing a cookie that we couldn't decode.
			if (!key && (cookie = read(cookie)) !== undefined) {
				result[name] = cookie;
			}
		}

		return result;
	};

	config.defaults = {};

	$.removeCookie = function (key, options) {
		if ($.cookie(key) === undefined) {
			return false;
		}

		// Must not alter options, thus extending a fresh object...
		$.cookie(key, '', $.extend({}, options, { expires: -1 }));
		return !$.cookie(key);
	};

}));

define('messageHandler',[
	'jquery',
	'lodash',
	'device',
	'loc',
	'pubsub',
	'songs',
	'avatars',
	'utils',
	'ghosts',
	'jqueryCookie'

], function (
	j,
	_,
	device,
	loc,
	pubsub,
	songs,
	avatars,
	utils,
	ghosts,
	cookie
) {
	'use strict';

	// This module receives all server messages and delegates them to the appropriate modules.
	function MessageHandler (core) {
		this.core = core;
		this.core.topDomainName = window.location.hostname.split('.').slice(-2).join('.');
	}

	MessageHandler.prototype = {

		// All incoming messages goes through this method. Delegates to callbacks within this module, based on the
		// msg.func value
		process: function (msg) {
			if (this.core.trackPerformance) {
				var numProps = Object.keys(msg).length-1;
				console.log('message ('+msg.func+') received with '+numProps+' properties; '+JSON.stringify(msg).length+' bytes');
			}
			if (this.core.logMessages) {
				console.log(msg);
			}


			if (msg.hasOwnProperty('func')) {
				if (typeof(this[msg.func]) === 'function') {
					return this[msg.func](msg);
				}
			}
		},

		// Time sync
		sync: function (msg) {
			var response = this.core.sync(msg.sync);
			response.func = 'sync';
			this.core.ws.sendReadable(response);
		},

		// Keepalive
		ping: function () {
			this.core.onPing();
		},

		// Indication that the room's VIP status is about to expire
		//Change loc
		paymentWarning: function (msg) {
			var message = loc(1067, { '[player name]': this.core.players[msg.id].name, '[minutes]': Math.ceil(msg.timeLeft / 60000)});

			this.core.uiDeferred.then(function() {
				this.core.gui.toast(message);
			}.bind(this));
		},

		// Response to 'registerRoom'. Contains the room number and more
		registerRoom: function (msg) {
			console.log(msg);
			if (!msg.roomID) {
				console.warn("error : registerRoom fetch failed !!");
				this.core.isRegisterRoomError = true;
				return;
			}
			if (this.core.createConnectionDfd.state() === 'resolved') {
				this.core.isRegisterRoomErrorCount = 0;
				return;
			}

			var roomString = JSON.stringify({ value: msg.roomCookie, expires: Date.now() + 604800000 });
			var screenString = JSON.stringify({ value: msg.screenCookie, expires: Date.now() + 604800000 });

			localStorage.room = roomString;
			localStorage.roomNr = msg.roomID;
			localStorage.screen = screenString;

			this.core.room = parseInt(msg.roomID, 10);
			this.core.api = msg.api;

			// Remove eventual error messages
			j('html').removeClass('dialog');
			j('.error').removeClass('show').attr('aria-hidden', false);

			this.core.isRegisterRoomError = false;
			this.core.webSocketDfds['registerRoom'].resolve(parseInt(msg.roomID, 10), msg.qrCode);
		},

		// Indicates that the current song should be stopped. Can happen at any time, but most commonly during after
		// dance.
		stopSong: function () {
			this.core.songStopped();
		},

		newPayer: function(msg) {
			var player = this.core.players[msg.id];
			if (player) {
				player.timeLeft = msg.timeLeft;
				this.core.setRoomVIP(msg.isRoomVip, player);
				this.core.setPlayerNameVIP(player, player.timeLeft > 0);
			}
		},

		// The last payer in the room's VIP subscription has expired.
		payerExpired: function (msg) {
			var player = this.core.players[msg.id];
			if (player) {
				player.timeLeft = 0;
				this.core.setRoomVIP(msg.isRoomVip);
				this.core.setPlayerNameVIP(player, false);
			}
		},

		// This function is called when additional payers join room or pay while in room that is already VIP
		playerPurchased: function (msg) {

			this.core.uiDeferred.then(function () {
				var player = this.core.players[msg.id];
				if (player) {
					// Set expiration and renewal date on the global player object
					player.timeLeft = msg.timeLeft;
					this.core.setRoomVIP(msg.isRoomVip, player);
					this.core.setPlayerNameVIP(player, player.timeLeft > 0);

				} else {
					if(localStorage.screen) {
						this.core.setRoomVIP(msg.isRoomVip);
					} else {
						console.warn('Could not set payer, player does not exist... trying screen payer');
					}
				}
			}.bind(this));
		},

		// A player has joined the room
		playerJoined: function (msg) {
			// This happens when the first player joins the game from the landing page
			if (!this.core.hasInitialized) {
			 	if (this.core.checkUsabilityDfd.state() === 'pending') {
			 		this.core.checkUsabilityDfd.resolve(false, msg.newPlayer.id);
			 	} else {
			 		this.core.kickPlayer(msg.newPlayer.id);
			 		return;
			 	}
			}
		
			this.core.uiDeferred.then(function () {

				if (!this.core.isPayPerPlay) {
					songs.setBoughtSongs(msg.unlockedSongs);
				}
				this.core.joinRoom(msg.newPlayer, msg.newPlayer.ftueDatas);

				this.core.setRoomVIP(msg.isRoomVip, msg.newPlayer);
				this.core.setPlayerNameVIP(msg.newPlayer, msg.isPlayerVip);

			}.bind(this));
		},

		// A player has left the room
		playerLeft: function (msg) {
			var leavingPlayer = this.core.players[msg.playerID];
			if (!leavingPlayer) { return; }
			leavingPlayer.name = utils.stripEmojis(leavingPlayer.name);

			this.core.controller = msg.controller;

			this.core.leaveRoom(leavingPlayer.id);
			this.core.setRoomVIP(msg.isRoomVip);

			if (!this.core.isPayPerPlay) {
				songs.setBoughtSongs(msg.unlockedSongs);
			}

			this.core.state === 'coachSelection' &&  this.core.gui.previewArea.updateCoachSelectionChoice();
			this.core.state === 'afterDance' &&  this.core.gui.afterDance.updatePlayerLeft();
		},

		// A player has been kicked. Similar to playerLeft
		playerKicked: function (msg) {

			if (!this.core.hasInitialized) {
				return;
			}

			var playerName = this.core.gui.playerName(this.core.players[msg.playerID]),
				message = loc('1231', { '[player name]': playerName }), // 1231: Web_Generic_Text_Player_Kicked
				image = avatars.getAvatarHtml(this.core.players[msg.playerID].avatar);

			this.core.gui.toast(message, {}, image);
			this.core.leaveRoom(msg.playerID);
			this.core.setRoomVIP(msg.isRoomVip);

			if (!this.core.isPayPerPlay) {
				songs.setBoughtSongs(msg.unlockedSongs);
			}
			this.core.state === 'coachSelection' &&  this.core.gui.previewArea.updateCoachSelectionChoice();
		},

		// Response to 'updateDancercard'. Message contains the update dancer card
		updateDancercard: function (msg) {
			this.core.updatePlayer(msg.player);
		},

		// Some player's favorites has changed
		favoritesChanged: function (msg) {
			var player = this.core.players[msg.playerID];
			if (this.core.isController(player.id)) {
				songs.setFavoritesSongs(msg.favorites);
			}
		},

		// Response to the 'selectSong' msg (if ghostsDisabled: true). Message is a list of ghosts. May be an empty list.
		neverDanceAlone: function (msg) {
			console.log(msg);
			this.core.isGhostDisabled = (!!msg.ghostsDisabled ? true : false);
			this.core.initDeferred.then(function () {
				ghosts.onGhostsChange(msg.ghosts);
			});
		},

		// Ghost kicked, analogous to playerKicked
		ghostKicked: function (msg) {
			ghosts.removeGhost(msg.ghost);
		},


		// A new tab has received focus.
		tabRest: function(msg) {
			var self = this;
			
			j.when(this.core.uiDeferred, this.core.initDeferred)
			.then(function() {
				if (msg.sender === 'app' && msg.tabName && !self.core.focusSongGrid)
				    self.core.gui.coverflowTabs.bindTab(msg.tabName, msg.sender);

				// coach-selection --> songSelection, tabRest is called
				// For tabRest, this flag is used to scroll in song-grid
				self.core.focusSongGrid = false;
			});
		},

		// A new song has received focus.
		// Song-selection state
		navRest: function (msg) {
			var self = this;
			j.when(this.core.uiDeferred, this.core.initDeferred)
			.then(function () {
				if (self.core.state === 'coachSelection' && msg.sender === 'web' || 
					self.core.state !== 'songSelection') {
						console.log('NAVREST NOT AVAILABLE!!!!');
						return;
				} 

				j.cookie.raw = true;
				j.cookie('hlscookie', msg.cookie, { 
					'domain': self.core.topDomainName,
					'expires' : new Date(new Date().getTime() + msg.duration + 60 * 2 * 1000) // Add 2 minutes after the song duration.							
				});

				// if no controller in the room, wait until they are connected before acknowledging the song they have
				// necessary for FTUE synchronisation
				self.core.controllerSettedDfd
				.then(function() {
					self.core.onNavRest(msg);
				});
			});
		},


		// Playlist selection from server
		playlistSelected: function(msg) {
			var self = this;

			j.when(this.core.uiDeferred, this.core.initDeferred, this.core.controllerSettedDfd)
			.then(function() {
				if (msg.sender === 'app' && msg.category) {
					if (self.core.tabSelected === self.core.gui.coverflowTabs.tabArr[1].section) {
						self.core.gui.coverflowTabs.bindTab(self.core.gui.coverflowTabs.tabArr[0].section, msg.sender);
					}
					self.core.gui.songSelection.playlist.onPlaylistRest(msg.category);
				}
			});
		},

		// Some player's choice of coach has changed
		coachSelected: function (msg) {
			// Needs to wait for the UI since it's possible to jumpstart into coachSelection while onboarding
			j.when(this.core.uiDeferred.promise(), this.core.initDeferred.promise()).then(function () {
				this.core.coachSelected(msg);
			}.bind(this));
		},

		// A song has been launched. This does not mean that the dancy part has started, 
		// just that we are past coach selection.
		songLaunched: function (msg) {

			this.core.currentVideoCookieData = {
					name : msg.cookieName, 
					value : msg.cookieValue,
					duration : msg.duration,
					session: false,
                	hostOnly: false,
    				httpOnly: false,
			};

			this.core.currentVideoCookie = '?' + msg.cookieName + '=' + msg.cookieValue;
			this.core.currentVideo = msg.video;

			this.core.setState('tutorial');

			if (this.core.isNoScoringMode) {
				ga('send','event','No_Scoring_Mode','Has danced','NSM_Danced');
			} else {
				ga('send','event','Scoring_Mode','Has danced','SM_Danced');
			}
		},

		// Indicates that the game should go back to song selection state.
		// afterDance --> Song-selection state
		songSelection: function () {
			if (this.core.state === 'afterDance') {
				this.core.setState('songSelection');
			}
		},

		// Indicates that we should go back to song selection state from coach selection.
		// coach-selection --> Song-selection state
		songDeselected: function () {
			if (!this.core.vpppSuccess)
				this.core.setState('songSelection');
		},

		// Indicates that a song has been selected in song selection and that we should move on to coach selection.
		// Song-selection --> coach-selection state
		songSelected: function (msg) {
			var core = this.core;

			// Needs to wait for the UI since it's possible to jumpstart into coachSelection while onboarding
			j.when(this.core.uiDeferred.promise(), this.core.initDeferred.promise())
			.then(function () {
				if(msg.sender === 'web' && core.songUpdatedDeferred.state() !== 'resolved') {
					core.songUpdatedDeferred.resolve(core.song);
				}
				core.songUpdatedDeferred.then(function(song) {
					core.setState('coachSelection');
				})
			}.bind(this));
		},


		// Response to songEnd. Message contains all the final player results for the last dance.
		results: function (msg) {
			this.core.resetVPPPFlag();

			if (msg.players.length > 0) {
				// Update achievement thresholds for score-recap animation
				this.core.gui.afterDance.updateAchievementThreshold(msg.superstarThreshold, msg.megastarThreshold);

				this.core.setState('afterDance', msg.players);
			} else {
				this.core.setState('songSelection');
			}
		},

		// songEnd called for each player individually
		songEnd: function(msg) {
			var reward = 0;
			for (var r = 0, rl = msg.rewards.length; r < rl; r++) {
				var rd = msg.rewards[r];
				if (rd.type === 'coins') {
					reward += rd.value;
				} else if (rd.type === 'avatar') {
					this.core.onAvatarUnlocked(msg.playerID, rd.value);
				}
			}

			this.core.scoreRecapExitDfd.then(function() {
				this.core.updatePlayerBalance(msg.playerID, reward);
			}.bind(this));
			
			this.core.showPlayerLevel(msg.playerID, msg.xpDetails, msg.scaledScore);
			this.core.miscUtils.updateAchievements(this.core.players[msg.playerID], this.core.song, msg.achievements);
		},

		// Mobile player clicked "continue dancing" in after dance.
		navContinue: function (msg) {
			if (msg) { return; } // Bounce if we're targeting a new song

			// Go to song selection/coverflow screen if we're targeting the same song as we just played
			this.songSelection();
		},

		// Controller has changed
		controllerChanged: function (msg) {
			msg.newController.name = utils.stripEmojis(msg.newController.name);
			this.core.setController(msg.newController, true, true);
		},

		// Some player has completed a dance move. Message contains the move feedback
		playerFeedBack: function (msg) {
			var player = this.core.players[msg.player];
			if (!player) { return; }

			player.latestFeedback = {
				move: msg.move,
				totalScore: msg.result.totalScore,
				rating: msg.result.rating,
				achievements: msg.achievements
			};

			if (msg.achievements.superstar || msg.achievements.megastar) {
				player.achievements = msg.achievements;
			}
			this.core.danceMoveNr = msg.move;

			if (!!this.core.isDebug) {
				this.core.debug.displayBeatsAndFeedback(player.id, player.name, player.coach, player.latestFeedback.move, player.latestFeedback.totalScore, this.core.gui.hud.currentWindow);
			}

			// Set feedback for regular ghosts
			_.each(this.core.getVisibleGhosts(), function (ghost) {
				var move;
				if (!ghost || !ghost.moves || !(move = ghost.moves[msg.move])) {
					console.warn('Challenger move missing. Skipping feedback.');
					return;
				}

				ghost.latestFeedback = {
					move: msg.move,
					totalScore: move.totalScore,
					rating: move.rating,
					achievements: ghost.achievements
				};
			}, this);
		},

		// Many mode notification, e.g. "all players has reached the 3rd star".
		notify: function (msg) {
			if (!msg) {
				console.log('! Ignore, No balloons data');
				return;
			}

			this.core.gui.updateBalloons(msg.data);
		},

		// Many mode racetrack update. The racetrack represents the leader player's score.
		racetrack: function (msg) {
			this.core.gui.updateRacetrack(msg.data);
		},

		// Gear device connected
		gearConnected: function(msg) {
			if (this.core.controller === msg.publicID) {
				this.core.jPlayers.find('.'+this.core.controller).find('.remote').addClass('gear-remote').removeClass('remote');
				device.gearConnected = true;
			}
		},

		// Gear device disconnected
		gearDisconnected: function(msg) {
			if (this.core.controller === msg.publicID) {
				this.core.jPlayers.find('.'+this.core.controller).find('.gear-remote').addClass('remote').removeClass('gear-remote');
				device.gearConnected = false;
			}
		},

		// The list of unlocked songs has changed.
		unlockSongs: function (msg) {
			songs.setBoughtSongs(msg.songs);
			this.core.gui.playUnlockSongEffect(msg.bundlePurchased);
		},


		// Levelling
		levelUp: function (msg) {
			// Since level up is async, this updates the afterDance result if the level up event is sent after afterDance is created
			var playerElement = this.core.jAfterDance.find('.' + msg.playerID + ' .level');
			playerElement && playerElement.removeClass().addClass('level level-up level-' + msg.songLevel);

			if (msg.playerID in this.core.players) {
				this.core.gui.hud.players.levelUp(msg.playerID, msg.globalLevel);
			}
		},

		// debug
		startOneSecondFlash: function (msg) {
			this.core.debug.startOneSecondFlash(msg.time);
		},

		debugScore: function (msg) {
			this.core.updateDebugScore(msg.moveNr, msg.rawData, msg.refScore, msg.rating, msg.spearMan);
		},

		// scoring debug tool
		scoringDebug: function (msg) {
			console.log('Got a scoring debug message', msg);
			this.core.debug.addMoveDebugInfo(msg);
		},

		// Update player balance after successful coin regeneration, video rewards & coin purchase
		updateCoinsUI: function (msg) {
			this.core.updatePlayerBalance(msg.playerID, msg.balance, true);
		},

		virtualPayPerPlayPurchase: function(msg) {
			if (msg.error) {
				console.log("error : not enough balance");
				this.core.displayCoinBalanceToast(this.core.controller);
				
				return;
			}

			this.core.updatePlayerBalance(msg.publicID, msg.balance, true);
			this.core.vpppSuccess = true;
			
			if (this.core.webSocketDfds['virtualPayPerPlayPurchase'])
				this.core.webSocketDfds['virtualPayPerPlayPurchase'].resolve(msg);
		}

	};

	return MessageHandler;

});

define('webSocketHandler',[
	'jquery',
	'lodash',
	'device',
	'loc',
	'reconnectingWebSocket',
	'streamReader',
	'messageHandler'
	
], function (
	$,
	_,
	device,
	loc,
	ReconnectingWebSocket,
	StreamReader,
	MessageHandler

) {
	'use strict';

	// timeout in secs called if websocket closes, for IPAD its 5secs & 20secs for other devices
	var RECONNECT_TIMEOUT = device.isIpadApp ? 5 * 1000  : 20 * 1000;


	function WebSockectHandler(core) {
		
		this.core = core;
		this.completeDeferred = $.Deferred();
		this.sr = new StreamReader();
		this.ws;
		this.mHandler = new MessageHandler(core);
		this.init();
	};


	WebSockectHandler.prototype = {

		init: function() {

			var query = '?client=' + window.wsClient + '&tag=' + window.wsTag;
			var protocol = 'screen.justdancenow.com';

			this.ws = new WebSocket(window.websocketURL + '/screen' + query, protocol);

			var self = this;

			this.ws.sendReadable = function (msg) {
				return self.ws.send(self.sr.makeReadableMessage(msg));
			};

			if (this.core.logMessages) {
				var originalSend = this.ws.send;
				this.ws.send = function (msg) {
					if (self.core.logMessages && msg.func !== "pong") {
						console.log('WS SEND', msg);
					}
					originalSend.apply(self.ws, arguments);
				};
			}

			this.ws.onerror = function (e) {
				sessionStorage.homeScreenErrorMsg = loc(2442); // 2442: Smart_Home_ConnectionError
				self.core.reset();
			};

			this.ws.onopen = function() {
				self.completeDeferred.resolve();
			};

			this.ws.onclose = function (ev) {
				setTimeout(function () {
					if (self.ws.readyState === self.ws.STATES.OPEN) { return; } // Don't reload if the WS readyState is OPEN
					sessionStorage.homeScreenErrorMsg = loc(2443); // 2443: Smart_Home_ConnectionLost
					if(!self.core.isDeviceSleepMode) { self.core.reset(); }
				}, RECONNECT_TIMEOUT);

				if (!ev.code || ev.code === 1000) { return; } // 1000 is a normal close; nothing went wrong
				var description = [ 'ws', ev.code, ev.wasClean, ev.reason ].join();

				console.warn('WebSocket closed', description);
				if (!!ga)
					ga('send', 'exception', { exDescription: description, });
			};

			this.ws.onmessage = function (event) {

				function processMessage () {
					self.sr.addMoreData(event.data);
					var msg = null;
					while ((msg = self.sr.getMessage()) !== null) {
						self.mHandler.process(msg);
					}
				}

				if (device.isIpadApp) {
					// A bug in Mobile Safari causes the iPad to leak memory when using WebSockets
					// This setTimeout() hack closes that leak
					setTimeout(function() { processMessage(); });
				} else {
					processMessage();
				}
			};

			this.ws.STATES = {
				CONNECTING: 0,
				OPEN: 1,
				CLOSING: 2,
				CLOSED: 3
			};

			$.support.cors = true; // This enables IE support

			window.beforeunload = function () {
				self.ws.onclose = function () { }; // disable onclose handler first
				self.ws.close();
			};
		}
		
	};


	return WebSockectHandler;

});

define('videoPlayerFactory',[
	'jquery',
	'utils',
	'device',
	'bowser',
	'environment',
], function (
	j,
	utils,
	device,
	bowser,
	env
) {
	'use strict';

	// Private helper function.
	// Returns the AMD module name String of the best player for the current platform.
	function getPlayerResourceId() {
		if (!!env.supportsHls || !!device.isChromecast || !!device.isAndroidTabletApp) {
			return 'nativeVideoPlayer';
		} else {
			return 'hlsVideoPlayer';
		}
	}

	// Loads the best video player for the current platform.
	// Returns a Promise that is resolved when the video player has been loaded and is ready to use.
	function createPlayer() {
		var chosenPlayer = getPlayerResourceId();

		var videoPlayerDeferred = j.Deferred();

		require([ chosenPlayer ], function (VideoPlayer) {
			j('<div>').attr('id', 'dance-video').appendTo(j('#in-game-video'));

			console.log('Chosen video player:', VideoPlayer.name);
			videoPlayerDeferred.resolve(new VideoPlayer('dance-video'));
		});

		return videoPlayerDeferred.promise();
	}

	// Returns the video format that the current player can/should play.
	function getVideoFormat() {
		return {
			hlsVideoPlayer: 'hlsVideo',
			nativeVideoPlayer: (env.supportsHls && !device.isChromecast && !device.isAndroidTabletApp) ? 'hlsVideo' : 'mp4Video'
		}[getPlayerResourceId()];
	}

	return {
		createPlayer: createPlayer,
		getVideoFormat: getVideoFormat,
	};

});

define('text!html/initHome/cookieNotice.html',[],function () { return '<div class="site-message cookie-notice">\n    <div class="cookie-wrapper">\n        <div class="cookie-content"><%= cookie_notice %></div>\n        <div class="cookie-close">\n            <button class="cookie-close-btn">OK</button>\n        </div>\n    </div>\n</div>';});

define('landingPageUtils',[
    'jquery', 
    'lodash', 
    'loc', 
    'environment',
    'device',
    'utils',
    'fastdom',

    'text!html/initHome/cookieNotice.html'

], function (
    $, 
    _,
    loc, 
    env,
    device,
    utils,
    fastdom,

    cookieNoticeHtml
) {
    
    'use strict';

    var $main = $('.main'),
        $cookieNotice;
    var isNotWebBrowser = (device.isMobile || device.isTablet || device.isIpad); // Detect small devices where game can't be launched through browser

    // Insert and show cookie notice (if not already dimissed) (but not on iPad app or Chromecast)
    var cookieNotice = function() {
        if (!!isNotWebBrowser) { return; }

        if ($.cookie('cookie-notice') === undefined || $.cookie('cookie-notice') !== 'dismissed') {
            $cookieNotice = $(_.template(cookieNoticeHtml) ({ 
                cookie_notice: loc(2539) 
            })).insertAfter($(".header"));

            setTimeout(function() {
                var $legalLink = $cookieNotice.find('a');
                $legalLink.attr({
                    'href': 'https://legal.ubi.com/privacypolicy/',
                    'target': '_blank',
                    'id': 'cookie_legalLink'
                });
                $cookieNotice.addClass('show');
            }, 10);

            $(window).on('scroll', cookieHideCalc);
            $('a').on('click', function(evt) {
                if (evt.target.id == "cookie_legalLink") return;
                cookieHideCalc();
            });
            $('.launch-game').on('click', cookieHideCalc);
            $('.cookie-close-btn').on('click', cookieHideCalc);

        } else { // if the user already has the cookie, start tracking straight away
            addGaTracker();
            addDnaTracker();
        }
    };

    var cookieHideCalc = function() {
        addGaTracker();

        $(window).off('scroll', cookieHideCalc);
        $('a').off('click', cookieHideCalc);
        $('.launch-game').off('click', cookieHideCalc);
        $('.cookie-close-btn').off('click', cookieHideCalc);

        $.cookie('cookie-notice', 'dismissed');
        $.cookie.raw = true;
        $.cookie('TC_OPTOUT ', '0@@@028@@@ALL');
        $.cookie.raw = false;
        $cookieNotice.css('visibility', 'hidden');
        $main.removeAttr('style');

        setTimeout( function() {
            $cookieNotice && $cookieNotice.remove();
            $main.removeClass('main-cookieShow');
        }, 300);

        addDnaTracker();
    }

    var addGaTracker = function() {
        var ga_script = document.createElement('script');
        ga_script.id = 'gaTracker';
        ga_script.text = "(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'script','//www.google-analytics.com/analytics.js','ga');ga('create', '"+gaTid+"', '"+gaTurl+"');ga('send', 'pageview');";

        document.head.appendChild(ga_script);

        if (!!localStorage.roomNr) {
            ga('send', 'event', 'room-nr', localStorage.roomNr.toString().substr(0, 1));
        }
    }

    var addDnaTracker = function() {
        utils.addElementToElement('body', 'script', {
            src: cdn + '/web/js/tracking/tracker.js'
        });
    }



    var initVideoTrailer = function(e) {
        var videoPoster = document.querySelector('#toggle-video');

        var width = videoPoster.children[2].offsetWidth;
        var height = videoPoster.children[2].offsetHeight;

        var video = document.createElement('IFRAME');
        video.setAttribute('width', width);
        video.setAttribute('height', height);
        video.setAttribute('src', 'https://www.youtube.com/embed/SQtZPQ4KFtI?autoplay=1&showinfo=0&controls=0&rel=0&showinfo=0');
        video.setAttribute('allowfullscreen', '');
        video.setAttribute('frameborder', 0);

        videoPoster.parentNode.replaceChild(video, videoPoster);

        e.preventDefault();
    };



    // Video trailer event listener
    var addVideoPreviewEventListener = function() {
        var videoPoster = document.querySelector('#toggle-video');
        !!videoPoster && videoPoster.addEventListener('click', initVideoTrailer, false);
    };


    //////////////////////////////////////////////////////////////
    //      LANDING PAGE MODIFICATIONS DUE TO INIT GAME         //
    //////////////////////////////////////////////////////////////

    var tearDownLandingPage = function() {
        // Fade out landing page

        var dfd = $.Deferred();

        fastdom.read(function() {
            var $landingPageAssets = $('.header, .main, .footer, .cookie-notice'),
                $body = $('body');

            fastdom.write(function() {
                $body.addClass('transition-out'); //.forceRepaint();

                $landingPageAssets.fadeOut(0.3).promise().then(function() {
                    $cookieNotice = $main = null; // for garbage collection in js
                    $landingPageAssets.remove();
                }).then(function() {
                    $body.removeClass('transition-out');
                    dfd.resolve();
                });
            });
        });

        return dfd;
    };


    var appendStoreLinks = function() {
        var $downloadSection = $('.downloadSection_mobile');

        if (!!isNotWebBrowser) {
            var $launchGameBtn = $('.launch-game'),
                $landingTxt = $('.landing-text');

            $landingTxt.addClass('landing__mobile');
            $launchGameBtn.remove();
            $downloadSection.show();
        } else {
            $downloadSection.remove();
        }
    }


    //////////////////////////////////////////////////////////////
    //
    //      QR CODE
    //
    //////////////////////////////////////////////////////////////


    var canvas = document.createElement('canvas');
    var ctx = canvas.getContext("2d");

    var styleQrCode = function(qrCodeData) {
        var qrCodeDfd = $.Deferred();

        var imageSrc = new Image();
        var imageOut = new Image();

        imageSrc.onload= function() {

            canvas.width = this.width;
            canvas.height = this.height;

            ctx.drawImage(this, 0, 0);

            // change color 
            var imageData = ctx.getImageData(0, 0, this.width, this.height);

            for (var i = 0; i < imageData.data.length / 4; i++) {

                if (imageData.data[4 * i] < 10 &&
                    imageData.data[4 * i + 1] < 10 &&
                    imageData.data[4 * i + 2] < 10) {

                    imageData.data[4 * i] = 120;
                    imageData.data[4 * i + 1] = 0;
                    imageData.data[4 * i + 2] = 125;
                }
            }

            ctx.putImageData(imageData, 0, 0);

            imageOut.src = canvas.toDataURL("image/png");
        };

        imageOut.onload= function() {
            qrCodeDfd.resolve(this);
        };
            
        imageSrc.src = qrCodeData;

        return qrCodeDfd;
    };


    var scaleQrCode = function(qrCodeImg, targetSize) {

        canvas.width = targetSize;
        canvas.height = targetSize;

        ctx.imageSmoothingEnabled = false;
        ctx.webkitImageSmoothingEnabled = false;
        ctx.msImageSmoothingEnabled = false;

        ctx.drawImage(qrCodeImg, 0, 0, canvas.width, canvas.height);

        var qrCodeOut = new Image();
        qrCodeOut.src = canvas.toDataURL("image/png");
        
        qrCodeOut.className = "qr-code__img";

        return qrCodeOut;

    };



    //////////////////////////////////////////////////////////////
    //
    //      EXPORTS         
    //
    //////////////////////////////////////////////////////////////




    var exports = {
        cookieNotice : cookieNotice,
        addVideoPreviewEventListener : addVideoPreviewEventListener,
        tearDownLandingPage : tearDownLandingPage,
        appendStoreLinks : appendStoreLinks,
        styleQrCode : styleQrCode,
        scaleQrCode :scaleQrCode
    };

    return exports;

});

/*
 2017 Julian Garnier
 Released under the MIT license
*/
var $jscomp$this=this;
(function(w,p){"function"===typeof define&&define.amd?define('anime',[],p):"object"===typeof module&&module.exports?module.exports=p():w.anime=p()})(this,function(){function w(a){if(!g.col(a))try{return document.querySelectorAll(a)}catch(c){}}function p(a){return a.reduce(function(a,d){return a.concat(g.arr(d)?p(d):d)},[])}function x(a){if(g.arr(a))return a;g.str(a)&&(a=w(a)||a);return a instanceof NodeList||a instanceof HTMLCollection?[].slice.call(a):[a]}function H(a,c){return a.some(function(a){return a===c})}
function B(a){var c={},d;for(d in a)c[d]=a[d];return c}function C(a,c){var d=B(a),b;for(b in a)d[b]=c.hasOwnProperty(b)?c[b]:a[b];return d}function y(a,c){var d=B(a),b;for(b in c)d[b]=g.und(a[b])?c[b]:a[b];return d}function W(a){a=a.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,function(a,c,d,h){return c+c+d+d+h+h});var c=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(a);a=parseInt(c[1],16);var d=parseInt(c[2],16),c=parseInt(c[3],16);return"rgb("+a+","+d+","+c+")"}function X(a){function c(a,c,b){0>
b&&(b+=1);1<b&&--b;return b<1/6?a+6*(c-a)*b:.5>b?c:b<2/3?a+(c-a)*(2/3-b)*6:a}var d=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(a);a=parseInt(d[1])/360;var b=parseInt(d[2])/100,d=parseInt(d[3])/100;if(0==b)b=d=a=d;else{var e=.5>d?d*(1+b):d+b-d*b,k=2*d-e,b=c(k,e,a+1/3),d=c(k,e,a);a=c(k,e,a-1/3)}return"rgb("+255*b+","+255*d+","+255*a+")"}function v(a){if(a=/([\+\-]?[0-9#\.]+)(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(a))return a[2]}function Y(a){if(-1<a.indexOf("translate")||
"perspective"===a)return"px";if(-1<a.indexOf("rotate")||-1<a.indexOf("skew"))return"deg"}function I(a,c){return g.fnc(a)?a(c.target,c.id,c.total):a}function D(a,c){if(c in a.style)return getComputedStyle(a).getPropertyValue(c.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase())||"0"}function J(a,c){if(g.dom(a)&&H(Z,c))return"transform";if(g.dom(a)&&(a.getAttribute(c)||g.svg(a)&&a[c]))return"attribute";if(g.dom(a)&&"transform"!==c&&D(a,c))return"css";if(null!=a[c])return"object"}function aa(a,c){var d=
Y(c),d=-1<c.indexOf("scale")?1:0+d;a=a.style.transform;if(!a)return d;for(var b=[],e=[],k=[],h=/(\w+)\((.+?)\)/g;b=h.exec(a);)e.push(b[1]),k.push(b[2]);a=k.filter(function(a,b){return e[b]===c});return a.length?a[0]:d}function K(a,c){switch(J(a,c)){case "transform":return aa(a,c);case "css":return D(a,c);case "attribute":return a.getAttribute(c)}return a[c]||0}function L(a,c){var d=/^(\*=|\+=|-=)/.exec(a);if(!d)return a;var b=v(a)||0;c=parseFloat(c);a=parseFloat(a.replace(d[0],""));switch(d[0][0]){case "+":return c+
a+b;case "-":return c-a+b;case "*":return c*a+b}}function E(a,c){return Math.sqrt(Math.pow(c.x-a.x,2)+Math.pow(c.y-a.y,2))}function M(a){a=a.points;for(var c=0,d,b=0;b<a.numberOfItems;b++){var e=a.getItem(b);0<b&&(c+=E(d,e));d=e}return c}function N(a){if(a.getTotalLength)return a.getTotalLength();switch(a.tagName.toLowerCase()){case "circle":return 2*Math.PI*a.getAttribute("r");case "rect":return 2*a.getAttribute("width")+2*a.getAttribute("height");case "line":return E({x:a.getAttribute("x1"),y:a.getAttribute("y1")},
{x:a.getAttribute("x2"),y:a.getAttribute("y2")});case "polyline":return M(a);case "polygon":var c=a.points;return M(a)+E(c.getItem(c.numberOfItems-1),c.getItem(0))}}function F(a){return g.obj(a)&&a.hasOwnProperty("totalLength")}function ba(a,c){function d(b){b=void 0===b?0:b;return a.el.getPointAtLength(1<=c+b?c+b:0)}var b=d(),e=d(-1),k=d(1);switch(a.property){case "x":return b.x;case "y":return b.y;case "angle":return 180*Math.atan2(k.y-e.y,k.x-e.x)/Math.PI}}function O(a,c){var d=/-?\d*\.?\d+/g,
b;b=F(a)?a.totalLength:a;if(g.col(b))b=g.rgb(b)?b:g.hex(b)?W(b):g.hsl(b)?X(b):void 0;else{var e=v(b),e=e?b.substr(0,b.length-e.length):b;b=c&&!/\s/g.test(b)?e+c:e}b+="";return{original:b,numbers:b.match(d)?b.match(d).map(Number):[0],strings:g.str(a)||c?b.split(d):[]}}function ca(a,c){return 0===c.length?a[0]:c.reduce(function(c,b,e){return c+a[e-1]+(b?b:" ")})}function P(a){return(a?p(g.arr(a)?a.map(x):x(a)):[]).filter(function(a,d,b){return b.indexOf(a)===d})}function da(a){var c=P(a);return c.map(function(a,
b){return{target:a,id:b,total:c.length}})}function ea(a,c){var d=B(c);if(g.arr(a)){var b=a.length;2!==b||g.obj(a[0])?g.fnc(c.duration)||(d.duration=c.duration/b):a={value:a}}return x(a).map(function(a,b){b=b?0:c.delay;a=g.obj(a)&&!F(a)?a:{value:a};g.und(a.delay)&&(a.delay=b);return a}).map(function(a){return y(a,d)})}function fa(a,c){var d={},b;for(b in a){var e=I(a[b],c);g.arr(e)&&(e=e.map(function(a){return I(a,c)}),1===e.length&&(e=e[0]));d[b]=e}d.duration=parseFloat(d.duration);d.delay=parseFloat(d.delay);
return d}function ga(a){return g.arr(a)?z.apply(this,a):Q[a]}function ha(a,c){var d;return a.tweens.map(function(b){b=fa(b,c);var e=b.value,k=K(c.target,a.name),h=d?d.to.original:k,h=g.arr(e)?e[0]:h,m=L(g.arr(e)?e[1]:e,h),k=v(m)||v(h)||v(k);b.isPath=F(e);b.from=O(h,k);b.to=O(m,k);b.start=d?d.end:a.offset;b.end=b.start+b.delay+b.duration;b.easing=ga(b.easing);b.elasticity=(1E3-Math.min(Math.max(b.elasticity,1),999))/1E3;g.col(b.from.original)&&(b.round=1);return d=b})}function ia(a,c){return p(a.map(function(a){return c.map(function(b){var c=
J(a.target,b.name);if(c){var d=ha(b,a);b={type:c,property:b.name,animatable:a,tweens:d,duration:d[d.length-1].end,delay:d[0].delay}}else b=void 0;return b})})).filter(function(a){return!g.und(a)})}function R(a,c,d){var b="delay"===a?Math.min:Math.max;return c.length?b.apply(Math,c.map(function(b){return b[a]})):d[a]}function ja(a){var c=C(ka,a),d=C(S,a),b=da(a.targets),e=[],g=y(c,d),h;for(h in a)g.hasOwnProperty(h)||"targets"===h||e.push({name:h,offset:g.offset,tweens:ea(a[h],d)});a=ia(b,e);return y(c,
{children:[],animatables:b,animations:a,duration:R("duration",a,d),delay:R("delay",a,d)})}function n(a){function c(){return window.Promise&&new Promise(function(a){return U=a})}function d(a){return f.reversed?f.duration-a:a}function b(a){for(var b=0,c={},d=f.animations,e={};b<d.length;){var g=d[b],h=g.animatable,m=g.tweens;e.tween=m.filter(function(b){return a<b.end})[0]||m[m.length-1];m=Math.min(Math.max(a-e.tween.start-e.tween.delay,0),e.tween.duration)/e.tween.duration;e.eased=isNaN(m)?1:e.tween.easing(m,
e.tween.elasticity);e.round=e.tween.round;m=ca(e.tween.to.numbers.map(function(a){return function(b,c){c=a.tween.from.numbers[c];b=c+a.eased*(b-c);a.tween.isPath&&(b=ba(a.tween.value,b));a.round&&(b=Math.round(b*a.round)/a.round);return b}}(e)),e.tween.to.strings);la[g.type](h.target,g.property,m,c,h.id);g.currentValue=m;b++;e={tween:e.tween,eased:e.eased,round:e.round}}if(c)for(var l in c)G||(G=D(document.body,"transform")?"transform":"-webkit-transform"),f.animatables[l].target.style[G]=c[l].join(" ");
f.currentTime=a;f.progress=a/f.duration*100}function e(a){if(f[a])f[a](f)}function g(){f.remaining&&!0!==f.remaining&&f.remaining--}function h(a){var h=f.duration,k=f.offset,n=f.delay,T=f.currentTime,q=f.reversed,r=d(a);if(f.children.length){var p=f.children;if(r>=f.currentTime)for(var u=0;u<p.length;u++)p[u].seek(r);else for(u=p.length;u--;)p[u].seek(r)}r>=n&&(e("run"),f.began||(f.began=!0,e("begin")));r>k&&r<h?b(r):(r<=k&&0!==T&&(b(0),q&&g()),r>=h&&T!==h&&(b(h),q||g()));e("update");a>=h&&(f.remaining?
(t=m,"alternate"===f.direction&&(f.reversed=!f.reversed)):(f.pause(),f.completed||(f.completed=!0,e("complete"),"Promise"in window&&(U(),V=c()))),l=0)}a=void 0===a?{}:a;var m,t,l=0,U=null,V=c(),f=ja(a);f.reset=function(){var a=f.direction,c=f.loop;f.currentTime=0;f.progress=0;f.paused=!0;f.began=!1;f.completed=!1;f.reversed="reverse"===a;f.remaining="alternate"===a&&1===c?2:c;b(0);for(a=f.children.length;a--;)f.children[a].reset()};f.tick=function(a){m=a;t||(t=m);h((l+m-t)*n.speed)};f.seek=function(a){h(d(a))};
f.pause=function(){var a=q.indexOf(f);-1<a&&q.splice(a,1);f.paused=!0};f.play=function(){f.paused&&(f.paused=!1,t=0,l=d(f.currentTime),q.push(f),A||ma())};f.reverse=function(){f.reversed=!f.reversed;t=0;l=d(f.currentTime)};f.restart=function(){f.pause();f.reset();f.play()};f.finished=V;f.reset();f.autoplay&&f.play();return f}var ka={update:void 0,begin:void 0,run:void 0,complete:void 0,loop:1,direction:"normal",autoplay:!0,offset:0},S={duration:1E3,delay:0,easing:"easeOutElastic",elasticity:500,round:0},
Z="translateX translateY translateZ rotate rotateX rotateY rotateZ scale scaleX scaleY scaleZ skewX skewY perspective".split(" "),G,g={arr:function(a){return Array.isArray(a)},obj:function(a){return-1<Object.prototype.toString.call(a).indexOf("Object")},svg:function(a){return a instanceof SVGElement},dom:function(a){return a.nodeType||g.svg(a)},str:function(a){return"string"===typeof a},fnc:function(a){return"function"===typeof a},und:function(a){return"undefined"===typeof a},hex:function(a){return/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(a)},
rgb:function(a){return/^rgb/.test(a)},hsl:function(a){return/^hsl/.test(a)},col:function(a){return g.hex(a)||g.rgb(a)||g.hsl(a)}},z=function(){function a(a,d,b){return(((1-3*b+3*d)*a+(3*b-6*d))*a+3*d)*a}return function(c,d,b,e){if(0<=c&&1>=c&&0<=b&&1>=b){var g=new Float32Array(11);if(c!==d||b!==e)for(var h=0;11>h;++h)g[h]=a(.1*h,c,b);return function(h){if(c===d&&b===e)return h;if(0===h)return 0;if(1===h)return 1;for(var m=0,l=1;10!==l&&g[l]<=h;++l)m+=.1;--l;var l=m+(h-g[l])/(g[l+1]-g[l])*.1,k=3*(1-
3*b+3*c)*l*l+2*(3*b-6*c)*l+3*c;if(.001<=k){for(m=0;4>m;++m){k=3*(1-3*b+3*c)*l*l+2*(3*b-6*c)*l+3*c;if(0===k)break;var n=a(l,c,b)-h,l=l-n/k}h=l}else if(0===k)h=l;else{var l=m,m=m+.1,f=0;do n=l+(m-l)/2,k=a(n,c,b)-h,0<k?m=n:l=n;while(1e-7<Math.abs(k)&&10>++f);h=n}return a(h,d,e)}}}}(),Q=function(){function a(a,b){return 0===a||1===a?a:-Math.pow(2,10*(a-1))*Math.sin(2*(a-1-b/(2*Math.PI)*Math.asin(1))*Math.PI/b)}var c="Quad Cubic Quart Quint Sine Expo Circ Back Elastic".split(" "),d={In:[[.55,.085,.68,
.53],[.55,.055,.675,.19],[.895,.03,.685,.22],[.755,.05,.855,.06],[.47,0,.745,.715],[.95,.05,.795,.035],[.6,.04,.98,.335],[.6,-.28,.735,.045],a],Out:[[.25,.46,.45,.94],[.215,.61,.355,1],[.165,.84,.44,1],[.23,1,.32,1],[.39,.575,.565,1],[.19,1,.22,1],[.075,.82,.165,1],[.175,.885,.32,1.275],function(b,c){return 1-a(1-b,c)}],InOut:[[.455,.03,.515,.955],[.645,.045,.355,1],[.77,0,.175,1],[.86,0,.07,1],[.445,.05,.55,.95],[1,0,0,1],[.785,.135,.15,.86],[.68,-.55,.265,1.55],function(b,c){return.5>b?a(2*b,c)/
2:1-a(-2*b+2,c)/2}]},b={linear:z(.25,.25,.75,.75)},e={},k;for(k in d)e.type=k,d[e.type].forEach(function(a){return function(d,e){b["ease"+a.type+c[e]]=g.fnc(d)?d:z.apply($jscomp$this,d)}}(e)),e={type:e.type};return b}(),la={css:function(a,c,d){return a.style[c]=d},attribute:function(a,c,d){return a.setAttribute(c,d)},object:function(a,c,d){return a[c]=d},transform:function(a,c,d,b,e){b[e]||(b[e]=[]);b[e].push(c+"("+d+")")}},q=[],A=0,ma=function(){function a(){A=requestAnimationFrame(c)}function c(c){var b=
q.length;if(b){for(var d=0;d<b;)q[d]&&q[d].tick(c),d++;a()}else cancelAnimationFrame(A),A=0}return a}();n.version="2.1.0";n.speed=1;n.running=q;n.remove=function(a){a=P(a);for(var c=q.length;c--;)for(var d=q[c],b=d.animations,e=b.length;e--;)H(a,b[e].animatable.target)&&(b.splice(e,1),b.length||d.pause())};n.getValue=K;n.path=function(a,c){var d=g.str(a)?w(a)[0]:a,b=c||100;return function(a){return{el:d,property:a,totalLength:N(d)*(b/100)}}};n.setDashoffset=function(a){var c=N(a);a.setAttribute("stroke-dasharray",
c);return c};n.bezier=z;n.easings=Q;n.timeline=function(a){var c=n(a);c.pause();c.duration=0;c.add=function(d){c.children.forEach(function(a){a.began=!0;a.completed=!0});x(d).forEach(function(b){var d=y(b,C(S,a||{}));d.targets=d.targets||a.targets;b=c.duration;var k=d.offset;d.autoplay=!1;d.offset=g.und(k)?b:L(k,b);c.began=!0;c.completed=!0;c.seek(d.offset);d=n(d);d.began=!0;d.completed=!0;d.duration>b&&(c.duration=d.duration);c.children.push(d)});c.seek(0);c.reset();c.autoplay&&c.restart();return c};
return c};n.random=function(a,c){return Math.floor(Math.random()*(c-a+1))+a};return n});

define('text!html/adminMenu/popUp.html',[],function () { return '<div class="pop-up__wrapper pop-up--hidden">\n    <div class="pop-up">\n        <h1 class="pop-up__title"></h1>\n        <p class="pop-up__content"></p>\n        <div class="pop-up__footer">\n            <button class="pop-up__btn pop-up__btn--cancel"><%= cancel %></button>\n            <button class="pop-up__btn pop-up__btn--validate"><%= validate %></button>\n            <div class="pop-up__timer"></div>\n        </div>\n    </div>\n</div>';});

define('popup',[
    'jquery', 
    'lodash', 
    'device', 
    'loc', 
    'environment', 
    'utils',
    'anime',

    'text!html/adminMenu/popUp.html'
    ], function (
        $, 
        _,
        device, 
        loc, 
        env, 
        utils,
        anime,
        
        popUpHtml
        ) {
    'use strict';

    var popUpTemplate = _.template(popUpHtml);

    function PopUp(core) {
        this.core = core;
        this.isChromecast = device.isChromecast;

        this.init();
    };

    PopUp.prototype = {
        init: function () {
            console.log('%cÃ¢Å“â€', 'color:#339933; background:#CCFF00', 'PopUp initialized');
            var self = this;

            this.$PopUp = $(popUpTemplate({
                validate : loc(2657),
                cancel : loc(2957)
            }));

            this.$PopUp.appendTo($('body'));

            this.$ValidateButton = this.$PopUp.find(".pop-up__btn--validate");
            this.$CancelButton = this.$PopUp.find(".pop-up__btn--cancel");
            this.$Title = this.$PopUp.find(".pop-up__title");
            this.$Content = this.$PopUp.find(".pop-up__content");
            this.$Timer = this.$PopUp.find(".pop-up__timer");




            var boundValidation = function() {
                this.close();
                this.core.popUp.validateCB();
            }.bind(this);


            var boundCancelation = function() {
                if (!!this.core.isExitGameTriggered) {
                    this.core.isExitGameTriggered = false;
                }

                this.close();
                
            }.bind(this);


            this.core.keydownHandler.initState("popup", [{
                keys : ["ENTER", "SPACE"],
                callback : boundValidation
            },{
                keys : ["ESCAPE", "RETURN"],
                callback : boundCancelation
            }]);

            this.$ValidateButton.on('click', boundValidation);
            this.$CancelButton.on('click', boundCancelation);
        },

        show : function() {
            this.$PopUp.removeClass("pop-up--hidden");
            this.core.keydownHandler.setState("popup");
        },

        hide : function() {
            if (!!this.core.isExitGameTriggered) { return; } // don't hide popup if exit game popup is displayed

            this.core.keydownHandler.setPreviousState();
            $('.pop-up__wrapper').addClass("pop-up--hidden");
        },

        close : function() {
            this.hide();
        },

        build : function(data) {

            var self = this;

            if (!!this.core.isAutoplayDisabled || 
                !!this.core.isUserInteractionRequired) {
                    this.$PopUp.addClass('feature--autoplay');
            }
            if (!!this.core.isExitGameTriggered) {
                this.$PopUp.addClass('feature--exit');
            } else {
                this.$PopUp.removeClass('feature--exit');
            }

            if (!!data.isError) {
                this.$PopUp.addClass('pop-up--error');
            } else {
                this.$PopUp.removeClass('pop-up--error');
            }


            if(this.isChromecast && !data.timer) {
                data.timer = 15;
            }

            if (!!data.timer) {
                this.$PopUp.addClass('pop-up--timed');
                anime({
                    targets : this.$Timer[0],
                    scaleX : [0, 1],
                    duration: data.timer*1000,
                    easing: 'linear',
                    complete : this.hide.bind(this)
                });
            } else {
                this.$PopUp.removeClass('pop-up--timed');
            }

            if (!!data.content) {
                this.$Content.show();
                this.$Content.html(data.content);
            } else {
                this.$Content.hide();
            }

            if (!!data.hideCancelation) {
                this.$CancelButton.hide();
            }

            this.$Title.html(data.title);
            this.validateCB = data.validateCB;
            this.show();

        }
     };

    return PopUp;

});
define('initConnectionService',[
    'jquery',
    'device',
    'loc',
    'utils',
    'landingPageUtils',
    'popup',
    'trackerUtils'

], function (
    $,
    device,
    loc,
    utils,
    landingPageUtils,
    PopUp,
    trackerUtils
) {
'use strict';

    var CONNECTION_TIMEOUT = 5000; // 5secs
    var ERROR_MSG = "RegisterRoom error, couldn't connect to server, took too long to respond";


    var displayRoomFetchError = function(jd) {
        $('body').find(".init-spinner").detach();
        $('body').find(".dr-landing__wrapper").empty();

        jd.popUp = new PopUp(jd);
        jd.popUp.build({
            title : loc(3138),
            isError : true,
            validateCB : function() {
                jd.reset();
            }
        });

        $('body').find(".pop-up__wrapper").addClass('landing-popUp');
    };

    var trackRoomError = function(core) {
        trackerUtils.trackClickEvents('Track errors - ' + ERROR_MSG + ' - Session: '+ core.session + ' - Device: ' + core.device);

        if (!!localStorage.trackRoomNrErrorCount) {
            localStorage.trackRoomNrErrorCount = parseInt(localStorage.trackRoomNrErrorCount) + 1;

            if (!!localStorage.roomNr) {
                trackerUtils.trackClickEvents(
                    'PrevRoomNb: '+ localStorage.roomNr +' - CurrRoomNb LoadingErrorCount: ' + localStorage.trackRoomNrErrorCount + ' - Session: '+ core.session + ' - Device: ' + core.device
                );
            } else {
                trackerUtils.trackClickEvents(
                    'No PrevRoomNb - CurrRoomNb Loading Error: ' + localStorage.trackRoomNrErrorCount + ' - Session: '+ core.session + ' - Device: ' + core.device
                );
            }
        }
    };

    // Once room no. is fetched reset the counter
    var resetRoomNrErrorCount = function() {
        if (!!localStorage.trackRoomNrErrorCount) localStorage.trackRoomNrErrorCount = 0;
    }


     // Sends tracking data, generate websession
    var setUpTracking = function() {
        return Math.random().toString(36).substr(2) + (Math.random() * Date.now()).toString(36).split('.').join('');
    };

    var makeConnectionMessage = function(session, videoFormat) {
        // Isolate the device model types for server side
        if (device.isAndroidTabletApp) {
            userAgent.device.model = 'AndroidTablet';
        } else if (device.isChromecast) {
            userAgent.device.model = 'Chromecast';
        } else if (device.isAndroidTvBrowser) {
            userAgent.device.model = 'AndroidTV';
        } else if (userAgent.os.name === 'Mac OS X' && !userAgent.device.model) {
            userAgent.device.model = 'Mac';
        } else if (userAgent.os.name === 'Windows' && !userAgent.device.model && !device.isAndroidTabletApp) {
            userAgent.device.model = 'Windows';
        }

        var msg = {
            func: 'registerRoom',
            device: userAgent,
            userAgent: navigator.userAgent,
            lang: lang,
            timezoneOffset: new Date().getTimezoneOffset() * 60 * 1000,
            webSession: session,
            videoFormat: videoFormat
        };

        return msg;
    };

    var prepareSocket = function(jd, videoFormat) {

        jd.session = setUpTracking();

        var connectionMessage = makeConnectionMessage(jd.session, videoFormat);

        if (localStorage.room) {
            var roomStorage = JSON.parse(localStorage.room);

            if (roomStorage.expires > Date.now()) {
                connectionMessage.room = roomStorage.value;
            }
        }

        if (localStorage.screen) {
            var screenStorage = JSON.parse(localStorage.screen);
            connectionMessage.screen = screenStorage.value;
        }
        
        return jd.sendWSReadable(connectionMessage);
    };

    var handleRoomInfos = function(jd, room, qrCode) {
        jd.room = room;
        resetRoomNrErrorCount();

        return landingPageUtils.styleQrCode(qrCode)
        .then(function(qrCode) {
            jd.qrCode = qrCode;
            return {
                room : jd.room,
                qrCode : qrCode
            };
        });
    };

    var initConnectionService = function(jd, videoFormat) {
        jd.device = utils.detectDevice(device);
        jd.createConnectionDfd = prepareSocket(jd, videoFormat);

        var detectRegisterRoomInt = setInterval(function() {
            if (jd.createConnectionDfd.state() === 'resolved') {
                clearInterval(detectRegisterRoomInt);
                jd.isRegisterRoomError = false;
                jd.isRegisterRoomErrorCount = 0;
            } else {
                if (jd.isRegisterRoomErrorCount < 4) {
                    if (!!jd.isRegisterRoomError) {
                        jd.isRegisterRoomErrorCount++;
                        jd.createConnectionDfd = prepareSocket(jd, videoFormat);
                    }
                } else {
                    clearInterval(detectRegisterRoomInt);
                    jd.createConnectionDfd.reject(jd);
                }
            }
        }, CONNECTION_TIMEOUT);


        return jd.createConnectionDfd
        .then(handleRoomInfos.bind(null, jd))
        .fail(function() {
            console.warn(ERROR_MSG);
            displayRoomFetchError(jd);
            trackRoomError(jd);
        });
    };

    return initConnectionService;

});
define('keyboard',[],function () {
	'use strict';

	// Named keyboard key constants.
	// Based on http://unixpapa.com/js/key.html
	return Object.freeze({
		ENTER: 13,
		ESCAPE: 27,
		SPACE: 32,
		F11: 122,
		LEFT: 37,
		UP: 38,
		RIGHT: 39,
		DOWN: 40,
	});

});

define('text!html/gui/toast/playerJoinedToast.html',[],function () { return '<%= avatarHtml %>\n<span class="player-joined"><%= text %></span>';});


define('text!html/gui/toast/avatarUnlockedToast.html',[],function () { return '<span class="avatar-unlocked"><%= text %></span>\n<%= avatarHtml %>';});


define('text!html/gui/toast/coinBalanceToast.html',[],function () { return '<%= avatarHtml %>\n<span class="coin-balance"><%= text %></span>';});


define('text!html/gui/toast/vipRoomToast.html',[],function () { return '<span class="vip-room"><%= text %></span>';});

define('toasts',[
	'lodash',
	'utils',
	'loc',
	'avatars',
	'device',
	
	'text!html/gui/toast/playerJoinedToast.html',
	'text!html/gui/toast/avatarUnlockedToast.html',
	'text!html/gui/toast/coinBalanceToast.html',
	'text!html/gui/toast/vipRoomToast.html'

	], function(
		_,
		utils,
		loc,
		avatars,
		device,

		playerJoinedToastHtml,
		avatarUnlockedToastHtml,
		coinBalanceToastHtml,
		vipRoomToastHtml
	) {

	'use strict';

	// Templates
	var playerJoinedToastTemplate = _.template(playerJoinedToastHtml);
	var avatarUnlockedToastTemplate = _.template(avatarUnlockedToastHtml);
	var coinBalanceToastTemplate = _.template(coinBalanceToastHtml);
	var vipRoomToastTemplate = _.template(vipRoomToastHtml);


	// Constants
	var DEFAULT_TOAST_DURATION = 5 * 1000;
	var DANGER_TOAST_DURATION = 10 * 1000;
	var AVATAR_UNLOCK_TOAST_DURATION = 4 * 1000;
	var MAX_TOAST_QUEUE_LENGTH = 1;


	function Toasts(core) {
		this.core = core;
	}

	Toasts.prototype = {

		init: function () {
			this.$Content = this.core.jToast.find(".toast__content");
			this.$Image = this.core.jToast.find(".toast__image");
			this.$Color = this.core.jToast.find(".toast__color");

			this.queue = [];
			this.currentToast;
			this.nPlayersJoinedDuringCurrentToast = 0;
		},

		pushToast: function(message, options, image) {

			if (!this.currentToast && this.queue.length < MAX_TOAST_QUEUE_LENGTH || options.queue) {
				this.queue.push({
					message : message,
				 	image : image ? image : "",
					type : options.type ? options.type : "",
					color: options.color ? options.color : "",
					danger: options.danger ? options.danger : false,
					duration: options.duration ? options.duration : null
				});
				if (!!options.danger && !!device.isWeak) {
					this.currentToast = undefined;
				}
			}

			this.currentToast || this.showNextToast();
		},

		showNextToast: function() {
			
			var toast = this.queue.shift();
			if (!toast) { return; }

			this.currentToast = toast;

			this.$Content.html(toast.message);
			this.$Image.html(toast.image);
			toast.color && this.$Color.addClass(toast.color);
			toast.danger && this.$Color.addClass("danger");

			this.core.jToast.to(0.2, {
				transform: 'translate3d(-50%, 0%, 0)',
				opacity: 1,
				visibility: 'visible'
			});

			if (toast.type === 'playersJoined') {
				this.nPlayersJoinedDuringCurrentToast = 0;
			}

			var duration = (toast.duration ? toast.duration : (!!toast.danger ? DANGER_TOAST_DURATION : DEFAULT_TOAST_DURATION));
			this.toastHideTimeout = setTimeout(this.hideToast.bind(this), duration);

		},

		hideToast: function() {
			var self = this;
			clearTimeout(this.toastHideTimeout);
			this.core.jToast.to(0.5, {
				transform: 'translate3d(-50%, 250%, 0)',
				opacity: 0,
				visibility: 'hidden'
			}).then(function () {
				self.currentToast.color && self.$Color.removeClass(self.currentToast.color);
				self.currentToast.danger && self.$Color.removeClass("danger");
				self.currentToast = undefined;
				self.showNextToast();
			});
		},

		// Display player joined template in toast form
		showPlayerJoinedToast: function (player) {

			var message = "";
			var image = "";
			var options = {};

			if (this.currentToast) {
				this.nPlayersJoinedDuringCurrentToast++;

				if (this.nPlayersJoinedDuringCurrentToast === 1) {
					message = loc(2734, { '{nickname}': this.core.gui.playerName(player) });
					image = avatars.getAvatarHtml(player.avatar);
				} else {
					var oasisId = _.contains([ 'playerJoined', 'playersJoined' ], this.currentToast.type) ? '2003' : '2002'
					message = loc(oasisId, { '[N_PLAYERS]': this.nPlayersJoinedDuringCurrentToast });
				}

				var playersJoinedToast = _.find(this.queue, { type: 'playersJoined' });
				if (playersJoinedToast) {
					playersJoinedToast.message = message;
					options.color = "";
					return;
				} else {
					options.queue = true;
					options.type = 'playersJoined';
				}

			} else {
				var oasisId = 906;
				message = loc(oasisId, { '[player name]': this.core.gui.playerName(player) });
				image = avatars.getAvatarHtml(player.avatar);

				options.type = 'playerJoined';
				options.color = player.color;
			}

			this.pushToast(message, options, image);
		},

		// Display player left toast
		playerLeftToast: function (player) {
			var options = {};
			var message = loc(907, {
				'[player name]': this.core.gui.playerName(player),
			});
			var image = avatars.getAvatarHtml(player.avatar);

			options.color = player.color;
			if (this.currentToast) {
				options.queue = true;
			}
			
			this.pushToast(message, options, image);
		},


		// Display unlock avatar template in toast form
		showAvatarUnlockedToast: function (player, avatarId) {

			var message = loc(1988, { '[PLAYER NAME]': this.core.gui.playerName(player) }); // 1988: Web_After_Dance_Toast_3Players
			var image = avatars.getAvatarHtml(avatarId);
			var options = {
				queue: true,
				duration: AVATAR_UNLOCK_TOAST_DURATION,
				type: 'playerAvatarUnlocked'
			};

			var nQueuedAvatarUnlockedToasts = _.filter(this.queue, { type: 'playerAvatarUnlocked' }).length;

			if (nQueuedAvatarUnlockedToasts < 2) {
				this.pushToast(message, options, image);
			} else {
				this.queue = _.reject(this.queue, { type: 'playerAvatarUnlocked' });
				this.pushToast(loc(1989), { queue: true }, image); // 1989: Web_After_Dance_Toast_4Players
			}
		},

		// Display coin balance toast if its not enough
		showCoinBalanceToast: function (player, playerCount) {
			var messageLoc = (playerCount === 1 ? loc('2718') : // 2718: Lobby_Not_Enough_Coins
				loc(2720, { // 2720: Sec_Toast_Master_Coins
					'[roomMaster nickname]': this.core.gui.playerName(player)
				}));

			var message = messageLoc.replace(/\\n/g, '<br>');
			var image = '<img src="'+cdn + '/web/img/icons/pack_coins.png" class="toast__asset" />';
			var options = {
				type: 'notEnoughCoinBalance'
			};

			this.pushToast(message, options, image);
		},

		// Display VIP toast if the room is not VIP
		showVIPToast: function (playerId) {
			var message = loc(2719, { '[newLine]': '<br>' }), // 2719: Lobby_Not_VIP
				image  = '<img src="'+cdn + '/web/img/hud/VIP_Pass_Neutral.png" class="toast__asset" />';
			this.pushToast(message, {}, image);
		},

		closeChromecastToast: function(shutDownDelay) {
			var message = loc(2542, { '[number]': shutDownDelay }); // 2542: Web_Chromecast_Closing_App_seconds
			var options = { danger: true, queue: true };
			this.pushToast(message, options);
		}

	};

	return Toasts;
});

define('text!html/jd/banner.html',[],function () { return '<div class="banner banner--hidden">\n\t<div class="banner-content">\n\t\t<div class="banner-close"></div>\n\t\t<div class="banner-img"><img src="<%= bannerLink %>" /></div>\n\t\t<div class="banner-txt"><%= bannerTxt %></div>\n\t\t<div class="banner-subTxt"><%= bannerSubTxt %></div>\n\t\t<div class="banner-timer"></div>\n\t</div>\n</div>';});

define('banner',[
    'jquery', 
    'lodash', 
    'device', 
    'loc',
    'anime',

    'text!html/jd/banner.html'
], function (
    $, 
    _,
    device, 
    loc,
    anime,

    bannerHtml
) {
    'use strict';

    var bannerTemplate = _.template(bannerHtml);
    var data = {
        bannerLink: cdn + '/web/img/assets/popup_moreCoins.png',
        bannerTxt: loc(3985),
        bannerSubTxt: loc(3984),
        frequency: 86400000 //24hrs
    };

    function Banner(core) {
        this.isBannerToBeDisplayed = false;
        this.core = core;
    };

    Banner.prototype = {
        init: function () {
            console.log('%cÃ¢Å“â€', 'color:#339933; background:#CCFF00', 'Banner initialized');
            if (!this.isBannerToBeDisplayed) return;


            this.$Banner = $(bannerTemplate(data)).appendTo($('body'));
            this.isBannerDisplayed = false;

            this.$BannerClose = this.$Banner.find('.banner-close');
            this.$BannerTimer = this.$Banner.find('.banner-timer');

            this.addEventListeners();
            this.calcDisplayTimer();
        },


        addEventListeners: function() {
            var self = this;

            this.$BannerClose.on('click', function() {
                self.hide();
            });

            if (!!device.isChromecast) {
                this.$Banner.addClass('banner-chromecast');
                data.timer = 15;

                anime({
                    targets : this.$BannerTimer[0],
                    scaleX : [0, 1],
                    duration: data.timer*1000,
                    easing: 'linear',
                    complete : this.hide.bind(this)
                });
            }
        },

        show: function() {
            this.isBannerDisplayed = true;
            this.$Banner.removeClass('banner--hidden');
        },

        hide: function() {
            this.isBannerDisplayed = false;
            this.$Banner.addClass('banner--hidden');
        },


        calcDisplayTimer: function() {
            if (!localStorage) return; // Dont execute if there's no browser's localStorage

            var currentDate = new Date();
            var currentTime = currentDate.getTime();
            var diff;

            if (!localStorage.currentBannerTime) {
                // localStorage doesnn't have bannerTime 
                this.show();
                localStorage.currentBannerTime = currentTime;
            } else {
                // localStorage have bannerTime
                diff = currentTime - localStorage.currentBannerTime;
                if (diff >= data.frequency) {
                    // localStorage bannerTime & currentTime diff is greater than stipulated time
                    this.show();
                    localStorage.currentBannerTime = currentTime;
                } else {
                    this.hide();
                }
            }
        }

     };

    return Banner;

});
define('connectionInfo',[
    'lodash',
    'utils',
    'loc',
    'device',
    'trackerUtils'

    ], function(
        _,
        utils,
        loc,
        device,
        trackerUtils
    ) {

    'use strict';



    function ConnectionInfo(core) {
        this.core = core;

        var self = this;
        var jd = this.core;
        this.core.keydownHandler.initState('bannerSelection',
        [{
            keys : ["ENTER"],
            callback : jd.displayConnectionInfos.bind(jd)
        },{
            keys : ["ESCAPE", "RETURN", "DOWN"],
            callback : function() {

                jd.keydownHandler.setState(jd.state);
                self.focus(false);

                //necessary set up to get the right behaviour
                //could be arranged/ enhanced to be less specific ?
                if (jd.state === "songSelection") {
                    jd.gui.songSelection.grid.onFocus();
                    jd.gui.songSelection.focusSong(jd.song, jd.category, true);
                }
            }
        }]);


        this.init();
    }

    ConnectionInfo.prototype = {

        init: function () {
            this.$ConnectPhoneInfos = $($.find(".connect-phone-info"));
            var content = '<span class="connect-phone-info__text">' + loc(2789) +'</span>';

            this.$ConnectPhoneInfos.html(content);

            if (!device.isChromecast) {
                this.$ConnectPhoneInfos.addClass("connect-phone-info--clickable");

                this.$ConnectPhoneInfos.on('click', function() {
                    this.core.displayConnectionInfos();
                    trackerUtils.triggerTracking('how-to'); //Tracking connect How-to
                }.bind(this));
            }
           
            this.core.initDeferred.then(function() {
                if (this.core.countPlayers() === 0) {
                    this.show();
                }
            }.bind(this))

        },

        show: function() {
            this.$ConnectPhoneInfos.addClass("connect-phone-info--visible");
        },

        hide: function() {
            this.$ConnectPhoneInfos.removeClass("connect-phone-info--visible");
        }

    };

    return ConnectionInfo;
});

define('text!html/songSelection/tab.html',[],function () { return '<ul class="tabs">\n\t<% var tabListLength = tabData.length; %>\n\t<% for (var t = 0; t < tabListLength; t++) { %>\n\t\t<li class="<%= tabData[t].class %>" section-id="<%= tabData[t].section %>" title="<%= tabData[t].name %>">\n\t\t\t<div class="tabs--icon"></div>\n\t\t\t<div class="tabs--text"><%= tabData[t].name %></div>\n\t\t</li>\n\t<% } %>\n</ul>\n<div class="tabs--connect"></div>';});

define('coverflowTabs',[
    'jquery', 
    'loc',
    'device',
    'trackerUtils',

    'text!html/songSelection/tab.html'
], function (
    $, 
    loc,
    device,
    trackerUtils,

    tabHtml
) {
    'use strict';

    var tabTemplate = _.template(tabHtml);

    function CoverflowTabs(core) {
        this.core = core;
    };

    CoverflowTabs.prototype = {
        init: function() {
            console.log('%cÃ¢Å“â€', 'color:#339933; background:#CCFF00', 'Coverflow Tabs initialized');
            this.isPreviewAreaShown = false;

            this.tabArr = [{
                'name': loc(3905),
                'class': 'selected',
                'section': 'playlist'
            }, {
                'name': loc(3906),
                'class': 'not-selected',
                'section': 'songlist'
            }];

            this.renderTab();
        },

        renderTab: function() {
            var self = this;

            $(tabTemplate({
                tabData: this.tabArr
            })).appendTo(this.core.jCoverflowTabs);

            this.$CoverflowTabsUL = this.core.jCoverflowTabs.find('ul');
            this.$CoverflowTabsLI = this.$CoverflowTabsUL.find('li');
            this.$CoverflowTabsHowToConnect = this.core.jCoverflowTabs.find('.tabs--connect');

            this.$CoverflowTabsLI.on('click', function() {
                self.bindTab($(this).attr('section-id'));

                // Track tabs only on click
                self.trackTabClicked();
            });

            this.$CoverflowTabsHowToConnect.on('click', function() {
                self.bindHowToConnect();
            });
        },


        sendTabRest: function(sectionId) {
            this.core.ws.sendReadable({ func: 'tabRest', tabName: sectionId });
        },


        // Bind Coverflow tab events here
        bindTab: function(sectionId, communicator) {
            if (!sectionId) sectionId = this.tabArr[0].section;

            // Exit this method for 2 conditions:- if tab value from Unity doesn't exist OR the tab is already selected
            var isTabExist = _.find(this.tabArr, {'section': sectionId});
            if (!isTabExist || (this.core.tabSelected === sectionId && communicator !== 'app')) { return; }


            // Call server event for TABREST
            if (this.core.countPlayers() > 0 && communicator !== 'app') {
                this.sendTabRest(sectionId);
            }

            this.onTabRest(sectionId);
        },

        // Bind server tab events here
        onTabRest: function(sectionId) {
            this.core.audio.playSFX('config-window-open', { volume: 1 });
            this.core.tabSelected = sectionId;

            // Hide/Show the container elements
            this.core.jCoverflowContainer.find('.grid-container').hide();
            this.core.jCoverflowContainer.find('#section-'+sectionId).show();

            // bind SELECTED to each elements
            this.$CoverflowTabsLI.removeClass('selected not-selected');
            this.$CoverflowTabsUL.find('li[section-id = '+sectionId+']').addClass('selected');

            this.show(sectionId);

            // To make sure that on tabRest, web is redirected to song-selection screen
            if (this.core.state === 'coachSelection') {
                this.core.setState('songSelection');
            }
            
        },

        show: function(sectionId) {

            // hide the video preview section
            // play background music in playlist grid section
            this.core.gui.previewArea.songPreview.stopMedia();
            this.core.audio.playMenuMusic();

            this.core.jPreviewArea.hide();
            this.isPreviewAreaShown = false;

            if (sectionId === this.tabArr[0].section) { // for PLAYLIST

                // Empty the SONG obj for playlist tab
                this.core.song = '';

                // Execute the show & hide of each section
                this.core.gui.songSelection.playlist.$playlistContainer.hide();
                this.core.gui.songSelection.playlist.$playlistSelectedDetails.hide();
                
                this.core.gui.songSelection.playlist.$playlistGrid.show();
                this.core.gui.songSelection.playlist.$playlistGridTrainer.show();

            } else { // for SONGLIST

                // Empty the CATEGORY obj for songlist tab
                this.core.category = '';

                this.core.jSonglistSection.find('.item').removeClass('item-selected');
                this.core.gui.songSelection.songlist.$SonglistTrainer.show();
                this.core.jSonglistSection.find('.song--details').scrollTop(0);
            }
        },


        bindHowToConnect: function() {
            // Tracking TabsHowTo connect
            trackerUtils.trackClickEvents(this.core.countPlayers() === 0  ? 
                'Navigation - NSM - Tabs-How-To' : 'Navigation - SM - Tabs-How-To'
            );
            var howToConnectLink = location.origin +'/FAQ?lang='+ lang +'&question=listOfCompatibleDevices';

            if (this.core.countPlayers() === 0) {
                this.core.displayConnectionInfos();
            } else {
                if (!!device.isIpadApp || !!device.isAndroidTabletApp || !!device.isMacOSApp) {
                    this.core.gui.iframe.build(howToConnectLink);
                } else {
                    window.open(howToConnectLink, '_blank');
                }
            }
        },



        // Tracking helper functions
        trackTabClicked: function() {
            trackerUtils.trackJdnowEvents(this.core.countPlayers() === 0 ? 
                'No Scoring Mode Pages' : 'Scoring Mode Pages', 
                'Tabs - '+ this.core.tabSelected,
                this.core.controller
            );
        }

    };

    return CoverflowTabs;
});

define('text!html/songGrid/songGrid.html',[],function () { return '<div class="song-grid <%= songGrid ? \'songGrid\' : \'\' %>">\n\t<div class="song-grid--details">\n\t\t<div class="song-grid--titleDetails">\n\t\t\t<div class="song-grid--title"><%= title %></div>\n\t\t\t<div class="song-grid--description"><%= description %></div>\n\t\t\t<div class="song-grid--duration"><%= duration %></div>\n\t\t</div>\n\t\t<div class="song-grid--close"></div>\n\t</div>\n\n\t<div class="song--details">\n\t\t<div class="item-container">\n\n\t\t\t<% _.forEach(songdata, function(value, key) { %>\n\t\t\t\t<div class="item <%= value.id %>">\n\t\t\t\t\t<div class="song__decoration">\n\t\t\t\t\t\t<img class="song__cover" src="<%= value.base + \'/assets/web/\' + value.id.toLowerCase() + suffix %>" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="title-container">\n\t\t\t\t\t\t<div class="caption title"><%= value.name %></div>\n\t\t\t\t\t\t<div class="caption artist"><%= value.artist %></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t<% }) %>\n\n\t\t</div>\n\t</div>\n</div>';});

define('songItem',[
    'jquery',
    'lodash',
    'loc',
    'device',
    'songs',
    'trackerUtils',

    'text!html/songGrid/songGrid.html'
], function (
    $,
    _,
    loc,
    device,
    songs,
    trackerUtils,

    songGridHtml
) {
    'use strict';

    var GRID_ROW_SIZE = 2;
    var GRID_SCROLL_HEIGHT;
    var SCROLL_SPEED = 50;

    var songGridTemplate = _.template(songGridHtml);

    var calc_scroll_height = function(cont) {
        // if GRID_SCROLL_HEIGHT value present then execute it only for web, other screens can't be resized
        if (!!GRID_SCROLL_HEIGHT && device.isChromecast) {
            return GRID_SCROLL_HEIGHT;
        }

        GRID_SCROLL_HEIGHT = cont.find('.item').height();
        return GRID_SCROLL_HEIGHT;
    };



    function SongItem(core) {
        this.core = core;
    };


    SongItem.prototype = {

        init: function() {
            console.log('%cÃ¢Å“â€', 'color:#339933; background:#CCFF00', 'Song Items initialized');

            this.renderGrid(songs.getSongData(), this.core.gui.songSelection.songlist.$SonglistContainer);
            this.scrollGridVal = 0;
        },


        // Song grid rendering part with individual data
        renderGrid: function(data, container, gridDetails) {
            this._songGridData = data;
            container.empty();

            this.$songItemGrid = $(songGridTemplate({
                songGrid: (!!gridDetails ? false : true),
                title: (!!gridDetails ? gridDetails.name : loc(4073)),
                description: (!!gridDetails ? gridDetails.description : loc(4074)),
                duration: (!!gridDetails ? gridDetails.duration : ''),
                songdata: this._songGridData,
                suffix: device.isWeak ? '_cc.jpg' : '_small.jpg'
            })).appendTo(container);

            this.$songItemGrid.el = this.$songItemGrid.find('.item');
            this.$playlistDetailsClose = this.$songItemGrid.find('.song-grid--close');

            this.bindGridEvents();
        },

        bindGridEvents: function() {
            var self = this;

            this.$songItemGrid.el.on('click', function() {
                self.core.audio.playSFX("coverflow-click", {volume : 1});
                self.bindFocusEvents($(this)[0].classList[1]);

                // Track all song-selection only on click
                self.trackSongClicked();
            });

            // Close event for each playlist, manintain the previous state
            this.$playlistDetailsClose.on('click', function() {
                self.core.audio.playSFX('config-window-close', { volume: 1 });
                // Forcefully making the flag as 'songlist' before switching tabs
                // This has been done to reduce complexicity & making states think as songsTab
                self.core.tabSelected = self.core.gui.coverflowTabs.tabArr[1].section;
                self.core.gui.coverflowTabs.bindTab();

                // Track playlist-close only on click
                self.trackPlaylistCloseClicked();
            });

        },

        // Trigger all click events of SONG ITEMS from here
        bindFocusEvents: function(songId, playlistId) {
            if (this.core.song === songId) { return; }

            this.core.song = songId;
            if (!!playlistId) this.core.category = playlistId;


            this.core.gui.songSelection.focusSong(this.core.song, this.core.category);
        },


        selectFocussedElements: function() {
            // Song tabGrid element bind, since each playlist have its own grid elements
            if (this.core.tabSelected === this.core.gui.coverflowTabs.tabArr[1].section) {

                this.$songItemGrid = this.core.jSonglistSection.find('.item-container');
                this.$songItemGrid.el = this.$songItemGrid.find('.item');
            }

            this.$songItemGrid.el.removeClass('item-selected');
            this.$songItemGrid.find('.'+ this.core.song).addClass('item-selected');
        },

        showPreview: function() {
            if (!this.core.gui.coverflowTabs.isPreviewAreaShown) {
                this.core.gui.coverflowTabs.isPreviewAreaShown = true;

                this.core.gui.songSelection.playlist.$playlistSelectedDetails.hide();
                this.core.gui.songSelection.songlist.$SonglistTrainer.hide();
                this.core.jPreviewArea.show();
            }
        },


        // Grid scroll if it's triggerred from server
        scrollSongItemGrid: function() {
            var song = this.core.song;
            var song_focus_index, scrollContainer, gridMagicNr;

            if (this.core.tabSelected === this.core.gui.coverflowTabs.tabArr[1].section) {

                song_focus_index = (Object.keys(songs.getSongData()).indexOf(song) + 1);
                scrollContainer = this.$songItemGrid.parent();

            } else {
                song_focus_index = (Object.keys(this._songGridData).indexOf(song) + 1);
                scrollContainer = this.core.jPlaylistSection.find('.song--details');
            }

            // scroll height will change as per screen-resolution in song-grid
            var scroll_height = calc_scroll_height(scrollContainer);

            var grid_focus_index = Math.floor((song_focus_index % GRID_ROW_SIZE) > 0 ? 
                                    (song_focus_index / GRID_ROW_SIZE) : ((song_focus_index / GRID_ROW_SIZE) - 1));

            this.scrollGridVal = (grid_focus_index * scroll_height) - scroll_height; // value deducted to keep it in the center of the page;

            this.scrollGrid(scrollContainer);
        },

        scrollGrid: function(cont) {
            cont.animate({
                scrollTop: this.scrollGridVal
            }, SCROLL_SPEED);
        },


        // Tracking helper functions
        trackSongClicked: function () {
            var trackingTxt, _mapCategory;

            if (this.core.tabSelected === this.core.gui.coverflowTabs.tabArr[1].section) { // For song tabs
                trackingTxt = 'Song Selection - '+ this.core.song;
            } else { // For playlist tabs
                _mapCategory = _.find(this.core.gui.songSelection.categories, {'id': this.core.category});
                trackingTxt = 'Song Selection - '+ _mapCategory.trackingId +' - '+ this.core.song;
            }

            trackerUtils.trackJdnowEvents(this.core.countPlayers() === 0 ? 
                'No Scoring Mode Pages' : 'Scoring Mode Pages',
                trackingTxt,
                this.core.controller
            );
        },

        trackPlaylistCloseClicked: function() {
            trackerUtils.trackJdnowEvents(this.core.countPlayers() === 0 ? 
                'No Scoring Mode Pages' : 'Scoring Mode Pages', 
                'Playlist - Close',
                this.core.controller
            );
        }

    };


    return SongItem;
});

define('text!html/songSelection/playlist.html',[],function () { return '<div class="playlist-grid">\n\t<div class="playlist-grid-container">\n\t\t<% var categoryListLength = categoryList.length; %>\n\t\t<% for (var c = 0; c < categoryListLength; c++) { %>\n\t\t\t<% if(categoryList[c].trackingId === "FAVORITES") { %>\n\t\t\t\t<div class="playlist <%= categoryList[c].id %>" name="FAVORITES">\n\t\t    \t\t<img src="<%= cdn %>/web/img/icons/Playlist_Banner_Favourites.png" alt="" class="playlist--img" />\n\t\t\t<% } else { %>\n\t\t\t\t<div class="playlist <%= categoryList[c].id %>" name="<%= categoryList[c].trackingId %>">\n\t\t\t\t<% if (deviceChromecast) { %>\n\t\t\t\t\t<img src="<%= categoryList[c].stackImages[1].publicUrl %>" alt="" class="playlist--img" />\n\t\t\t\t<% } else { %>\n\t\t\t\t\t<img src="<%= categoryList[c].stackImages[0].publicUrl %>" alt="" class="playlist--img" />\n\t\t\t\t<% } %>\n\t\t\t<% } %>\n\t\t\t\t\t<span class="playlist--title"><%= categoryList[c].name %></span>\n\t\t    \t\t<span class="playlist--description"><%= categoryList[c].description %></span>\n\t\t    \t</div>\n\t\t<% } %>\n\t</div>\n</div>\n\n<div class="section-grid-trainer">\n\t<div class="grid-img"></div>\n\t<div class="trainer-grid">\n\t\t<div class="trainer-icon"></div>\n\t\t<div class="trainer-txt"><%= trainerTxt %></div>\n\t\t<div class="trainer-txt trainer-txt__ftue"><%= trainerTxtFtue %></div>\n\t</div>\n</div>\n\n<div class="playlist-img-container"></div>\n\n<div class="playlist-container"></div>';});


define('text!html/songSelection/playlistDetails.html',[],function () { return '<div class="playlist--banner__selected"><img src="<%= playlistSelectedImg %>" alt="" /></div>\n<div class="playlist-title-details">\n\t<div class="playlist--description"><%= playlistSelectedDescription %></div>\n\t<div class="playlist-action__button"><%= playlistDanceTxt %></div>\n</div>';});

define('playlist',[
    'jquery',
    'lodash',
    'loc',
    'device',
    'songs',
    'songItem',
    'utils',
    'trackerUtils',

    'text!html/songSelection/playlist.html',
    'text!html/songSelection/playlistDetails.html'
], function (
    $,
    _,
    loc,
    device,
    songs,
    SongItem,
    utils,
    trackerUtils,

    playlistHtml,
    playlistDetailsHtml
) {
    'use strict';

    var TEMP_PLAYLIST = [];
    var playlistTemplate = _.template(playlistHtml);
    var playlistDetailsTemplate = _.template(playlistDetailsHtml);
    var playlistDetails = {
        name: '',
        description: '',
        duration: '',
        bannerImg: ''
    };

    // Bind all details to each playlist elements
    var bindPlaylistDetails = function(mapCategory) {
        var playlist_duration = utils.msToTime(mapCategory.duration);
        playlistDetails.name = mapCategory.name;
        playlistDetails.description = mapCategory.description;

        if (mapCategory.id !== "FAVORITES") {
            playlistDetails.bannerImg = mapCategory.stackImages[0].publicUrl;
            playlistDetails.duration = loc(3908) + ' - '+ playlist_duration;
        } else {
            playlistDetails.bannerImg = cdn + '/web/img/icons/Playlist_Banner_Favourites.png';
            if (!!this.core.gui.songSelection.favCatDuration)
                playlistDetails.duration = loc(3908) + ' - '+ this.core.gui.songSelection.favCatDuration;
        }

        return playlistDetails;
    };


    function Playlist(core) {
        this.core = core;
    };


    Playlist.prototype = {

        init: function() {
            console.log('%cÃ¢Å“â€', 'color:#339933; background:#CCFF00', 'Playlist initialized');
        },

        renderPlaylist: function(categoryData) {
            this.categories = categoryData;

            // Empty the playlist grid if update categories called
            if (this.$playlistGrid && this.$playlistGrid.length > 0) {
                this.core.jPlaylistSection.empty();
            }

            // Bind the playlist template
            $(playlistTemplate({
                categoryList: this.categories,
                deviceChromecast: (!!device.isChromecast),
                trainerTxt: loc(3975),
                trainerTxtFtue: loc(4001),
            })).appendTo(this.core.jPlaylistSection);


            this.$playlistGrid = this.core.jPlaylistSection.find('.playlist-grid');
            this.$playlist = this.core.jPlaylistSection.find('.playlist');
            this.$playlistContainer = this.core.jPlaylistSection.find('.playlist-container');
            this.$playlistGridTrainer = this.core.jPlaylistSection.find('.section-grid-trainer');
            this.$playlistSelectedDetails = this.core.jPlaylistSection.find('.playlist-img-container');


            if (this.core.tabSelected !== this.core.gui.coverflowTabs.tabArr[1].section) {
                this.core.jPreviewArea.hide();
            }

            this.addEventListeners();   
        },


        sendPlaylistRest: function(playlistId) {
            this.core.ws.sendReadable({ func: 'playlistSelected', category: playlistId });
        },

        // Bind web events on playlist tabs
        bindPlaylistEvents: function(playlistId) {
            // Call server event for TABREST
            if (this.core.countPlayers() > 0) {
                this.sendPlaylistRest(playlistId);
            }

            this.onPlaylistRest(playlistId);
        },


        onPlaylistRest: function(playlistId) {
            
            this.core.category = playlistId;
            this.core.tabSelected = 'playlist-'+playlistId;

            this.$playlist.removeClass('playlist-selected');
            this.core.jPlaylistSection.find('.'+this.core.category).addClass('playlist-selected');

            this.core.gui.coverflowTabs.isPreviewAreaShown = false; // reset the flag each time
            this.bindPlaylistSongs(this.core.category);
            this.show();
        },

        renderPlaylistImgContainer: function(data, songsData) {
            var self = this;
            this.$playlistSelectedDetails.empty();

            // Bind the playlistSelectedDetails template
            $(playlistDetailsTemplate({
                playlistSelectedImg: data.bannerImg,
                playlistSelectedDescription: data.description,
                playlistDanceTxt: loc(2841) + '!'
            })).appendTo(this.$playlistSelectedDetails);

            this.$playlistSelectedBtn = this.$playlistSelectedDetails.find('.playlist-action__button');
            this.$playlistSelectedBtn.on('click', function() {
                self.onFocusPlaylistSong(songsData);
                self.core.goToLobby();
            });
        },


        // Bind song data to each playlist
        bindPlaylistSongs: function (categorySelected) {
            // pretify the playlist data & traverse on it
            var _mapCategory = _.find(this.categories, {'id': categorySelected});
            if (!_mapCategory) {
                console.warn('Error, playlist doesnt exist');
                return;
            }
            var _songIdListArr = _mapCategory.songs;
            this.trackPlaylistId = _mapCategory.trackingId; // For tracking purpose only

            var _mapCategorySongData = {};

            _.forEach(_songIdListArr, function(songId) {
               var sD = songs.getSong(songId);
               _mapCategorySongData[sD.id] = sD;
            });

            
            var playlistData = bindPlaylistDetails.call(this, _mapCategory);
            // Populate the grid with playlist song data
            this.core.gui.songSelection.songItemGrid.renderGrid(_mapCategorySongData, this.$playlistContainer, playlistData);
            // Populate the grid with playlist details data
            this.renderPlaylistImgContainer(playlistData, _mapCategorySongData);

        },


        show: function() {
            this.$playlistGrid.hide();
            this.$playlistGridTrainer.hide();

            this.$playlistContainer.show();
            this.$playlistSelectedDetails.show();
        },


        addEventListeners: function() {
            var self = this;

            // Click events registered for each playlist data
            this.$playlist.on('click', function() {
                // If FTUE playlist, then check its flag & disable playlist click on all except FTUE playlist
                if (!!self.core.ftueState && ($(this).attr('name') !== 'FTUE')) { return; }

                self.bindPlaylistEvents($(this)[0].classList[1]);
                // Track playlist-selection only on click
                self.trackPlaylistClicked();
            });
        },


        // Only for playlist, Trigger focus song with / without songId
        onFocusPlaylistSong: function(songData, songId) {
            var songItem = (!songId ? Object.keys(songData)[0] : songId);
            this.core.gui.songSelection.songItemGrid.bindFocusEvents(songItem, this.core.category);
        },



        // Tracking helper functions
        trackPlaylistClicked: function() {
            if (TEMP_PLAYLIST.indexOf(this.trackPlaylistId) >= 0) { return; }

            TEMP_PLAYLIST.push(this.trackPlaylistId);
            var tempPlaylist = TEMP_PLAYLIST[TEMP_PLAYLIST.length -1];

            trackerUtils.trackJdnowEvents(this.core.countPlayers() === 0 ? 
                'No Scoring Mode Pages' : 'Scoring Mode Pages', 
                'Playlist - '+ tempPlaylist,
                this.core.controller
            );
        }
        

    };

    return Playlist;
});
define('songlist',[
    'jquery',
    'lodash',
    'songs'
], function (
    $,
    _,
    songs
) {
    'use strict';

    function Songlist(core) {
        this.core = core;
    };

    Songlist.prototype = {

        init: function() {
            console.log('%cÃ¢Å“â€', 'color:#339933; background:#CCFF00', 'Songlist initialized');

            this.$SonglistContainer = this.core.jSonglistSection.find('.songlist-container');
            this.$SonglistTrainer = this.core.jSonglistSection.find('.section-grid-trainer');
        },

        // Trigger focus song with / without songId
        onFocusSong: function(songId) {
            // Dont't initiate call if players are already there in room
            if (this.core.countPlayers() > 0) return;

            var songItem = (!songId ? Object.keys(songs.getSongData())[0] : songId);
            this.core.gui.songSelection.songItemGrid.bindFocusEvents(songItem);
        }

    };

    return Songlist;
});
define('beatGenerator',['require','pubsub'],function (require) {
	'use strict';

	var pubsub = require('pubsub');

	// Generates beat events, based on the beat data of a given song
	function BeatGenerator() {
		this.active = false;
		this.boundOnUpdate = this.onUpdate.bind(this);
	}

	// Start emitting beats for the given song. Can be called multiple times in a row, without calling stop() inbetween.
	// Arg types                              Object
	BeatGenerator.prototype.start = function (song) {
		this.stop();

		this.active = true;
		this.song = song;
		this.currentBeat = 0;
		this.beats = [];
		this.preBeat50Triggered = false;
		this.preBeat100Triggered = false;
		this.startTime = undefined;

		// Add "missing" beats. This is only used in song selection
		var pulse = song.pulse * 1000;
		for (var beatTime = song.beats[0] - pulse; beatTime > 0; beatTime -= pulse) {
			this.beats.unshift(beatTime);
		}

		// Add all the original beats
		this.beats = this.beats.concat(song.beats);

		requestAnimationFrame(this.boundOnUpdate);
	};

	BeatGenerator.prototype.stop = function () {
		this.active = false;
	};

	// Private function. Generates the pre-beat and beat events.
	// One event is emitted 100ms before the beat, one 50ms before and one on the beat.
	BeatGenerator.prototype.onUpdate = function (time) {
		if (!this.active || this.currentBeat === this.beats.length) {
			this.stop();
			return;
		}

		if (this.startTime) {
			var timeSinceStart = time - this.startTime + 10; // Add 10ms, which is about half the time between frames
			var nextBeat = this.beats[this.currentBeat];

			if (!this.preBeat100Triggered && nextBeat < timeSinceStart + 100) {
				pubsub.publish('preBeat100', [ timeSinceStart, time ]);
				this.preBeat100Triggered = true;
			}

			if (!this.preBeat50Triggered && nextBeat < timeSinceStart + 50) {
				pubsub.publish('preBeat50', [ timeSinceStart, time ]);
				this.preBeat50Triggered = true;
			}

			if (nextBeat < timeSinceStart) {
				this.currentBeat++;
				pubsub.publish('beat', [ timeSinceStart, time ]);
				this.preBeat100Triggered = false;
				this.preBeat50Triggered = false;
			}
		} else {
			this.startTime = time;
			pubsub.publish('beatStart', [ 0, time ]);
		}

		requestAnimationFrame(this.boundOnUpdate);
	};

	return new BeatGenerator(); // Singleton-ish

});
define('songSelection',[
	'jquery',
	'lodash',
	'loc',
	'device',
	'pubsub',
	'songs',
	'songItem',
	'playlist',
	'songlist',
	'utils',
	'beatGenerator',
	'keyboard',
	'trackerUtils'
],function (
	j, 
	_,
	loc,
	device,
	pubsub,
	songs,
	SongItem,
	Playlist,
	Songlist,
	utils,
	beatGenerator,
	KEYBOARD,
	trackerUtils
) {
	'use strict';
	

	// Encapsulates the song selection game state. Contains two main modules, the PreviewArea and the song grid
	// (Playlist). It is the responsibility of this module to keep those modules in sync with eachother. It is also
	// responsible for handling server communication, state changes, preview audio and the beat generator.
	function SongSelection(core) {
		this.core = core;
		this.gui = core.gui;

		this.core.jSongSelection.find(".song-selection__back-text").html(loc(2751));


		// Bind some callbacks
		this.boundUpdateCategories = this.onCategoriesChanged.bind(this);
		this.boundUpdateFavoritesCategory = this.onFavoritesCategoryChanged.bind(this);

		var self = this;

		this.core.keydownHandler.initState("songSelection", [
			{
                keys : ["ENTER"],
                callback : function() {
                	core.goToLobby();
                }
            }]);
	}


	SongSelection.prototype = {
		init: function () {
			console.log('%cÃ¢Å“â€', 'color:#339933; background:#CCFF00', 'SongSelection initialized');

			//Initialize playlist/categories container
			this.playlist = new Playlist(this.core);
			this.playlist.init();

			//Initialize playlist/categories container
			this.songlist = new Songlist(this.core);
			this.songlist.init();

			//Initialize song grid here
			this.songItemGrid = new SongItem(this.core);
			this.songItemGrid.init();

			// Init playlist data
			this.updateCategories();


			pubsub.subscribe('categoriesChanged', this.boundUpdateCategories);
			pubsub.subscribe('favoritesCategoryChanged', this.boundUpdateFavoritesCategory);

			this.show();
		},

		// Called once when entering the song selection state
		show: function () {
			if (this.isShown) { return; }
			this.isShown = true;

			this.core.isTrial() || j('html').addClass('vip');
			this.core.jCoverFlow.fadeIn(0.8);

			//Tracking coverflow when no-player is there
			var self = this;
			_.delay(function () {
				self.core.countPlayers() === 0 && trackerUtils.trackJdnowEvents('No Scoring Mode Pages', 'Coverflow');
			}, 50);
		},

		// Called once when leaving the song selection state
		hide: function () {
			this.core.jCoverFlow.fadeOut(0.3);
			this.isShown = false;
			this.core.audio.stopPreview(800);
			beatGenerator.stop();
		},

		// Add beat state classes to the song selection container element. This will trigger beat animations on e.g. the
		// cover image and the focuse thumbnail.
		onPreBeat: function () {
			if (device.isWeak || device.isiOS) { return; }

			this.evenBeat = !this.evenBeat;
			this.core.jCoverFlow
					.removeClass('pre-beat even odd')
					.forceRepaint()
					.addClass('pre-beat')
					.addClass(this.evenBeat ? 'even' : 'odd');
		},


		// Refetch categories data and possibly update the song grid.
		onCategoriesChanged: function() {
			this.updateCategories();
		},

		favoritesDuration: function(cat) {
			var catSongLength = cat.songs.length;
			if (catSongLength < 1) { return; }

			var favSongsDuration = 0;
			for (var i = 0; i < catSongLength; i++) {
				favSongsDuration += songs.getSong(cat.songs[i]).duration;
			}
			this.favCatDuration = utils.msToTime(favSongsDuration);

			if (this.playlist.$playlistContainer.css('display') === 'block' && this.core.category === 'FAVORITES') {
				this.playlist.$playlistContainer.find('.song-grid--duration').text(loc(3908) + ' - '+ this.core.gui.songSelection.favCatDuration);
			}
		},

		//only called when there is a change in the favorites category
		onFavoritesCategoryChanged: function(isExistingFavCat, favoritesCat) {
			var favCatIdx = 0;

			var bAddCat = !isExistingFavCat && favoritesCat.songs.length > 0;
			var bRemoveCat = isExistingFavCat && favoritesCat.songs.length === 0 && this.categories[0].id === "FAVORITES";

			if (bAddCat || bRemoveCat) {
				// Adds or remove the category
				this.updateCategories();
				if (!!bAddCat) {
					this.playlist.bindPlaylistSongs(this.core.category);

					this.core.gui.coverflowTabs.isPreviewAreaShown = false;
					this.playlist.show();

					var songId = this.core.song;
					this.core.song = "";
					this.songItemGrid.bindFocusEvents(songId);
				}
			} else {
				// If the playlist section is visible & playlist selected is "FAVORITES"
				// then update the grid instantly
				if (this.playlist.$playlistContainer.css('display') === 'block' && this.core.category === 'FAVORITES') {
					this.playlist.bindPlaylistSongs('FAVORITES');
					
					this.core.gui.previewArea.songPreview.stopMedia();
					this.core.gui.coverflowTabs.isPreviewAreaShown = false;
					this.core.jPreviewArea.hide();
					this.playlist.$playlistSelectedDetails.show();
				}
			}

			this.favoritesDuration(favoritesCat);
		},


		updateCategories: function () {
			// Bind the categories again
			this.categories = songs.getVisibleCategories();
			this.playlist.renderPlaylist(this.categories);
		},


		// Function responsible for setting the currently focused song. Called from several different places, e.g. when
		// phone clients sends navRest.
		// Arg types         String, String,     Boolean, String
		focusSong: _.throttle(function (songId, categoryId, force, sender) {

			// Don't execute method if the songId is itself blank
			if (!songId) { return; }

			var currentFocusItem = {
				songId : songId,
				categoryId : categoryId
			};

			this.core.category = currentFocusItem.categoryId;
			this.core.song = currentFocusItem.songId

			if (this.core.countPlayers() > 0 && (!sender || sender !== "app")) {
				this.sendNavRest(this.core.category, this.core.song);
			}


			this.songItemGrid.selectFocussedElements();
			this.songItemGrid.scrollSongItemGrid();
			this.songItemGrid.showPreview();
			this.updatePreview();

			return;

		}, 50),


		// Delegate updating the preview area to the PreviewArea module. Updating the preview area is an expensive
		// operation, so we debounce it (i.e. wait a bit and only actually do it when we have been resting on the same
		// song for some time).
		// Arg types                        CustomEvent
		updatePreview: _.debounce(function (ev) {

			this.core.gui.previewArea.updateSong(this.core.song);
			this.core.songUpdatedDeferred.resolve(this.core.song);

		}, device.isWeak ? 200 : 100),
		


		// Private helper function
		// Arg types           String,     String
		sendNavRest: function (categoryId, songId) {
			this.core.ws.sendReadable({
				func: 'navRest',
				category: categoryId,
				song: songId
			});
		}


	};

	return SongSelection;

});

define('text!html/gui/tutorial.html',[],function () { return '<div class="tutorial">\n\t<img class="tutorial__image" src="" alt="" />\n\t<div class="tutorial__spinner">\n\t\t<svg viewBox="0 0 612 612" class="spinner">\n\t\t\t<use xlink:href="#icon-global-spinner"></use>\n\t\t</svg>\n\t\t<span>\n\t\t\t<%= loading_text %>\n\t\t</span>\n\t</div>\n\t<p class="tutorial__caption"></p>\n</div>';});

define('tutorial',[
	'jquery',
	'lodash',
	'loc',
	'device',

	'text!html/gui/tutorial.html'
], function(
	$,
	_,
	loc,
	device,

	tutorialHtml
) {

	'use strict';

	var tutorialTemplate = _.template(tutorialHtml);

	var defaultImageUrl = cdn + "/web/img/tutorial/asset_tutorial_noPhone.png";
	var defaultCaptionText = loc(1254); // 1254: Web_Generic_Text_TutorialAll

	var baseDelay = 2000;
	var tutorialDelay = 5000;
	var HOLD_CONTROLLER_TIP = "hold_controller";
	var NEVER_DANCE_ALONE_TIP = "never_dance_alone";


	var extractLoadingTip = function(loadingTip, isGhostDisabled) {
		var result = {
			imageUrl : defaultImageUrl,
			captionText : defaultCaptionText,
			delay : baseDelay
		};

		if (!loadingTip.error  && !!loadingTip.data && loadingTip.data.length > 0) {

			var sortedLoadingTipData = loadingTip.data;

			// if isGhostDisabled = false, then remove NDA data from sorted data
			if (!isGhostDisabled) {
				var removedLoadingTipData = _.remove(sortedLoadingTipData, function (obj) {
					return obj.name === NEVER_DANCE_ALONE_TIP;
				});
			}

			// Execute sortedLoadingTipData conditions only if there's data
			if (!!sortedLoadingTipData && sortedLoadingTipData.length > 0) {
				var currentTip = sortedLoadingTipData[Math.floor(Math.random() * sortedLoadingTipData.length)];
				var currentImage = _.max(currentTip.images, function (obj) {
				  	return obj.width;
				});

				result.imageUrl = currentImage.publicUrl;
				result.captionText = currentTip.text;

				if (currentTip.name === HOLD_CONTROLLER_TIP) {
					result.delay = tutorialDelay;
				}
			}
		} else {
			result.delay = tutorialDelay;
		}

		return result;
	}

	// Encapsulates the 'tutorial' game state logic. Shows one or several tutorial images and starts loading the dance
	// video.
	function Tutorial(core) {
		this.core = core;
		this.init();
	}

	Tutorial.prototype = {

		init: function() {

			this.$container = $(tutorialTemplate({
				loading_text: loc(2005) // 2005: Web_Generic_Text_Loading
			}));
			this.$container.appendTo(this.core.jViews);
			this.$spinner = this.$container.find(".tutorial__spinner");
			this.$image = this.$container.find(".tutorial__image");
			this.$caption = this.$container.find(".tutorial__caption");

			this.loadingTip = {
				delay : baseDelay
			};

			var self = this;

			//each time the image is loaded/changed, we execute this code
			this.$image.load(this.setTipDuration.bind(this));

			this.$container.hide();
		},

		show: function() {
			var self = this;

			this.videoPlayer = this.core.inGameVideoPlayer;
			this.loadingTipDoneDfd = $.Deferred();
			this.videoSetupDoneDfd = this.buildVideoPlayer();

			this.$container.show();
		
			var tempPlayer = null;
			for(var playerId in this.core.players) {
				if (this.core.players[playerId].isController)
					tempPlayer = this.core.players[playerId];
			}

			this.core.getApiReadable('getInGameMessages', {
				publicID: tempPlayer.id, 
				lang: lang, 
				isRoomVip: this.core.isRoomVIP, 
				messageType: 'loadingTip' 
			}).then(function(data) {
				self.buildTip(data);
			}).catch( function() {
				self.loadingTipDoneDfd.resolve();
			});

			this.core.sendWSReadable({ func: 'tutorialStarted' });

			$.when(this.videoSetupDoneDfd, this.loadingTipDoneDfd)
			.then(function() {
				if (!self.videoPlayer.config.setup_error) {
					self.core.setState('dance');
				}
			});

		},

		hide: function() {
			if (device.isChromecast || device.isIpadApp) {
				this.$container.hide();
			} else {
				this.$container.hide(0.5);
			}

			this.$image.attr("src", "");
			this.$caption.empty();
			this.$spinner.removeClass('visible');
			this.loadingTip = null; // nullify values for GC

			clearTimeout(this.loadingTipDoneTimeout);
			this.loadingTipDoneDfd.resolve();
			
			this.core.ws.sendReadable({ func: 'tutorialEnded' });
		},

		setTipDuration: function(ev) {
			clearTimeout(this.loadingTipDoneTimeout);
			this.loadingTipDoneTimeout = setTimeout(this.setLoadingSpinner.bind(this), this.loadingTip.delay);
		},

		setLoadingSpinner: function() {
			this.$spinner.addClass('visible');
			this.loadingTipDoneDfd.resolve();
		},

		buildTip: function(data) {
			var self = this;

			this.loadingTip = extractLoadingTip(data, this.core.isGhostDisabled);

			this.$image.attr("src", this.loadingTip.imageUrl);
			this.$caption.html(this.loadingTip.captionText);
		},


		buildVideoPlayer: function() {
			// Start loading the video in the background
			var core = this.core, self = this;

			return this.core.loadDanceData()
			.then(function() {

				$.cookie.raw = true;
				$.cookie(core.currentVideoCookieData.name, core.currentVideoCookieData.value, {
					'domain': core.topDomainName,
					'expires': new Date(new Date().getTime() + core.currentVideoCookieData.duration + 60 * 2 * 1000), // Add 2 minutes after the song duration.
					"session": core.currentVideoCookieData.session,
					"hostOnly": core.currentVideoCookieData.hostOnly,
					"httpOnly": core.currentVideoCookieData.httpOnly
				});
				
				self.videoPlayer.load(core.currentVideo, core.currentVideoCookie);
				return core.video.setup();
			});
		}
	};

	return Tutorial;

});

define('smoother',[
	'lodash',
], function (
	_
) {
	'use strict';

	// Used for creating a moving average over a sequence of values.
	function Smoother(numDatapoints) {
		this.values = [];
		for (var i = 0; i < numDatapoints; i++) {
			this.values.push(0);
		}
		this.currIndex = 0;
	}

	Smoother.prototype = {
		// Arg types        Number
		addSample: function(value) {
			this.values[this.currIndex] = value;
			this.currIndex = (this.currIndex+1) % this.values.length;
		},

		// Returns the average Number over the last N added samples, where N is the length of the this.values Array.
		getAverage: function() {
			var sum = _.reduce(this.values, function (prev, curr) {
				return prev + curr;
			}, 0);
			return this.values.length === 0 ? 0 : Math.floor(sum / this.values.length);
		},

		// Sets all values in the sequence to 0
		reset: function () {
			for (var i = 0; i < this.values.length; i++) {
				this.values[i] = 0;
			}
		}
	};

	return Smoother;

});

define('particles',[
	'lodash',
], function (
	_
) {
	'use strict';

	var LOCATION_SIZE = 3;
	var VELOCITY_SIZE = 3;
	var COLOR_SIZE = 4;
	var SIZE_SIZE = 1;

	// Data class that represent a list of particles. Has a "view" concept, where a view points to a specific point
	// within the particles list. The view allows you to manipulate the particle it is pointing at. All this is done
	// for performance reasons; nothing is ever allocated dynamically.
	function Particles(nParticles) {
		var locations = new Float32Array(LOCATION_SIZE * nParticles);
		var velocities = new Float32Array(VELOCITY_SIZE * nParticles);
		var colors = new Float32Array(COLOR_SIZE * nParticles);
		var sizes = new Float32Array(SIZE_SIZE * nParticles);

		// Pre-allocate stuff, to avoid dynamic allocation
		var location = new Float32Array(LOCATION_SIZE);
		var velocity = new Float32Array(VELOCITY_SIZE);
		var color = new Float32Array(COLOR_SIZE);
		var size = new Float32Array(SIZE_SIZE);

		// This is the one and only particle (pointer)
		// Let's hope JS never gets multi threaded
		var pos = 0;
		var particle = {
			setLocation: function (x, y, z) {
				var i = pos * LOCATION_SIZE;
				locations[i] = x;
				locations[i + 1] = y;
				locations[i + 2] = z;
			},
			incLocation: function (x, y, z) {
				var i = pos * LOCATION_SIZE;
				locations[i] += x;
				locations[i + 1] += y;
				locations[i + 2] += z;
			},
			getLocation: function () {
				var i = pos * LOCATION_SIZE;
				location[0] = locations[i];
				location[1] = locations[i + 1];
				location[2] = locations[i + 2];
				return location;
			},

			setVelocity: function (x, y, z) {
				var i = pos * VELOCITY_SIZE;
				velocities[i] = x;
				velocities[i + 1] = y;
				velocities[i + 2] = z;
			},
			incVelocity: function (x, y, z) {
				var i = pos * VELOCITY_SIZE;
				velocities[i] += x;
				velocities[i + 1] += y;
				velocities[i + 2] += z;
			},
			getVelocity: function () {
				var i = pos * VELOCITY_SIZE;
				velocity[0] = velocities[i];
				velocity[1] = velocities[i + 1];
				velocity[2] = velocities[i + 2];
				return velocity;
			},

			setColor: function (r, g, b, a) {
				var i = pos * COLOR_SIZE;
				colors[i] = r;
				colors[i + 1] = g;
				colors[i + 2] = b;
				colors[i + 3] = a;
			},
			setColorAlpha: function (a) {
				var i = pos * COLOR_SIZE;
				colors[i + 3] = a;
			},
			incColor: function (r, g, b, a) {
				var i = pos * COLOR_SIZE;
				colors[i] += r;
				colors[i + 1] += g;
				colors[i + 2] += b;
				colors[i + 3] += a;
			},
			incColorAlpha: function (a) {
				var i = pos * COLOR_SIZE;
				colors[i + 3] += a;
			},
			getColor: function () {
				var i = pos * COLOR_SIZE;
				color[0] = colors[i];
				color[1] = colors[i + 1];
				color[2] = colors[i + 2];
				color[3] = colors[i + 3];
				return color;
			},

			setSize: function (s) {
				var i = pos * SIZE_SIZE;
				sizes[i] = s;
			},
			incSize: function (s) {
				var i = pos * SIZE_SIZE;
				sizes[i] += s;
			},
			getSize: function () {
				var i = pos * SIZE_SIZE;
				size[0] = sizes[i];
				return size;
			},
		};

		_.extend(this, {
			locations: locations,
			velocities: velocities,
			colors: colors,
			sizes: sizes,
			length: nParticles,
		});

		// A view provides access to a specific particles within the particles arrays.
		// Note that there is only one view, so once you call getView with a new index,
		// all previous references gotten from getView will also be updated.
		this.getView = function (at) {
			pos = at;
			return particle;
		};
	}

	return Particles;

});

define('text!webgl/vertex.shader',[],function () { return '#ifdef GL_ES\nprecision lowp float;\n#endif\nuniform   mat4 uMvp;\nattribute vec3 aPosition;\nvarying   vec4 vColor;\nattribute vec4 aColor;\nattribute float aSize;\n\nvoid main(void)\n{\n\tvColor = aColor;\n\tgl_Position = uMvp * vec4(aPosition, 1.0);\n\tgl_PointSize = aSize;\n}';});


define('text!webgl/fragment.shader',[],function () { return '#ifdef GL_ES\nprecision lowp float;\n#endif\nvarying vec4 vColor;\nuniform sampler2D sTexture;\n\nvoid main(void)\n{\n\tvec4 col;\n\tcol = texture2D(sTexture, gl_PointCoord);\n\tif (col.a == 0.) discard;\n\tvec4 tex = vColor * col;\n\tgl_FragColor = tex;\n}';});

define('webGlRenderer',[
	'lodash',
	'jquery',
	'text!webgl/vertex.shader',
	'text!webgl/fragment.shader',
], function (
	_,
	j,
	vertexShader,
	fragmentShader
) {
	'use strict';

	// Loads an image and binds it to texture
	function loadPointTexture(gl, imgURL, callback) {
		var tex  = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, tex);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

		var img = new Image();
		img.crossOrigin = 'Anonymous';
		img.src = imgURL;
		img.onload = function() {
			gl.bindTexture(gl.TEXTURE_2D, tex);
			gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA,
						  gl.UNSIGNED_BYTE, img);
			callback();
		};
		return tex;
	}

	function makeShader(gl, type, code) {
		var shader = gl.createShader(type);
		gl.shaderSource(shader, code);
		gl.compileShader(shader);
		return shader;
	}

	// Renders particles to a canvas using WebGL
	function WebGlRenderer(canvas, particles, particleImgUrl) {
		this.canvas = canvas;
		this.particles = particles;
		this.particleImgUrl = particleImgUrl;

		this.readyDeferred = this.init();
	}

	// Bind buffers to JS TypedArrays and create a transformation matrix
	WebGlRenderer.prototype.init = function () {
		var donePromise = j.Deferred();

		this.gl = this.canvas.getContext('experimental-webgl');
		var gl = this.gl;

		this.shaderProg = gl.createProgram();
		gl.attachShader(this.shaderProg, makeShader(gl, gl.VERTEX_SHADER, vertexShader));
		gl.attachShader(this.shaderProg, makeShader(gl, gl.FRAGMENT_SHADER, fragmentShader));
		gl.linkProgram(this.shaderProg);
		if (!gl.getProgramParameter(this.shaderProg, gl.LINK_STATUS)) {
			console.warn('failed to create shader\n'+gl.getProgramInfoLog(this.shaderProg));
		}

		if (!gl.getProgramParameter(this.shaderProg, gl.LINK_STATUS)) { throw 'Could not initialise shaders'; }

		gl.useProgram(this.shaderProg);

		// Setting positions attribute in shader
		this.shaderProg.aPosition = gl.getAttribLocation(this.shaderProg, 'aPosition');
		gl.enableVertexAttribArray(this.shaderProg.aPosition);
		this.shaderProg.aColor = gl.getAttribLocation(this.shaderProg, 'aColor');
		gl.enableVertexAttribArray(this.shaderProg.aColor);
		this.shaderProg.aSize = gl.getAttribLocation(this.shaderProg, 'aSize');
		gl.enableVertexAttribArray(this.shaderProg.aSize);

		// Get pointer to uniform
		this.shaderProg.uMvp = gl.getUniformLocation(this.shaderProg, 'uMvp');
		this.shaderProg.sTexture = gl.getUniformLocation(this.shaderProg, 'sTexture');

		// Make the locations buffer
		this.particleBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, this.particleBuffer);
		gl.bufferData(gl.ARRAY_BUFFER, this.particles.locations, gl.DYNAMIC_DRAW);
		// Make the colors buffer
		this.particleColorBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, this.particleColorBuffer);
		gl.bufferData(gl.ARRAY_BUFFER, this.particles.colors, gl.DYNAMIC_DRAW);
		// Make the sizes buffer
		this.particleSizeBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, this.particleSizeBuffer);
		gl.bufferData(gl.ARRAY_BUFFER, this.particles.sizes, gl.DYNAMIC_DRAW);

		this.particleTexture = loadPointTexture(gl, this.particleImgUrl, donePromise.resolve.bind(donePromise));

		// Use no-op (unit) matrix for transforms right now.
		var mat = new Float32Array(16);
		mat[0] = mat[5] = mat[10] = mat[15] = 1;
		this.pMatrix = mat;

		return donePromise.promise();
	};

	WebGlRenderer.prototype.draw = function () {
		var gl = this.gl;

		gl.clearColor(0, 0, 0, 0);
		gl.enable(gl.DEPTH_TEST);
		gl.viewport(0, 0, this.canvas.width, this.canvas.height);
		gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

		// Alpha blending
		gl.enable(gl.BLEND);
		gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
		gl.depthMask(false);

		// Draw particles
		gl.activeTexture(gl.TEXTURE0);
		gl.bindTexture(gl.TEXTURE_2D, this.particleTexture);

		// Bind the particle positions
		gl.bindBuffer(gl.ARRAY_BUFFER, this.particleBuffer);
		gl.bufferSubData(this.gl.ARRAY_BUFFER, this.particleBuffer, this.particles.locations);
		gl.vertexAttribPointer(this.shaderProg.aPosition, 3, gl.FLOAT, false, 0, 0);

		// Bind the particle colors
		gl.bindBuffer(gl.ARRAY_BUFFER, this.particleColorBuffer);
		gl.bufferSubData(this.gl.ARRAY_BUFFER, this.particleColorBuffer, this.particles.colors);
		gl.vertexAttribPointer(this.shaderProg.aColor, 4, gl.FLOAT, false, 0, 0);

		// Bind the particle sizes
		gl.bindBuffer(gl.ARRAY_BUFFER, this.particleSizeBuffer);
		gl.bufferSubData(this.gl.ARRAY_BUFFER, this.particleSizeBuffer, this.particles.sizes);
		gl.vertexAttribPointer(this.shaderProg.aSize, 1, gl.FLOAT, false, 0, 0);

		gl.uniformMatrix4fv(this.shaderProg.uMvp, false, this.pMatrix);
		gl.uniform1i(this.shaderProg.sTexture, 0);
		gl.drawArrays(gl.POINT, 0, this.particles.length);

		gl.depthMask(true);
		gl.disable(gl.BLEND);
	};

	return WebGlRenderer;

});
define('particleSystem',[
	'lodash',
	'jquery',
	'environment',
	'device',
	'bowser',
	'particles',
	'webGlRenderer',
], function (
	_,
	j,
	env,
	device,
	bowser,
	Particles,
	WebGlRenderer
) {
	'use strict';

	// TODO: Fallback to software renderer
	var Renderer = env.supportsWebGl ? WebGlRenderer : undefined;

	var IS_UNSUPPORTED_PLATFORM = device.isiOS || device.isWeak;

	// IE does not support CORS images, so in IE we can't use the CDN
	var DEFAULT_PARTICLE_URL = bowser.msie ? 'particle.png' : cdn + '/web/img/hud/particle.png';

	// Base class for all particles systems. Provides a canvas, a particles list, and a renderer that renders particles
	// to the canvas. Implementing subclasses should override the init() and update() methods. They can also override
	// the constructor in order to change the static memory allocated for particles.
	function ParticleSystem($container, options) {
		this.assertSupport();

		this.$canvas = j('<canvas>')
				.addClass('particle-system')
				.addClass((options.classes || []).join(' '));

		this.canvas = this.$canvas[0];

		$container.length && this.$canvas.appendTo($container);

		this.updateCanvasSize = function () {
			if (!this.canvas) { return; }
			this.canvas.width = options.width || this.$canvas.width();
			this.canvas.height = options.height || this.$canvas.height();
		}.bind(this);

		this.updateCanvasSize();
		j(window).on('resize', _.debounce(this.updateCanvasSize, 300));

		this.nParticles = options.nParticles || 10;
		this.particleImageUrl = options.particleImageUrl || DEFAULT_PARTICLE_URL;

		// Initialize particles
		this.particles = new Particles(this.nParticles);

		this.init();

		this.renderer = new Renderer(this.$canvas[0], this.particles, this.particleImageUrl);
	}

	ParticleSystem.prototype.assertSupport = function () {
		if (!Renderer) { throw 'No suitable renderer found on this platform.'; }
		if (IS_UNSUPPORTED_PLATFORM) { throw 'Platform does not support particle effects.'; }
	};

	ParticleSystem.prototype.isSupported = function () {
		try {
			this.assertSupport();
			return true;
		} catch (e) {
			return false;
		}
	};

	ParticleSystem.prototype.init = function () { throw 'Not implemented'; };

	// Starts the animation loop
	ParticleSystem.prototype.start = function () {
		var self = this;
		this.renderer.readyDeferred.then(function () {
			self.stop();

			function tickLoop(time) {
				self.update(time);
				self.animationFrame = requestAnimationFrame(tickLoop);
			}
			self.animationFrame = requestAnimationFrame(tickLoop);
		});
		return this;
	};

	// Stops the animation loop
	ParticleSystem.prototype.stop = function () {
		cancelAnimationFrame(this.animationFrame);
	};

	ParticleSystem.prototype.pause = function () { throw 'Not implemented'; };

	// Completely tears down the instance. No way of recovering from this.
	ParticleSystem.prototype.destroy = function () {
		cancelAnimationFrame(this.animationFrame);
		this.$canvas && this.$canvas.remove();
		this.$canvas = this.canvas = this.renderer = this.particles = null; // nullify canvas values for GC
		j(window).off('resize', this.updateCanvasSize);
	};

	ParticleSystem.prototype.update = function (/*time*/) { throw 'Not implemented'; };

	return ParticleSystem;

});
define('inGameBeatParticles',[
	'lodash',
	'jquery',
	'particleSystem',
], function (
	_,
	j,
	ParticleSystem
) {
	'use strict';

	// Shows little particles moving upwards inside the beat indicator. Same effect as in Just Dance console game.
	function InGameBeatParticles($container, options) {
		options = options || {};
		options.nParticles = 15;
		ParticleSystem.call(this, $container, options);
	}
	InGameBeatParticles.prototype = Object.create(ParticleSystem.prototype);
	InGameBeatParticles.prototype.constructor = InGameBeatParticles;

	// Generate initial particles
	InGameBeatParticles.prototype.init = function () {
		var particles = this.particles;
		var pSize = this.canvas.width * 0.025;
		// Seed new particles
		for (var i = 0; i < this.nParticles; i++) {
			var particle = particles.getView(i);
			particle.setLocation(2 * Math.random() - 1, 2 * Math.random() - 1, 0);
			particle.setVelocity(0, 0.0008 + Math.random() * 0.0001, 0);
			particle.setColor(1, 1, 1, 1);
			particle.setSize(pSize * (Math.random() + 1));
		}
		return this;
	};

	// Move all particles along their velocity vector (up) and recycle them once they reach the top of the bounds
	InGameBeatParticles.prototype.update = function (time) {
		var delta = this.lastDrawTime ? time - this.lastDrawTime : 0; // in milliseconds
		var particles = this.particles;

		// Update particle positions
		for (var i = 0; i < this.nParticles; i++) {
			var particle = particles.getView(i);
			var velocity = particle.getVelocity();

			// Update location based on velocity
			particle.incLocation(delta * velocity[0], delta * velocity[1], 0);

			var posY = particle.getLocation()[1];
			if (posY > 1) {
				// Set y value below the fold, so that they don't pop in
				particle.setLocation(2 * Math.random() - 1, -1.1, 0);
			}

			var color = particle.getColor();
			particle.setColor(color[0], color[1], color[2], Math.max((0.5 - posY) / 3, 0));
		}

		// Draw particles
		this.renderer.draw();

		this.lastDrawTime = time;
		return this;
	};

	return InGameBeatParticles;

});

define('text!html/hud/maintenanceTickerTimer.html',[],function () { return '<span class="timer">\n    <span class="timer_value days"></span>\n    <span class="timer_value hours"></span>\n    <span class="timer_value minutes"></span>\n    <span class="timer_value seconds"></span>\n</span>';});


define('text!html/hud/maintenanceTicker.html',[],function () { return '<div class="maintenance clearfix" title="Maintenance">\n\t<div class="maintenance__icon"></div>\n\t<span class="maintenance__text"><%= maintenanceTxt %> </span>\n\t<span class="maintenance__ticker"><%= maintenanceTicker %></span>\n</div>';});

define('maintenance',[
	'jquery',
	'lodash',
	'loc',
	'utils',

	'text!html/hud/maintenanceTickerTimer.html',
	'text!html/hud/maintenanceTicker.html'
], function (
	$,
	_,
	loc,
	utils,

	maintenanceTickerTimerHtml,
	maintenanceTickerHtml
) {
	'use strict';

	var tempObj;
	var TIMER_HIDE_DEFAULT = 5; //in secs


	function Maintenance(core) {
		this.core = core;
	}

	Maintenance.prototype = {
		init: function() {

			this.$maintenance = $(_.template(maintenanceTickerHtml) ({
				maintenanceTxt: loc(3523, {'{0}': maintenanceTickerTimerHtml}),
				maintenanceTicker: maintenanceTickerTimerHtml
			}));
			this.core.jRoom.after(this.$maintenance);

			this.$timer = this.$maintenance.find('.timer');
			this.$days = this.$timer.find('.days');
			this.$hours = this.$timer.find('.hours');
			this.$minutes = this.$timer.find('.minutes');
			this.$seconds = this.$timer.find('.seconds');

			this.isBanner = false;
			this.isBannerAlwaysDisplay = false;
			this.show();

			this.displayCounter = 0;
			var boundClick = function(e) {
				if (!this.isBannerAlwaysDisplay) {
					this.showBanner();
					this.hideBanner();
				}
            }.bind(this);

			this.$maintenance.on('click', boundClick);	
		},


		// Displays maintenance element
		show: function() {
			if (!this.core.maintenanceData || !!window.ignoreMaintenance) { return; }

			var endTime = this.core.maintenanceData.endTime;
			var notifyTime = this.core.maintenanceData.notifyTime;
			var currentTime = new Date().getTime();

			if (!!notifyTime && currentTime >= notifyTime) { // Execute maintenance timer if player notify time has passed
				this.calculateTime(this.core.maintenanceData.startTime);
				this.showMaintenance();
				this.core.jHTML.addClass('serverMaintenance');
			} else {
				this.hideMaintenance();
			}
		},

		// Remove maintenance element
		hideMaintenance: function() {
			this.$maintenance.hide();
		},

		showMaintenance: function() {
			this.$maintenance.show();
		},

		showBanner: function() {
			this.isBanner = true;
			this.executeDisplayConditions();
			this.$maintenance.addClass('expand');
		},

		// Hide maintenance banner after 5 secs
		hideBanner: function() {
			var self = this;

			setTimeout(function() { // When clicking on the maintenance icon or timer, the banner is opened up and remains displayed for 5 seconds
				self.isBanner = false;
				self.executeDisplayConditions();
				self.$maintenance.removeClass('expand');
			}, TIMER_HIDE_DEFAULT * 1000);
		},


		calculateTime: function(countDownTime) {
			if (!countDownTime) { return; }

			var self = this;
			this.loadTimeLogic(countDownTime); // load time during pageload

			this.executeTime = setInterval(function() { // Update the count down every 1 second
			    self.loadTimeLogic(countDownTime);
			}, 1000);
		},

		loadTimeLogic: function(countDownTime) {
			var self = this,
				now = new Date().getTime(),
				diff = countDownTime - now; // Difference between now and the maintenance start time

			if (diff <= 0 && !window.ignoreMaintenance) { // If the count down is over, maintenance has started (clear the interval & load maintenance page)
				
				clearInterval(self.executeTime);
				var MET = ((!!this.core.maintenanceData.endTime && this.core.maintenanceData.endTime > now) ? this.core.maintenanceData.endTime : '');
				utils.renderMaintenancePage(this.core.jBody, MET, this.core.mainLocObj);
				this.core.ws.close();

				return; 
			}
			    
		    this.calcTime(diff);
		},

		calcTime: function(dateRef) {
			var days = utils.formatNbString(Math.floor(dateRef / (1000 * 60 * 60 * 24)));
		    var hours = utils.formatNbString(Math.floor((dateRef % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));
		    var minutes = utils.formatNbString(Math.floor((dateRef % (1000 * 60 * 60)) / (1000 * 60)));
		    var seconds = utils.formatNbString(Math.floor((dateRef % (1000 * 60)) / 1000));

		    // Output the result in an element
		    tempObj = {'days': days, 'hours': hours, 'minutes': minutes, 'seconds': seconds};
		    this.renderTime(tempObj);
		},

		renderTime: function(tempObj) {
			var secText;

			if(tempObj.days === '00') {
				delete tempObj.days;
				this.$days.hide();

				if(tempObj.hours === '00') {
					delete tempObj.hours;
					this.$hours.hide();

					if (tempObj.minutes === '00') {
						delete tempObj.minutes;
						this.$minutes.hide();
					}
				}
			}

			for (var key in tempObj) {
			    if (tempObj.hasOwnProperty(key)) {
			    	if (key !== 'seconds') {
			    		this.$timer.find('.'+key).text(tempObj[key]+' : ').css('display', 'inline-block');
			    	} else {
			    		if (!tempObj.minutes) {
			    			secText = (tempObj.seconds > 1 ? loc(3494) : loc(3493));
			    			this.$timer.find('.'+key).text(tempObj[key] +' '+ secText).css('display', 'inline-block');
			    		} else {
			    			this.$timer.find('.'+key).text(tempObj[key]).css('display', 'inline-block');
			    		}
			    	}
			    }
			}

			
			this.executeDisplayConditions();
		},

		executeDisplayConditions: function() {
			if (!this.isBanner) {
				if (!!tempObj.days || !!tempObj.hours || tempObj.minutes > 9) { // Timer hidden if hours & days is present.
					this.$timer.hide();
					return;
				} else if ((!tempObj.days && !tempObj.hours) && (!tempObj.minutes || tempObj.minutes < 10)) { // If days & hours are absent, & mins is less than 10 or undefined
					if (!tempObj.minutes || tempObj.minutes < 4) { // Timer if there is less than 4 minutes or if mins is absent, before the start of the maintenance, the banner remain displayed on the coverflow
						this.showBanner();
						this.isBannerAlwaysDisplay = true;
						this.$maintenance.addClass('bannerAlwaysDisplay');
						return;
					} else if (tempObj.minutes < 10 && tempObj.minutes >= 4 && this.core.state === 'songSelection') {
						this.displayCounter = this.displayCounter + 1;
						if (this.displayCounter <= 1) {
							this.$maintenance.trigger('click');
						}
					}

					this.$timer.show();
				}
				
			} else {
				this.$timer.show();
			}
		}

	};

	return Maintenance;

});

define('text!html/hud/player.html',[],function () { return '<div data-id="<%= id %>" class="<%= classes.join(\' \') %>">\n    <%= dancercard %>\n    <div class="controller-coins"><span><%= walletBalance %></span></div>\n    <div class="crown"></div>\n    <%= stars %>\n    <% if (isGhost) { %>\n        <div class="ghost-indicator"></div>\n    <% } %>\n    \n    <div class="feedback feedback-none"></div>\n    <div class="feedback-label feedlabel-none"></div>\n    <div class="player-special">\n        <div class="player-superstar">\n            <div class="animator_parent"><span class="level1"></span></div>\n            <div class="animator_parent2"><span class="level2"></span><span class="star-burst"></span></div>\n            <div class="animator_flare"></div>\n        </div>\n        <div class="player-megastar">\n            <div class="animator_parent"><span class="level1"></span><span class="animator_flare"></span></div>\n            <div class="animator_parent2"><span class="level2"><span class="star-burst"></span><span class="animator_flare"></span></div>\n        </div>\n    </div>\n</div>';});


define('text!html/hud/dancercard.html',[],function () { return '<div class="dancercard">\n    <div class="player-master">\n        <div class="player-master--icon"></div>\n    </div>\n\n    <div class="player-color <%= isNoFlag ? \'no-flag\' : \'\' %>"></div>\n    <%= avatar %>\n\n    <div class="player-flag <%= flag %>">\n        <div class="player-flag__inner">\n            <div class="player-flag__image" style="background-image: url(<%= cdn %>/web/img/flags64/<%= flag %>_s.png);"></div>\n        </div>\n    </div>\n\n    <% if(!isOldAndroidTablet) { %>\n        <div class="player-exp player-exp-normal"><span><%= exp %></span></div>\n    <% } else { %>\n        <div class="player-exp player-exp-tablet"><span><%= exp %></span></div>\n    <% } %>\n\n    <div class="player-logo"></div>\n    <div class="player-name">\n        <%= name %>\n    </div>\n</div>';});


define('text!html/hud/stars.html',[],function () { return '<div class="stars player-stars">\n\t<div class="star star-1"></div>\n\t<div class="star star-3"></div>\n\t<div class="star star-5"></div>\n\t<div class="star star-4"></div>\n\t<div class="star star-2"></div>\n</div>';});

define('players',[
        'lodash',
        'jquery',
        'pubsub',
        'environment',
        'device',
        'utils',
        'avatars',
        'ghosts',
        'loc',
        'text!html/hud/player.html',
        'text!html/hud/dancercard.html',
        'text!html/hud/stars.html'
    ],
    function(
        _,
        j,
        pubsub,
        env,
        device,
        utils,
        avatars,
        ghosts,
        loc,
        playerHtml,
        dancercardHtml,
        starsHtml
    ) {

        'use strict';

        // Templates
        var playerTemplate = _.template(playerHtml);
        var dancercardTemplate = _.template(dancercardHtml);
        var starsTemplate = _.template(starsHtml);

        var RANDOMLY_DO_STUFF_MAX_DELAY = 5000;
        var MAX_FEW_MODE_PLAYERS = 4;
        var isSUPERSTAR = false, isMEGASTAR = false;

        // Add some "ambient" animations to the players, so that they seem more alive
        var randomlyDoStuff = function($playersContainer) {
            var $player;
            var $players = $playersContainer.find('.player');

            var $blingPlayers = $players.filter('.bling-worthy');
            if ($blingPlayers.length > 0) {
                $player = $blingPlayers.eq(_.random($blingPlayers.length - 1));
                var offset = utils.randomInUnitCircle();
                $player.find('.bling')
                    .attr('class', 'bling')
                    .css({
                        top: (50 + 25 * offset.x) + '%',
                        left: (50 + 25 * offset.y) + '%',
                    })
                    .forceRepaint()
                    .addClass('visible anim-' + _.random(1, 3));
            }

            var $ghostPlayers = $players.filter('.ghost');
            if ($ghostPlayers.length > 0 && Math.random() < 0.075) {
                $player = $ghostPlayers.eq(_.random($ghostPlayers.length - 1));
                $player.find('.ghost-indicator').removeClass('spin-globe').forceRepaint().addClass('spin-globe');
            }

            _.delay(randomlyDoStuff, Math.random() * RANDOMLY_DO_STUFF_MAX_DELAY / ($players.length || 1), $playersContainer);
        }


        var randomAnimation = function($player) {
            var self = this;
            var time = Math.floor((Math.random() * 34000) + 4000),
                animation = Math.floor((Math.random() * 3) + 1),
                className = 'idling-' + animation;
            $player.removeClass('idling-1 idling-2 idling-3');

            setTimeout(function() {
                if (self.core.state !== 'dance') {
                    $player.addClass(className);
                    setTimeout(function() {
                        randomAnimation.call(self, $player);
                    }, 3000);
                } else {
                    randomAnimation.call(self, $player);
                }
            }, time);
        }


        // Visual representation of all players in the room, including ghosts (during dance)
        function Players(core) {
            this.core = core;
            this.gui = core.gui;
            this.hud = this.gui.hud;

            this.animate = !device.isWeak && !device.isOldiOS;
            this.isManyMode = false;
        }

        Players.prototype = {

            // Called once, just after the constructor. Init some states and DOM components, but most importantly, start
            // listening for events that may cause us to redraw the players
            init: function() {
                console.log('%cÃ¢Å“â€', 'color:#339933; background:#CCFF00', 'Players initialized');
                this.playerColors = ['blue', 'red', 'green', 'purple','aqua','pink'];
                this.freeColors = _.clone(this.playerColors);
                this.playerColorSelected = [];
                this.nGhostsAdded = 0;

                this.core.jPlayers.attr('data-ghosts-msg-join', loc(2304)); // 2304: Smart_Coach_Global_Waiting
                this.core.jPlayers.attr('data-ghosts-msg-remove', loc(2306)); // 2306: Smart_Coach_Global_Remove

                var staggeredTime = 0;

                pubsub.subscribe('ghostRemoved', function(ghost) {
                    staggeredTime = 0;
                    this.remove(ghost);
                }.bind(this));

                pubsub.subscribe('ghostAdded', function(ghost) {
                    var delay = staggeredTime += Math.round(Math.random() * 1000) + 500 + (this.nGhostsAdded ? 0 : 500);
                    this.add(ghost, delay);
                }.bind(this));

                this.animate && randomlyDoStuff(this.core.jPlayers);
            },

            addPlayerToCore: function(player) {
                this.core.players[player.id] = player;
            },

            removePlayerFromCore: function(player) {
                delete this.core.players[player.id];
            },

            // Add players to the list of visible players. You probably want the list to be empty before
            // calling this. Called e.g. when leaving many mode.
            addPlayersAndGhosts: function() {
                _.each(this.core.getVisiblePlayersAndGhosts(), this.add, this);
            },

            // Remove the visual representation of all visible players. Called e.g. when entering many mode.
            removePlayersAndGhosts: function() {
                _.each(this.core.getVisiblePlayersAndGhosts(), this.remove, this);
            },

            addColors: function(player) {
                player.color = this.freeColors.shift();
                !player.isGhost && this.playerColorSelected.push(player.color);

                if (!this.freeColors.length) {
                    this.freeColors = _.clone(_.difference(this.playerColors, this.playerColorSelected));
                }
            },

            // Add a visual representation of a given player
            // Arg types   Object, Number
            add: function(player, delay) {
                this.addColors(player); // assign colors to individual players

                if (this.isManyMode) {
                    this.updateManyMode();
                    return;
                }

                if (this.core.countPlayers() > MAX_FEW_MODE_PLAYERS) {
                    this.clearPlayerFeedbackElem();
                    this.switchToManyMode();
                    return;
                }

                // Add the new player in sorted position
                var pos = _.sortedIndex(this.core.getVisiblePlayersAndGhosts(), player, this.core.playerOrder);
                var $player = j(this.playerFewModeBuildElement(player));
                if (player.isGhost || pos >= this.core.jPlayers.children().length) {
                    $player.appendTo(this.core.jPlayers);
                } else {
                    $player.insertBefore(this.core.jPlayers.children().eq(pos));
                }

                // Animated ghost entrance
                this.updateAnimationForPlayers(player, $player, pos, delay);
                // Updates the controller icon & visualy for showing who is the current controller
                this.updateController();

                // Start an animation loop based on random time
                device.isWeak || randomAnimation.call(this, $player);

                // Update player star rewards in dance state if player have stars
                if (!!player.starsAchieved && this.core.state === 'dance') {
                    this.updateStarsForFewMode($player, player.starsAchieved);
                }
            },

            // Hides the visual representation of a given player
            // Arg types      Object
            remove: function(player) {
                var self = this;
                player.color && !_.contains(this.freeColors, player.color) && this.freeColors.push(player.color);

                if (player.isGhost) {
                    this.nGhostsAdded--;
                    if (this.nGhostsAdded === 0) {
                        this.core.jPlayers.removeClass('finding-dancers').addClass('removing-dancers');
                        setTimeout(function() {
                            self.core.jPlayers.removeClass('removing-dancers');
                        }, 2000);
                    }
                    this.core.jPlayers.attr('n-ghosts', this.nGhostsAdded);
                } else {
                    this.core.jPlayers.attr('n-real-players', this.core.countPlayers());
                }

                if (this.isManyMode) {
                    if (this.core.countPlayers() <= MAX_FEW_MODE_PLAYERS) {
                        this.switchToFewMode();
                    } else {
                        this.updateManyMode(); // Decrement manyMode players counter;
                    }
                } else {
                    this.removePlayerForFewMode(player);
                }
            },

            removePlayerForFewMode: function(player) {
                var $player = this.core.jPlayers.find('.' + player.id);

                $player.remove();
                if (player.isGhost) {
                    this.gui.previewArea.updateCoachSelectionChoice(); // Updates coach selection for ghosts
                } else {
                    this.core.audio.playSFX('coach-leave-1', { volume: 0.8 });
                    this.core.audio.playSFX('crowd-sad', { volume: 0.4, delay: 150 });
                }

                // :nth-child selectors are a bit slow to repaint when a player leaves so we need to force it
                this.core.jPlayers.find('.player').css('left', 0).removeAttr('style');

                if (this.core.countPlayers() === 0 && this.core.state === 'dance') {
                    this.core.jRaceTrack.find('.star').hide();
                }
                this.updateController(); // Updates the controller icon & visualy for showing who is the current controller
            },


            updateAnimationForPlayers: function(player, pElem, pos, delayVal) {
                var self = this;
                if (player.isGhost) {
                    var $flag = pElem.find('.player-flag');

                    this.core.jPlayers
                                    .removeClass('removing-dancers')
                                    .addClass('finding-dancers');
                    
                    _.delay(function(self) {
                        if (!pElem.length) { return; }

                        pElem.addClass('visible');
                        $flag.one(env.ANIMATION_END, function() {
                            $flag.css('opacity', 1);
                        });

                        self.core.jPlayers.removeClass('finding-dancers');

                        player.isVisible = true; // Set visiblity toggle on ghost
                        player.animateCoach = true; // add an extra prop to animate in coach-selection state

                        self.gui.previewArea.updateCoachSelectionChoice();

                        self.nGhostsAdded++;
                        self.core.jPlayers.attr('n-ghosts', self.nGhostsAdded);

                        if (pElem.is(':visible')) {
                            self.core.audio.playSFX('avatar-appears-' + (pos + 1), { volume: 0.5, delay: 0 });
                        }

                        pElem.find('.ghost-indicator').addClass('transitioning-in').one(env.ANIMATION_END, function(ev) {
                            j(ev.target).removeClass('transitioning-in');
                        });
                    }, delayVal, this);
                } else {
                    this.core.jPlayers.attr('n-real-players', this.core.countPlayers());
                    pElem.addClass('visible');
                    this.core.audio.playSFX('avatar-appears-' + (pos + 1.0), { volume: 1, delay: 0 });
                    this.core.audio.playSFX('crowd-cheering', { volume: 0.4, delay: 250 });
                }
            },



            ////////// FEW MODE //////////
            // Private function.
            playerFewModeBuildElement: function(p) {
                var classes = ['player', p.color, p.id];
                p.isController = (p.id === this.core.controller) ? true : false;

                if (!p.dancerCardEdited) {
                    classes.push("player--new");
                }

                p.isController && classes.push('controller');
                p.isGhost && classes.push('ghost');
                _.isNumber(p.avatar) && p.avatar >= 30000 && classes.push('bling-worthy');

                var country = (!!p.country !== '' ? p.country : 'ZZ');
                var isNoFlag = (country === 'ZZ' ? true : false);
                var globalLevel = p.globalLevel && p.globalLevel || Ã‚ 0;
                var masterPlayer = "";

                var dancercard = dancercardTemplate({
                    avatar: avatars.getAvatarHtml(p.avatar),
                    name: this.gui.playerName(p),
                    flag: country,
                    isNoFlag: isNoFlag,
                    isOldAndroidTablet: device.isOldAndroidTabletApp,
                    exp: globalLevel,
                    cdn: cdn
                });

                if (p.isGhost) {
                    $(dancercard).find("player-logo").addClass("player-logo--nda");
                }

                var stars = starsTemplate();
                return playerTemplate({
                    id: p.id,
                    classes: classes,
                    dancercard: dancercard,
                    stars: stars,
                    isGhost: p.isGhost,
                    walletBalance: p.isGhost ? '' : p.wallet.balance
                });
            },

            // Updates the visual representation of a given player
            // Arg types                          Object
            playerFewModeUpdateElement: function(p) {
                // For when a player changes name or avatar
                var playerElement = this.core.jPlayers.find('.' + p.id);
                if (playerElement.length) {
                    if (_.isNumber(p.avatar) && p.avatar >= 30000) {
                        playerElement.addClass('bling-worthy');
                    } else {
                        playerElement.removeClass('bling-worthy');
                    }


                    var playerName = playerElement.find('.player-name em').html(p.name);
                    if (p.country !== '' && p.country !== 'ZZ') { // country is blank or ZZ then remove no-flag class
                        playerElement.find('.player-color').removeClass('no-flag');
                    }

                    playerElement.find('.avatar-wrapper').replaceWith(avatars.getAvatarHtml(p.avatar));
                    playerElement.find('.player-flag')
                        .removeClass()
                        .addClass('player-flag ' + p.country);
                    playerElement.find('.player-flag__image')
                        .removeClass()
                        .addClass('player-flag__image ' + p.country)
                        .css('background-image', 'url(' + cdn + '/web/img/flags64/' + p.country + '_c.png)');


                    if (p.dancerCardEdited) {
                        playerElement.removeClass("player--new");
                    }

                } else {
                    console.log('playerFewModeUpdateElement: Cannot update nonexisting player! ID: ' + p.id);
                }

                // Update the "swipetip" in manymode
                if (this.core.controller === p.id && this.isManyMode) {
                    this.core.gui.showSwipeTip();
                }
            },

            // Go through all currently visible players' feedback buffers and show their latest move feedback, if any
            updateFewModeFeedback: function() {
                if (this.isManyMode) { return; }
                this.core.getVisiblePlayersAndGhosts().forEach(this.updateFeedbackForPlayer, this);
            },

            // Updates the player move feedback for a single player
            // Arg types                       Object
            updateFeedbackForPlayer: function(player) {
                if (this.isManyMode) {
                    return console.log('updateFeedbackForPlayer: Error! We are in many mode, dont update feedback!');
                }

                var feedback = player.latestFeedback;
                player.latestFeedback = undefined;

                var $playerElement = this.core.jPlayers.find('.' + player.id);
                if ($playerElement.length === 0) { return; }


                if (!player.feedbackElem) {
                    player.feedbackElem = {
                        feedback: $playerElement.find('.feedback'),
                        feedbackLabel: $playerElement.find('.feedback-label')
                    };
                }

                if (!feedback) {
                    player.feedbackElem.feedback.attr('class', 'feedback feedback-none');
                    player.feedbackElem.feedbackLabel.attr('class', 'feedback-label feedlabel-none');
                    return;
                }

                var totalScore = feedback.totalScore;
                var rating = feedback.rating;
                var move = feedback.move;
                var achievements = feedback.achievements;

                // always default coach to 0 if -1 or undefined
                var coach = Math.max(0, player.coach || 0);

                // validate scoringWindows
                var scoringWindows = this.core.getCurrentSong().scoringWindows;
                if (!scoringWindows[coach]) {
                    return console.warn('Could not find scoring windows for coach ', coach);
                }

                // validate move object
                var currentSong = this.core.getCurrentSong();
                var moveObject = currentSong.scoringWindows[coach][move];
                if (!moveObject) {
                    console.warn('Could not find move', move, 'for coach', coach);
                    console.warn('For song', currentSong.id, 'with', currentSong.coaches, 'number of coaches');
                    return;
                }

                if (moveObject.goldMove === 1 && rating === 'bad') {
                    rating = 'badgold';
                }

                if (this.core.inGameVideoPlayer.getState() !== 'PLAYING') { return; }

                // Achievements
                this.updateAchievements($playerElement, achievements, move);

                // Update stars
                var prevNumStars = Math.min(Math.floor(player.totalScore / 2000), 5);
                var numStars = Math.min(Math.floor(totalScore / 2000), 5);
                if (numStars !== prevNumStars) {
                    player.starsAchieved = numStars;
                    this.updateStarsForFewMode($playerElement, player.starsAchieved);
                }

                // Totalscore isnt being updated on core.players object except when a player joins/leaves etc so ill update from here
                player.totalScore = totalScore;

                player.feedbackElem.feedback.attr('class', 'feedback feedback-' + rating);
                player.feedbackElem.feedbackLabel.attr('class', 'feedback-label feedlabel-' + rating);
            },


            updateMegastarAchievement: function($playerEle) {
                var player;
                if (!isMEGASTAR) { // Execute only once for racetrack MEGASTAR
                    isMEGASTAR = true;
                    this.core.jRaceTrack.removeClass('superstar').addClass('megastar');
                }

                _.each(this.core.getVisiblePlayersAndGhosts(), function(p) {
                    if ($playerEle[0].dataset.id === p.id) {
                        return player = p;
                    }
                });

                if (!player.hasAchievedMegastar) {
                    player.hasAchievedMegastar = true;
                    $playerEle.removeClass('superstar').addClass('megastar');
                    this.core.audio.playSFX('goldmove', { volume: 0.70});

                    _.delay(function() { $playerEle.find('.player-megastar').addClass('animate_nextLevel'); }, 1200);
                }
            },

            updateSuperstarAchievement: function($playerEle) {
                var player;
                if (!isSUPERSTAR) { // Execute only once for racetrack SUPERSTAR
                    isSUPERSTAR = true;
                    this.core.jRaceTrack.addClass('superstar');
                }

                _.each(this.core.getVisiblePlayersAndGhosts(), function(p) {
                    if ($playerEle[0].dataset.id === p.id) {
                        return player = p;
                    }
                });

                if (!player.hasAchievedSuperstar) {
                    player.hasAchievedSuperstar = true;
                    $playerEle.addClass('superstar');
                    this.core.audio.playSFX('goldmove', { volume: 0.60});

                    _.delay(function() { $playerEle.find('.player-superstar').addClass('animate_nextLevel'); }, 1600);
                }
            },

            // Update Achievements for each player
            updateAchievements: function(achievedPlayerEle, achievements, move) {
                if (!achievements || !move) { return; }

                if (!!achievements.megastar &&
                    !!achievements.megastar.moveNr &&
                    achievements.megastar.moveNr == move) {

                        this.updateMegastarAchievement(achievedPlayerEle);

                } else if (!achievements.megastar && 
                            !!achievements.superstar &&
                            !!achievements.superstar.moveNr && 
                            achievements.superstar.moveNr == move) {

                                this.updateSuperstarAchievement(achievedPlayerEle);
                }
            },

            detectAchievements: function() {
                if (!!isSUPERSTAR && !!isMEGASTAR) { return; }
                var self = this;

                _.each(this.core.getVisiblePlayersAndGhosts(), function(player) {
                    var pa = player.achievements;
                    if (!pa) { return; }

                    if (pa.superstar || pa.megastar) {
                        if (!!pa.megastar && !!pa.megastar.moveNr && pa.megastar.moveNr <= self.core.danceMoveNr) {
                            self.updateMegastarAchievement(self.core.jPlayers.find('.'+player.id));
                        } else if (!pa.megastar && !!pa.superstar && !!pa.superstar.moveNr && pa.superstar.moveNr <= self.core.danceMoveNr) {
                            self.updateSuperstarAchievement(self.core.jPlayers.find('.'+player.id));
                        }
                    }
                });
            },


            // Update player feedback stars
            updateStarsForFewMode: function(playerElem, numStars) {
                playerElem.attr('data-stars', numStars);

                for (var i = numStars; i > 0; i -= 1) {
                    var star = playerElem.find('.star-' + i);
                    if (star.attr('data-visible') !== 'true') {
                        star.css('display', 'inline-block').attr('data-visible', 'true').addClass('no-beat');

                        // Give a small delay to star sfx
                        setTimeout(function() {
                            this.core.audio.playSFX('star-' + (i + 1), { volume: 0.33 });
                        }.bind(this), 1100);

                        // Let "new star" anim play before starting to beat
                        _.delay(function(star) { star.removeClass('no-beat'); }, 1000, star);
                    } else {
                        break;
                    }
                }
            },

            // Reset the player feedback obj everytime it enters into many mode
            // Empty the feedback obj
            clearPlayerFeedbackElem: function() {
                _.each(this.core.getVisiblePlayersAndGhosts(), function(player) {
                    if (player.feedbackElem) {
			player.feedbackElem.feedback.attr('class', 'feedback feedback-none');
                        player.feedbackElem.feedbackLabel.attr('class', 'feedback-label feedlabel-none');
                        delete player.feedbackElem;
                    }
                });
            },

            resetPlayerFeedbacks: function() {
                _.each(this.core.players, function(player) {
                    player.latestFeedback = undefined;
                    player.achievements = undefined;
                    player.hasAchievedSuperstar = false;
                    player.hasAchievedMegastar = false;
                });

                // Reset superstar & megastar flags for each map
                isSUPERSTAR = false;
                isMEGASTAR = false;

                this.core.danceMoveNr = null;
            },

            clearPlayerScores: function() {
                _.each(this.core.players, function(player) {
                    player.totalScore && (player.totalScore = 0);
                });
            },

            clearPlayerClasses: function() {
                this.core.jPlayers.removeClass('removing-dancers finding-dancers');
            },

            ////////// [ FEW MODE PLAYERS ] //////////
            clearPlayerStars: function() {
                this.core.jPlayers.find('.player-stars .star').hide().removeAttr('data-visible');
                this.core.jPlayers.find('.player').removeAttr('data-stars');
            },

            // Draws a crown on the leader player. May also draw "contender crowns" (semi-transparent) on players whose
            // scores are close to the leader's
            // Arg types           Object
            handleCrown: function(leaderPlayer) {
                if (this.isManyMode || // Only show in fewmode
                    this.core.state !== 'dance' || // Prevent any residual event from showing the crown again after state change
                    !leaderPlayer // Only webcontroller
                ) {
                    return;
                }


                // merge ghosts and players into a new object
                var players = _.extend({}, this.core.players, ghosts.getGhosts());

                // Hide the crown if there is only one player
                if (_.size(players) === 1) {
                    var $crowns = this.core.jPlayers.find('.crown').filter('.leader, .contender');
                    $crowns.length && this.hideWinnerCrowns();
                    return;
                }

                var threshold = 200,
                    isContender = false;
                // Compare the other players to the leaderPlayer
                _.each(_.omit(players, leaderPlayer.id), function(player) {
                    var isCloseToLeader = leaderPlayer.totalScore - player.totalScore < threshold;
                    isContender = isContender || isCloseToLeader;
                    this.setCrownState('.' + player.id, isCloseToLeader ? 'contender' : '');
                }, this);

                // If at least one other player has a score that is close to the leader, the leader should also
                // be flagged as a contender.
                this.setCrownState('.' + leaderPlayer.id, isContender ? 'contender' : 'leader');
            },

            hideWinnerCrowns: function() {
                this.setCrownState('.player', '');
            },

            // Private function. Updates the state of the crown for a given player; leader, contender or none
            // Arg types             String,         String
            setCrownState: function(playerSelector, state) {
                var $player = this.core.jPlayers.find(playerSelector);
                var $crown = $player.find('.crown');

                if (state && $crown.hasClass(state)) { return; }

                $crown.attr('class', 'crown').addClass(state);
            },

            // Trigger a bounce animation on the given player. Used e.g. when a player changes coach, to add more life to
            // the game.
            // Arg types            String
            bouncePlayer: function(playerId) {
                var $player = this.core.jPlayers.find('[data-id=' + playerId + ']');

                if (this.animate) {
                    $player.removeClass('bounce').forceRepaint().addClass('bounce').one(env.ANIMATION_END, function() {
                        $player.removeClass('bounce');
                    });
                }
            },

            // This is called when the server notifies us about a player levelling up. Update the locally stored player
            // levels. If we are in the after dance state, also show a level up badge in the leader board.
            // Arg types       String    Number
            levelUp: function(playerId, globalLevel) {
                var player = this.core.players[playerId];
                if (!player) { return; }

                player.levelUp = true;
                player.globalLevel = globalLevel;
                var levelData = _.find(player.levels, { song: this.core.song });
                if (levelData) {
                    levelData.level++;
                } else {
                    levelData = {
                        song: this.core.song,
                        level: 1,
                        prevXPLevel: undefined, // Don't know this
                        nextXPLevel: undefined, // Don't know this
                        completed: undefined, // ???
                        score: undefined, // ???
                    };
                    player.levels.push(levelData);
                }

                var $player = this.core.jPlayers.find('[data-id=' + playerId + ']');
                var $globalExp = $player.find('.player-exp');

                if (this.animate) {
                    $player.addClass('level-up');

                    setTimeout(function() {
                        $globalExp.find('span').html(player.globalLevel);
                    }, 500);
                } else {
                    $globalExp.find('span').html(player.globalLevel);
                }

                if (this.core.state === 'afterDance') {
                    this.core.jAfterDance.find('.player.' + playerId + ' .level')
                        .removeClass('level-' + (levelData.level - 1))
                        .addClass('level-up level-' + levelData.level);
                }
            },

            displayVIP: function(player, isVIP) {
                var $elem = this.core.jPlayers.find('.' + player.id + ' .player-logo');

                this.gui.adminMenu.updatePlayer(player);

                if (isVIP) {
                    $elem.addClass('player-logo--vip');
                } else {
                    $elem.removeClass('player-logo--vip');
                }
            },

            hideVIP: function() {
                if (this.isManyMode) {
                    return;
                }
                this.updateController(); // Updates the controller icon & visualy for showing who is the current controller
                this.core.jPlayers
                    .find('.vip').removeClass('vip')
                    .find('.player-name-vip').removeClass('player-name-vip');
            },

            // Called when the game should go from few to many mode. Hides player mini DCs.
            switchToManyMode: function() {
                this.isManyMode = true;
                // ..and show player count and swipe tip instead
                this.updateManyMode();
                pubsub.publish('switchToManyMode');
            },

            // Called when the game should go from many to few mode. Hides all many mode elements, like balloons and the
            // player count, and adds player mini DCs.
            switchToFewMode: function() {
                this.isManyMode = false;

                j('#player-count').remove();
                // Create all the player elements
                this.removePlayersAndGhosts();
                this.addPlayersAndGhosts();

                pubsub.publish('switchToFewMode');
            },


            // Move the visual controller indication to the controller player.
            updateController: function() {
                var core = this.core,
                    playerIdController = core.controller;

                for(var playerId in core.players) {
                    if (playerId === playerIdController) {
                        core.players[playerIdController].isController = true;
                    } else {
                        core.players[playerId].isController = false;
                    }
                }

                var previousController = core.jPlayers.find('.controller');
                previousController.removeClass('controller');

                var newController = core.jPlayers.find('.' + playerIdController);
                newController.addClass('controller');
            },

            updateBalance: function(playerID, value) {
                this.core.jPlayers.find('.' + playerID + ' .controller-coins span').html(value);
            },

            // Update the player count in the top right corner of the screen
            updateManyMode: function() {
                var numPlayers = this.core.countPlayers();
                var manyHTML = '<div id="player-count">' + numPlayers + '<span>' + loc(1238) + '</span></div>'; // 1238: Web_CoachSelection_Players
                this.core.jPlayers.html(manyHTML);
            },

            // Update the avatar rewards for players
            updateAvatarReward: function(player, avatar) {
                if (!player.unlockedAvatars) {
                    player.unlockedAvatars = [];
                    return updateRewards(player, avatar);
                }

                updateRewards(player, avatar);

                function updateRewards(player, avatar) {
                    player.unlockedAvatars.push(avatar);
                }
            }


        };

        return Players;

    });
define('pictos',[
	'jquery',
	'device',
	'bowser',
	'songs',
], function (
	j,
	device,
	bowser,
	songs
) {
	'use strict';

	var OUTSIDE = 3.5; // em
	var START_POSITION_CSS = 'translate3d(' + OUTSIDE + 'em, 0, 0)';

	// Private function
	// Returns the maximum Number of pictos that may be on the screen at any given time, for the current song.
	var getMaxPictos = function() {
		// find maximum number of overlapping pictos
		var arr = this.song.pictos;
		var maxCount = -1;
		for (var i = 0; i < arr.length-1; ++i) {
			var delta = this.pictoSlideTime + this.pictoFadeOutTime + arr[i].time;
			var k = i + 1;
			var tempMax = 1;
			while(delta > arr[k].time) {
				k++;
				tempMax++;
				if (k >= arr.length) {
					break;
				}
			}
			maxCount = Math.max(tempMax,maxCount);
		}
		return maxCount;
	};

	// Private function
	var preparePictos = function() {
		// Assign classes based on the amount of coaches in song
		var nCoaches = this.song.coaches;
		if (nCoaches > 1) {
			this.core.jPictos.addClass('multi-coach');
			if (nCoaches > 3) {
				this.core.jPictos.addClass('wide');
			}
		} else {
			this.core.jPictos.removeClass('multi-coach wide');
		}
	};


	// Draws the stick men showing the next dance move, in the bottom right corner of the screen.
	function Pictos(core) {
		this.core = core;
		this.gui = core.gui;
		this.hud = core.gui.hud;

		this.showPictos = !(device.isChromecast || device.isAndroidTabletApp);
	}

	Pictos.prototype = {
		init: function () {
			console.log('%cÃ¢Å“â€', 'color:#339933; background:#CCFF00', 'Pictos initialized');

			this.pictoCounter = 0;
			this.pictoBuffer = [];
			this.pictoSlideTime = 2000;
			this.pictoFadeOutTime = 750; // 500 ms as a safe margin
			this.maxVisiblePictos = 0;
		},

		show: function(animate) {
			this.showPictos && animate ? this.core.jPictos.fadeIn(0.5) : this.core.jPictos.show();
		},

		hide: function(animate) {
			this.showPictos && animate ? this.core.jPictos.fadeOut(0.5) : this.core.jPictos.hide();
			this.core.jPictos.children().empty();
		},

		// Load assets and prepare all data needed to show pictos during dance. Called once before each dance.
		initPictos: function() {

			if (!this.showPictos) {
				this.core.jPictos.hide();
				return;
			}

			var self = this;

			this.song = this.core.getCurrentSong();
			this.pictoCounter = 0;
			this.maxVisiblePictos = getMaxPictos.call(this);

			var pictosAtlasUrl = 'url(' + songs.getSong(this.core.song).base + '/assets/web/pictos-atlas.png' + ')';
			this.pictoContainer = j('#pictos');
			this.pictoContainer.find('.picto').remove();
			this.pictoBuffer = [];
			for (var i = 0; i < this.maxVisiblePictos; ++i) {
				var picto = j('<div>')
					.addClass('picto')
					.css({ 'background-image': pictosAtlasUrl });

				this.pictoContainer.append(picto);
				this.pictoBuffer.push(picto);
			}

			preparePictos.call(this);

			this.atlasMetadata = undefined;
			j.getJSON(songs.getSong(this.core.song).base + '/assets/web/pictos-atlas.json', undefined, function (data) {
				self.atlasMetadata = data;
				self.pictoWidth = data.imageSize.width;
			});
		},


		// Called as often as possible during dance. Check if there is a new picto that should be shown.
		renderPictos: function (time) {
			if (!this.showPictos) {
				return;
			}

			if (this.pictoCounter >= this.song.pictos.length || !this.atlasMetadata) { return; }

			var animTime = Math.max(this.song.pictos[this.pictoCounter].time - time, 1);
			if (this.pictoSlideTime <= animTime) { return; }

			var $picto = this.pictoBuffer[this.pictoCounter % this.pictoBuffer.length];

			var pictoOffsets = this.atlasMetadata.images[this.song.pictos[this.pictoCounter].name];
			if (!pictoOffsets) { return; }

			var scale = this.core.containerScale;
			var endPosX = -this.pictoWidth * (1 - scale) / 2;

			$picto
				.attr('class', 'picto')
				.css({
					'opacity': 1,
					'background-position': (-pictoOffsets[0]) + 'px ' + (-pictoOffsets[1]) + 'px',
				})
				.fromTo(
						animTime / 1000,
						{ transform: 'translate3d(' + (OUTSIDE * animTime / this.pictoSlideTime) + 'em, 0, 0) scale(' + scale + ')' },
						{ transform: 'translate3d(' + endPosX + 'px, 0, 0) scale3d(' + scale + ', ' + scale + ', 1)', 'transition-timing-function': 'linear' })
				.then(function () {
					this.to(0.3, {
						opacity: 0,
						transform: 'translate3d(' + endPosX + 'px, 0, 0) scale3d(' + (1.2*scale) + ', ' + (1.2*scale) + ', 1)',
					})
					.then(function () {
						this.css({ transform: START_POSITION_CSS });
					});
				});

			++this.pictoCounter;
		}

	};

	return Pictos;

});


define('text!html/hud/lyricsLine.html',[],function () { return '<div class="line">\n\t<% _.each(fragments, function (fragment) { %>\n\t<span class="fragment unfilled"><%= fragment %><% if (fill) { %><span class="fill"><%= fragment %></span><% } %></span>\n\t<% }); %>\n</div>';});

define('lyrics',[
	'jquery',
	'lodash',
	'device',
	'environment',
	'text!html/hud/lyricsLine.html',
], function (
	j,
	_,
	device,
	env,
	lineHtml
) {
	'use strict';

	var lineTemplate = _.template(lineHtml);

	// Private function. Removes lyrics lines in order
	var removeLines = function ($lines) {
		if (this.simpleAnimations) {
			$lines.remove();
			$lines = null; // set null value for GC, otherwise gets stored in JS heap
		} else {
			var $prev = $lines.removeClass('current').addClass('previous');
			$prev.on(env.TRANSITION_END, function (ev) {
				if (ev.target === this) { j(this).remove(); ev.target = null; }
			});
		}
	};
	// Private function. Generates the HTML string for a single lyrics line.
	var makeLine = function (lineData, simpleAnimations) {
		return lineTemplate({
			fragments: _.pluck(lineData.fragments, 'text'),
			fill: !simpleAnimations,
		});
	};
	// Private function
	var popQueue = function (queueElem, lyricsElem) {
		return queueElem.children().first().appendTo(lyricsElem);
	};



	function Lyrics (core) {
		this.core = core;
	}

	// Shows the karaoke style lyrics at the bottom left corner of the screen during dance.
	Lyrics.prototype = {

		init: function () {
			console.log('%cÃ¢Å“â€', 'color:#339933; background:#CCFF00', 'Lyrics initialized');
		},

		hide : function () {
			this.core.jLyrics.empty();
			this.core.jLyrics.fadeOut(0.2);
			this.$current = this.$nextLine = this.$queue = null; // nullify values for GC to detach from nodes & fragments
		},

		// Prepare all data and DOM elements needed to start showing lyrics. Also set a timer to show the first lyrics
		// line a bit before the lyrics starts rolling. Uses the currently selected song as source of lyrics info.
		// Called once before each dance.
		initLyrics: function () {
			// Group lyrics fragments into full rows
			this.lyricsRows = [];
			var currentLine = {};
			var song = this.core.getCurrentSong();

			// Decide whether to animate the lyrics. Weak hardware should not animate lyrics
			this.simpleAnimations = device.isWeak || device.isOldiOS;
			this.core.jLyrics.toggleClass('simple', this.simpleAnimations);

			_.each(song.lyrics, function (fragment) {
				if (!currentLine.startTime) {
					currentLine.startTime = fragment.time;
					currentLine.fragments = [];
				}
				currentLine.fragments.push(fragment);
				if (fragment.isLineEnding) {
					currentLine.endTime = fragment.time + fragment.duration;
					this.lyricsRows.push(currentLine);
					currentLine = {};
				}
			}, this);

			// Store all the lyrics lines in a document fragment outside the DOM
			this.$queue = j(document.createDocumentFragment());
			_.each(this.lyricsRows, function (lyricsLine) {
				this.$queue.append(j(makeLine(lyricsLine, this.simpleAnimations)));
			}, this);

			// Set the color for all karaoke text fills
			var lyricsColor = song.lyricsColor || '#e6195f';
			var cssRules = this.simpleAnimations ?
				'#lyrics .line.current .fragment { color: ' + lyricsColor + '; }' :
				'#lyrics .line .fragment .fill { color: '+ lyricsColor +'; }';
			j('#lyrics-style-rules').text(cssRules);

			this.$nextLine = popQueue(this.$queue, this.core.jLyrics).css({ display: 'block' });

			// Fade in the first lyrics line some time before the lyrics starts rolling
			this.lyricsRows.length > 0 && _.delay(function ($lyrics, simpleAnimations) {
				$lyrics.fadeIn(simpleAnimations ? 0 : 0.5);
			}, this.lyricsRows[0].startTime - 1000, this.core.jLyrics, this.simpleAnimations);

			this.currentLine = undefined;
		},

		// Called as often as possible during dance. Checks the lyrics lines timing table to see of the current line
		// should be removed, if new lines should be added, etc.
		// Arg types            Number
		updateLyrics: function (elapsed) {
			if (isNaN(elapsed) || !this.lyricsRows) { return; }

			var newLine,
				$lyrics = this.core.jLyrics,
				$current = this.$current;

			if (this.currentLine) {
				// Fill in the words, karaoke style
				var currentFragments = this.currentLine.fragments;
				while (currentFragments.length && currentFragments[0].time <= elapsed) {
					var fragment = currentFragments.shift();
					var animDuration = Math.max(fragment.duration + fragment.time - elapsed, 0) / 1000;
					var $fragToFill = $current.find('.unfilled:first').removeClass('unfilled').children();
					if (!this.simpleAnimations) {
						$fragToFill.css({ transitionDuration: animDuration + 's' });
					}
				}
				// If the current line has expired, remove it
				this.currentLine.endTime < elapsed && removeLines.call(this, $current);
			}

			while (this.lyricsRows.length && this.lyricsRows[0].startTime <= elapsed) {
				newLine = this.lyricsRows.shift();
				this.$nextLine && this.$nextLine.addClass('current'); // Make the next line the current
				this.$nextLine = popQueue(this.$queue, $lyrics); // Pop the queue
			}

			removeLines.call(this, $lyrics.find('.current:not(:last)')); // Remove lines that we do not have the time to show

			// No new line at this time, we are done
			if (!newLine) { return; }

			this.currentLine = newLine;
			this.$current = $lyrics.find('.current');
		}

	};

	return Lyrics;

});


define('text!html/hud/balloon.html',[],function () { return '<div class="balloon">\n\t<div class="balloon__image balloon__image--left"></div>\n    <div class="balloon__image balloon__image--right"></div>\n    <div class="balloon__content"></div>\n</div>';});

define('balloons',[
	'jquery',
	'lodash',
	'loc',
	'utils',
	'anime',
	'avatars',

	'text!html/hud/balloon.html'
], function (
	$,
	_,
	loc,
	utils,
    anime,
	avatars,

	balloonHtml
) {
	'use strict';

	var BALLOON_DISPLAY_TIME = 8000;
	var balloonTemplate = _.template(balloonHtml);
	var isMANYMODE_SUPERSTAR = false, isMANYMODE_MEGASTAR = false;

	var getText = function(data) {
		var playerName = (!!data.players && data.players.length > 0) ? data.players[0].name : '';
		var result = '';
		switch(data.type) {
			case 'allGotStar':		// Everyone reached the Nth star! (number in string);
				result = loc(data.text);
				break;
			case 'lead':			// [player name] takes the lead!
			case 'star':			// [player name] reached the Nth star (number in string)
				result = loc(data.text, {'[player name]': playerName});
				break;
			case 'highscore':		// [player name] highest score on this song, [number]!
			case 'totalDances':		// [player name] has danced [number] songs!
				result = loc(data.text, {'[player name]': playerName, '[number]': data.number});
				break;
			case 'allGoldMoves':	// [player name] got all Gold Moves!
				result = loc(1019, {'[player name]': playerName}); // 1019: Web_Bubbles_PlayerAllGoldMoves
				break;
			case 'perfectStreak':	// [player name] got [number] perfect moves in a row!
				result = loc(1155, {'[player name]': playerName, '[number]': data.number}); // 1155: Web_Bubbles_PlayerNumPerfects
				break;
			case 'toe2toe':			// [player name] and [player name] are Toe to Toe!
				// temporary mesure to distiguish the player names
				result = loc(data.text);
				result = result.replace('[player name]', playerName);
				var playerName1 =  (!!data.players && data.players.length > 1) ? data.players[1].name : '';
				result = result.replace('[player name]', playerName1);
				break;
			// Superstar, Megastar block
			case 'superstar': 		// [player name] has reached Superstar!
				result = loc(data.text, {'[player name]': playerName});
				break;
			case 'allGotSuperstar': // Everyone has reached Superstar!
				result = loc(data.text);
				break;
			case 'megastar': 		// [player name] has reached Megastar!
				result = loc(data.text, {'[player name]': playerName});
				break;
			case 'allGotMegastar': 	// Everyone has reached Megastar!
				result = loc(data.text);
				break;
			default:
				console.log("DEFAULT");
				result = loc(data.text);
				break;
		}

		return result;
	};

	var getImage = function(type, player) {
		//specific code for these balloons
		if (type === 'allGotStar' || type === 'allGotSuperstar' || type === 'allGotMegastar') {
			return {
				color : "",
				image : '<div class="balloon__avatar"><div class="balloon__avatar--star"></div></div>'
			}
		}

		return {
			color : jd.players[player.id].color,
			image : avatars.getAvatarHtml(player.avatar, "balloon__avatar")
		}
	}


	var getContent = function(data) {
		var result = {
			text : getText(data),
			left : null,
			right : null
		};

		result.left = getImage(data.type, data.players[0]);

		if (data.type === 'toe2toe') {
			result.right = getImage(data.type, data.players[1]);
		}

		return result;
	};

	var setImage = function($image, data) {
		$image.attr("color", data.color);
		$image.empty();
		$image.append(data.image);
	};

	// When in many mode, we show "balloons" instead of individual player feedback. The balloons contains aggregated
	// information about how the players are progressing.
	function Balloons(core) {
		this.core = core;
		this.gui = core.gui;
	}

	Balloons.prototype = {

		init: function() {
			console.log('%cÃ¢Å“â€', 'color:#339933; background:#CCFF00', 'Balloons initialized');

			var $container = this.core.jBalloons;

			this.$balloon = $(balloonTemplate());
			this.$balloon.appendTo($container);

			this.$imageLeft = 	this.$balloon.find('.balloon__image--left');
			this.$imageRight = 	this.$balloon.find('.balloon__image--right');
			this.$content =		this.$balloon.find('.balloon__content');

			this.animBalloonDfd = null;
			this.hideBalloonDfd = null;

			this.animation = anime({
				targets: this.$balloon[0],
            	easing: "easeInQuad",
				autoplay: false,
				translateY: ["-200%", "0"],
				complete: function(anim) {
					this.animBalloonDfd.resolve(anim.reversed)
				}.bind(this)
			});
			
			this.isShown = false;
			this.isCurrentlyShown = false;
		},

		// allow balloons to be seen in multiplayers mode
		show: function() {
			this.isShown = true;
			isMANYMODE_SUPERSTAR = false;
			isMANYMODE_MEGASTAR = false;
		},

		// Hides all balloons. Useful e.g. when leaving the dance state.
		hide: function() {
			this.interruptBalloon();
			if (!this.jBalloons) { return; }

			this.isShown = false;
			this.jBalloons.hide();
		},

		display: function(data) {
			if (!this.isShown) {
				return;
			}

			var content = getContent(data);
			this.updateAchievementsManyMode(data);

			this.interruptBalloon() //interrupt current balloon if still displayed and hides it
			.then(this.showBalloon.bind(this, content)) //shows the new balloon with the new content
			.then(this.hideBalloon.bind(this)); // after enough time has passed, hide this balloon
		},

		interruptBalloon: function() {
			return $.when(this.animBalloonDfd) //waits until the current animation is done
			.then(function() {
				// if no current balloon is displayed, exit
				if (!this.isCurrentlyShown) {
					return null;
				}

				//otherwise hide the balloon sooner and prevent other instructions to execute
				clearTimeout(this.showBalloonToken);
				this.hideBalloonDfd.reject();
				return this.hideBalloon();
			}.bind(this));
		},

		showBalloon: function(content) {
			// while hidden, update content
			this.updateContent(content);

			// initialise the promises
			this.hideBalloonDfd = $.Deferred();

			this.animBalloonDfd = $.Deferred();
			this.animBalloonDfd // when the animation to show is done
			.then(function() {
				//set up the timeout to limit the display time
				this.showBalloonToken = setTimeout(function() {
					this.hideBalloonDfd.resolve();
				}.bind(this), BALLOON_DISPLAY_TIME);
			}.bind(this));

			this.isCurrentlyShown = true;
			this.animation.restart();
						
			return this.hideBalloonDfd;

		},

		hideBalloon: function(isInterrupted) {
			// hide balloon
			this.isCurrentlyShown = false;
			this.animBalloonDfd = $.Deferred();

			this.animation.restart();
			this.animation.reverse();
			// signal when it's hidden
			return this.animBalloonDfd;
		},

		updateContent: function(content) {
			this.$content.html(content.text);
			setImage(this.$imageLeft, content.left);

			if (!!content.right) {
				setImage(this.$imageRight, content.right);
				this.$imageRight.show();
				this.$content.addClass("balloon__content--center");
			} else {
				this.$imageRight.hide();
				this.$content.removeClass("balloon__content--center");
			}
		},
		

		updateMegstarManyMode: function() {
			if (!!isMANYMODE_MEGASTAR) { return; }

			this.core.jRaceTrack.removeClass('superstar').addClass('megastar');
			this.core.audio.playSFX('goldmove', { volume: 0.70});
			isMANYMODE_MEGASTAR = true;
		},

		updateSuperstarManyMode: function() {
			if (!!isMANYMODE_SUPERSTAR) { return; }

			this.core.jRaceTrack.addClass('superstar');
			this.core.audio.playSFX('goldmove', { volume: 0.60});
			isMANYMODE_SUPERSTAR = true;
		},

		updateAchievementsManyMode: function(content) {
			if (content.type === 'superstar' || content.type === 'allGotSuperstar') {
				this.updateSuperstarManyMode();
			} else if (content.type === 'megastar' || content.type === 'allGotMegastar') {
				this.updateMegstarManyMode();
			}
		}

	};

	return Balloons;

});

define('text!html/hud/racetrack.html',[],function () { return '<div class="platform"></div>\n<div class="star star1"></div>\n<div class="star star2"></div>\n<div class="star star3"></div>\n<div class="star star4"></div>\n<div class="star star5"></div>\n\n<div class="progress-bar">\n\t<div class="progress-meters">\n\t\t<% if (manyMode) { %>\n\t\t\t<div id="racetrack-fill"></div>\n\t\t<% } else { %>\n\t\t\t<div id="racetrack-fill-p1" class="racetrack-fill-players"></div>\n\t\t\t<div id="racetrack-fill-p2" class="racetrack-fill-players"></div>\n\t\t\t<div id="racetrack-fill-p3" class="racetrack-fill-players"></div>\n\t\t\t<div id="racetrack-fill-p4" class="racetrack-fill-players"></div>\n\t\t<% } %>\n\t</div>\n\t<div class="progress-background"></div>\n</div>\n<% if (manyMode) { %>\n\t<div class="leader-avatar"></div>\n<% } %>';});

define('racetrack',[
	'lodash',
	'device',
	'utils',
	'avatars',
	'text!html/hud/racetrack.html',
], function (
	_,
	device,
	utils,
	avatars,
	racetrackHtml
) {
	'use strict';

	var MAX_FEW_MODE_PLAYERS = 4;
	var racetrackTemplate = _.template(racetrackHtml);

	var updateStarVisibility = function(topScore) {
		var self = this,
			$stars,
			topScoreStars = Math.floor(topScore / 2000);

		if (topScoreStars > self.prevTopScoreStars) {
			// The top scoring player has reached a new star level
			$stars = self.jStars
					.slice(self.prevTopScoreStars, topScoreStars)
					.attr('data-visible', 'true')
					.addClass('no-beat star-visible');

			if (self.isManyMode && topScoreStars < 6) {
				_.delay(function () { // Give a small delay to star sfx
					self.core.audio.playSFX('star-' + topScoreStars, {volume: 0.275});
				}, 1100);
			}

			// Let "new star" anim play before starting to beat
			// Show upcoming star after a small delay
			_.delay(function () {
				$stars.next().last().fadeIn(650);
				$stars.removeClass('no-beat'); 
			}, 1000);
		} else if (topScoreStars < self.prevTopScoreStars) {
			// This is the case when the leader joins the game after dropping out
			$stars = self.jStars
				.slice(topScoreStars, self.prevTopScoreStars)
				.attr('data-visible', 'false')
				.removeClass('star-visible');
		}

		self.prevTopScoreStars = topScoreStars;
	}

	var getColorCodeFromString = function(colorString) {
		return {
			red: '#ec2443',
			blue: '#3784f9',
			green: '#7de400',
			purple: '#8802c9',
			aqua: '#03ded6',
			pink: '#d820c9',
		}[colorString] || '#FFFFFF';
	}


	// Shows a vertical bar, containing several smaller vertical progress bars (tracks), one for each player in few
	// mode. In many mode, show one big track representing the leader's progres.
	function Racetrack(core) {
		this.core = core;
		this.gui = core.gui;
		this.hud = core.gui.hud;

		this.maxScore = 13333;
		this.isManyMode = false;
	}

	Racetrack.prototype = {

		init: function() {
			console.log('%cÃ¢Å“â€', 'color:#339933; background:#CCFF00', 'Racetrack initialized');
			this.prevTopScoreStars = 0;
		},

		// Called once before entering the dance state.
		showRaceTrack: function () {
			console.log('showRaceTrack');

			this.buildRacetrack();

			var numPlayers = this.core.countPlayers();
			this.core.jRaceTrack[numPlayers > 0 ? 'fadeIn' : 'fadeOut'](0.5);

			this.jStars.first().show(); // Always show first, unfilled star
		},

		// Called once at the end of each dance.
		hideRaceTrack: function() {
			console.log('hide racetrack');

			this.core.jPlayers.find('.player').removeClass('superstar megastar');
			this.core.jPlayers.find('.player-superstar').removeClass('animate_nextLevel');
			this.core.jPlayers.find('.player-megastar').removeClass('animate_nextLevel');
			this.core.jRaceTrack
							.hide()
							.css({ opacity: 0 })
							.removeClass('superstar megastar')
							.empty();

			this.currentLeaderAvatar = null;
		},

		// Add/remove racetracks based on the players currently in the room. Typically called when players join or leave
		updateTracks: function() {
			if (this.isManyMode) {
				this.jRtFill.css({
					'height': '100%',
					'width': '100%',
					'background-color': this.core.getCurrentSong().lyricsColor,
				});
			} else {
				// Scale bars
				var self = this;
				var allPlayers = this.core.getVisiblePlayersAndGhosts();
				var trackWidth = 100 / allPlayers.length;
				var trackNum = 1;

				this.jTracksPlayer.addClass('racetrack-empty');

				_.each(allPlayers, function (player) {
					var trackLeft = trackWidth * (trackNum - 1);
					var trackColor = getColorCodeFromString(player.color);
					var trackFill = self.core.jRaceTrack.find('#racetrack-fill-p' + trackNum);

					trackFill
						.removeClass('racetrack-empty')
						.addClass(player.id)
						.css({
							'width': trackWidth+'%',
							'left': trackLeft+'%',
							'background-color': trackColor
						});
					trackNum++;
				});
			}
		},

		// Private function. Creates the DOM elements that represents the racetrack.
		buildRacetrack: function () {

			if (this.core.state !== 'dance') {
				console.log('!!! aborted because not in dancing state');
				return;
			}

			this.core.jRaceTrack.html(racetrackTemplate({ manyMode: this.isManyMode }));

			// Store references to frequently used elements, to avoid querying the DOM
			var $rt = this.core.jRaceTrack;
			this.jStars = $rt.find('.star');
			this.jTrackBackground = $rt.find('.progress-background');
			this.jTracksPlayer = $rt.find('.racetrack-fill-players');
			this.jTracks = [
				$rt.find('#racetrack-fill-p1'),
				$rt.find('#racetrack-fill-p2'),
				$rt.find('#racetrack-fill-p3'),
				$rt.find('#racetrack-fill-p4')
			];
			this.jRtFill = $rt.find('#racetrack-fill');
			this.jRtLeaderAvatar = $rt.find('.leader-avatar');

			this.updateTracks();

			var fakePlayer = {'scaledScore': 0};
			this.updateRacetrack(fakePlayer);
		},

		// Called as many times as possible during dance. Updates each individual racetrack based on their corresponding
		// player's score, or the leader's score in many mode. Also add/remove stars based on the leader player's score.
		updateRacetrack: utils.throttle(function (p) {
			var trackPercent;

			if (this.isManyMode) {
				if (!p) {
					console.log('Cannot update many mode racetrack without player data');
					return;
				}

				trackPercent = 100 * (p.scaledScore / this.maxScore);

				// Grow racetrack
				if (this.jRtFill.length > 0) {
					this.jRtFill.css({ transform: 'translate(0, ' + (100 - trackPercent) + '%)' });
				} else {
					console.log('Error jRtFill does not exist. showRacetrack must not have been fired');
					return;
				}

				updateStarVisibility.call(this, p.scaledScore);

				// Leaders avatar
				if (p.avatar) {
					if (p.avatar !== this.currentLeaderAvatar) {
						this.currentLeaderAvatar = p.avatar;
						var avatarHTML = avatars.getAvatarHtml(p.avatar, 'leader-avatar');
						this.jRtLeaderAvatar.replaceWith(avatarHTML).css({'bottom': (trackPercent)+'%'});
						this.jRtLeaderAvatar = this.core.jRaceTrack.find('.leader-avatar');
					}
					if (p.scaledScore >= 400) {
						if (p.scaledScore >= 12000) {
							this.jRtLeaderAvatar.addClass('avatar_racetrack--visible').css({'bottom': (trackPercent - 8)+'%'});
						} else {
							this.jRtLeaderAvatar.addClass('avatar_racetrack--visible').css({'bottom': (trackPercent)+'%'});
						}
					} else {
						this.jRtLeaderAvatar.removeClass('avatar_racetrack--visible');
					}
				} else {
					this.jRtLeaderAvatar.css({'background-image': 'none', 'bottom': '0'});
				}

			} else {
				// Scale bars
				var self = this;
				var trackNum = 0;
				var playerWithTopScore;

				var allPlayers = this.core.getVisiblePlayersAndGhosts();

				_.each(allPlayers, function (player) {
					trackPercent = 100 * (1 - player.totalScore/self.maxScore);

					var trackFill = self.jTracks[trackNum];
					trackFill.css({ transform: 'translate(0, ' + trackPercent + '%)' });

					trackNum++;

					if (!playerWithTopScore || player.totalScore > playerWithTopScore.totalScore) {
						playerWithTopScore = player;
					}
				});

				if (!playerWithTopScore) { return; }

				// Show or hide stars
				updateStarVisibility.call(this, playerWithTopScore.totalScore);

				// Make the track background follow the lader
				trackPercent = 100 * (1 - playerWithTopScore.totalScore/self.maxScore);
				if(trackPercent < 23){ trackPercent = 23; } // But not past a certain point or it will get cut off (approx 10300 points)
				this.jTrackBackground.css({ transform: 'translate(0, ' + trackPercent + '%)' });

				// Don't show crown until score has passed 200 points
				if (playerWithTopScore.totalScore >= 200) {
					this.gui.hud.players.handleCrown(playerWithTopScore);
				}
			}
		}, 500),

		switchDisplayMode : function(isManyMode) {
			if (this.isManyMode === isManyMode) {
				return;
			}

			this.isManyMode = isManyMode;

			if (this.core.state === 'dance') {
				this.prevTopScoreStars = 0;
				this.hideRaceTrack();
				this.showRaceTrack();
			}
		}

	};

	return Racetrack;

});
define('goldMove',[
    'jquery',
    'lodash',
    'device',
    'utils'
], function (
    $,
    _,
    device,
    utils
) {
    'use strict';

  
    // Shows a vertical bar, containing several smaller vertical progress bars (tracks), one for each player in few
    // mode. In many mode, show one big track representing the leader's progres.
    function GoldMove(core, animate) {
        this.core = core;
        this.animate = animate;
        this.init();
    }

    GoldMove.prototype = {

        init: function() {
            this.showGoldMoves = !(device.isChromecast || device.isAndroidTabletApp);
            this.$GoldMove = this.core.jGoldMove;
        },

        show: function () {
            this.song = this.core.getCurrentSong();
        },

        hide: function() {
            this.$GoldMove.find('.layer').removeAttr('style');
            this.$GoldMove.hide();
        },

        // Called continuously during dance. Checks if any of the coaches has a gold move coming up soon and if so,
        // triggers the pre-gold move or gold move VFX+SFX.
        // Arg types               Number
        update: function(elapsed) {
            if (!this.showGoldMoves) {
                return;
            }

            var nextIsGoldMove = false;
            var currentIsGoldMove = false;
            for (var coach = 0; coach < this.song.coaches; ++coach) {
                var currentCoachWindow = this.core.gui.hud.currentWindow[coach];
                if (currentCoachWindow < this.song.scoringWindows[coach].length &&
                    elapsed >= this.song.scoringWindows[coach][currentCoachWindow].time) {
                        if (this.song.scoringWindows[coach][currentCoachWindow].goldMove === 1) {
                            currentIsGoldMove = true;
                            this.hasMarkedNextGoldMove = false;
                        }
                        this.core.gui.hud.currentWindow[coach]++;
                }
                if (!this.hasMarkedNextGoldMove &&
                    currentCoachWindow + 1 < this.song.scoringWindows[coach].length &&
                    this.song.scoringWindows[coach][currentCoachWindow + 1].goldMove === 1) {
                        this.hasMarkedNextGoldMove = true;
                        nextIsGoldMove = true;
                }
            }

            if (!!this.core.isConnectionLost) { return; } // Gold moves shouldn't execute during connection-lost screen

            nextIsGoldMove && this.displayPreGoldMove();
            currentIsGoldMove && this.displayGoldMove();
        },

        // Show a glowing effect before the gold move is about to happen during dance
        displayPreGoldMove: function() {

            this.core.audio.playSFX('goldmove-intro', { volume: 0.175});

            this.$GoldMove.find('.layer').removeAttr('style');
            if (this.animate) {
                this.$GoldMove.fadeIn(0.3);
            } else {
                // Don't show the pre gold move on weak platforms, it looks like crap
                this.$GoldMove.fadeIn(0);
                this.$GoldMove.find('.layer').css({ opacity: 0 });
            }
        },

        // Show a gold move effect and play the gold move SFX
        displayGoldMove: function() {

            var self = this;
            if (this.animate) {
                this.$GoldMove.find('.layer-1').css({ 'animation': 'none' });
                this.$GoldMove.find('.layer-1').fromTo(0.8, { opacity: 1, transform: 'scale(1.3) rotate(0deg)' }, { opacity: 0, transform: 'scale(1) rotate(0deg)' });
                this.$GoldMove.find('.layer-2').fromTo(0.6, { opacity: 1, transform: 'scale(1.3) rotate(0deg)' }, { opacity: 0, transform: 'scale(0.75) rotate(0deg)' });
                _.delay(function () {
                    // play the explosion FX after aspiration FX completes
                    self.$GoldMove.find('.layer-3').fromTo(3, { opacity: 1, transform: 'scale(1)' }, { opacity: 0, transform: 'scale(1.6)' });
                }, 540);
            } else {
                this.$GoldMove.find('.layer-3').css({ opacity: 1 });
                _.delay(function () { self.$GoldMove.hide(); }, 1200);
            }

            // Play audio SFX, sync with explosion FX
            _.delay(function () { self.core.audio.playSFX('goldmove', { volume: 0.19 }) }, 450);
        },

    };

    return GoldMove;

});


define('hud',[
	'jquery',
	'lodash',
	'device',
	'utils',
	'environment',
	'loc',

	'smoother', 
	'inGameBeatParticles',
	'maintenance',
	'players',
	'pictos',
	'lyrics',
	'balloons',
	'racetrack',
	'goldMove'
	],
	function (
		$,
		_,
		device,
		utils,
		env,
		loc,

		Smoother, 
		InGameBeatParticles,
		Maintenance,
		Players, 
		Pictos, 
		Lyrics, 
		Balloons,
		Racetrack,
		GoldMove
		) {
	'use strict';

	var BUFFER_TIME_CONST = 200; // small buffer time in miliseconds
	var MIN_FRAME_INTVL = 1000 / (device.isWeak ? 10 : 20);
	var FADE_OUT_CONST = 0.0009;

	// Heads Up Display related functionality
	function HUD(core) {
		this.core = core;
		this.smoothedVideoDelay = new Smoother(20);

		// Don't animate the HUD on Chromecast, it's too slow
		this.animate = !device.isWeak && !device.isOldiOS;

		if (this.animate) {
			this.core.jPlayers.addClass('animate');
			this.core.jRaceTrack.addClass('animate');
		}
        this.init();
	}

	HUD.prototype = {

		init: function () {
			console.log('%cÃ¢Å“â€', 'color:#339933; background:#CCFF00', 'HUD initialized');
			this.loadAllComponents();

			this.rafToken = null;

            this.isBuffering = false;
            this.songHasStarted = false;
			this.songIsInProgress = false;

            this.boundRender = this.render.bind(this);

            this.boundSwitchToManyMode = 	this.switchToManyMode.bind(this);
			this.boundSwitchToFewMode = 	this.switchToFewMode.bind(this);

            this.boundUpdateVideoPosition =     this.updateVideoPosition.bind(this);
            this.boundBufferingStateChanged =     this.bufferingStateChanged.bind(this);

			pubsub.subscribe('switchToManyMode', this.boundSwitchToManyMode);
			pubsub.subscribe('switchToFewMode', this.boundSwitchToFewMode);

            pubsub.subscribe('videoTimeChanged', this.boundUpdateVideoPosition);
            pubsub.subscribe('bufferingStateChanged', this.boundBufferingStateChanged);
		},


        show: function() {
        	var self = this;

            this.danceTransition(false).always(function() {
            	self.initDanceState();
            	if (device.isChromecast) { self.core.video.play(); }
            });
        },

        hide: function() {
			this.hideDanceState();
        },

        ///////////////////////////////////////////////////////////////////////////////////////
        /////////						DANCE STATE 						///////////////////
        ///////////////////////////////////////////////////////////////////////////////////////

        // Setup the dance game state.
        initDanceState: function() {
            device.isIpadApp && this.core.calculateAspectRatio('16:9');

            this.core.hideMouseCursor();
            this.core.audio.playSFX('dance-transition-out', {volume: 0.16});

            if (!device.isChromecast) {
            	this.core.video.play();
            }
            this.core.jVideo.removeClass('hidden');

            // reset the smoother
            this.smoothedVideoDelay.reset();

            this.initHUD();
            this.isBuffering = false;
            this.songHasStarted = false;

            // Fetch song duration before executing any further data
            var self = this,
            startToken = setInterval(function() {
            	if (!!self.core.inGameVideoPlayer.duration) {
            		clearInterval(startToken);
            		self.start();
            	}
            }, BUFFER_TIME_CONST);
        },

		
		// Starts the dance main game loop.
		start: function() {
			this.videoTime = 0;
			this.frame = 0;
			this.beatsCounter = 0;
			this.elapsed = 0;
			this.lastEmittedDelay = 0;

			this.currentSong = this.core.getCurrentSong();
			this.songBeats = this.currentSong.beats;

			this.getBeatsDuration = this.songBeats[this.songBeats.length - 1];
			this.getVideoDuration = this.core.inGameVideoPlayer.getDuration();
			// For few songs, actualVideo duration is less than actualBeats duration
			this.videoDurationCalc = (this.getVideoDuration < this.getBeatsDuration ? this.getVideoDuration : this.getBeatsDuration);

			this.currentWindow = _.times(this.currentSong.coaches, function () { return 0; });
			
			this.rafToken && cancelAnimationFrame(this.rafToken);
			this.rafToken = requestAnimationFrame(this.boundRender);

			var now = Date.now();

			this.elapsedChangeDate = now;
			this.lastPlayingDate = now;

			if(!!this.core.isDebug) {
				this.core.debug.displayVideoProgression(0);
				console.log(this.currentSong);
			}


			try {
				this.beatParticles = new InGameBeatParticles(this.core.jBeat).start();
			} catch (err) {
				console.warn('Failed to initialize beat particle effects.', err);
			}
		},

		
		// Main game loop callback. Retreive current time from video player and check if video is done. If not, update
		// all dance game components.
		render: function(now) {
			
			this.core.isDebug && this.core.debug.displayAfps(now);

			// Limit the number of times that render() is called per second to MAX_FPS
			if (now - this.lastFrameDate < MIN_FRAME_INTVL - 1) {
				this.rafToken = requestAnimationFrame(this.boundRender);
				return;
			}
			this.lastFrameDate = now;
			this.core.isDebug && this.core.debug.displayFps(now);

			var videoPlayer = this.core.inGameVideoPlayer;
			var state = videoPlayer.getState();

			this.core.isDebug && this.core.debug.displayVideoProgression( (100 * this.videoTime) / this.videoDurationCalc );

			var timeLeft = Math.max(this.videoDurationCalc - this.videoTime, 0);
			if (timeLeft <= BUFFER_TIME_CONST) {
				this.requestResults(true);
			} else {
				if (this.elapsedTime !== this.videoTime) {
					this.elapsedTime = this.videoTime;
					this.elapsedChangeDate = Date.now();

					if (!this.songHasStarted) {
						// Song just started playing
						this.startOfSong = Math.round(Date.now() - (this.videoTime || 0));
						this.core.startSong(this.videoTime, this.startOfSong);

						this.songHasStarted = true;
						this.songIsInProgress = true;
					}

					this.updatePosition(this.videoTime);
					this.updateVideoDelay();
				}

				if (state === videoPlayer.states.PLAYING) {
					this.lastPlayingDate = Date.now();
				}

				var extrapolatedTime = this.elapsedTime + this.lastPlayingDate - this.elapsedChangeDate;

				if (!this.isBuffering) {
					this.updateHUD(extrapolatedTime);
					if (!!this.core.isDebug) { //Show these things only in debug mode
						this.core.debug.displayVideoTime(extrapolatedTime);
						$('#move-elements').text('MOVE = '+this.core.gui.hud.currentWindow);
					}
				}

				this.rafToken = requestAnimationFrame(this.boundRender);
				this.frame++;
			}
		},


		// Called once when leaving the dance game state. Hides dance related views and event listeners.
		hideDanceState: function() {

			this.core.isDebug && this.core.debug.displayVideoProgression(100);

			this.core.video.stop();
			this.core.jVideo.addClass('hidden');
			this.clearHUD();

			this.core.resetMouseCursor();

			this.rafToken && cancelAnimationFrame(this.rafToken);
			this.beatParticles && this.beatParticles.destroy();

			this.beatsCounter = 0;
			this.lastPlayingDate = 0;
			this.songIsInProgress = false;
		},

        ///////////////////////////////////////////////////////////////////////////////////////
        /////////                   RENDER UTILS                            ///////////////////
        ///////////////////////////////////////////////////////////////////////////////////////

        initHUD: function() {
        	this.players.clearPlayerClasses();
			this.players.clearPlayerScores();
			this.players.resetPlayerFeedbacks();

			this.lyrics.initLyrics();
			this.racetrack.showRaceTrack();

			this.pictos.initPictos();
			this.pictos.show(this.animate);

			this.goldMove.show();

			if (this.players.isManyMode) {
				this.balloons.show();
			}
        },

        clearHUD: function() {
			this.players.hideWinnerCrowns();
			this.players.clearPlayerStars();
			this.players.clearPlayerFeedbackElem();

			this.lyrics.hide();            
			this.racetrack.hideRaceTrack();
			this.pictos.hide(this.animate);         
			this.goldMove.hide();

			if (this.players.isManyMode) {
				this.balloons.hide();
			}
        },

        updateHUD: function(extrapolatedTime) {
            this.updateBeats(extrapolatedTime); // beats
            this.goldMove.update(extrapolatedTime); // goldmoves
            this.pictos.renderPictos(extrapolatedTime); // pictos
            this.lyrics.updateLyrics(extrapolatedTime); // lyrics

            if (!this.players.isManyMode) {
                this.racetrack.updateRacetrack();
            }
        },


		///////////////////////////////////////////////////////////////////////////////////////
		/////////					RENDER UTILS 							///////////////////
		///////////////////////////////////////////////////////////////////////////////////////


		// Called by the main game loop during dance. This function sends the 'songStart' message the first time it is
		// called for each dance. Subsequent times it just adds a video delay sample to the sample smoother.
		// Arg types              Number
		updatePosition: function(currentPosition) {

			var expectedPosition = Date.now() - this.startOfSong;
			var diff = (expectedPosition - currentPosition) || 0;
			this.smoothedVideoDelay.addSample(diff);

			this.core.isDebug && this.core.debug.displaySmoothedDiff(this.smoothedVideoDelay.getAverage());
		},

		// Sends the average video delay to the server
		updateVideoDelay: utils.throttle(function() {
			var p = this.core.inGameVideoPlayer;
			if (!this.isBuffering && 
				p !== null && 
				p.getState() === p.states.PLAYING) {
					var delay = this.smoothedVideoDelay.getAverage();
					if (!this.lastEmittedDelay|| Math.abs(delay - this.lastEmittedDelay) > 10) {
						this.lastEmittedDelay = delay;
						this.core.ws.sendReadable({ func: 'currentVideoDelay', delay: delay });
					}
			}
		}, 2000),

		// During dance, the whole game pulsates "to the beat". For instance, player feedback is only shown on the beat
		// and a lot of ambient animations (pictos beat indicator, star animations) are re-triggered on each beat.
		updateBeats: function(elapsedTime) {
			if (elapsedTime <= this.songBeats[this.beatsCounter]) { 
				return; 
			}

			this.players.updateFewModeFeedback();
			this.beatsCounter++;
			
			var fadeOutTime = FADE_OUT_CONST * (this.songBeats[this.beatsCounter] - elapsedTime);
			this.core.jBeat.css('animation-duration', fadeOutTime + 's');

			// Re-trigger the beat animations
			device.isChromecast || this.core.jHUD.removeClass('beat').forceRepaint().addClass('beat');
		},

		// Called when the video has ended and we want to move on to the after dance state.
		requestResults: function(wasPlayedThrough) {
			console.log('%cÃ¢Å“â€', 'color:#FF0000; background:#CCFF00', 'Video ended, requesting results!');
			
			this.core.reqResults();
			this.lastEmittedDelay = 0; // reset currentVideoDelay
			this.danceTransition(true);

			ga('send', 'event', 'video', 'finished', wasPlayedThrough ? 'completely' : 'prematurely');
		},


        ///////////////////////////////////////////////////////////////////////////////////////
        /////////					PLAYERS HANDLING						///////////////////
        ///////////////////////////////////////////////////////////////////////////////////////


		addPlayer: function(player) {
			this.players.add(player);
			if (this.core.state !== 'dance') {
				return;
			}
			// When the web has been the only player and then a player joins during the dance.. (songIsInProgress so we dont show during video ad/tutorial)
			if (this.core.countPlayers() === 1 && this.songIsInProgress) {
				this.racetrack.showRaceTrack(); // We need to show the racetrack
			}
			this.racetrack.updateTracks();
		},

		removePlayer: function(player) {
			this.players.remove(player);
			if (this.core.state !== 'dance') {
				return;
			}
			this.racetrack.updateTracks();
			if (this.core.countPlayers() === 0) {
				this.core.jRaceTrack.find('.star').hide();
			}
		},

		switchToManyMode: function() {
			this.balloons.show();
			
			if (this.core.state !== 'dance') {
				this.core.gui.showSwipeTip();
			}

			// If we are dancing change the racetrack type
			this.racetrack.switchDisplayMode(true);
		},

		switchToFewMode: function() {
			// Remove balloons, swipe tip and player count
			this.balloons.hide();

			if (this.core.state !== 'dance') {
				this.core.gui.hideSwipeTip();
			}

			// If we are dancing change the racetrack type
			this.racetrack.switchDisplayMode(false);
		},


        ///////////////////////////////////////////////////////////////////////////////////////
        /////////						TRANSITIONS							///////////////////
        ///////////////////////////////////////////////////////////////////////////////////////



		// Triggers the white stripes transition effect. The isIn argument controls the direction of the animation; if
		// true it will make the stripes animate in, if false, they are assumed to already be on screen and are animated
		// out.
		// Returns a Promise that is resolved when the transition is complete.
		// Arg types               Boolean
		danceTransition: function (isIn) {
			console.log('danceTransition state = ' + this.core.state + ', isIn = ' + isIn);

			this.visible = true;
			this.cancelled = false;

			device.isChromecast || this.core.jDt.show();
			return this.dtAnimation(isIn);
		},

		// Private function
		// Show the dance animation.
		dtAnimation: function(isIn) {
			var self = this;

			this.animationDeferred = $.Deferred();
			var resolve = function() {
				return self.animationDeferred.resolve();
			};

			if (device.isChromecast) {
				return resolve();
			} else {
				this.core.jDt.one(env.TRANSITION_END, resolve);
			}

			this.core.jDt.removeClass('animate in out').addClass(isIn ? 'in' : 'out').forceRepaint().addClass('animate');

			if (isIn && this.core.state === "dance") {
				this.core.audio.playSFX('dance-transition-out', {volume: 0.15});
			} else if (!isIn) {
				// Hide dance transition when all animations are done
				_.delay(function() { self.hideDanceTransition(); }, 1450);
			}

			return this.animationDeferred.promise();
		},

		// Hide the dance transition. This will immediately interrupt it, and shoule preferrably not be used while the
		// animation is still ongoing.
		hideDanceTransition: function() {
			// Reject the animation promise if it is interrupted.
			// This has no effect if the deferred has already been resolved.
			this.animationDeferred && this.animationDeferred.reject();

			console.log('hideDanceTransition');
			this.visible = false;
			this.cancelled = true;

			if (device.isChromecast) {
				this.core.jSpinner.hide().css({ opacity: 0 });
				return;
			} else {
				this.core.jSpinner.fadeOut(0.3);
			}

			this.core.jDt.hide();
		},


        ///////////////////////////////////////////////////////////////////////////////////////
        /////////					VIDEO EVENTS HANDLING					///////////////////
        ///////////////////////////////////////////////////////////////////////////////////////


		// Called when the video player starts/stops buffering
		// Arg types                 Boolean
		bufferingStateChanged: function(isBuffering) {
			if (this.isBuffering === isBuffering) {
				return;
			}

            this.isBuffering = isBuffering;
			this.core.jHTML.toggleClass('buffering', isBuffering);
			this.core.jSpinner[isBuffering ? 'fadeIn' : 'fadeOut'](0.1);
		},

		updateVideoPosition: function(time) {
			this.videoTime = time;
		},

		loadAllComponents: function() {

			// Initialize maintenance
			this.maintenance = new Maintenance(this.core);
			this.maintenance.init();

			// Initialize players
			this.players = new Players(this.core);
			this.players.init();

			// Initialize pictos
			this.pictos = new Pictos(this.core);
			this.pictos.init();

			// Initialize lyrics
			this.lyrics = new Lyrics(this.core);
			this.lyrics.init();

			// Initialize balloons
			this.balloons = new Balloons(this.core);
			this.balloons.init();

			// Initialize racetrack
			this.racetrack = new Racetrack(this.core);
			this.racetrack.init();

			// Initialize goldMove
			this.goldMove = new GoldMove(this.core, this.animate);

        }

	};

	return HUD;

});


define('text!html/previewArea/coachSelection/coachSelection.html',[],function () { return '<div class="coach-selection">\n\t<div class="coach-selection__bgImg"><img src="" /></div>\n\t<div class="coach-selection__details">\n\t\t<div class="coach-selection__details-song"></div>\n\t\t<div class="coach-selection__details-artist"></div>\n\t</div>\n\t<div class="coach-selection__back"></div>\n\t<h2 class="coach-selection__title"><%= coach_title %></h2>\n\t<ul class="coach-selection__list"></ul>\n\t<button class="coach-selection__button"><%= coach_button %></button>\n</div>';});


define('text!html/previewArea/coachSelection/coach.html',[],function () { return '<li data-id="<%= id %>" class="coach-selection__item coach">\n\t<img src="<%= src %>" alt="" class="coach__img">\n\t<p class="coach__histogram">\n\t\t<span class="coach__names-list"></span>\n\t\t<span class="coach__number"></span>\n\t</p>\n</li>';});


define('text!html/previewArea/coachSelection/coachPlayerList.html',[],function () { return '<span class="coach__player-list <%= isAnimate ? \'animate\' : \'\' %>">\n\t<%= name %>\n</span>';});

define('coachSelection',[
	'jquery',
	'lodash',
	'loc',
	'device',
	'songs',

	'text!html/previewArea/coachSelection/coachSelection.html',
	'text!html/previewArea/coachSelection/coach.html',
	'text!html/previewArea/coachSelection/coachPlayerList.html'
], function (
	$,
	_,
	loc,
	device,
	songs,

	coachSelectionHtml,
	coachHtml,
	coachPlayerListHtml
) {
	'use strict';

	var coachSelectionTemplate = _.template(coachSelectionHtml);
	var coachTemplate = _.template(coachHtml);
	var coachPlayerListTemplate = _.template(coachPlayerListHtml);


	var displayHistogram = function($coach, nPlayers) {
		var mutiplayerTxt = nPlayers +' '+ loc(1238);

		$coach.find('.coach__number').html(mutiplayerTxt);
		$coach.find('.coach__histogram').addClass('coach__histogram--multiplayer');
	}

	var createPlayerTemplate = function(players, index, listElem) {
		var playerTemplate = _.extend({
			isAnimate: (!device.isChromecast && !!players[index].animateCoach),
			name: players[index].name
		})
		listElem.append(coachPlayerListTemplate(playerTemplate));

		delete players[index].animateCoach; // delete animate player prop from players Obj
	}

	var displayPlayerNames = function($coach, players) {
		var playerLength = players.length;
		if (playerLength === 0) { return; }

		$coach.find('.coach__histogram')
			.addClass("coach__histogram--visible")
			.removeClass('coach__histogram--multiplayer');
		var $list = $coach.find('.coach__names-list');

		if (playerLength > 1) {
			// for multiple players coaches
			if (playerLength > 4) {
				// displays only player numbers in that coach
				displayHistogram($coach, playerLength);
			} else {
				for (var i = 0; i < playerLength; i++) {
					createPlayerTemplate(players, i, $list);
				}
			}
		} else {
			// for single player coach
			var i = 0;
			createPlayerTemplate(players, i, $list);
		}
	}



	function CoachSelection (core, animate, container) {
		this.core = core;
		this.gui = core.gui;

		this.animate = animate;

        this.core.keydownHandler.initState('coachSelection', [{
        	keys : ["ENTER", "SPACE"],
        	callback : core.goToLaunchSong.bind(core)
        }, {
        	keys : ["ESCAPE", "RETURN"],
        	callback : core.goToSongSelection.bind(core)
        }]);

        var previewArea = this.core.gui.previewArea;

        this.onLockStatusChanged = previewArea.setState.bind(previewArea, "coachSelection");
        this.onActivateStatusChanged = previewArea.setState.bind(previewArea, "coachSelection");

        this.init(container);
	}

	CoachSelection.prototype = {
		// Define some constants and cache references to some DOM elements
		init: function(container) {

			// Append coaches list to coaches area
			var coachSelectionHTML = coachSelectionTemplate({
				'coach_title': loc(2717),
				'coach_button': loc(2841) + '!'
			});
			$(coachSelectionHTML).appendTo(container);

			this.$CoachSelection = container.find('.coach-selection');
			this.$CoachSelectionSong = this.$CoachSelection.find('.coach-selection__details-song');
			this.$CoachSelectionArtist = this.$CoachSelection.find('.coach-selection__details-artist');
			this.$BackToSongSelection = this.$CoachSelection.find('.coach-selection__back');
			this.$CoachTitle = this.$CoachSelection.find('h2');
			this.$CoachList = this.$CoachSelection.find('ul');
			this.$LaunchSong = this.$CoachSelection.find('.coach-selection__button');
			this.$CoachBgImg = this.$CoachSelection.find('.coach-selection__bgImg img');
		},

		// Called every time coach selection state is entered
		// Arg types    String
		show: function() {
			var song = songs.getSong(this.core.song);
			this.updateSong(song);
			this.core.gui.previewArea.updateHighscoreDisplay(song.id);

			// Play transition in sfx
			this.$CoachSelection.show(0.4);
			this.addEventListeners();
		},

		// Called every time coach selection state is left. 
		// Arg types    Boolean
		hide: function() {
			this.$CoachBgImg.attr('src', '');
			this.$CoachList.empty();
			this.$CoachSelection.hide(0.4);
			this.removeEventListeners();
		},

        // Private function
        addEventListeners: function() {
            var self = this;

            this.areEventListenersAdded = true;

            // Bind click event to darkened song selection
            this.$BackToSongSelection.on('click', function() {
                self.core.goToSongSelection();
            });
            this.$LaunchSong.on('click', function() {
            	self.core.goToLaunchSong();
            });

            pubsub.subscribe('vipStatusChanged', this.onLockStatusChanged);
            pubsub.subscribe('songLockedStatusChanged', this.onLockStatusChanged);
            pubsub.subscribe('songActivatedStatusChanged', this.onActivateStatusChanged);
        },

        // Private function
        removeEventListeners: function() {
            this.$BackToSongSelection.off();
            this.$LaunchSong.off();

			pubsub.unsubscribe('vipStatusChanged', this.onLockStatusChanged);
            pubsub.unsubscribe('songLockedStatusChanged', this.onLockStatusChanged);
            pubsub.unsubscribe('songActivatedStatusChanged', this.onActivateStatusChanged);

            this.areEventListenersAdded = false;
        },

		updateSong: function(song) {
			if (!song) {
				console.warn('No song-selected, cant enter lobby state');
				return;
			}
			var songId = song.id;

			this.$CoachBgImg.attr('src', song.bkg_image);
			this.$CoachSelectionSong.text(song.name);
			this.$CoachSelectionArtist.text(song.artist);
			this.$CoachTitle.html(song.coaches === 1 ? '' : loc(2717));

			this.$CoachList.empty();

			_.each(this.core.player, function (player) {
				player.coach = -1;
			});

			// Loop through available coaches and append them to preview area
			var url = songs.getSong(songId).base +
					'/assets/common/coaches/' + songId.toLowerCase() + '_coach_[ID]_big.png';


			var classToRemove = this.$CoachList[0] && this.$CoachList[0].className.match(/coach-selection__list--[1-9]/g);

			if (classToRemove) {
				this.$CoachList.removeClass(classToRemove[0])
			}
			
			this.$CoachList.addClass("coach-selection__list--" + song.coaches);

			_.times(song.coaches, function (i) {
				this.$CoachList.append(coachTemplate({
					id: i + 1,
					src: url.replace('[ID]', i + 1)
				}));
			}.bind(this));
		},

		updatePlayersChoice: function() {
			if (!this.core.getCurrentSong()) { return; }

			var $coaches = this.$CoachSelection.find('.coach');
			var playersAndGhosts = _.extend({}, this.core.getVisibleGhosts(), this.core.players);
			var coachGroups = _(playersAndGhosts).groupBy('coach').value();
			var totalPlayerCount = _.size(playersAndGhosts);

			$coaches.find('.coach__names-list').empty();
			_.times(this.core.getCurrentSong().coaches, function (n) {

				var $coach = $coaches.eq(n);
				var players = coachGroups[n] || [];

				if (!players.length) {
					$coach.find('.coach__number, .coach__player-span').empty();
					$coach.find('.coach__histogram').removeClass("coach__histogram--visible");
				} else {
					displayPlayerNames($coach, players);
				}
			}, this);
		}
	};

	return CoachSelection;

});

define('audioPreview',[
    'jquery',
    'loc'
], 
function (
    $,
    loc
) {
    'use strict';

    function AudioPreview(core) {
        this.core = core;
    };

    AudioPreview.prototype = {

        isFetched: function(song) {
            return song.fetched;
        }, 

        fetch: function(song) {
            return this.core.getSongData(song.id);
        }, 

        play: function(song) {
            this.core.audio.playPreview(song.id);
            this.core.audio.setPreviewVolume(0.25); 
        },

        interrupt: function() {
            console.log('interrupt audio');
            this.core.audio.removePreviewElement();
        }
    };

    return AudioPreview;

});
define('videoPreview',[
    'jquery',
    'lodash',
    'device', 
    'loc',
    'songs'
], 
function (
    $,
    _,
    device, 
    loc,
    songs
) {
    'use strict';

    var ERROR_INTERACTION_CODE = 0; // ErrorCode only for absence of user interaction within document 
    var ERROR_PLAY_CODE = 20; // ErrorCode only for "the play() request was interrupted by a call to pause()"
    var ERROR_AUTOPLAY_FAIL_NAME = "NotAllowedError"; // ErrorName only for "request is not allowed by user agent or platform"

    var trackingInfos = {
        songStarted : false,
        currentSongId : "",
        prevSongId: "",
        licence : "unlocked"
    };

    var videoHasStarted = false;

    var fadeOutPreviewVideo = function fadeOutPreviewVideo(previewVideo, dfd) {
        previewVideo.volume = 0;
        dfd.resolve();
    };

    var previewVideoError = function(error) {
        console.warn('ERROR = '+ error.name +':'+ error.message);

        // Will not execute for tablets. (IPAD, Chromecast, Android TV's won't execute this code since video preview is disabled 
        // & disbled for MinimalUI)
        if (error.name === ERROR_AUTOPLAY_FAIL_NAME && !device.isMinimalUI) {
            if (error.code !== ERROR_PLAY_CODE && device.browser === 'Safari') { // Auto-play was prevented, handled for SAFARI
                this.core.handleAutoplayMode();
            } else if (error.code === ERROR_INTERACTION_CODE) { // Auto-play without user interaction was prevented, handled for other browsers
                this.core.handleUserInteractionMode();
            }
        }
    }



    function VideoPreview(core, $container) {
        this.core = core;
        this.init($container);
    };

    VideoPreview.prototype = {
        init : function($container) {
            this._$container = $container;
            this._$view;
        },

        isFetched : function(song) {
            return !!song.previewVideoUrl;
        }, 

        fetch : function(song) {
            var self = this;

            return this.core.getApiReadable('getPreviewVideo', { song: song.id }).then(function(data) { 
                $.cookie.raw = true;
                $.cookie('hlscookie', data.cookie, { 'domain': self.core.topDomainName });
                var song = songs.getSong(data.song);
                song.previewVideoUrl = data.url;
            });

        },

        play : _.debounce(function(song) {

            var loadedMetaDataDfd = $.Deferred();
            videoHasStarted = false;

            // init video element
            this._$view && this._$view.remove(); // Always remove the previous <video> element before creating a new one
            this._$view = $('<video class="video-preview__video" loop playsinline><source></source></video>').appendTo(this._$container);

            //attach events
            this._$view.one("loadedmetadata", function() {
                loadedMetaDataDfd.resolve(this);
            });

            var self = this;
            this._$view.on("playing", function() {
                self.startTracking(song.id);     
                self.startPlayingCB();
                pubsub.publish('previewVideoPlay');
            });


            $.when(loadedMetaDataDfd, song.dataPromise)
            .then(function(video){
                var previewVideo = video.play();

                if (previewVideo !== undefined) {
                    previewVideo.catch(function(error) {
                        previewVideoError.call(self, error);
                    }).then(function() {
                        videoHasStarted = true;
                        self._$view.find('source').attr("volume", 0.2128); // control the volume of preview video
                        
                        if (!!self.core.isDeviceSleepMode) {
                            self.core.audio.muteVolume(true);
                        }

                        // Close the popups if any sort of video starts, which means autoplay will happen
                        if (!self.core.isUserInteractionRequired &&
                            !self.core.isAutoplayDisabled) {
                                self.core.popUp.close();
                        }
                    });
                }
            });

            device.isAndroidTabletApp && this._$view.attr({ 'poster': song.base + '/assets/web/' + song.id.toLowerCase() +'_small.jpg' });
            this._$view.find('source').attr({ 'volume': 0, 'src': song.previewVideoUrl }); // mute the volume of preview video in initial stage, 'http://techslides.com/demos/sample-videos/small.mp4'
            this._$view.load(); // Firefox needs load() after a src-emptying to properly work
        }, device.isIpadAppNewiOS ? 1500 : 0),

        stop : function() {
            this._$container.removeClass('video-preview--visible');
            if (!this._$view || !videoHasStarted) {
                return; 
            }

            this.stopTracking();

            pubsub.publish('videoPreviewPlaying', [ false ]);
            if (this.core.state !== 'dance' && 
                this.core.state !== 'tutorial') {
                    this.core.audio.playMenuMusic();
            }

            var self = this,
                fadeOutDfd = $.Deferred();

            fadeOutPreviewVideo(this._$view[0], fadeOutDfd);

            fadeOutDfd.then(function(){
                self._$view.attr("src", '');
                self._$view.remove();
            });
        },

        interrupt : function() {
            this._$container.removeClass('video-preview--visible');
            if (!this._$view) {
                return; 
            }

            this.interruptTracking();

            clearInterval(this.previewStopToken);
            pubsub.publish('videoPreviewPlaying', [ false ]);

            // Remove preview video element everytime, prevents preview audio overlap during gameplay
            this._$view.remove();
        },

        startPlayingCB : function() {
            var self = this;

            this.core.audio.stopPreview(600);
            this._$container.addClass('video-preview--visible');
            pubsub.publish('videoPreviewPlaying', [ true ]);

            this._$view.on('ended', function() {
                self.stop();
            });
        },


        startTracking : function(song) {
            trackingInfos.currentSongId = song;
            // Don't send tracking data everytime song goes in loop
            // creates huge data burden on server, send the data only once.
            if (trackingInfos.currentSongId === trackingInfos.prevSongId) {
                return;
            }

            trackingInfos.songStarted = true;
            trackingInfos.licence = this.updateLicence(song);

            this.core.ws.sendReadable({
                func: 'songPreviewStarted',
                song: trackingInfos.currentSongId,
                licence : trackingInfos.licence
            });

            trackingInfos.prevSongId = trackingInfos.currentSongId;
        },

        stopTracking : function() {
            trackingInfos.songStarted = false;

            this.core.ws.sendReadable({
                func: 'songPreviewStoped',
                song: trackingInfos.currentSongId,
                licence : trackingInfos.licence,
                previewCompleted : true
            });
        },

        interruptTracking : function() {
            if (!trackingInfos.songStarted) {
                return;
            }

            trackingInfos.songStarted = false;

            this.core.ws.sendReadable({
                func: 'songPreviewStoped',
                song: trackingInfos.currentSongId,
                licence : trackingInfos.licence,
                previewCompleted : false
            });
        },


        updateLicence : function(song) {
            var licence = "unlocked";

            if (this.core.isSongFreeToPlay(song)) {
                licence = "free";
            } else if (this.core.isSongVIP(song)) {
                licence = "vip";
            }

            return licence;
        }
       
    };

    return VideoPreview;

});
define('songPreview',[
    'jquery', 
    'lodash', 
    'loc', 
    'environment',
    'songs', 
    'utils',
    'device',
    'es6Promise',

    'audioPreview',
    'videoPreview'
], function (
    $, 
    _,
    loc, 
    env, 
    songs, 
    utils,
    device,
    es6Promise,

    AudioPreview,
    VideoPreview
) {

    'use strict';

    var Promise = es6Promise.Promise;

    var MediaFactory = function(isVideo, core, container) {

        var media = (isVideo && !device.isOldAndroidTabletApp) ? new VideoPreview(core, container) : new AudioPreview(core);

        return {
            start: function(song) {
                media.play(song);
            },

            stop: function() {
                media.interrupt();
            },

            update: function(song) {
                return $.when(media.isFetched(song) ? song : media.fetch(song))
                .then(function(song) {
                    media.interrupt();
                    return song;
                });
            }
        };
    };


    var COVER_IN = { opacity: 1, transform: 'translateX(0em)' };
    var COVER_OUT_LEFT = { opacity: 0, transform: 'translateX(-0.5em) scale(0.95)' };
    var COVER_OUT_RIGHT = { opacity: 0, transform: 'translateX(0.5em) scale(0.95)' };


    function SongPreview(core, animate, container) {

        this.core = core;
        this.animate = animate;
        
        this.init(container);

    };

    SongPreview.prototype = {

        init: function(container) {
            this.$SongPreview = container;

            this.$HiCover = this.$SongPreview.find('.song-cover--hi-res');
            this.$LoCover = this.$SongPreview.find('.song-cover--low-res');
            this.$PreviewVideoContainer = this.$SongPreview.find('.video-preview');

            this.media = MediaFactory(this.animate, this.core, this.$PreviewVideoContainer);
        },

        show: function() {
            this.$SongPreview.show();
        },

        hide: function() {
            this.$SongPreview.hide();
            this.stopMedia();
        },

        stopMedia: function() {
            this.media.stop();
        },

        update: function(song, direction) {
            var self = this;
            Promise.all([this.media.update(song), this.updateCover(song, direction)])
            .then(function() {
                self.media.start(song);
            });
        },

        updateCover: function(song, direction) {

            var updateDfd;

            if (this.animate && direction) {

                var self = this,
                from = (direction === Node.DOCUMENT_POSITION_PRECEDING) ? COVER_OUT_LEFT : COVER_OUT_RIGHT,
                to = (direction === Node.DOCUMENT_POSITION_PRECEDING) ? COVER_OUT_RIGHT : COVER_OUT_LEFT,
                transitionDuration = this.core.state === 'songSelection' ? 0.15 : 0;

                // Hide the obsolete high-res image
                this.$PreviewVideoContainer.empty();
                this.$SongPreview
                    .addClass('transitioning')
                    .forceRepaint()
                    .to(transitionDuration, to);

                // Use the thumbnail as cover, while the high-res image is loading
                this.$LoCover.css('background-image','url('+ song.base + '/assets/web/' + song.id.toLowerCase() +'_small.jpg)');
                // Start loading the hi-res cover image
                this.$HiCover.removeClass().addClass('song-cover song-cover--hi-res ' + song.id);

                // Transition back in & remove the transitioning class
                return this.$SongPreview.fromTo(transitionDuration, from, COVER_IN)
                    .then(function() {
                        this.removeClass('transitioning');
                    });
            }

            this.$LoCover.css('background-image','url('+ song.base + '/assets/web/' + song.id.toLowerCase() +'_small.jpg)');
            this.$HiCover.removeClass().addClass('song-cover song-cover--hi-res ' + song.id);

            return;
        },
       
    };

    return SongPreview;

});

define('text!html/previewArea/buttons.html',[],function () { return '<button class="song-action__button"><%= dance %></button>';});

define('songAction',[
    'jquery', 
    'lodash', 
    'device', 
    'loc', 
    'environment',
    'songs', 
    'utils',

    'text!html/previewArea/buttons.html'
    ], function (
        $, 
        _,
        device, 
        loc, 
        env, 
        songs, 
        utils,

        buttonsHtml
        ) {
    'use strict';

    var buttonsTemplate = _.template(buttonsHtml);

    var _CLASSES = {
        songDetails : "song-action--select",
        coachSelection : "",
        empty : ""
    }

    var _CBs = {};


  

    function SongAction(core, animate,container) {
        this.core = core;
        this.animate = animate;

        this.init(container);
    };

    SongAction.prototype = {

        init: function(container) {
            this.$SongAction = container;

            $(buttonsTemplate({dance: loc(2841) + '!'})).appendTo(this.$SongAction);

            this.$SongButton = this.$SongAction.find(".song-action__button");
            var jd = this.core;

            _CBs["songDetails"] = function() {
                jd.goToLobby.call(jd);
            }

            _CBs["coachSelection"] = function() {
                jd.goToLaunchSong.call(jd);
            }

            this.$SongThumbnail = null;

        },

        show: function() {
            //always displayed but needed to respect the structure
        },

        hide: function() {
            this.changeView();
        },
        
        changeView: function(name) {

            if (this.state === name) {
                return;
            }

            this.$SongAction
            .removeClass(_CLASSES[this.state || "empty"])
            .addClass(_CLASSES[name || "empty"]);

            if (this.state) {
                this.$SongButton.off('click', _CBs[this.state]);
            }

            if (name) {
                this.$SongButton.on('click', _CBs[name]);
            }

            this.state = name;
        },
        
        update: function(song) {
            this.$SongThumbnail = $(this.core.gui.songSelection.focusedThumbnailEl);

            this.$SongButton.removeClass("song-action__vip");
            this.$SongButton.removeClass("song-action__free");

            if (this.core.isRoomVIP && !songs.isSongVIP(song.id)) {
                return;
            }

            if (songs.isSongFreeToPlay(song)) {
                this.$SongButton.addClass("song-action__free");
                return;
            }

            if (songs.isSongVIP(song.id)) {
                this.$SongButton.addClass("song-action__vip");
            }
        },


        setPulse: function(pulse) {
            var animationDuration = pulse + 's';
            this.$SongButton.css('animationDuration', animationDuration);
        }
    };

    return SongAction;

});

define('text!html/previewArea/songDetails.html',[],function () { return '<div class="song-detail song__infos">\n    <h2 class="song-detail__title">\n        <span class="song-detail__text"></span>\n    </h2>\n    <h3 class="song-detail__artist">\n        <span class="song-detail__text"></span>\n    </h3>\n</div>\n<div class="song-detail song__reward">\n    <div class="reward__wrapper">\n    \t<div class="reward__content">\n        \t<img class="reward__img" src="">\n    \t</div>\n    </div>\n</div>';});

define('songDetails',[
    'jquery',
    'loc',
    'avatars',
    'anime',
    'text!html/previewArea/songDetails.html'
], 
function (
    $,
    loc,
    avatars,
    anime,
    songDetailsHtml
) {
    'use strict';

    var TITLE_SPEED_ANIMATION = 2;
    var songDetailsTemplate = _.template(songDetailsHtml);


    //factory to build animations for the overflow scroll
    var buildOverflowAnimation = function(values, duration) {

        return anime({
            targets : ".song__infos span",
            elasticity : 0,
            easing : "easeInOutQuad",
            loop: true,
            direction : "alternate",
            autoplay : false,
            translateX : function(el, i) {
                var offset = (values[i] > 0 ? (-values[i] -5) : 0) + "%";
                return [0, offset];
            },
            duration : duration * TITLE_SPEED_ANIMATION
        });
    };

    function SongDetails(core, animate, container) {

        this.core = core;
        this.gui = core.gui;

        this.animate = true;

        this.details = {
            title : "",
            artist : "",
            avatarId : "",
            avatarUrl : ""
        };

        this.init(container);
    };

    SongDetails.prototype = {

        init : function(container) {

            this.$SongDetails = container;

            if (!this.core.song){
                this.$SongDetails.addClass("song-details--empty");
            }

            $(songDetailsTemplate()).appendTo(this.$SongDetails);

            this.$SongInfos = this.$SongDetails.find(".song__infos");
            this.$SongTitle = this.$SongDetails.find(".song-detail__title span");
            this.$SongArtist = this.$SongDetails.find(".song-detail__artist span");
            this.$SongReward = this.$SongDetails.find(".reward__wrapper");
            this.$RewardImg = this.$SongReward.find(".reward__img");

            this.newInfosUpdated = false;
            
            var self = this;

            // create animation for displaying the title
            this.updateAnimation = anime.timeline({
                // base of the timeline, to be reused
                targets : ".song__infos span, .reward__content",
                elasticity : 0,
                easing : "easeOutQuad",
            })
            .add({
                translateX : "-120%",
                duration : 800,
                begin : function() {
                    // can't animate the width between 100% and 0 otherwise
                    // to collapse the whole bar when changing the avatar reward
                    self.$SongInfos.addClass("song__infos--hide");
                },
                complete: function() {
                    // once labels are hidden, change their content
                    self.updateInfos();
                    self.$SongInfos.removeClass("song__infos--hide");
                    self.newInfosUpdated = true;
                }
            })
            .add({ // show the new infos
                translateX : 0,
                elasticity : 0,
                duration : 800,
                complete: function(anim){
                    self.newInfosUpdated = false;
                    self.triggerOverflowScroll();
                }
            });

            this.overflowAnimationStore = {
                0 : buildOverflowAnimation([0, 0], 0)
            };

            this.overflowAnimation = this.overflowAnimationStore[0];

        },

        update : function(song) {

            this.details.title      = song.name;
            this.details.artist     = song.artist;
            this.details.avatarId   = song.avatars[0];
            this.details.avatarUrl  = avatars.getAvatarUrl(song.avatars[0]);

            clearTimeout(this.overflowTimeout); //clear the overflow animation

            this.overflowAnimation.pause();
            this.overflowAnimation.seek(0);

            if (this.updateAnimation.completed || this.newInfosUpdated){
                this.updateAnimation.restart();
            } 
        },

        show : function() {
            this.$SongDetails.removeClass("hidden");
        },

        hide : function() {
            this.$SongDetails.addClass("hidden");
        },

        updateInfos : function() {
            this.$SongTitle.html(this.details.title);
            this.$SongArtist.html(this.details.artist);
            this.$RewardImg.attr("src", this.details.avatarUrl);

            this.updateRewards();
        },

        updateRewards : function() {
            this.updateRewardDisplay();
            this.updateAvatarRewards();
        },

        updateRewardDisplay : function() {
            if (this.core.countPlayers() === 0) { // hide avatar if there are no players
                this.$SongReward.addClass('hidden');
            } else {
                this.$SongReward.removeClass('hidden');
            }
        },

        updateAvatarRewards : function() { // update avatar reward display for each song
            var self = this,
                player = this.core.players[this.core.controller];
            if (!player) { return; }
            
            var mapAvatarData = _.find(player.unlockedAvatars, function(avatar) {
                return avatar === self.details.avatarId;
            });
            if (!mapAvatarData) {
                this.$SongReward.removeClass('reward__unlocked');
                return;
            }

            this.$SongReward.addClass('reward__unlocked');
        },

        // use a function in order to change it more easily later
        // objective : use the beat of the song if animation needed
        triggerOverflowScroll : function() {
            var containerWidth = this.$SongInfos.width();

            var $elemArray = [this.$SongTitle, this.$SongArtist];

            //determine the percentage of the inner text outside of the parent container
            var overflow = $elemArray.map(function($currElem) {
                var deltaWidth = $currElem.width() - containerWidth;
                return Math.max(Math.floor(100 * deltaWidth / $currElem.width()), 0);
            });

            // if any part of the title or artist name doesn't fit, duration will be strictly positive
            var duration = overflow.reduce(function(prev, curr) {
                return Math.max(prev, curr)
            }, 0);

            if (duration < 0.5) {
                // animation is null, nothing happens in most of the cases
                this.overflowAnimation = this.overflowAnimationStore[0];
                return;
            }

            // compute a key in order to limit the number of anims computed and stored
            // might reduce the scale to reuse animations more often
            var key = duration + "-" + overflow.join("-");

            if (!this.overflowAnimationStore.hasOwnProperty(key)) {
                this.overflowAnimationStore[key] = buildOverflowAnimation(overflow, duration * 100); // duration in miliseconds
            }

            // use the key
            this.overflowAnimation = this.overflowAnimationStore[key];
            // wait before starting the overflow scroll
            this.overflowTimeout = setTimeout(this.overflowAnimation.play, 1000);

        }
    };

    return SongDetails;

});




define('text!html/previewArea/sprites.html',[],function () { return '<div class="sprites-container">\n    <div class="sprite sprite--tape">\n        <div class="sprite__svg-container">\n            <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n                 width="374px" height="184px" viewBox="0 0 374 184" xml:space="preserve">\n                <g stroke-width="2px" stroke-linecap="round" fill="none">\n                    <path class="color-dark" d="M290.557,104.92l-2.027,0.9l0.05,0.094c1.411,2.686,0.847,5.645-1.276,6.607l-17.404,7.889\n                        c-0.392,2.39-1.76,3.424-3.898,4.59c-2.75,1.5-95.5,44.25-99,46c-2.452,1.227-4.29,0.12-5.944-1.254l-19.745,8.949\n                        c-3.088,1.4-6.754-0.226-8.163-3.627L94.616,82.012c-1.204-2.906,0.113-5.98,2.904-7.085c-0.392-2.486,1.006-4.85,3.584-5.653\n                        l146.389-45.587c2.144-0.668,4.903,0.732,6.178,3.128l38.201,71.777C293.236,101.155,292.654,103.988,290.557,104.92z M213,74\n                        c-1.5-2.833-1.167-3.833-3-3s-12,5-12,5s5.835,4.38,6.859,16.411l14.846-5.746C217.369,82.252,213.959,75.812,213,74z"/>\n                    <path class="color-light" d="M274.072,83.369l-135.516,54.154c-2.847,1.272-6.265-0.138-7.613-3.15l-25.484-56.786\n                        c-1.242-2.777,0.092-5.755,2.96-6.653l136.498-42.759c1.998-0.626,4.571,0.687,5.76,2.934l24.621,46.324\n                        C276.57,79.837,276.027,82.494,274.072,83.369z M201.859,93.411l19.846-7.746C219.369,81.252,214.959,73.812,214,72\n                        c-1.5-2.833-1.167-3.833-3-3s-17,7-17,7S200.835,81.38,201.859,93.411z M246,33L127,71v1l119-38V33z M249,38L130,77v1l119-39V38z\n                         M252,43L133,83v1l119-40V43z"/>\n                    <path class="color-mid" d="M247.789,79.786l-88.885,33.052c-1.197,0.499-2.599-0.131-3.123-1.406l-9.904-21.043\n                        c-0.483-1.176,0.106-2.405,1.307-2.747l89.158-31.275c0.838-0.239,1.889,0.34,2.356,1.294l9.67,19.659\n                        C248.868,78.339,248.611,79.444,247.789,79.786z M214,72c-1.5-2.833-1.167-3.833-3-3s-17,7-17,7s6.835,5.38,7.859,17.411\n                        l19.846-7.746C219.369,81.252,214.959,73.812,214,72z"/>\n                    <path class="color-dark" id="change-stroke" d="M221.326,86.038c0.662-0.278,0.869-1.174,0.467-2.001l-7.797-15.944\n                        c-0.377-0.773-1.225-1.243-1.9-1.05l-35.889,12.365c-0.969,0.277-1.444,1.274-1.055,2.228l7.987,17.066\n                        c0.422,1.034,1.553,1.546,2.518,1.141l19.202-7.432C203.835,80.38,198,76,198,76s10.167-4.167,12-5s1.5,0.167,3,3\n                        c0.959,1.812,4.369,8.252,6.705,12.665L221.326,86.038z"/>\n                    <path class="color-light" d="M343.866,32.093l20.242-15.868l-29.104,34.497l2.165-16.524L313,57.638l1.41-8.893\n                        l-22.508,18.693l30.715-36.059l-0.201,12.738l24.219-26.624L343.866,32.093z M301.566,25.056l-6.332,22.691l-2.269-5.867\n                        l-6.993,19.238l5.846-32.623l4.345,7.762l5.244-24.633l3.452,9.795l6.62-16.733l-5.425,31.111L301.566,25.056z M83.941,47.349\n                        L71.135,27.748l-1.059,11.506L55.614,11.413l11.301,13.872l0.355-10.301l12.354,21.761l1.812-8.642l15.315,29.149L84.346,41.118\n                        L83.941,47.349z M93,65L66,54l4,8L40,47l7,15L9,38l24,9l-7-13l31,18l-4-12L93,65z"/>\n                    <path class="color-dark" d="M117.161,85.567l-3.395-9.406l10.073-3.062l3.395,9.407L117.161,85.567z M119,77v6h1v-3h1\n                        l2,1h1L119,77z"/>\n                    <path class="color-light" d="M259.994,116.838c-1.568,0.548-3.283-0.277-3.832-1.844\n                        c-0.549-1.568,0.277-3.283,1.844-3.832c1.568-0.549,3.283,0.277,3.832,1.844C262.386,114.574,261.561,116.289,259.994,116.838z\n                         M249.996,26.916c-0.782,0.273-1.639-0.138-1.912-0.92c-0.273-0.782,0.139-1.638,0.92-1.912c0.782-0.274,1.639,0.138,1.912,0.92\n                        C251.189,25.786,250.777,26.642,249.996,26.916z M243.661,121.889c-1.043,0.364-2.185-0.186-2.55-1.228\n                        c-0.364-1.043,0.186-2.185,1.228-2.55c1.043-0.364,2.185,0.185,2.55,1.228C245.253,120.382,244.703,121.523,243.661,121.889z\n                         M216.991,119.831c-1.563,0.548-3.275-0.276-3.822-1.84c-0.548-1.563,0.276-3.275,1.839-3.822c1.564-0.548,3.276,0.276,3.823,1.84\n                        C219.379,117.572,218.555,119.284,216.991,119.831z M199.661,139.889c-1.043,0.364-2.185-0.186-2.55-1.228\n                        c-0.364-1.043,0.186-2.185,1.228-2.55c1.043-0.364,2.185,0.186,2.55,1.228C201.253,138.382,200.703,139.523,199.661,139.889z\n                         M181.991,150.831c-1.563,0.548-3.275-0.276-3.822-1.84c-0.548-1.563,0.276-3.275,1.84-3.822c1.563-0.548,3.275,0.276,3.822,1.84\n                        C184.379,148.572,183.555,150.284,181.991,150.831z M143.661,167.889c-1.043,0.364-2.184-0.186-2.549-1.228\n                        c-0.365-1.043,0.184-2.185,1.227-2.55c1.042-0.364,2.184,0.186,2.549,1.228C145.253,166.382,144.703,167.523,143.661,167.889z\n                         M101.661,74.888c-1.043,0.365-2.184-0.185-2.549-1.227c-0.365-1.043,0.185-2.184,1.227-2.549\n                        c1.043-0.365,2.184,0.184,2.549,1.227C103.253,73.382,102.703,74.523,101.661,74.888z"/>\n                    <path  class="color-dark" d="M227.549,64.794c4.189-1.557,8.9,0.396,10.641,4.321c1.742,3.925-0.09,8.509-4.209,10.287\n                    c-4.254,1.834-9.275,0-11.088-4.149c-1.734-3.973,0.162-8.446,4.123-10.23L227.549,64.794z M227.068,65 M237.887,71H235\n                    l2.688-0.896c-0.082-0.273-0.156-0.546-0.278-0.814c-0.741-1.63-2.089-2.855-3.691-3.572L234,66l-2,2l0.866-2.597\n                    c-1.224-0.385-2.552-0.489-3.866-0.246V68l-1.566-2.35c-1.752,0.737-3.084,2.015-3.807,3.559L226,70h-2.682\n                    c-0.307,0.956-0.373,1.978-0.215,3H227l-3.686,0.921c0.08,0.262,0.151,0.524,0.267,0.782c0.767,1.713,2.181,2.955,3.851,3.651\n                    L229,76v2.835c1.258,0.238,2.586,0.167,3.869-0.228L232,76l2,2l-0.323,0.323c1.722-0.747,2.972-2.036,3.677-3.539L235,74h2.654\n                    C237.964,73.038,238.037,72.017,237.887,71z"/>\n                    <path class="color-dark" d="M170.717,88.283c1.543,0.902,2.817,2.241,3.572,3.927\n                    c1.886,4.212-0.099,9.133-4.56,11.042c-4.609,1.968-10.048-0.001-12.012-4.454c-1.963-4.454,0.359-9.502,5.045-11.225\n                    c2.524-0.931,5.223-0.691,7.446,0.427L170.717,88.283z M173.837,94H170l3.542-0.886c-0.063-0.175-0.097-0.354-0.175-0.526\n                    c-0.707-1.562-1.936-2.763-3.407-3.548L168,91l0.82-2.459c-1.507-0.532-3.178-0.669-4.82-0.271V91l-0.837-2.512\n                    c-0.02,0.008-0.041,0.009-0.061,0.016c-1.595,0.581-2.879,1.591-3.763,2.835L161,93l-2.216-0.739\n                    c-0.737,1.443-0.981,3.101-0.623,4.739H162l-3.577,0.895c0.06,0.166,0.115,0.332,0.188,0.496c0.708,1.588,1.929,2.811,3.398,3.596\n                    L164,99l-0.872,3.489c1.523,0.544,3.223,0.646,4.872,0.247V99l0.868,3.475c0.147-0.054,0.294-0.101,0.438-0.162\n                    c1.417-0.599,2.535-1.545,3.335-2.672L170,97l3.25,1.625C173.949,97.201,174.185,95.585,173.837,94z"/>        \n                </g>\n            </svg>\n        </div>\n        <div class="sprite-description"><%=locNbPlayed%></div>\n    </div>\n    <div class="sprite sprite--stars">\n        <div class="sprite__svg-container">\n            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" preserveAspectRatio="xMidYMid" x="0" y="0" width="270" height="185" viewBox="-5 -5 275 190">\n              <path d="M248.129,36.615 L239.631,32.144 L231.403,37.211 L233.234,27.787 L225.724,21.685 L235.464,20.391 L239.056,11.734 L239.056,11.734 L239.056,11.734 L239.056,11.734 L239.056,11.734 L243.128,20.118 L252.922,20.716 L245.770,27.341 L248.129,36.615 ZM219.413,12.477 L215.886,9.563 L211.537,11.063 L213.329,6.913 L210.426,3.348 L215.107,3.736 L217.646,0.116 L217.646,0.116 L217.646,0.116 L217.646,0.116 L218.716,4.384 L223.234,5.648 L219.233,7.973 L219.413,12.477 ZM215.731,31.844 L215.731,31.844 L215.731,31.844 L220.093,46.562 L235.650,50.109 L222.462,59.015 L223.844,74.734 L211.370,65.223 L196.858,71.310 L202.236,56.449 L191.767,44.542 L207.728,44.994 L215.731,31.844 L215.731,31.844 ZM223.015,90.619 L194.148,111.110 L198.108,146.005 L169.799,125.490 L137.827,139.780 L148.968,106.444 L124.989,80.496 L160.555,80.678 L177.638,51.014 L177.638,51.014 L177.638,51.014 L177.638,51.014 L177.638,51.014 L188.176,83.531 L223.015,90.619 ZM160.152,68.633 L147.844,64.409 L138.013,72.998 L138.358,59.892 L127.000,53.258 L139.684,49.437 L142.543,36.991 L142.543,36.991 L142.543,36.991 L142.543,36.991 L149.828,47.437 L163.003,46.159 L154.951,56.620 L160.152,68.633 ZM100.218,100.681 L84.834,118.446 L82.145,95.014 L60.199,86.043 L81.876,76.057 L83.842,53.171 L83.842,53.171 L83.842,53.171 L83.842,53.171 L99.480,69.951 L122.676,64.371 L110.941,85.025 L123.255,105.118 L100.218,100.681 ZM50.928,134.513 L41.642,128.209 L31.208,132.859 L34.804,122.329 L26.926,114.295 L38.556,114.174 L44.100,104.767 L44.100,104.767 L44.100,104.767 L44.100,104.767 L47.592,114.932 L58.994,116.985 L49.584,123.568 L50.928,134.513 ZM39.593,65.642 L28.851,60.674 L18.872,67.386 L20.719,55.720 L11.126,48.693 L23.151,46.515 L27.216,35.683 L27.216,35.683 L27.216,35.683 L27.216,35.683 L32.646,45.716 L44.822,45.857 L36.249,54.413 L39.593,65.642 ZM27.216,35.683 L27.216,35.683 L27.216,35.683 L27.216,35.683 ZM12.453,153.634 L14.170,158.836 L8.953,156.640 L4.217,159.885 L4.993,154.420 L0.310,151.249 L6.075,150.097 L7.926,144.997 L7.926,144.997 L7.926,144.997 L7.926,144.997 L10.635,149.617 L16.496,149.545 L12.453,153.634 ZM7.926,144.997 L7.926,144.997 L7.926,144.997 L7.926,144.997 ZM24.107,89.736 L26.646,86.116 L26.646,86.116 L26.646,86.116 L26.646,86.116 L26.646,86.116 L27.716,90.384 L32.234,91.648 L28.233,93.973 L28.413,98.477 L24.886,95.563 L20.537,97.063 L22.329,92.913 L19.426,89.348 L24.107,89.736 ZM77.328,119.024 L77.328,119.024 L77.328,119.024 L77.328,119.024 L90.948,135.124 L112.505,131.033 L100.806,149.472 L111.225,168.466 L90.259,163.368 L75.337,178.992 L73.909,157.361 L54.146,148.150 L74.504,139.947 L77.328,119.024 ZM130.847,154.272 L136.029,147.126 L136.029,147.126 L136.029,147.126 L136.029,147.126 L136.029,147.126 L136.029,147.126 L138.086,155.562 L147.138,158.072 L139.046,162.656 L139.311,171.558 L132.286,165.790 L123.512,168.743 L127.206,160.546 L121.448,153.494 L130.847,154.272 ZM136.029,147.126 L136.029,147.126 L136.029,147.126 L136.029,147.126 ZM228.733,101.826 L233.364,81.580 L233.364,81.580 L233.364,81.580 L233.364,81.580 L233.364,81.580 L245.164,98.572 L266.505,96.492 L253.462,113.511 L261.887,133.052 L241.950,126.181 L226.026,140.154 L226.584,118.833 L208.188,108.041 L228.733,101.826 Z" stroke="#ffd200" stroke-width="2px" fill="none" stroke-linecap="round"/>\n            </svg>\n        </div>\n        <div class="sprite-description"><%=locNbStars%></div>\n    </div>\n</div>';});

define('sprites',[
    'jquery', 
    'lodash',
    'loc',
    'songs', 
    'utils',
    'anime',

    'text!html/previewArea/sprites.html'

    ], function (
        $, 
        _,
        loc,
        songs, 
        utils,
        anime,

        spritesHtml
    ) {
    'use strict';

    var STATS_INTERVAL_CONST = 300000; // every 5mins interval stats will be updated
    var spritesTemplate = _.template(spritesHtml);

    var setCustomDashoffset = function(e){
        if (e.id === "change-stroke"){
            return anime.setDashoffset(e);
        }
        return anime.setDashoffset(e) + 2;
    }


    // builds the svg line drawing animation
    var imageStep = function(targetName, duration) {
        return {
            targets : targetName,
            strokeDashoffset: [{
                value :  setCustomDashoffset, 
                duration : 0
            }, {
                value : 0,
                duration : duration *0.3,
            }, {
                value : setCustomDashoffset,
                duration : duration * 0.35,
                delay : duration * 0.35
            }],
            easing: 'easeInOutQuad',
            offset: '-=0'
        };
    };

    // slow blink of the text and of the image on weak devices
    var opacityStep = function(targetName, duration, offset) {
        return {
            targets : targetName,
            opacity : [{
                value :  0, 
                duration : 0
            }, {
                value : 1,
                duration : duration*0.2
            }, {
                value : 0,
                duration : duration*0.2,
                delay : duration*0.6
            }],
            easing: 'easeInOutQuad',
            offset: '-=' + offset
        };
    };

    // builds the animation steps depending on the level of complexity needed
    var buildAnimationStep = function(stepName, duration, index, isAnimated) {

        var steps = [];
        var opacityTarget = stepName;
        var opacityOffset = 0;

        if (isAnimated){
            steps.push(imageStep(stepName + " path", duration));
            opacityTarget += " .sprite-description";
            opacityOffset = duration;
        }
        
        steps.push(opacityStep(opacityTarget, duration, opacityOffset));

        return steps;
    };


    var buildAnimation = function(totalDuration, spritesSteps, isAnimated) {

        var nSteps = spritesSteps.length;
        var stepDuration = totalDuration / nSteps;

        var animSteps = spritesSteps.map(function(step, i) {
            return buildAnimationStep(step, stepDuration, i, isAnimated);
        }).reduce(function(prev, curr){
            return prev.concat(curr);
        }, []);

        var anim = anime.timeline({
            loop : true,
            elasticity : 0,
            autoplay : false,
        });

        for (var i = 0; i < animSteps.length; ++i) {
            anim.add(animSteps[i]);
        }

        return anim;
    };

    function Sprites(core, animate, container) {

        this.core = core;
        this.animate = animate;
        this.init(container);
    };

    Sprites.prototype = {

        init : function(container) {

            this.currentSocialStats = {};

            var locNbPlayed = loc(3460, { '[number]': '<span class="sprite-val sprite-val--played"></span>'});
            var locNbStars = loc(3459, { '[number]': '<span class="sprite-val sprite-val--stars"></span>'});

            this.$SocialStatsArea = $(spritesTemplate({
                locNbPlayed : locNbPlayed,
                locNbStars : locNbStars
            }));
            this.$SocialStatsArea.appendTo(container);

            this.$timesPlayedValue = this.$SocialStatsArea.find(".sprite-val--played");
            this.$nbStarsValue = this.$SocialStatsArea.find(".sprite-val--stars");


            if (this.animate) {
                 // build animation
                //initialise the stroke offset
                this.$SocialStatsArea
                .find("path")
                .map(function(i, e) {
                    e.setAttribute("stroke-dashoffset", setCustomDashoffset(e));
                });
            }

            this.animation = buildAnimation(6000, [".sprite--stars",".sprite--tape"], this.animate);
        },

        show : function() {
            this.$SocialStatsArea.show();
            this.start();
        },

        hide : function() {
            this.$SocialStatsArea.hide();
            this.stop();
        },

        start : function() {
            this.animation.seek(0.25* this.animation.duration);
            this.animation.play(); 
        },

        stop : function() {
            this.animation.pause();
        },

        refresh : function(songID) {
            var stats = this.currentSocialStats[songID];
            this.animation.pause();
            if (this.animation.progress < 40 || this.animation.progress > 90) {
                this.animation.seek(0);
            } else {
                this.animation.seek(0.5 * this.animation.duration);
            }

            this.animation.play();

            this.$nbStarsValue.html(stats.stars);
            this.$timesPlayedValue.html(stats.played);
        },

        update : function(song) {
            var songID = song.id,
                self = this;
            
            if (!this.currentSocialStats[songID] || (Date.now() - this.currentSocialStats[songID].time) > STATS_INTERVAL_CONST) {
                this.core.getApiReadable('getSocialData', {'song': songID}).then(function(data) {
                    self.core.gui.previewArea.updateSocialStatsData(data);
                });
            } else if (!!this.currentSocialStats[songID]) {
                this.refresh(songID);
            } else { console.log('no social stats for this song'); }
        },

        // Called when the server responds with social stats data for a song. Save the data and it move on to
        // kill the current social stat and show a new one
        // Arg types     
        updateData : function(stats) {
            var songID = this.core.song;
            var statsData = stats.data.communityStats;

            var data = statsData.reduce(function(prev, curr) {
                var text = curr.oasisText;
                var value = utils.formatNumber(curr.oasisParams['[number]']);

                if (!value) { return prev; }

                if (text === '1028' || text === '1054') { // 1028: Web_Social_Total_Stars ; 1054: Web_Social_One_Star
                    prev["stars"] = value;
                } else if (text === '1027' || text === '1053') { // 1027: Web_Social_Song_Played_Times ; 1053: Web_Social_Song_Played_One_Time
                    prev["played"] = value;
                }

                return prev;
            }, {time: Date.now()});

            this.currentSocialStats[songID] = data;
            this.refresh(songID);
        }

    };

    return Sprites;

});

define('text!html/previewArea/highscore.html',[],function () { return '<div class="score__display">\n    <div class="score__number"></div>\n    <div class="score__owner"><span class="owner-name"></span><span class="highscore-loc"><%=highscore%></span></div>\n</div>\n<div class="score__stars">\n<% for (var s = 0; s< 5;++s){ %>\n    <div class="star star-<%=s+1%>"></div>\n<% } %>\n</div>';});

define('highscoreDisplay',[
    'jquery', 
    'lodash', 
    'loc', 
    'environment',
    'songs', 
    'utils',

    'text!html/previewArea/highscore.html',

], function (
    $, 
    _,
    loc, 
    env, 
    songs, 
    utils,
    //animationUtils,

    highscoreHtml
) {

    'use strict';

    var highscoreTemplate = _.template(highscoreHtml);


    function HighscoreDisplay(core, animate, container) {
        this.core = core;
        this.animate = animate;
        
        this.init(container);
    };

    HighscoreDisplay.prototype = {

        init: function(container) {
            this.$highscore = container;

            $(highscoreTemplate({
                highscore : " hi-score" /*+ loc(2737)*/
            })).appendTo(this.$highscore);

            this.$number = this.$highscore.find(".score__number");
            this.$stars = this.$highscore.find(".score__stars");
            this.$ownerWrapper = this.$highscore.find(".score__owner");
            this.$owner = this.$highscore.find(".owner-name");

            var self = this;
        },

        show: function() {
            this.$highscore.show();
        },

        hide: function() {
            this.$highscore.removeClass("superstar megastar");
            this.$highscore.hide();
        },

        update: function(songId) {

            var player = this.core.miscUtils.findHighScorePlayer(songId, this.core.players);

            if (!player) {
                this.hide();
                return;
            } else {
                this.show();
            }

            this.$owner.html(player.name);
          
            var score = player.tempHighscore;
            var scoreFormatted = utils.formatNumber(score);
            this.$number.html(scoreFormatted);

            this.updateStarsAndAchievements(player, songId, score);
        },

        updateStarsAndAchievements: function(player, song, score) {
            this.$stars.attr("data-stars", Math.min(5, Math.floor(score / 2000)));

            for(var i in player.highscores) {
                var h = player.highscores[i];
                if (h.song === song) {
					if (!!h.achievements) {
						if (!!h.achievements.megastar) {
							this.$highscore
										.removeClass("superstar")
										.addClass("megastar");
						} else if (!!h.achievements.superstar && !h.achievements.megastar) {
							this.$highscore
										.removeClass("megastar")
										.addClass("superstar");
						}
					} else {
						this.$highscore.removeClass("superstar megastar");
					}
                }
            }
        }
      
    };

    return HighscoreDisplay;

});
define('previewArea',[
    'jquery', 
    'lodash', 
    'device', 
    'loc', 
    'environment',
    'songs', 
    'utils',
    'beatGenerator',

    'coachSelection',
    'songPreview',
    'songAction',
    'songDetails',
    'sprites',
    'highscoreDisplay'

], function (
    $, 
    _,
    device, 
    loc, 
    env, 
    songs, 
    utils, 
    beatGenerator,

    CoachSelection,
    SongPreview,
    SongAction,
    SongDetails,
    Sprites,
    HighscoreDisplay
   
) {
    'use strict';

    // Fake some beat info for the theme loop
    var THEME_PULSE = 0.5505;
    var THEME_DURATION = 105.688;
    var PREVIEW_AUDIO_SONG_INFO = {
        pulse: THEME_PULSE,
        beats: _.times(Math.floor(THEME_DURATION / THEME_PULSE), function (i) {
            return i * THEME_PULSE * 1000;
        }),
        dataPromise: $.Deferred().resolve(),
    };


    function getMenuSplashImageUrl(menuId) {
        return cdn + '/web/img/banners/banner_preview_' + menuId + '.png';
    };

    // Controls the content of the middle part of the screen (the "preview area") during song selection. Shows
    // highscores, the selectes song's album cover, title and artist name, and sprites
    function PreviewArea(core) {
        this.core = core;
        this.gui = core.gui;


        this.animate = !device.isWeak;
        this.isVIP = this.core.isRoomVIP;

        this.boundOnPreBeat = this.onPreBeat.bind(this);
        this.boundUpdateBeat = this.updateBeat.bind(this);


        this.$PreviewArea = this.core.jPreviewArea;
        // Store references elements, so thay they don't have to be queried all the time
        this.$MenuSplash = this.$PreviewArea.find('.menu-splash');
    };

    PreviewArea.prototype = {
        //TODO : simplify for Chromecast
        init: function(isSimple) {
            console.log('%cÃ¢Å“â€', 'color:#339933; background:#CCFF00', 'PreviewArea initialized');

            this.songPreview        = new SongPreview(this.core, this.animate, this.$PreviewArea.find(".song-preview"));
            this.songAction         = new SongAction(this.core, this.animate, this.$PreviewArea.find(".song-action"));
            this.songDetails        = new SongDetails(this.core, this.animate, this.$PreviewArea.find(".song-details"), this.core.isRoomVIP);
            this.highscoreDisplay   = new HighscoreDisplay(this.core, this.animate, this.$PreviewArea.find(".highscore-display"));

            this.coachSelection     = new CoachSelection(this.core, this.animate, this.core.jCoverFlow);

            this.$InfoPanel = $(this.$PreviewArea.find(".info-panel"));
            this.sprites            = new Sprites(this.core, this.animate && !device.isAndroidTabletApp, this.$InfoPanel);

            this.setState("");
        },

        show: function() {
            this.setState("songDetails");
            pubsub.subscribe('preBeat50', this.boundOnPreBeat);

            if (this.animate) {
                pubsub.subscribe('previewAudioPlay', this.boundUpdateBeat);
            }
        },

        hide: function() {
            this.setState("");
            pubsub.unsubscribe('preBeat50', this.boundOnPreBeat);

            if (this.animate) {
                pubsub.unsubscribe('previewAudioPlay', this.boundUpdateBeat);
            }
        },

        initState: function(currentState) {

            if (!currentState || currentState === "menu") {
                this.songPreview.hide();
                this.songAction.hide();
                
                this.songDetails.hide();
                this.coachSelection.hide();
                this.sprites.hide();

                currentState && this.$MenuSplash.removeClass('hidden');

                return;
            }

            this.songAction.show();
            this.songAction.changeView(currentState);
            this.songPreview.show();
            this.songDetails.show();
            this.$InfoPanel.show();

            if (currentState === "songDetails") {
                this.sprites.show();
                this.sprites.start();
            } else if (currentState === "coachSelection") {
                this.coachSelection.show();
            }
        },

        tearDownCurrentState: function(currentState, newState) {
            if (!currentState) {
                return;
            }

            if (currentState === "menu") {
                this.$MenuSplash.addClass('hidden');
            }

            if (currentState === "songDetails") {
                this.sprites.hide();
            } else if (currentState === "coachSelection") {
                this.coachSelection.hide();
            }
        },

        setState: function(state) {
            if (state === this.currentViewState) {
                return;
            }
            this.tearDownCurrentState(this.currentViewState, state);
            this.currentViewState = state;
            this.initState(this.currentViewState);
        },

        
        // Called when a menu item has been focused. Update the menu item preview image.
        // Arg types          String
        updateMenu: function(menuId) {
            this.setState("menu");
            this.$MenuSplash.css('background-image', 'url(' + getMenuSplashImageUrl(menuId) + ')');
        },

        // Called when a song has been focused. Update title, artist name, highscores, sprites, mosaic, etc.
        // Arg types          String, Number
        updateSong: function(songId, direction) {
            var song = songs.getSong(songId);
            if (!song) { return; }

            this.updateBeat(songId);
            this.core.getSongData(songId);

            // Tag the preview area, depending on the state of the selected song
            this.$PreviewArea.removeClass('no-song');

            //update cover + preview video
            this.songPreview.update(song, direction);
            this.songDetails.update(song);
            this.songAction.update(song);

            this.sprites.update(song);
            this.highscoreDisplay.update(song.id);


			//switch from menu to song
            if (this.currentViewState === 'menu') {
                this.setState("songDetails");
            }
            
        },

        updateCoachSelectionChoice: function() {
            this.coachSelection.updatePlayersChoice();
        },
    
        updateSocialStatsData: function(stats) {
            this.sprites.updateData(stats);
        },

        updateHighscoreDisplay: function(songId) {
            if (!songId) {
                return;
            }
            this.highscoreDisplay.update(songId);
        },

        // Add beat state classes to the song selection container element. This will trigger beat animations on e.g. the
        // cover image and the focuse thumbnail.
        onPreBeat: function() {
            if (device.isWeak) { return; }

            this.evenBeat = !this.evenBeat;
            this.$PreviewArea
                        .removeClass('pre-beat even odd')
                        .forceRepaint()
                        .addClass('pre-beat')
                        .addClass(this.evenBeat ? 'even' : 'odd');
        },


         // Called when the preview audio for the current song has started playing. Start the beat generator, which will
        // hopefully be in sync with the preview audio.
        updateBeat: function(songId) {
            if (!songId) { return; }
            
            var self = this;
            var song = PREVIEW_AUDIO_SONG_INFO;

            if (songId !== env.SONG_MENU_ID) {
                song = songs.getSong(songId);
            }

            // Start the beat as soon as the beats list has been fetched from the server
            $.when(song.dataPromise).then(function() {
                beatGenerator.start(song);
                self.songAction.setPulse(song.pulse);
            });
        }

    };

    return PreviewArea;

});
define('language',[],function () {
	'use strict';

	// Singleton.
	// This object contains information about all the languages.
	var language = {};

	language = {
        'br' : 'PortuguÃƒÂªs',
        'da' : 'Dansk',
        'de' : 'Deutsch',
        'en' : 'English',
        'es' : 'EspaÃƒÂ±ol',
        'fr' : 'FranÃƒÂ§ais',
        'it' : 'Italiano',
        'ja' : 'Ã¦â€”Â¥Ã¦Å“Â¬Ã¨ÂªÅ¾',
        'ko' : 'Ã­â€¢Å“ÃªÂµÂ­Ã¬â€“Â´',
        'nl' : 'Nederlands',
        'no' : 'Norsk',
        'ru' : 'PÃ‘Æ’Ã‘ÂÃ‘ÂÃÂºÃÂ¸ÃÂ¹',
        'fi' : 'Suomalainen',
        'sv' : 'Svenska'
    }

	return language;
});

define('text!html/jd/dropdown.html',[],function () { return '<div class="dropdown">\n\t<span class="dropdown__txt"></span>\n\t<ul class="menu__dropdown">\n\t</ul>\n</div>';});

define('dropdown',[
    'jquery',
    'language',
    'device',
    'utils',

    'text!html/jd/dropdown.html'
], function (
    $,
    language,
    device,
    utils,
    
    dropdownHtml
) {
    'use strict';

    function Dropdown() {
        console.log('%cÃ¢Å“â€', 'color:#339933; background:#CCFF00', 'Dropdown language initialized');
    };

    Dropdown.prototype = {
        init: function () {
            var self = this;
            this.url = window.location.href;
            this.$html = $('html');

            this.$Parent = $('.dropdown__parent');
            this.$Parent.append(dropdownHtml);

            this.$Dropdown = this.$Parent.find('.dropdown');
            this.$DropdownTxt = this.$Dropdown.find('.dropdown__txt');
            this.$DropdownUL = this.$Dropdown.find('.menu__dropdown');

            this.$Dropdown.on('click', self.toggle.bind(self));

            this.build();
            this.bindEvent();
        },

        toggle: function() {
            this.$DropdownUL.slideToggle("slow");
            this.$DropdownUL.closest('.footer__inner').toggleClass('toggle__tv');
        },

        destroy: function() {
            // for garbage collection in js
            this.url = this.$Parent = this.$Dropdown = null;
            this.$DropdownUL = this.$DropdownLI = this.$DropdownTxt = null;
        },

        build: function() {
            var $strHtml;
            this.$DropdownTxt.text(language[lang]);
            this.$DropdownTxt.attr('data-lang',lang);

            for (var key in language) {
                if (!language.hasOwnProperty(key)) return;

                $strHtml = '<li class="menu__dropdown-li" data-lang='+ key +'>'+ language[key] +'</li>'
                this.$DropdownUL.append($strHtml);
            }
        },

        bindEvent: function() {
            var self = this;
            this.$DropdownLI = this.$Dropdown.find('.menu__dropdown-li');

            this.$DropdownLI.on('click', function() {
                var txtVal = $(this).text(),
                    langVal = $(this).attr('data-lang');

                self.$DropdownTxt.text(txtVal);
                self.changeUrl(langVal);
            });

            this.$html.on('click', function(e) {                    
                if(!$(e.target).closest('.dropdown__parent').length) {
                    if (self.$DropdownUL) {
                        self.$DropdownUL.hide();
                        self.$DropdownUL.closest('.footer__inner').removeClass('toggle__tv');
                    }            
                }
            });
        },

        //Change URL & redirect to the reuqired lang URL
        changeUrl: function(language) {
            var debug = utils.getParameterByName('debug'),
                minimalUI = utils.getParameterByName('minimalUI'),
                param;

            if (debug === null) {
                if (!!device.isMacOSApp) {
                    param = 'minimalUI&platform=macos&lang=' + language;
                } else {
                    param = (minimalUI === null ? 'lang=' + language : 'minimalUI&lang=' + language);
                }
                document.location.search = param;
            } else {
                param = (minimalUI === null ? 'debug&lang=' + language : 'minimalUI&debug&lang=' + language);
                document.location.search = param;
            }
        }

     };

    return Dropdown;

});

define('text!html/adminMenu/main.html',[],function () { return '<header class="menu__head">\n\t<button class="go-back"><%= Web_Song_Select_BackToSelection %></button>\n\t<% if (isMac) { %>\n\t\t<button class="exit-back" title="Exit"></button>\n\t<% } %>\n</header>\n<div class="menu__body">\n\t<% if (videoQualityPicker || languagePicker) { %>\n\t<div class="menu-section">\n\t\t<div class="menu-section__title"><%= settings %></div>\n\t\t<% if (videoQualityPicker) { %>\n\t\t<div class="menu-section__content video-quality">\n\t\t\t<label class="content__title"><%= Web_Admin_VideoQualityHeader %></label>\n\t\t\t<ul class="video-quality__dropdown" tabindex="0">\n\t\t\t\t<%= videoQualityPicker %>\n\t\t\t</ul>\n\t\t</div>\n\t\t<% } %>\n\t\t<% if (languagePicker) { %>\n\t\t<div class="menu-section__content language">\n\t\t\t<label class="content__title"><%= Web_Admin_Language %></label>\n\t\t\t<div class="languagePicker__content">\n\t\t\t\t<span class="languagePicker__value"><%= selectedLang %></span>\n\t\t\t\t<%= languagePicker %>\n\t\t\t</div>\n\t\t</div>\n\t\t<% } %>\n\t</div>\n\t<% } %>\n\t<div class="menu-section">\n\t\t<div class="menu-section__title"><%= dancers %></div>\n\t\t<div class="menu-section__content players">\n\t\t\t<h2 class="players__title"><%= Web_Admin_NoConnectedPlayers %></h2>\n\t\t</div>\n\t</div>\n</div>\n<footer class="menu__legal">\n\t<ul class="legal__list">\n\t\t<li class="legal__item"><a href="//legal.ubi.com/" target="_blank" class="openIframe"><%= Web_Admin_ToS %></a> Ã‚Â· </li>\n\t\t<li class="legal__item hideMacOs"><a href="/licenses/" target="_blank" class="openIframe"><%= Web_Admin_Licenses %></a> Ã‚Â· </li>\n\t\t<li class="legal__item"><a href="/credits/" target="_blank" class="openIframe"><%= Web_Admin_SongCredits %></a></li>\n\t</ul>\n</footer>';});


define('text!html/adminMenu/player.html',[],function () { return '<div class="player <%= isController ? \'player--controller\' : \'\' %>" data-player="<%= id %>">\n\t<%= avatar %>\n\t<h3 class="player__name"><%= name %></h3>\n\t<button class="player-btn player-btn--make-controller">\n\t\t<svg viewBox="0 0 100 100" preserveAspectRatio="xMinYMid meet">\n\t\t\t<use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#icon-button_master"></use>\n\t\t</svg>\n\t</button>\n\t<button class="player-btn player-btn--kick">\n\t\t<svg viewBox="0 0 100 100" preserveAspectRatio="xMinYMid meet">\n\t\t\t<use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#icon-button_kick"></use>\n\t\t</svg>\n\t</button>\n</div>';});


define('text!html/adminMenu/videoQualityPicker.html',[],function () { return '<% _.each(videoQualities, function (quality) { %>\n\t<li class="video-quality__item" data-id="<%= quality.id %>"><%= quality.name %></li>\n<% }) %>';});


define('text!html/adminMenu/languagePicker.html',[],function () { return '<ul class="language__dropdown" tabindex="0">\n\t<% _.each(languageOptions, function (language) { %>\n\t\t<li class="language__item" data-id="<%= language.id %>"><%= language.name %></li>\n\t<% }) %>\n</ul>';});

define('adminMenu',[
	'jquery',
	'lodash',
	'loc',
	'utils',
	'avatars',
	'device',
	'language',
	'dropdown',
	'trackerUtils',

	'text!html/adminMenu/main.html',
	'text!html/adminMenu/player.html',
	'text!html/adminMenu/videoQualityPicker.html',
	'text!html/adminMenu/languagePicker.html',
], function (
	j,
	_,
	loc,
	utils,
	avatars,
	device,
	language,
	dropdown,
	trackerUtils,

	mainHtml,
	playerHtml,
	videoQualityPickerHtml,
	languagePickerHtml
) {
	'use strict';

	var mainTemplate = _.template(mainHtml);
	var playerTemplate = _.template(playerHtml);
	var videoQualityPickerTemplate = _.template(videoQualityPickerHtml);
	var languagePickerTemplate = _.template(languagePickerHtml);

	// A popup menu, accessible by clicking the cogwheel in the upper right corner of the screen. Contains a button for
	// going back to song selection, a video quality selector and a list of players. Each entry of the player list has
	// buttons for either kicking or making that entry controller.
	function AdminMenu (core) {
		this.core = core;
		this.gui = core.gui;
	}

	AdminMenu.prototype = {

		init: function() {
			console.log('%cÃ¢Å“â€', 'color:#339933; background:#CCFF00', 'AdminMenu initialized');
			// Build admin menu
			this.adminMenuBuild();
			this.adminMenuOpen = false;
		},

		videoQualityOptions: [
			{ id: 'auto', name: loc(1808) }, // 1808: Web_Admin_VideoQualityAuto
			{ id: 'highest', name: loc(1809) }, // 1809: Web_Admin_VideoQualityHighest
			{ id: 'lowest', name: loc(1810) } // 1810: Web_Admin_VideoQualityLowest
		],

		languageOptions: [],

		// Creates the visual representation, adds it to the DOM and attaches event listeners.
		adminMenuBuild: function() {
			var self = this;
			var $adminMenu = this.core.jAdminMenu;
			var canPickVideoQuality = this.core.inGameVideoPlayer.canSetPreferredQuality();
			var canPickLanguage = !device.isMobile && !device.isChromecast; // basically only on web, tablets, & Mac

			// set language list
			this.languageOptions.push({ id: lang, name: language[lang] });

			for (var languageKey in language) {
				if (languageKey != lang)
					this.languageOptions.push({ id: languageKey, name: language[languageKey] });
			}

			$adminMenu.append(mainTemplate(_.extend({
				videoQualityPicker: canPickVideoQuality &&
						videoQualityPickerTemplate({ videoQualities: self.videoQualityOptions }),
				languagePicker: canPickLanguage && 
						languagePickerTemplate({ languageOptions: self.languageOptions }),
				settings: loc(3182),
				dancers: loc(3183),
				isMac: device.isMacOSApp,
				selectedLang: language[lang]
			}, {
				Web_Admin_Settings: loc(1068),
				Web_Song_Select_BackToSelection: loc(1069),
				Web_Admin_NoConnectedPlayers: loc(1047),
				Web_Admin_ToS: loc(1247),
				Web_Admin_Licenses: loc(1325),
				Web_Admin_SongCredits: loc(1248),
				Web_Admin_VideoQualityHeader: loc(1807),
				Web_Admin_Language: loc(3323)
			})));


			this.core.keydownHandler.initState("adminMenu", [{
				keys : ["ESCAPE", "RETURN"],
				callback : function() {
					self.adminMenuHide();
				}
			}]);


			// Assign back to songlist click event
			$adminMenu.find('.go-back').on('click', function() {
				self.adminMenuHide();
				self.buildPopUp();

				//Tracking go-back to song library
				trackerUtils.trackClickEvents(self.core.countPlayers() === 0  ? 
					'Navigation - NSM - Go-Back-To-Song-Selection' : 'Navigation - SM - Go-Back-To-Song-Selection'
				);
			});
			
			$adminMenu.find('.exit-back').on('click', function() {
				self.adminMenuHide();
				self.core.isExitGameTriggered = true;

				self.core.popUp.build({
					title : loc(3707),
					validateCB : function() {
						if (!!device.isMacOSApp) {
							window.webkit.messageHandlers.jsHandler.postMessage("Quit");
						}
					}
				});
			});

			$adminMenu.on('click', function(event) {
				if (event.target.className !== 'languagePicker__value') {
					self.langDropdownHide();
				}
			});

			// Stop click event from bubbling up
			this.core.jBody.on('click', '#settings .toggle-settings, #admin-menu .menu__head, #admin-menu .menu__body, #admin-menu .menu__legal', function(e) {
				e.stopPropagation();
			});

			// Kick player click event
			$adminMenu.on('click', '.player .player-btn--kick', function() {
				var playerId = j(this).closest('.player').data('player');
				self.core.kickPlayer(playerId);
			});

			// Assign player controller role click event
			$adminMenu.on('click', '.player .player-btn--make-controller', function() {
				var $player = j(this).closest('.player');
				self.core.jAdminMenu.find('.player--controller').removeClass('player--controller');
				$player.addClass('player--controller');
				var masterPlayerId = $player.data('player');
				self.core.transferControlToPlayer(masterPlayerId);
				self.updateControllerPosition($player, masterPlayerId);
			});

			if (canPickVideoQuality) {
				$adminMenu.on('mousedown', '.video-quality .video-quality__dropdown li', function(ev) {
					if (!self.qualityDropdownOpen) { return; }

					j('html').focus(); // This collapses the dropdown

					var selectedQualityId = j(ev.currentTarget).data('id');

					// Move the selected option to the top of the list
					var selectedQuality = _.remove(self.videoQualityOptions,  { id: selectedQualityId });
					self.videoQualityOptions = selectedQuality.concat(self.videoQualityOptions);
					$adminMenu.find('.video-quality .video-quality__dropdown').html(
							videoQualityPickerTemplate({ videoQualities: self.videoQualityOptions }));

					self.core.video.videoPlayer.setPreferredQuality(selectedQualityId);
					localStorage.preferredVideoQualityId = selectedQualityId;

					self.qualityDropdownOpen = false;

					//Tracking VIDEO QUALITY
					trackerUtils.trackClickEvents(self.core.countPlayers() === 0  ? 
						'Action - NSM - Change Video Quality - '+selectedQuality[0].name : 
						'Action - SM - Change Video Quality - '+selectedQuality[0].name
					);
				});

				$adminMenu.on('focus', '.video-quality .video-quality__dropdown', function() { self.qualityDropdownOpen = true; });
				$adminMenu.on('blur', '.video-quality .video-quality__dropdown', function() { self.qualityDropdownOpen = false; });

				var savedVideoQualityId = localStorage.preferredVideoQualityId;
				if (savedVideoQualityId && savedVideoQualityId !== 'auto') {
					self.qualityDropdownOpen = true;
					$adminMenu.find('li[data-id="' + savedVideoQualityId + '"]').trigger('mousedown');
				}
			}

			if (canPickLanguage) {
				$adminMenu.on('click', '.languagePicker__content', function() {
					if (!!self.languageDropdownOpen) { return; }

					j(this).addClass('open');
					self.languageDropdownOpen = true;
				});

				$adminMenu.on('click', '.language__dropdown li', function(ev) {
					if(!self.languageDropdownOpen) { return; }

					var selectedLanguageId = j(ev.currentTarget).data('id');
					if (lang != selectedLanguageId) {
						$adminMenu.find('.language__dropdown').hide();
						$adminMenu.find('.languagePicker__value').text(language[selectedLanguageId]);
						dropdown.prototype.changeUrl(selectedLanguageId);
					}
				});

			}

			if (!canPickVideoQuality) {
				$adminMenu.find('.menu-section:first-child').addClass('hide-settings');
			}

			// Handle sticky hover state on .player
			$adminMenu.on('mouseenter', '.player', function() { j(this).addClass('hover'); });
			$adminMenu.on('mouseleave', '.player', function() { j(this).removeClass('hover'); });

			this.core.jSettings.find('.toggle-settings').on('click', function() {
				if (!!self.adminMenuOpen) {
					self.adminMenuHide();
				} else {
					self.adminMenuShow();
					//Tracking SETTINGS-WHEEL
					trackerUtils.trackClickEvents(self.core.countPlayers() === 0  ? 
						'Navigation - NSM - Settings Wheel' : 'Navigation - SM - Settings Wheel'
					);
				}
				j(this).blur();
			});

			// open iframe on admin links click
			$adminMenu.on('click','.openIframe', function() {
				if (!!device.isIpadApp || !!device.isAndroidTabletApp || !!device.isMacOSApp) {
					event.preventDefault();

					var data__href = j(this).attr('href');
					self.core.gui.iframe.build(data__href);
				}
			});
		},

		// Shows the menu and attaches event listeners related to dragging the menu around.
		adminMenuShow: function() {
			var self = this;

			this.adminMenuOpen = true;
			self.core.jHTML.addClass('dialog');
			_.partial(self.core.jAdminMenu.attr, 'aria-hidden', 'false');

			this.core.keydownHandler.setState("adminMenu");
			this.core.audio.playSFX('config-window-open', { volume: 1 });

			if (typeof this.core.payer === 'object') {
				this.core.jRoom.find('.account__name').html(this.core.payer.name);
			}

			// Click anywhere on the document to close dialog
			this.core.jBody.on('click.adminmenu', this.adminMenuHide.bind(this));
		},

		// Hides the menu and remove drag listeners. All other listeners are unaffected.
		adminMenuHide: function() {
			var self = this;

			this.adminMenuOpen = false;
			self.core.jHTML.removeClass('dialog')
			_.partial(self.core.jAdminMenu.attr, 'aria-hidden', 'true');

			this.langDropdownHide();

			this.core.keydownHandler.setPreviousState();
			this.core.audio.playSFX('config-window-close', { volume: 1 });
			this.core.jBody.off('click.adminmenu');
		},

		// Hides the language dropdown & resets the flag
		langDropdownHide: function() {
			this.core.jAdminMenu.find('.languagePicker__content').removeClass('open');
			this.languageDropdownOpen = false;
		},

	
		// Adds a player entry to the player list. Called e.g. when a player joins the room.
		// Arg types         Object
		addPlayer: function(player) {
			var self = this;

			// Remove "No players connected" message
			if (self.core.countPlayers() === 1) {
				self.core.jAdminMenu.find('.players h2').remove();
			}

			var strings = _.extend({
				avatar: avatars.getAvatarHtml(player.avatar),
				id: player.id,
				name: this.gui.playerName(player),
				isController: self.core.isController(player.id),
			}, {
				Web_Admin_Option_Kick: loc(1048),
				Web_Admin_Option_Controller: loc(1049)
			});

			this.core.jAdminMenu.find('.players').append(playerTemplate(strings));
		},

		// Removes a player entry from the player list. Called e.g. when a player leaves the room.
		// Arg types            Object
		removePlayer: function(player) {
			var self = this;

			// Why is a small timeout needed? No idea, but without it everything is borked.
			setTimeout(function() {
				self.core.jAdminMenu.find('[data-player='+player.id+']').remove();

				if (self.core.countPlayers() === 0) {
					self.core.jAdminMenu.find('.players').html('<h2 class="no-players">' + loc(1047) + '</h2>'); // 1047: Web_Admin_NoConnectedPlayers
				}
			}, 100);
		},

		// Updates a player list entry. Called e.g. when a player changes name
		// Arg types            Object
		updatePlayer: function(p) {
			// For when a player changes name or avatar
			var player = this.core.jAdminMenu.find('[data-player='+p.id+']');
			if (player.length) {
				player.find('.player__name').html(this.gui.playerName(p));
				player.find('.avatar-wrapper').replaceWith(avatars.getAvatarHtml(p.avatar));
			}
		},

		// Updates the "controller" state of the player list entries. Called e.g. when the controller changes.
		// Arg types                String
		updateController: function(controllerId) {
			var playerEntries, newController, i;

			// Remove any old controller instances
			playerEntries = this.core.jAdminMenu[0].querySelectorAll('.player');
			for (i = 0; i < playerEntries.length; i++) {
				playerEntries[i].classList.remove('player--controller');
			}

			// Add the new one
			newController = this.core.jAdminMenu.find('[data-player='+controllerId+']');
			if (newController.length > 0) {
				newController.addClass('player--controller');
			}
		},

		updateControllerPosition: function(cElem, mId) {
			var self = this,
				newMaster = self.core.jPlayers.find('.'+mId);
			
			newMaster.remove();
			cElem.remove();
			self.core.jAdminMenu.find('.players').prepend(cElem);
			self.core.jPlayers.prepend(newMaster);
			self.core.audio.playSFX('avatar-appears-1', { volume: 0.4, delay: 100 });
		},

		buildPopUp: function() {
			if (this.core.state !== 'dance') return;

			var self = this;
			var isSongPPP = (! this.core.isRoomVIP && !this.core.isSongFreeToPlay(this.core.song));

			this.core.popUp.build({
				title: loc(2942),
				content:  isSongPPP ? loc(2941) : "",
				validateCB: function() {
					self.core.sendStopSong(-1, true);
				}
			});
		}
	};

	return AdminMenu;

});


define('text!html/jd/iframe.html',[],function () { return '<div id="content-wrapper">\n\t<div class="iframe__close" title="Close">X</div>\n</div>\n<div id="content-wrapper__overlay"></div>';});

define('iframe',[
    'jquery',

    'text!html/jd/iframe.html'
    ], function (
        $,
        
        iframeHtml
        ) {
    'use strict';

    var iframeTemplate = _.template(iframeHtml);

    function Iframe(core) {
        this.core = core;
        this.gui = core.gui;
    };

    Iframe.prototype = {
        init: function () {
            console.log('%cÃ¢Å“â€', 'color:#339933; background:#CCFF00', 'Iframe initialized');
            var self = this;

            this.$Iframe = $(iframeTemplate());

            this.$Iframe.appendTo(this.core.jBody);
            this.$Iframe.hide();

            this.$IframeClose = this.$Iframe.find(".iframe__close");
            this.$IframeClose.on('click', self.hide.bind(self));
        },

        show : function() {
            this.$Iframe.show();
        },

        hide : function() {
            this.$Iframe.hide();
        },

        build : function(data) {

            var $iframeHtml = '<iframe id="jdiFrame" data-src="" src="about:blank"></iframe>';

            this.$Iframe.find('iframe').remove();
            this.$IframeClose.after($iframeHtml);

            var $iframeElem = this.$Iframe.find('#jdiFrame');
            $iframeElem.attr("src", data);

            this.show();
        }

     };

    return Iframe;

});

define('text!html/afterDance/results.html',[],function () { return '<div class="img--afterDance <%= multiplePlayer ? \'\' : \'solo\' %>">\n\t<img src="<%= imgSongAfterDance %>" class="coach" alt="">\n\t<div class="song-info">\n\t\t<h3 class="title"><%= song.name %></h3>\n\t\t<h2 class="artist"><%= song.artist %></h2>\n\t</div>\n</div>\n\n<div id="crown-container" class="<%= winnerColor %> <%= multiplePlayer ? \'\' : \'solo\' %>">\n\t<div class="crown"></div>\n</div>\n<div class="results <%= multiplePlayer ? \'\' : \'solo\' %>">\n\t<% if (multiplePlayer) { %>\n\t<ol class="players">\n\t\t<div class="scrollArea">\n\t\t\t<div class="scrollContainer">\n\t\t\t\t<%= players %>\n\t\t\t</div>\n\t\t</div>\n\t</ol>\n\t<% } else { %>\n\t\t<div class="players player-solo">\n\t\t\t<%= players %>\n\t\t</div>\n\t<% } %>\n\n\t<div class="highScore <%= multiplePlayer ? \'\' : \'solo\' %>"><%= newHighScoreLoc %></div>\n\n</div>';});


define('text!html/afterDance/player.html',[],function () { return '<div class="player <%= classes.join(\' \') %> <%= !!isSuperstar ? \'isSuperstar\' : \'\' %> <%= !!isMegastar ? \'isMegastar\' : \'\' %>">\n\t<div class="color"><%= position + 1 %></div>\n\t<div class="avatarFlag">\n\t\t<%= avatar %>\n\t\t<div class="flag <%= flagPic %>" style="background-image:url(<%= cdn %>/web/img/flags64/<%= flagPic %>_c.png);"></div>\n\t</div>\n\t<div class="player-content">\n\t\t<div class="name"><%= name %></div>\n\t\t<div class="score" data-stars="<%= nStars %>" data-score="<%= score %>">\n\t\t\t<div class="score-text"><%= score %></div>\n\t\t\t<div class="stars">\n\t\t\t\t<% _.times(nStars, function (i) { %>\n\t\t\t\t\t<div class="star star-<%= i + 1 %>"></div>\n\t\t\t\t<% }); %>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n';});

define('buildResult',[
		'jquery',
		'lodash',
		'loc',
		'songs',
		'ghosts',
		'avatars',

		'text!html/afterDance/results.html',
		'text!html/afterDance/player.html'
	],
	function (
		j,
		_,
		loc,
		songs,
		ghosts,
		avatars,
		
		resultsHtml,
		playerHtml
) {
	'use strict';

	// Templates
	var resultsTemplate = _.template(resultsHtml);
	var playerTemplate = _.template(playerHtml);

	// The player's progress (xp gained, rewards unlocked, levels gained) is shown here.
	function BuildResult(core) {
		this.core = core;
		this.gui = core.gui;
		this.afterDance = core.gui.afterDance;
	};

    BuildResult.prototype = {

    	init: function () {
			console.log('%cÃ¢Å“â€', 'color:#339933; background:#CCFF00', 'Build result initialized');
		},

		// Private function. This is for building PLAYERS before their result
		// Arg types                  Object
		buildInitialPlayer: function (playerResults) {
			var self = this;
			var players = _.map(playerResults, function (playerResult) {
				var id = playerResult.publicID || playerResult.id;
				var player = self.core.players[id] || ghosts.getGhosts()[id] || self.core.pastPlayers[id] || {};
				var score = playerResult.scaledScore || 0;

				return _.extend(_.pick(player, 'name', 'avatar', 'color', 'isGhost'), {
					id: id,
					flag: player.country,
					score: score,
					coach: playerResult.coach,
					level: playerResult.isGhost ?
							playerResult.songLevel || 0 :
							(_.find(player.levels, { song: self.core.song }) || {}).level || 0,
					levelUp: !!playerResult.levelUp,
					achievements: !!playerResult.achievements && playerResult.achievements
				});
			});

			return players;
		},


		// Build the screen representation and attach it to the DOM. Called once every time we enter the afterDance state
		// Arg types           Array
		buildPlayer: function (players) {
			var self = this,
				song = self.core.getCurrentSong(),
				albumImgUrl = songs.getSong(song.id).base + '/assets/web/' + song.id.toLowerCase() + '_small.jpg';

			var data = {
	            cdn: cdn,
				showProgress: this.afterDance.showProgress,
				albumImgUrl: albumImgUrl,
				winnerColor: players[0].color,
				imgSongAfterDance: this.afterDance.imgSongAfterDance,
				multiplePlayer: (players.length > 1 ? true : false),
				song: song,
				players: _.map(_.first(players, this.afterDance.TOTAL_PLAYERS), self.buildPlayerEntry, this).join(''),
				newHighScoreLoc: loc(2769)
	        };

	        return $(resultsTemplate(data));
		},


		// Private function. This is for MULTIPLE PLAYERS
		// Returns the HTML String for a single row in the leaderboard.
		// Arg types                Object, Number
		buildPlayerEntry: function (player, position) {
			// Incoming player array is now the regular playerobject
			var pId = player.id;
			var pScore = player.score || 0;
			var p = this.core.players[pId] || player;
			var color = (p.color || '');
			var pClasses = [ pId ];
			var isSuperstar = false, isMegastar = false;
			
			color && pClasses.push(color);
			position === 0 && pClasses.push('winner');
			player.isGhost && pClasses.push('ghost');

			if (!!player.achievements) {
				if (!!player.achievements.megastar) { isMegastar = true; }
				else if (!!player.achievements.superstar && !player.achievements.megastar) {
					isSuperstar = true;
				}
			}

	        return playerTemplate({
				classes: pClasses,
				position: position,
				name: this.core.gui.playerName(p),
				score: pScore,
				nStars: Math.min(Math.floor(pScore / 2000), 5),
				isGhost: player.isGhost,
				levelUp: false,
				avatar: avatars.getAvatarHtml(player.avatar),
				flagPic: player.flag,
				isSuperstar: isSuperstar,
				isMegastar: isMegastar
			});

		}

    };

	return BuildResult;
});

define('afterDanceBuilder',[
		'jquery',
		'lodash',
		'device',
		'songs',
		'avatars',
		'loc',
		'utils'
	],
	function (
		j,
		_,
		device,
		songs,
		avatars,
		loc,
		utils
) {
	'use strict';

	//Constants
	var IMG_OUT = { transform: 'translateX(-104%)' };
	var IMG_IN = { transform: 'translateX(0%)' };
	var PLAYER_OUT = { transform: 'translateX(-100%)' };
	var PLAYER_IN = { transform: 'translateX(0%)' };
	var SCORE_OUT = { transform: 'translateX(100%)' };
	var SCORE_IN = { transform: 'translateX(0%)' };
	var AFTERDANCE_TIMEOUT = 100; // in miliseconds


	//Animate the stars if its less than the actual no. of stars
	//Private function
	function starAnimation (startStars, elem) {
		this.core.audio.playSFX('star-' + startStars, { volume: 0.18 });
		elem.show().append('<div class="star star-' + startStars + '"></div>').children().addClass('animate');
	};


	function displayAchievements ($elem, value) {
		if (value >= this.afterDance.superstarThreshold && 
			value < this.afterDance.megastarThreshold) {
				$elem.addClass('superstar');
		} else if (value >= this.afterDance.megastarThreshold) {
			$elem.removeClass('superstar').addClass('megastar');
		}
	};


	//Animate the score with the actual values
	//Private function
	function animateCounter ($element, score, eI) {
		var self = this,
			start = 0, speed = 2, minValue;

		if (score > start) {
			if (self.afterDance.TOTAL_PLAYERS === 1) { // Only for solo player
				self.core.audio.stopSFX('after-dance-winner', (AFTERDANCE_TIMEOUT * 2));
			}

			// For solo player, index is undefined & audio will be executed only for the winner in multiplayer mode
			if (!eI || eI === 0) {
				self.core.audio.playSFX('score-count', { volume: 0.47 });
			}
		}

		setTimeout(function counter () {
			start += speed++;
			minValue = Math.min(start, score);
			$element.text(utils.formatNumber(minValue));

			displayAchievements.call(self, $element.parent(), minValue);

			if (start < score) {
				requestAnimationFrame(counter);
			} else {
				// For solo player, index is undefined & audio will be executed only for the winner in multiplayer mode
				if (!eI || eI === 0) {
					self.core.audio.stopSFX('score-count', (AFTERDANCE_TIMEOUT * 2));
					self.finalAnimation(AFTERDANCE_TIMEOUT * 7);
				}

				return;
			}	
		}, 100);
	};



	// The player's progress (xp gained, rewards unlocked, levels gained) is shown here.
	function AfterDanceBuilder(core) {
		this.core = core;
		this.afterDance = core.gui.afterDance;
	};

    AfterDanceBuilder.prototype = {
    	init: function () {
			console.log('%cÃ¢Å“â€', 'color:#339933; background:#CCFF00', 'Afterdance player building initialized');
		},


    	// Display highScore element if it is the highestScore
		updateHighSCore: function (scoreData, playerData) {
			var self = this,
				$highScoreElem = self.core.jAfterDance.find('.highScore'),
				$playerELem = self.core.jAfterDance.find('.players'),
				$player = $playerELem.find('.' + playerData.id),
				$appendElem = j('<div class="highScore highScore__show"></div>').html(loc(2769));

			var	playerHighScoreData = playerData.highscores,
				currentSong = self.core.getCurrentSong().id,
				achievedScore = scoreData;

			if (!!playerHighScoreData && playerHighScoreData.length > 0) {
				var map = _.find(playerHighScoreData, {'song': currentSong});
				if(map !== undefined && achievedScore > 0 && achievedScore >= map.score) {

					$highScoreElem.addClass('highScore__show');
					!self.afterDance.animate && $highScoreElem.addClass('show');

					if (self.afterDance.TOTAL_PLAYERS > 1) { // multiple player condition
						$player.find('.score').append($appendElem);
						!self.afterDance.animate && self.core.jAfterDance.find('.highScore__show').addClass('show');
					}
				}
			}
		},


		//Animate the score in the afterdance screen
		starCounter: function (playerELem) {
			var self = this;
			var startStars = 0,
				pStar = playerELem.find('.score').attr('data-stars'),
				$stars = playerELem.find('.stars');

			$stars.empty();

			setTimeout(function starCounter () {
				if (!$stars) {
					return requestAnimationFrame(starCounter);
				}

				if (startStars < pStar) {
					startStars += 1;
					starAnimation.call(self, startStars, $stars);
					_.delay(function() {
						requestAnimationFrame(starCounter)
					}, (AFTERDANCE_TIMEOUT * 6));
				}
			});
		},


		//Multiple score animation
		displayScoreMultiple: function (playerELem, animate) {
			var self = this,
				$rayRay = j('#crown-container .ray-ray'),
				$ray = j('#crown-container .ray');

			j('#crown-container .crown').css('opacity', 1);
			$rayRay.fadeIn(device.isWeak ? 0 : 2);
			$ray.fadeIn(device.isWeak ? 0 : 2);

			if (animate) {
				$rayRay.addClass('spin');
				$ray.addClass('spin');

				// Count up scores and stars
				_.delay(function (self) {
					playerELem.each(function (index, element) {
						var $player = j(element);

						var pScore = $player.find('.score').attr('data-score'),
							$score = $player.find('.score-text');

						animateCounter.call(self, $score, pScore, index);
						self.starCounter($player);
					});
				}, 800, this);
			} else {
				playerELem.each(function (index, element) {
					var $score = j(element).find('.score-text'),
						score = $score.text();
					$score.text(utils.formatNumber(score));
					displayAchievements.call(self, $score.parent(), score);
				});
				self.finalAnimation(AFTERDANCE_TIMEOUT);
			}

		},


		//Solo player score animation
		displayScoreSolo: function (playerELem, animate) {
			var self = this,
				$imgElem = this.core.jAfterDance.find(".img--afterDance"),
				$scoreElem = playerELem.find(".score"),
				$scoreTxtElem = $scoreElem.find(".score-text"),
				pScore = $scoreElem.attr('data-score');

			if (animate) {
				$scoreTxtElem.text(''); // empty the score element for applying counter

				// Sequencing animation synchronously
				_.delay(function (self) {
					$imgElem.fromTo(0.4, IMG_OUT, IMG_IN)
					.then(function () {
						return playerELem.show().fromTo(0.5, PLAYER_OUT, PLAYER_IN)
					}).then(function () {
						return $scoreElem.show().fromTo(0.3, SCORE_OUT, SCORE_IN)
					}).then(function () {

						animateCounter.call(self, $scoreTxtElem, pScore);
						self.starCounter(playerELem);
					});

				}, 1000, this);

			} else {
				$scoreTxtElem.text(utils.formatNumber(pScore));
				displayAchievements.call(self, $scoreElem, pScore);
				self.finalAnimation(AFTERDANCE_TIMEOUT);
			}

		},

		//Final animation after displaying everything
		finalAnimation: function(time) {
			var self = this;
			this.core.jAfterDance.find('.highScore__show').addClass('show');

			_.delay(function() {
				self.afterDance.$playAgainButton.addClass('exit-btn--animate');
				self.afterDance.$continueBtn.addClass('exit-btn--animate');
				self.core.audio.playMenuMusic(3000);
				self.afterDance.afterDanceBuiltDfd.resolve();
			}, time);
		},

    };

	return AfterDanceBuilder;
});

define('afterDanceScroll',[
		'jquery'
	],
	function (
		$
) {
	'use strict';

	var DURATION = 5000;
	var SPEED = 1500;
	var ANIMATION_SPEED_COUNT = 3;

	function computeNewContentHeight($playersScrollCont) {
		var result = 0;
		$playersScrollCont.find('.player').each(function() {
			result += $(this).outerHeight(true);
		});

		$playersScrollCont.height(result);
		return result;
	};

	function computeNewViewportHeight($playersScrollArea, contentHeight, playersHeight, winnerPlayerHeight) {
		if (contentHeight > playersHeight) {
			$playersScrollArea.height(playersHeight - winnerPlayerHeight);
		}

		return $playersScrollArea.height();
	};

	function slideAnimation ($playersScrollCont, topHeight, animate) {
		if (animate) {
			$playersScrollCont.animate({'top': topHeight}, SPEED, 'swing');
		} else {
			$playersScrollCont.css('top', topHeight +'px');
		}
	};




	function AfterDanceScroll(core) {
		this.core = core;
		this.afterDance = core.gui.afterDance;
	};

    AfterDanceScroll.prototype = {
    	init: function () {},

		//Scroll function for multiplayers
    	afterDanceSlider: function ($playersElem, animate) {
    		var $playersScrollArea = $playersElem.find('.scrollArea'),
				$playersScrollCont = $playersElem.find('.scrollContainer');

			//Separate out the winner player from the player container
			var $winnerPlayer = $playersElem.find('.winner');
			$winnerPlayer.addClass('no-animation').remove();
			$playersElem.prepend($winnerPlayer);

			var winnerPlayerHeight = $winnerPlayer.height();
			var playersHeight = $playersElem.height();

			var contentHeight = computeNewContentHeight($playersScrollCont);
			var viewportHeight = computeNewViewportHeight($playersScrollArea, contentHeight, playersHeight, winnerPlayerHeight);

			//calculation of height & scrolling
			var x = 0;
			var isUp = false, isDown = false;
			var diff = contentHeight - viewportHeight;
			var speedConst = ANIMATION_SPEED_COUNT * (contentHeight / (this.afterDance.afterDancePlayers.length - 1));

			function slide() {
				var topHeight = -(x * speedConst); // adjust the speed of animation
				if (topHeight > 0) {
					topHeight = 0; x++;
					isDown = true;
					isUp = false;
				}
				else if (topHeight < (-diff)) {
					topHeight = (-diff-5);
					isUp = true;
					isDown = false;
				}

				slideAnimation($playersScrollCont, topHeight, animate);
			}

			function slideDown() {
				x++; isDown = true; slide();
			}
			function slideUp() {
				x--; isUp = true; slide();
			}

			slideDown();
			// setting the interval function at every 3.5 secs
			setInterval(function() {
				if (isDown) {
					slideDown(); isUp = false;
				} else {
					isDown = false; slideUp();
				}
			}, DURATION);

    	}


    };

	return AfterDanceScroll;
});


define('text!html/afterDance/score.html',[],function () { return '<%= score %>\n<div class="stars" data-stars="<%= nStars %>">\n<% _.times(nStars, function (n) { %>\n\t<div class="star star-<%= n + 1 %>"></div>\n<% }) %>\n</div>';});

define('afterDance',[
		'jquery',
		'lodash',
		'utils',
		'device',
		'loc',
		'bowser',
		'ghosts',
		'songs',
		'avatars',
		'buildResult',
		'afterDanceBuilder',
		'afterDanceScroll',
		'trackerUtils',

		'text!html/afterDance/score.html'
	],
	function (
		j,
		_,
		utils,
		device,
		loc,
		bowser,
		ghosts,
		songs,
		avatars,
		BuildResult,
		AfterDanceBuilder,
		AfterDanceScroll,
		trackerUtils,
		
		scoreHtml
) {
	'use strict';

	// Templates
	var scoreTemplate = _.template(scoreHtml);

	// Constants
	var PROGRESS_PANEL_SHOW_TIME = 3000;

	// Encapsulates the after dance state. Shows a scrolling leader board on the right half of the screen. If there is
	// no local player in the room, the winning player's coach is displayed on the left half of the screen. Otherwise
	// the local player's progress (xp gained, rewards unlocked, levels gained) is shown there.
	function AfterDance(core) {
		this.core = core;
		this.gui = core.gui;
		this.afterDanceVisible = false;
		this.afterDancePlayers;
		this.MAX_PLAYER_AFTERDANCE = 6;

		this.animate = !device.isWeak && !device.isiOS && !device.isAndroidTabletApp;

		var self = this;
		this.core.keydownHandler.initState("afterDance",
            [{
                keys : ["ESCAPE", "RETURN", "ENTER", "RIGHT"],
                callback : function() {
        			//FTUE
                	core.roomFTUEStates["SongComplete"] && self.boundContinueCB();
                }
            }, {
                keys : ["LEFT"],
                callback : function() {
        			//FTUE
                	core.roomFTUEStates["SongComplete"] && self.boundPlayAgainCB();
                }
            }]
        );

		this.boundContinueCB = this.continueCB.bind(this);
		this.boundPlayAgainCB = this.playAgainCB.bind(this);


	};

	AfterDance.prototype = {
		init: function() {
			console.log('%cÃ¢Å“â€', 'color:#339933; background:#CCFF00', 'AfterDance initialized');
			this.totalStars = {}; // Not used? TODO: remove

			this.afterDanceBuilder= new AfterDanceBuilder(this.core);
            this.afterDanceBuilder.init();

            this.buildResult = new BuildResult(this.core);
			this.buildResult.init();

			this.afterDanceScroll = new AfterDanceScroll(this.core);
			this.afterDanceScroll.init();

			var jd = this.core;
		},

		buildAfterDanceBtns: function() {
			this.$continueBtn = j('<div class="exit-btn exit-btn--continue"></div>').html(loc(2680));
			this.$continueBtn.on('click', this.boundContinueCB);

			this.$playAgainButton = j('<div class="exit-btn exit-btn--play-again"></div>').html(loc(2679));
			this.$playAgainButton.on('click', this.boundPlayAgainCB);
		},

		// Build the screen representation and attach it to the DOM. Called once every time we enter the afterDance state
		// Arg types               Array
		buildAfterDance: function(playerResults) {
			var $afterDance = jd.jAfterDance;

			//Continue & PlayAgain btn
			this.buildAfterDanceBtns();

			// Indicates that we are leaving after dance -> stop all tasks/animations
			this.movingOn = false;

			var players = this.buildResult.buildInitialPlayer(playerResults);
			var song = jd.getCurrentSong();

			this.afterDancePlayers = players = _.sortBy(players, 'score').reverse();

			if (jd.isTrial()) {
				this.MAX_PLAYER_AFTERDANCE = (device.isIpadApp && !device.isMacOSApp) ? 5 : 4;
			} else {
				this.MAX_PLAYER_AFTERDANCE = (device.isIpadApp && !device.isMacOSApp) ? 7 : 6;
			}

			// This indicates position in the players array where the next player to be shown is
			this.TOTAL_PLAYERS = this.afterDancePlayers.length;

			var winnerCoach = (players.length > 0 && Math.max(players[0].coach, 0) || 0) + 1;
			this.imgSongAfterDance = songs.getSong(song.id).base + '/assets/web/' + song.id.toLowerCase() + '.jpg';

			var $resultContent = this.buildResult.buildPlayer(players);
			$resultContent.appendTo($afterDance);

			this.showAfterDance();
			jd.miscUtils.updateTotalScore(playerResults, jd.players);
			jd.miscUtils.updateLocalHighScores(jd.song, jd.players);
			jd.miscUtils.clearTotalScores(jd.players);
		},


		//Prtivate function
		//After dance XP, level, rewards of players calculation
		//Arg types					  Object  Object
		showPlayerProgress: function(player, xpDetails, scaledScore) {
			if (!this.afterDanceVisible) { return; }	
			this.afterDanceBuilder.updateHighSCore(scaledScore, player);
			jd.miscUtils.updateLocalHSSongLevel(jd.song, xpDetails, player, jd);
		},


		// Private function
		// Scrolls the leaderboard list one step. Calls itself every two seconds to produce a constant scrolling
		scrollPlayer: function() {
			if (!this.afterDanceVisible) { return; }

			var $playersCont = jd.jAfterDance.find('.players');
			this.slideToken = this.afterDanceScroll.afterDanceSlider($playersCont, this.animate);
		},

		// Private function
		// Does a bit more setup and the starts animation and possibly the local player progression sequence.
		showAfterDance: function() {
			this.afterDanceBuiltDfd = j.Deferred();
			
			var self = this,
				fadeTime = 0,
				song = songs.getSong(jd.song),
				$playerELem = jd.jAfterDance.find('.players .player');

			this.afterDanceVisible = true;
			this.updateBtns();

			// Play audio SFX
			jd.audio.playSFX([
				['after-dance-jingle', { volume: 0.392, delay: 150 }],
				['after-dance-winner', { volume: 0.21, delay: 250 }]
			]);

			jd.jAfterDance
			.fadeIn(device.isWeak ? 0 : 0.25)
			.then(function () {
				self.animate && this.forceRepaint().addClass('transition-in');
				device.isWeak && self.core.audio.playMenuMusic(fadeTime, fadeTime, 0.36);
			});

			if (this.TOTAL_PLAYERS > 1) {
				this.afterDanceBuilder.displayScoreMultiple($playerELem, this.animate);
			} else {
				this.afterDanceBuilder.displayScoreSolo($playerELem, this.animate);
			}

			// Start scrolling players after 10 seconds
			if (this.TOTAL_PLAYERS > this.MAX_PLAYER_AFTERDANCE) {
				setTimeout(this.scrollPlayer.bind(this), 10000);
			}

		},

		// Triggers hide animations, removes event listeners.
		// Returns a Promise that is resolved when the animations are done.
		hideAfterDance: function() {
			this.movingOn = true;

			var animationDone = j.Deferred();

			j(window).off('resize.afterdance');

			jd.jAfterDance.addClass('transition-out');
			clearInterval(this.slideToken);

			_.delay(function ( ) {
				this.afterDanceVisible = false;
				this.core.jAfterDance.fadeOut(0.65).then(this.clearAfterDance.bind(this), animationDone.resolve());
				this.core.scoreRecapExitDfd.resolve();
				this.core.scoreRecapExitDfd = j.Deferred();
				// Reset the level up state of all players
				this.core.jPlayers.find('.player').removeClass('level-up');
				_.each(this.core.players, function (player) {
					player.levelUp = false;
				});
			}.bind(this), 300);

			return animationDone.promise();
		},

		//Update continue & play btn depending on FTUE state
		appendContinueBtn: function() {
			if (jd.jAfterDance.find('exit-btn--continue').length == 0)
				this.$continueBtn.appendTo(jd.jAfterDance);
		},

		updateBtns: function() {
			if (jd.roomFTUEStates["SongComplete"]) { //FTUE
				this.appendContinueBtn();
				this.$playAgainButton.appendTo(jd.jAfterDance);
			}
		},


		// Private function
		clearAfterDance: function() {
			this.$continueBtn.remove();
			this.$playAgainButton.remove();
			this.$continueBtn = this.$playAgainButton = null; // nullify values for GC from afterdance to song-selection state

			jd.jAfterDance.removeClass('transition-out transition-in').html('').removeAttr( 'style' );
		},

		//Update afterDance action when player leaves
		updatePlayerLeft: function() {
			jd.countPlayers() === 0 && this.$playAgainButton.detach();
		},

		// Assign superstar & megastar threshold values for score-recap calculation
		updateAchievementThreshold: function(superThreshVal, megaThreshVal) {
			this.superstarThreshold = superThreshVal;
			this.megastarThreshold = megaThreshVal;
		},

		continueCB: function() {
			jd.songStopped();

			// Tracking TabsHowTo connect
			trackerUtils.trackClickEvents('Navigation - SM - Continue-From-Score-Recap');
		},

		playAgainCB: function() {
			jd.goToLobby();

			// Tracking TabsHowTo connect
			trackerUtils.trackClickEvents('Navigation - SM - Play-Again-From-Score-Recap');
		}

	};

	return AfterDance;
});


define('text!html/jd/platforms.html',[],function () { return '\n<div class="platforms">\n\t<% if (!!appStore) { %>\n\t\t<a href="//ad.apps.fm/nUKzyP776wOBG1T24EmWpvE7og6fuV2oOMeOQdRqrE01Ff7ELxjrVs6SF4_1suFEOyQULf1kcFbe0ig2qj5LwcLY4shkiSnO-g-L7FMo4jjfqzKY36LnePNin8PXwq13TI4IB650qNFWVt7OYqaTwn-tvpJtTdeZ-ds_b9fSigg" class="platforms__link" target="_blank">\n\t\t\t<span class="structural">Download the Just Dance Now app on the App Store</span>\n\t\t\t<svg viewBox="0 0 595.281 170.828" class="platforms__icon  platforms__icon--ios">\n\t\t\t\t<use xlink:href="#icon-platform-ios-<%= lang %>" stroke="white" stroke-opacity="0.4" stroke-width="4"></use>\n\t\t\t</svg>\n\t\t</a>\n\t<% } else if (!!androidStore) { %>\n\t\t<a href="//ad.apps.fm/JWz9kusD0_bXKFeawZgDL15KLoEjTszcQMJsV6-2VnHFDLXitVHB6BlL95nuoNYfghvdKDivrdLcHzMdBHAAr626us_HCDmaflyV0UqYiNXKW24SzjVAhJ87_weCW69O70XNFZF-UF0kCRqrpvsNtw" class="platforms__link platforms__link--android" target="_blank">\n\t\t\t<span class="structural">Download the Just Dance Now app on the Google Play store</span>\n\t\t\t<svg viewBox="0 0 595.281 203.848" class="platforms__icon  platforms__icon--android">\n\t\t\t\t<use xlink:href="#icon-platform-android-<%= lang %>" stroke="white" stroke-opacity="0.4" stroke-width="4"></use>\n\t\t\t</svg>\n\t\t</a>\n\t<% } else if (!!macStore) { %>\n\t\t<a href="macappstore://apps.apple.com/app/id1478418722" class="platforms__link platform_macos" target="_blank">\n\t\t\t<span class="structural">Download the Just Dance Now app on the Mac Store</span>\n\t\t\t<svg viewBox="0 0 595.281 170.828" class="platforms__icon  platforms__icon--macos">\n\t\t\t\t<use xlink:href="#icon-platform-macos-<%= lang %>"></use>\n\t\t\t</svg>\n\t\t</a>\n\t<% } else { %>\n\t\t<a href="//ad.apps.fm/nUKzyP776wOBG1T24EmWpvE7og6fuV2oOMeOQdRqrE01Ff7ELxjrVs6SF4_1suFEOyQULf1kcFbe0ig2qj5LwcLY4shkiSnO-g-L7FMo4jjfqzKY36LnePNin8PXwq13TI4IB650qNFWVt7OYqaTwn-tvpJtTdeZ-ds_b9fSigg" class="platforms__link" target="_blank">\n\t\t\t<span class="structural">Download the Just Dance Now app on the App Store</span>\n\t\t\t<svg viewBox="0 0 595.281 170.828" class="platforms__icon  platforms__icon--ios">\n\t\t\t\t<use xlink:href="#icon-platform-ios-<%= lang %>" stroke="white" stroke-opacity="0.4" stroke-width="4"></use>\n\t\t\t</svg>\n\t\t</a>\n\t\t<a href="//ad.apps.fm/JWz9kusD0_bXKFeawZgDL15KLoEjTszcQMJsV6-2VnHFDLXitVHB6BlL95nuoNYfghvdKDivrdLcHzMdBHAAr626us_HCDmaflyV0UqYiNXKW24SzjVAhJ87_weCW69O70XNFZF-UF0kCRqrpvsNtw" class="platforms__link platforms__link--android" target="_blank">\n\t\t\t<span class="structural">Download the Just Dance Now app on the Google Play store</span>\n\t\t\t<svg viewBox="0 0 595.281 203.848" class="platforms__icon  platforms__icon--android">\n\t\t\t\t<use xlink:href="#icon-platform-android-<%= lang %>" stroke="white" stroke-opacity="0.4" stroke-width="4"></use>\n\t\t\t</svg>\n\t\t</a>\n\t\t<a href="macappstore://apps.apple.com/app/id1478418722" class="platforms__link platforms__link--macos" target="_blank">\n\t\t\t<span class="structural">Download the Just Dance Now app on the Mac Store</span>\n\t\t\t<svg viewBox="0 0 595.281 170.828" class="platforms__icon  platforms__icon--macos">\n\t\t\t\t<use xlink:href="#icon-platform-macos-<%= lang %>"></use>\n\t\t\t</svg>\n\t\t</a>\n\t<% } %>\n</div>\n';});


define('text!html/jd/noPhoneModal.html',[],function () { return '<div class="concept">\n\t<h1 class="concept__line concept__line--shift-left concept__title"><%=title%></h1>\n</div>\n\n<div class="concept_ftue">\n\t<div class="concept__steps">\n\t\t<span class="steps__number">1</span>\n\t\t<span class="steps__connect"><%= step1 %></span>\n\t\t<span class="steps__image">\n\t\t\t<%= platformData %>\n\t\t</span>\n\t</div>\n\t<div class="concept__steps concept__steps--2">\n\t\t<span class="steps__number">2</span>\n\t\t<span class="steps__connect"><%= step2 %></span>\n\t\t<span class="steps__image steps__image--2"></span>\n\t</div>\n\t<div class="concept__steps concept__steps--3">\n\t\t<span class="steps__number">3</span>\n\t\t<span class="steps__connect"><%= step3 %></span>\n\t\t<span class="steps__image steps__image--3"></span>\n\t</div>\n</div>\n\n<a class="modal__link openIframe" href="//<%= locationHost %>/FAQ?lang=<%= lang %>&question=listOfCompatibleDevices" target="_blank"><span><%= helpInfo %></span></a>';});

define('modal',[
    'jquery', 
    'lodash', 
    'device', 
    'loc', 
    'environment', 
    'utils',

    'text!html/jd/platforms.html',
    'text!html/jd/noPhoneModal.html'

], function (
    $, 
    _,
    device, 
    loc, 
    env, 
    utils,

    platformsHTML,
    noPhoneModalHTML
) {

    'use strict';

    var platformsTemplate = _.template(platformsHTML);
    var noPhoneModalTemplate = _.template(noPhoneModalHTML);

    function buildConnectionNoPhoneModal (room) {

        var platform = {
            androidStore : (device.isChromecast || device.isAndroidTabletApp),
            appStore : (device.isIpadApp),
            macStore : (device.isMacOSApp)
        }

        var data = {
            danceRoom : loc(2918),
            roomNumber : room,
            title : loc(2797),
            step1 : loc(2839),
            step2 : loc(2888),
            step3 : loc(2842),
            helpInfo : loc(3011),
            platformData : platformsTemplate(platform)
        }

        return noPhoneModalTemplate(data);
    }


    // Controls the content of the middle part of the screen (the "preview area") during song selection. Shows
    // highscores, the selectes song's album cover, title and artist name, and social stats
    function Modal(core) {
        this.core = core;
        this.gui = core.gui;

        this.isShown = false;

        this.$ModalBG = $('.modal');
        this.$ModalContentWrapper = this.$ModalBG.find(".modal__container");
        this.$CloseButton = this.$ModalBG.find(".modal__close");

    };

    Modal.prototype = {
        init: function() {
            console.log('%cÃ¢Å“â€', 'color:#339933; background:#CCFF00', 'Modal initialized');

            var self = this;
            this.$CloseButton.on('click', self.hide.bind(self));

            this.core.keydownHandler.initState("modal", 
                [{
                    keys : ["ESCAPE", "ENTER", "PLAY", "RETURN"],
                    callback : function() {
                        self.hide();
                    }
                }]);
        },

        show: function() {
            this.$ModalBG.addClass("modal--active");
            this.$ModalContentWrapper.addClass("modal__container--active");

            this.core.keydownHandler.setState("modal");
            this.core.audio.playSFX('connect-info-pannel', { volume: 1 });

            this.isShown = true;
        },

        hide: function() {

            if (!this.isShown) {
                return;
            }

            this.core.audio.playSFX('config-window-close', { volume: 1 });
            this.$ModalBG.removeClass("modal--active");
            this.$ModalContentWrapper.removeClass("modal__container--active");
            this.core.keydownHandler.setPreviousState();

            this.isShown = false;
        },

        build: function(name) {

            var options = {};

            if (name === "connectionNoPhone") {
                options.contentHTML = buildConnectionNoPhoneModal(this.core.room);
            }

            this.update(options);
            this.openMacStore();
            this.handleIframes();
        },

        update: function(options) {
            // set gradient to show focus on an underlying zone
            this.$ModalContentWrapper.html(options.contentHTML);
            var self = this;

            this.$ModalContentWrapper
                        .find(".modal__link")
                        .on("click", function(){
                            self.core.audio.playSFX("coverflow-click", {volume : 1});
                        });
            
        },

        handleIframes: function() {
            var self = this,
                $openIframe = $('.openIframe');

            if(!$openIframe[0]) { return; }

            $openIframe.on('click', function(event) {
                if (!!device.isIpadApp || !!device.isAndroidTabletApp || !!device.isMacOSApp) {
                    event.preventDefault();

                    var data__href = $(this).attr('href');
                    self.core.gui.iframe.build(data__href);
                }
            });
        },

        openMacStore: function() {
            this.$ModalBG.find(".platform_macos").on('click', function(event) {
                if (!!device.isMacOSApp) {
                    event.preventDefault();
                    window.webkit.messageHandlers.jsHandler.postMessage("macappstore://apps.apple.com/app/id1478418722");
                }
            });
        }
        
     };

    return Modal;

});
define('gui',[
	'jquery', 
	'lodash', 
	'pubsub',
	'device',
	'utils',
	'environment',
	'loc',
	'keyboard',

	'songs',
	'avatars',
	'toasts',
	'banner',
	'connectionInfo',
	'coverflowTabs',
	'songSelection', 
	'tutorial',
	'hud',
	'previewArea',
	'adminMenu',
	'popup',
	'iframe',
	'afterDance',
	'modal',
	'trackerUtils'

],function(
	j,
	_,
	pubsub,
	device,
	utils,
	env,
	loc,
	KEYBOARD,

	songs,
	avatars,
	Toasts,
	Banner,
	ConnectionInfo,
	CoverflowTabs,
	SongSelection,
	Tutorial, 
	HUD,
	PreviewArea, 
	AdminMenu,
	PopUp,
	Iframe,
	AfterDance,
	Modal,
	trackerUtils

) {

	'use strict';


	var CC_SHUTDOWN_DELAY = 15;
	var DEVICE_SOCKET_CLOSE_TIME = 60; // in secs

	
	// Umbrella module for most of the visual game components, but also contains assorted functionality. One major
	// responsibility is driving the gameplay during dance; it creates the main game loop by continuously requesting
	// animation frames. It it also repsonsible for handling the few/many mode transitions.
	function GUI(core) {
		this.core = core;

		this.fadeOutStarted = false;

		this.tutorialInterval = '';
		this.currentLeaderAvatar = '';

		this.animate = !device.isWeak;
	}

	GUI.prototype = {

		init: function () {
			console.log('%cÃ¢Å“â€', 'color:#339933; background:#CCFF00', 'GUI initialized');
			this.updateControlsVisibility();
			this.setupFullScreenButton();
			this.registerUserClickOnDOM();

			this.loadAllComponents();
		},

		updateControlsVisibility: function () {
			j('html').toggleClass('show-controls', env.supportsClickInteraction);
		},

		destroyDOM : function() {
			this.core.jBody.html('');
		},

		// To register click event from player, new browser policies
		registerUserClickOnDOM: function() {
			var self = this;
			this.core.jBody.on('click', function() {
				if (!!self.core.isUserInteractionRequired) {
					self.core.isUserInteractionRequired = false;
				}
			});
		},

		setupFullScreenButton: function () {
			var core = this.core;
			var $fullscreenBtn = this.core.jSettings.find('.toggle-fullscreen');

			if (document.fullscreenEnabled) {
				$fullscreenBtn.show();
				$fullscreenBtn.on('click', function () {
					utils.toggleFullscreen();
					j(this).trigger('blur'); // Unfocus btn
					core.audio.playSFX('config-window-close', { volume: 1 }); //Clicked audio implemented
					trackerUtils.triggerTracking('full-screen', core.countPlayers()); //Tracking FULL SCREEN MODE
				});

				$(document).keydown(function(e) {
					if (e.which == KEYBOARD.F11) {
						e.preventDefault();//kill anything that browser may have assigned to it by default
						utils.toggleFullscreen();
				   }
				});
			} else {
				$fullscreenBtn.remove();
			}
		},

		// Called when the controller has changed. Updates visuals
		setControlStateForPhone: function () {
			console.log('gui>setControlStateForPhone');
			if (this.core.state !== 'dance') {
				this.showSwipeTip();
			}
			this.hud.players.updateController();
			this.adminMenu.updateController(this.core.controller);
			this.previewArea.songDetails.updateRewards();
		},

		// Shows a "toast" in the lower part of the screen. A toast is a text message that is shown for limited amount
		// of time. Toasts can be queued.
		// Arg types     String,  Object,  String
		toast: function (message, options, image) {
			var _options = options || {};
			this.toasts.pushToast(message, _options, image);
		},

		// Update room number and VIP status.
		updateRoom: function () {
			this.core.jRoom.find('.danceroom__number').html(this.core.room);
			this.core.jRoom.find('.danceroom__label').html(loc(2918));
		},


		hideSwipeTip: function() {
			this.core.jSwipe.fadeOut(1);
		},

		// In many mode, show a banner saying something like "PLAYER X IS CHOOSING A SONG"
		showSwipeTip: function() {
			if (this.core.countPlayers() ||
				!this.hud.players.isManyMode ||
				!_.contains(['songSelection', 'coachSelection'], this.core.state)) { return; }

			var controller = this.core.players[this.core.controller];
			var HTML = '';
			HTML += avatars.getAvatarHtml(controller.avatar);
			HTML += '<h3>' + this.playerName(controller) + ' ' + loc(1148) + '</h3>'; // 1148: Web_Song_Select_Page_Waiting
			this.core.jSwipe.html(HTML);
			this.core.jSwipe.fadeIn(1);
		},

		// Not used? TODO: remove
		showSwipingDone: function() {
			j('span.message').text(''); // removed string as it is not a part of oasis
		},

		////////// [ FEW VS MANY ] //////////

		addPlayer: function(player) {
			this.updateControlsVisibility();
			this.hud.addPlayer(player);

			// First player to enter room
			if (this.core.countPlayers() === 1) {
				this.connectionInfo.hide();
				this.modal.hide();
			}

			this.adminMenu.addPlayer(player);
			this.previewArea.updateHighscoreDisplay(this.core.song);

			this.toasts.showPlayerJoinedToast(player);

			if (device.isChromecast) {
				clearTimeout(this.shutdownTimeout);
			}
		},

		removePlayer: function(player) {
			this.updateControlsVisibility();
			
			this.adminMenu.removePlayer(player);
			this.hud.removePlayer(player);
			this.previewArea.updateHighscoreDisplay(this.song);

			this.toasts.playerLeftToast(player);

			if (this.core.countPlayers() === 0) {
				this.connectionInfo.show();
				if (device.isChromecast) {
					// Add 7 seconds to the timeout, that's how long the "player disconnected" toast will be visible
					// before we show the "closing in 15 seconds" toast
					this.shutdownTimeout = setTimeout(function() {
						this.core.reset();
					}.bind(this), (7 + CC_SHUTDOWN_DELAY) * 1000);
					this.toasts.closeChromecastToast(CC_SHUTDOWN_DELAY);
				}
			}
		},

		// If a player updates his avatar during after dance, this function is called. It updates the avatar visual in
		// e.g. the leader board.
		updateResultAvatars: function() {
			var self = this;
			this.core.jAfterDance.find('.avatar').each(function () {
				var p = self.core.players[j(this).attr('playerID')];
				if (p) {
					j(this).css({'background-image': 'url('+avatars.getAvatarUrl(p.avatar)+')'});
				}
			});
		},

		// Helper function that returns a HTML String representing the player's name. May be "golden", if the player is
		// VIP.
		playerName: function(p) {
			if (_.isObject(p) && p.expiration > Date.now() || p.renewalDate > Date.now()) {
				return '<em class="player-name-vip">'+p.name+'</em>';
			}
			return '<em>'+p.name+'</em>';
		},

		////////////////

		// Called when the game goes from being VIP to not being VIP.
		lockRoom: function() {
			// Toast
			this.toast(loc(1166)); // 1166: Web_Generic_Text_TrialRoom

			songs.showCategories({ freeToPlay: true });

			// Yellowy stuff
			j('html').removeClass('vip');
			this.showLockAnimation();

			// Update players
			this.hud.players.hideVIP();

			// Update adminMenu
			this.core.jAdminMenu.find('.player-name-vip').removeClass('player-name-vip');

			this.updateRoom();
		},

		// Called when the game goes from not being VIP to being VIP.
		unlockRoom: function() {
			// Toast
			this.toast(loc(1168)); // 1168: Web_Generic_Text_Full

			songs.hideCategories({ freeToPlay: true });

			// Add global styling class. This gives the unlock animation a golden color (amongst other things)
			j('html').addClass('vip');

			// Play audio SFX and lock animation
			if (this.core.state) {
				this.core.audio.playSFX('unlock-game', { volume: 0.236 });
				this.showLockAnimation();
			}

			this.updateRoom();
		},

		// Private helper function
		showLockAnimation: function() {
			if (this.core.jContainer.is(':hidden')) { return; }

			var $lock = this.core.jUnlockTransition;
			$lock.show().fromTo(1, { opacity: 0.5 }, { opacity: 0 }).then($lock.hide);
			return this.core.jRoom.fromTo(0.3, { transform: 'translate3d(-5%,0,0)' }, { transform: 'translate3d(-0,0,0)' });
		},

		// Called when a song has been purchased, either by a phone player or the local player.
		// TODO: Don't just copy the unlock VIP effect
		playUnlockSongEffect: function(bundlePurchased) {
			if (!this.core.state) {
				this.core.initDeferred.then(this.playUnlockSongEffect.bind(this, bundlePurchased));
				return;
			}

			// Add global styling class. This gives the unlock animation a golden color (amongst other things)
			j('html').addClass('unlock-song');

			// if bundle was bought, toast
			if (bundlePurchased) {
				this.toast(loc(2277), { queue: true }); // 2277: Web_Store_Item_JD20162
			}

			this.core.audio.playSFX('unlock-game', { volume: 0.236 });
			this.showLockAnimation().then(function () { j('html').removeClass('unlock-song'); });
		},


		// Register events when app toggles between sleep & normal mode
		handleSleepMode: function(isGamePaused) {
			var self = this,
			    isSleepingCount = 0,
			    isSleepClose = false;

			if (!!isGamePaused) {
			    this.core.isDeviceSleepMode = true;
			    if (!!device.isMacOSApp || !!device.isIpadApp) {
			    	this.core.audio.muteVolume(true); // mute it when MacOS or IPAD app goes to background
			    } else {
			    	this.core.audio.setVolume(0); // mute it in sleep mode
			    }

			    // execute it only for IPAD & ANDROID TABLET
			    // not for MacOS
			    if (!device.isMacOSApp) {
				    self.timerSleep = setInterval(function() {
				        isSleepingCount += 1;
				        if (isSleepingCount > DEVICE_SOCKET_CLOSE_TIME) {
				            isSleepClose = true;
				            self.core.ws.close();
				            self.destroyDOM();
				        }
				    }, 1000);
				}
			} else {
			    this.core.isDeviceSleepMode = false;
			    if (!!device.isMacOSApp || !!device.isIpadApp) {
			    	this.core.audio.muteVolume(false); // unmute it when MacOS or IPAD app comes into focus
			    } else {
			    	this.core.audio.setVolume(0.5); // unmute it in active mode
			    }

			    // execute it only for IPAD & ANDROID TABLET
			    // not for MacOS
			    if (!device.isMacOSApp) {
				    self.timerSleep && clearInterval(self.timerSleep);
				    delete self.timerSleep;
				    isSleepingCount = 0;
				    if (!!isSleepClose) {
				        self.core.reset();
				    }
				}
			}
		},
		

		updateRacetrack: function(data) {
			this.hud.racetrack.updateRacetrack(data);
		},

		updateBalloons: function(data) {
			this.hud.balloons.display(data);
		},

		loadAllComponents: function() {

        		this.connectionInfo = new ConnectionInfo(this.core);

        		this.banner = new Banner(this.core);
			this.banner.init();

        		this.toasts = new Toasts(this.core);
			this.toasts.init();

        		//Initialize modal
            this.modal = new Modal(this.core);
            this.modal.init();

        	//Initialize coverflow tabs
            this.coverflowTabs = new CoverflowTabs(this.core);
            this.coverflowTabs.init();

            // Initialize song selection
            this.songSelection = new SongSelection(this.core);
            this.songSelection.init();

            // Initialize tutorial
            this.tutorial = new Tutorial(this.core);

            // Initialize HUD
            this.hud = new HUD(this.core);

            // Initialize coach selection
            this.previewArea = new PreviewArea(this.core);
            this.previewArea.init();

            // Initialize admin menu
            this.adminMenu = new AdminMenu(this.core);
            this.adminMenu.init();

            // Initialize admin menu
            this.popUp = new PopUp(this.core);

            // Initialize after dance
            this.afterDance = new AfterDance(this.core);
            this.afterDance.init();

            // Initialize iframe only for tablets & MacOS
            if (!!device.isIpadApp || !!device.isAndroidTabletApp || !!device.isMacOSApp) {
            	this.iframe = new Iframe(this.core);
            	this.iframe.init();
            }

        }

	};

	return GUI;
});
define('video',[
	'jquery',
	'lodash',
	'device',
	'loc',
	'trackerUtils'
], function (
	$,
	_,
	device,
	loc,
	trackerUtils
) {
	'use strict';

	// This file should in some smart way separate the video from the rest
	// so we can run on chomecast, smart-tvs and devices without flash support

	var STALLING_LIMIT = 10 * 1000;
	var END_OF_SONG = 15 * 1000;

	function Video(core) {
		this.core = core;
		this.started = false;
	}

	// Encapsulates dance video playback functionality. Listens for video player stats changes and acts accordingly.
	Video.prototype = {

		init: function() {
			console.log('%cÃ¢Å“â€', 'color:#339933; background:#CCFF00', 'Video initialized');
			this.videoPlayer = this.core.inGameVideoPlayer;

			this.$HTML = this.core.jHTML;
			this.$ResumeVideo = this.core.jContainer.find('.resume-video');
		},

		setup: function() {
			// Reset the state from previous dance
			this.onPlayCalled = false;
			this.lastTime = 0;
			this.started = false;

			this.setupDoneDfd = $.Deferred();

			var self = this;
			var player = this.videoPlayer;

			player.off(); // Remove all current callbacks

			player.on(player.events.STATE_CHANGE, this.onStateChanged.bind(this));
			player.on(player.events.TIME_CHANGE, this.onTimeChanged.bind(this));
			player.on(player.events.ERROR, this.onError.bind(this));
			player.on(player.events.QUALITY_CHANGE, this.onQualityChanged.bind(this));

			if (player.name === 'HLSPlayer') {
				this.setupDoneDfd.resolve();
			}

			return this.setupDoneDfd;
		},

		// Play a dance video
		play: function() {
			this.core.currentVideo = '';
			this.videoPlayer.play();
			//this.videoPlayer.setVolume(100);

			//Tracking song start
			trackerUtils.trackJdnowEvents('Scoring Mode Pages', 'SongStart', this.core.controller);
		},

		// Stop a dance video
		stop: function () {
			if (!this.started) { return; }
			this.started = false;

			this.videoPlayer.stop();
			this.videoPlayer.off();

			device.isIpad && this.core.calculateAspectRatio('4:3');

			//Tracking song end
			trackerUtils.trackJdnowEvents('Scoring Mode Pages', 'SongEnd', this.core.controller);

			// Track dance missed moves when only in debug mode
			if (!!this.core.isDebug) {
				this.core.ws.sendReadable({ func: 'missedMoves', count: this.core.debug.deviationCount });
			}
		},

		pause: function () {
			this.videoPlayer.pause();
		},






		startPlaying: function () {
			if (!this.started) {
				this.started = true;
				this.videoPlayer.pause();
				this.setupDoneDfd.resolve();
			}
			this.setBufferingState(false);
		},

		onStateChanged: function (state, prevState) {
			var states = this.videoPlayer.states;
			switch (state) {
				case states.PAUSED:
				case states.BUFFERING:
					this.videoBufferingState(state === states.BUFFERING, prevState === states.PLAYING);
					break;
				case states.PLAYING:
					this.onPlayCalled = true;
					this.videoPlayingState();
					break;
				case states.IDLE:
				case states.UNINSTANTIATED:
					this.videoIdleState();
					break;
			}
		},

		// Called when the video player starts/stops buffering
		// Arg types                 Boolean
		setBufferingState: function (buffering) {
			pubsub.publish('bufferingStateChanged', [ buffering ]);
		},


		videoPlayingState: function() {

			var videoQuality = this.videoPlayer.getCurrentQuality();
			this.core.ws.sendReadable({ func: 'streamQuality', val: videoQuality });

			if (this.started) {
				this.core.ws.sendReadable({ func: 'bufferEnd', ts: Date.now() });
				this.setBufferingState(false);
			} else {
				this.startPlaying();
				ga('send', 'event', 'video', 'started');
			}
			if (device.isiOS) {
				this.$ResumeVideo.fadeOut(0);
				this.$HTML.removeClass('paused');
			}
		},

		videoBufferingState: function(isBuffering, wasPlaying){
			this.core.ws.sendReadable({ func: 'bufferStart', ts: Date.now() });
			if (!wasPlaying) {
				return;
			}

			if (isBuffering) {
				this.setBufferingState(true);
				this.core.ws.sendReadable({ func: 'streamQuality', val: 'starving' });
			}

			// Add a silly resume touch event to iPad (useful for example when a PIP video pauses our video)
			if (device.isiOS && !isBuffering) {
				this.$HTML.addClass('paused');
				this.$ResumeVideo.fadeIn(0.45, 0.5);
				this.$ResumeVideo.one('touchstart click', this.inGameVideoPlayer.resume);
			}
		},

		videoIdleState: function() {
			if (device.isiOS) {
				this.$ResumeVideo.fadeOut(0);
				this.$HTML.removeClass('paused');
			}
			this.setBufferingState(false);
		},


		onTimeChanged: function (time) {
			pubsub.publish('videoTimeChanged', [ time ]);
			if (this.core.isDebug) {
				this.core.debug.updateDebug(time); // debug sync
			}

			if (device.isChromecast) {
				this.handleTimeChangedChromecast(time);
			}
			
			if (device.isIpad) {
				this.handleTimeChangedIpad(time);
			}

			this.lastTime = time;

			if (this.onPlayCalled || 
				!this.videoPlayer.isPlaying() || 
				!this.core.gui.hud.visible) { 
				return; 
			}
			
			console.warn('Error: did not get onPlay but onTime. Starting song! Am I Firefox?');
			this.onPlayCalled = true;
			this.startPlaying();
		},

		onError: function (e) {
			// Track error with Google Analytics
			var description = [this.core.song, device.browser, device.version, device.os, device.model];
			if (device.isChromecast) {
				description.push('isChromecast');
			} else if (device.isIpadApp) {
				description.push('isIpadApp');
			} else if (device.isAndroidTabletApp) {
				description.push('isAndroidTabletApp');
			}
			ga('send', 'event', {
				'eventCategory': 'video',
				'eventAction': 'error',
				'eventLabel': description.join(',')
			});

			console.warn('Player returned an error', e);
			this.core.onVideoError();

			// Track song Load error
			trackerUtils.trackClickEvents('Song load error: '+ e +' - songName: '+ this.core.song + ' - Session: '+ this.core.session + ' - Device: ' + this.core.device);

			this.setupDoneDfd.reject();
		},


		onQualityChanged: function (e) {
			if (e.sourceQuality) { // sourceQuality is sometimes null or empty
				var currentQuality = e.sourceQuality.split(' ')[1];
				this.core.ws.sendReadable({ func: 'streamQuality', val: currentQuality });
			} else {
				// for HLS player birate tracking
				this.core.ws.sendReadable({ func: 'streamQuality', val: e });
			}
		},

		// On Chromecast, some videos freeze without error or state change.
		// If the player has been frozen for a long time, consider the song as finished.
		// Only do this check at the end of songs, as the video player may stall for a long time in the
		// beginning of a song, but that's fine.
		handleTimeChangedChromecast : function(time) {
			if(!this.onPlayCalled || this.videoPlayer.getDuration() - time >= END_OF_SONG) {
				return;
			}

			clearTimeout(this.videoPlayerStalledTimeout);
			this.videoPlayerStalledTimeout = setTimeout(function() {
				// We only consider the player stalled, if it reports being in PLAYING state
				// but still does not produce TIME_CHANGE events; that is clearly wrong
				if (!this.videoPlayer.isPlaying()) { return; }

				console.warn('Video player stalled, assuming video playback done.');
				this.core.gui.hud.requestResults(false);
			}.bind(this), STALLING_LIMIT);
		},

		// If the user plugs his headphones in and out on iPad strange things happen. The video stops playing but the
		// time keeps ticking for another five seconds, before it backs up. This repeats for infinity. So we check for
		// the point where the current time of the video is backed and trigger a resume at that point.
		handleTimeChangedIpad : function(time) {
			if(this.lastTime > time && this.videoPlayer.isPlaying()) {
				console.warn('Current video time is decreasing! Resume.');
				this.videoPlayer.resume();
			}
		}

	};

	return Video;

});

define('buildGameService',[
    'jquery',
    'device',
    'songs',
    'avatars',
    'loc',
    'es6Promise',
    'utils',
    'landingPageUtils',
    'videoPlayerFactory',
    'gui',
    'popup',
    'video'

], function (
    $,
    device,
    songs,
    avatars,
    loc,
    es6Promise,
    utils,
    landingPageUtils,
    videoPlayerFactory,
    GUI,
    PopUp,
    Video
) {

    'use strict';

    var SPINNER_TIMEOUT = (device.isChromecast || device.isIpadApp || device.isAndroidTabletApp) ? 0 : 2000;
    var Promise = es6Promise.Promise;

    var addGaTracker = function() {
        var ga_script = document.createElement('script');
        ga_script.id = 'gaTracker';
        ga_script.text = "(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'script','//www.google-analytics.com/analytics.js','ga');ga('create', '"+gaTid+"', '"+gaTurl+"');ga('send', 'pageview');";

        document.head.appendChild(ga_script);

        if (!!localStorage.roomNr) {
            ga('send', 'event', 'room-nr', localStorage.roomNr.toString().substr(0, 1));
        }
    }

    /////////////////////////////////////////////////////////////////////////////////
    ///
    ///     Show init Error
    ///
    /////////////////////////////////////////////////////////////////////////////////

    var displayErrorInitialization = function(jd) {
        detachLoadingScreen();
        jd.calculateAspectRatio();

        var contentLoc = device.isChromecast ? loc(3500) : loc(3501);
        jd.popUp.build({
            title : loc(3138),
            content : contentLoc.replace(/\\n/g, '<br>'),
            isError : true,
            validateCB : function() {
                jd.reset();
            }
        });
    };



    /////////////////////////////////////////////////////////////////////////////////
    ///
    ///     PREPARE GAME & GET ALL DEPENDENCIES
    ///
    /////////////////////////////////////////////////////////////////////////////////

    // Store references to commonly used DOM elements, for performance reasons - it is expensive to query the DOM
    // all the time!
    // AL : very bad ! do not reproduce ! reference to UI elements should be in their respective view manager
    var prepareDOM = function(jd) {
        jd.jHTML = $('html');
        jd.jBody = $('body');
        jd.jContainer = $('#just-dance-now');
        jd.jViews = jd.jContainer.find('.views');
        jd.jHUD = jd.jContainer.find('.hud');
        jd.jPlayers = $('#players');
        jd.jVideo = $('#in-game-video');
        jd.jRoom = $('#room-info');
        jd.jSwipe = $('#swipe');
        jd.jAfterDance = $('#afterdance');
        jd.jPictos = $('#pictos');
        jd.jBeat = $('#beat');
        jd.jUnderline = $('#picto-underline');
        jd.jLyrics = $('#lyrics');
        jd.jLyricsLine0 = $('#line0');
        jd.jLyricsLine1 = $('#line1');
        jd.jToast = $('#toast');
        jd.jRaceTrack = $('#racetrack');
        jd.jDt = $('#dance-transition');
        jd.jSpinner = $('.fullscreen-spinner');
        jd.jUnlockTransition = $('#unlock-transition');

        jd.jCoverFlow = $('#coverflow');
        jd.jCoverflowTabs = $('#section-tabs');
        jd.jCoverflowContainer = $('.coverflow--container');
        jd.jSongSelection = $('#song-selection');
        jd.jSongSelectionLists = $('#song-selection-lists');
        jd.jPlaylistSection = $('#section-playlist');
        jd.jSonglistSection = $('#section-songlist');

        jd.jPreviewArea = $('#preview');
        jd.jGoldMove = $('#goldmove');
        jd.jPictos = $('#pictos');
        jd.jBalloons = $('#balloons');
        jd.jAdminMenu = $('#admin-menu');
        jd.jUserSettings = $('#user-settings');
        jd.jDancercard = $('#dancercard');
        jd.jSettings = $('#settings');
    };


    // Load gui.html (the main game HTML file)
    var loadGameHTML = function(jd) {

        return $.get(cdn + '/web/gui.html')
        .then(function(guiHtml) {
            // Append game CSS
            var cssLoadedDfd = utils.addElementToElement('head', 'link', {
                href: cdn + '/web/css/game.css',
                rel: 'stylesheet'
            }, true);

            // Append lyrics style rules
            utils.addElementToElement('head', 'style', {
                type: 'text/css',
                id: 'lyrics-style-rules'
            });

            // Append IMA SDK
            utils.addElementToElement('body', 'script', {
                src: '//imasdk.googleapis.com/js/sdkloader/ima3.js'
            });

            // Prepend actual HTML
            $('body').prepend(guiHtml);

            return cssLoadedDfd;

        }).then(function() {
            prepareDOM(jd);
            jd.popUp = new PopUp(jd);

            return;
        });
    };



    var setUpGame = function(jd, isNoScoringMode) {
        if (!!device.isChromecast || !!device.isMinimalUI || device.isAndroidTvBrowser) {
            addGaTracker();
        } else {
            if (!$('#gaTracker').length > 0) {
                addGaTracker();
            }
        }

        jd.isNoScoringMode = !!isNoScoringMode;

        if (jd.isNoScoringMode) {
            ga('send', 'event', 'No_Scoring_Mode', 'Access', 'NSM_Access');
        } else {
            ga('send', 'event', 'Scoring_Mode', 'Access', 'SM_Access');
        }

        jd.isInitializing = false;
        jd.hasInitialized = true;
       
    };


    /////////////////////////////////////////////////////////////////////////////////
    ///
    ///     BUILD VIDEO PLAYER
    ///
    /////////////////////////////////////////////////////////////////////////////////

    var buildVideoPlayer = function(jd) {
        return $.when(jd.inGameVideoPlayer ? jd.inGameVideoPlayer : videoPlayerFactory.createPlayer())
        .then(function(videoPlayer) {
            jd.inGameVideoPlayer = videoPlayer;
            return jd.inGameVideoPlayer;
        });
    };


    /////////////////////////////////////////////////////////////////////////////////
    ///
    ///     GET CATALOG
    ///
    /////////////////////////////////////////////////////////////////////////////////

    // Fetch all the JSON files needed by the game, in parallel.
    // Returns a Promise that is resolved when all files have been fetched.
    var getCatalog = function(jd) {

        return Promise.all([
            jd.getApiReadable( 'getCategories', {'lang': lang} ),
            $.getJSON(jd.api + 'songs/published'),
            $.getJSON(jd.api + 'avatars/'),
            jd.getApiReadable( 'getSongsPrice' ),
            jd.getApiReadable( 'getXPRewards' )

        ]).then(function(results) {

            songs.setCategories(results[0]);

            if (!jd.roomFTUEStates.PlaylistLimit) {
                songs.showOnlyCategories(function(cat) {
                    return cat.trackingId === 'FTUE';
                });
            } else if (jd.isRoomVIP) {
                songs.showOnlyCategories(function(cat) {
                    return !cat.freeToPlay;
                });
            }

            songs.setSongs(results[1]);
            avatars.setAvatars(results[2]);

            songs.setPrice(results[3].songsPrice);
            songs.setRewards(results[4]);
        
        });
      
    };



    /////////////////////////////////////////////////////////////////////////////////
    ///
    ///     BUILD BEHAVIOURS
    ///
    /////////////////////////////////////////////////////////////////////////////////

    // Creates a <style> tag containing classes with URLs to all the song covers. Can be used to set the background
    // image of an arbitrary HTMLElement by simply adding a song's id as a class to that element.
    var buildSongCoversCss = function() {
        var cssRules = _.map(songs.getSongIds(), function(song) {
            var songStr = utils.changeNoToClassCss(song);

            return '.' + songStr + ' { background-image: url(' +
                songs.getSong(song).base + '/assets/web/' + song.toLowerCase() + '.jpg' + ') }';
        }, this).join('\n');

        $('<style>').attr('type', 'text/css').text(cssRules).appendTo('head');
    };


    // Load in-game svg images by loading the file
    var buildGameSVG = function() {
        var loadGame_svg_url = cdn + "/web/svg/sprite-game.svg";

        if (window.XMLHttpRequest) { //for firefox, opera and safari browswers
            var svgFile = new XMLHttpRequest();
        }

        svgFile.onreadystatechange = function() {
            if (svgFile.readyState == 4 && svgFile.status == 200) {
                var svgData = svgFile.responseText;
                $('#sprite-landing').after(svgData);
            }
        };

        svgFile.open("GET", loadGame_svg_url, true);
        svgFile.send();
    };



    //this is jd
    var handleKeyDownInGameStates = function(adminMenu, isSelectAction) {
        if (!isSelectAction) {
            adminMenu.buildPopUp();
        } else {
            adminMenu.adminMenuShow.call(adminMenu);
        }
    };

    var initGenericKeyDownStates = function(jd) {
           //dance state handled in jd.js
        var adminMenu = jd.gui.adminMenu;
        var inGameStateHandlerModel = [{
            keys : ["ENTER", "SPACE"],
            callback : handleKeyDownInGameStates.bind(jd, adminMenu, true)
        },{
            keys : ["ESCAPE", "RETURN"],
            callback : handleKeyDownInGameStates.bind(jd, adminMenu, false)
        }];
        
        jd.keydownHandler.initState("tutorial", inGameStateHandlerModel);
        jd.keydownHandler.initState("dance", inGameStateHandlerModel);

    };

    var buildGameUI = function(jd) {

       // Initialize video
        jd.video = new Video(jd);
        jd.video.init();

         // Initialize GUI
        jd.gui = new GUI(jd);
        jd.gui.init();

        initGenericKeyDownStates(jd);

        buildSongCoversCss();
        buildGameSVG();
        // Set correct state
        jd.setState('songSelection');
        jd.uiDeferred.resolve();

    };

    /////////////////////////////////////////////////////////////////////////////////
    ///
    ///     DISPLAY PAGE
    ///
    /////////////////////////////////////////////////////////////////////////////////


    var displayGamePage = function(jd, launchDoneDfd) {

        jd.gui.updateRoom();
        // Calculate aspect ratio when done
        jd.calculateAspectRatio();

        if (device.isChromecast) {
            // We know Chromecast has a wide aspect ratio
            jd.jHTML.addClass('wide');
        }

        // on Resize window : bind event to keep the aspect ratio
        $(window).resize(function() {
            jd.calculateAspectRatio();

            var width = jd.$QrCode.width();
            landingPageUtils.scaleQrCode(jd.qrCode, width);
        }.bind(jd));

        // capture the fullscreen event on the most common browsers
        $(document).on('webkitfullscreenchange mozfullscreenchange fullscreenchange', jd.calculateAspectRatio.bind(jd));

        jd.jContainer.fadeIn(0.5).then(function() {
            launchDoneDfd.resolve();
        });

        jd.$QrCode = jd.jContainer.find(".qr-code");
        var scaledQrCode = landingPageUtils.scaleQrCode(jd.qrCode, jd.$QrCode.width());
        jd.$QrCode.append(scaledQrCode);
    };




    /////////////////////////////////////////////////////////////////////////////////
    ///
    ///     SPINNER
    ///
    /////////////////////////////////////////////////////////////////////////////////


    var appendSpinner = function() {
        if (!!device.isMacOSApp) { return; }
        var $spinner = $('<div class="init-spinner init-spinner--splash"><svg viewBox="0 0 612 612" class="init-spinner__spinner"><use xlink:href="#icon-global-spinner"></use></svg></div>');
        $spinner.appendTo($('body'));
    };


    var detachLoadingScreen = function() {
        if (!!device.isMacOSApp) {
            $('.landing-splash__macOS').fadeOut(0.5).then(function() {
                this.remove();
            });
        } else {
            $('body').find(".init-spinner").detach();
        }
    };

    var detachLandingScreen = function() {
        if (!!device.isMacOSApp) { return; }
        $('body').find(".game_loading").detach();
    };
    
    /////////////////////////////////////////////////////////////////////////////////
    ///
    ///     EXPORT
    ///
    /////////////////////////////////////////////////////////////////////////////////




    var buildGame = function(jd) {

 		// Only load the debug tools if the debug url parameter is present
        window.debug && require(['debug'], function(Debug) {
            jd.debug = new Debug(jd);
        });

        var launchDoneDfd = $.Deferred();

        // Min. timeout for loading screen to be visible properly except for few devices
        setTimeout(function() {
            launchDoneDfd.then(function() {
                pubsub.publish('gameLaunched');
            });

            // Load gui.html and all the JSON data files needed to start the game.
            return Promise.all([getCatalog(jd), buildVideoPlayer(jd)])
            .then(buildGameUI.bind(this, jd))
            .then(displayGamePage.bind(null, jd, launchDoneDfd))
            .then(function() {
                detachLoadingScreen();
                jd.audio.playMenuMusic();
                jd.initDeferred.resolve();
            });
        }, SPINNER_TIMEOUT);

    };



    /////////////////////////////////////////////////////////////////////////////////
    ///
    ///     set up game
    ///
    /////////////////////////////////////////////////////////////////////////////////


    //launch game : via landing page OR player joined
    var buildGameService = function(jd, postTearDownDfd, postInitializationDfd, isNoScoringMode) {
        
        setUpGame(jd, isNoScoringMode);
        
        return postTearDownDfd
        .then(function() {
            detachLandingScreen();
            appendSpinner();
            return loadGameHTML(jd);
        })
        .then(function() {
            return postInitializationDfd;
        })
        .then(buildGame.bind(null, jd))
        .fail(function() {
            loadGameHTML(jd).then(function() {
                detachLandingScreen();
                return displayErrorInitialization(jd);
            })
        });
    };



    return buildGameService;

});

define('tizenRemoteButtons',[],function () {
	'use strict';

	// Tizen remote button key constants
	return Object.freeze({
		BT_LEFT: 4,
		BT_RIGHT: 5,
		BT_UP: 29460,
		BT_DOWN: 29461,

		RETURN: 10009,

		OLD_VOLUMEUP: 7,
		OLD_VOLUMEDOWN: 11,
		VOLUMEUP: 447,
		VOLUMEDOWN: 448,

		MUTE: 449,
		CHANNELUP: 427,
		CHANNELDOWN: 428,
		PREVIOUS: 412,
		NEXT: 417,
		PAUSE: 19,
		RECORD: 416,
		PLAY: 415,
		STOP: 413,
		INFO: 457,
		LEFT: 37,
		RIGHT: 39,
		UP: 38,
		DOWN: 40,
		PANEL_ENTER: 29443,
		BACK: 0,
		RED: 403,
		GREEN: 404,
		YELLOW: 405,
		BLUE: 406,
		MENU: 18,
		ESCAPE: 27,
	});

});
define('keydownHandler',[
    'jquery',
    'lodash',
    'device',
    'keyboard',
    'tizenRemoteButtons'
], function(
    $,
    _,
    device,
    KEYBOARD,
    REMOTE_BUTTONS
) {

    var statesLibrary = {};
    var currentState = [];

    function KeydownHandler(core) {

        statesLibrary["default"] = [];
        this.addEventListener();

        this.previousState = "";
    };


    KeydownHandler.prototype = {

        addEventListener : function() {
            document.body.addEventListener('keydown', this.callback);
        },


        removeEventListener : function() {
            document.body.removeEventListener('keydown', this.callback);
        },


        initState : function(name, values) {

            var state = [];

            for (var i = 0; i < values.length; i++) {
                var item = values[i];

                var keys = _.map(item.keys, function(k) {
                    return KEYBOARD[k] || REMOTE_BUTTONS[k];
                });

                state.push({
                    keys: keys,
                    cb: item.callback
                });
            }

            statesLibrary[name] = state;
        },

        setState : function(newState) {
            if (newState === this.state){
                return;
            }

            this.previousState = this.state;
            this.state = statesLibrary.hasOwnProperty(newState) ? newState : "default";

            currentState = statesLibrary[this.state];
        },

        setPreviousState : function(){
            if (this.previousState){
                this.setState(this.previousState);
            }
        },


        callback: function(ev) {
            var value = ev.keyCode || ev.which;

            for (var i = 0; i < currentState.length; i++) {
                var item = currentState[i];

                if (item.keys && item.keys.indexOf(value) !== -1) {
                    item.cb();
                    return;
                }
            }
        },

        getCurrentState: function() {
            return this.state;
        }
    };



    return KeydownHandler;


});
/*!
 *  howler.js v2.0.0-beta
 *  howlerjs.com
 *
 *  (c) 2013-2015, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */

(function() {

  'use strict';

  // Setup our audio context.
  var ctx = null;
  var usingWebAudio = true;
  var noAudio = false;
  setupAudioContext();

  // Create a master gain node.
  if (usingWebAudio) {
    var masterGain = (typeof ctx.createGain === 'undefined') ? ctx.createGainNode() : ctx.createGain();
    masterGain.gain.value = 1;
    masterGain.connect(ctx.destination);
  }

  /** Global Methods **/
  /***************************************************************************/

  /**
   * Create the global controller. All contained methods and properties apply
   * to all sounds that are currently playing or will be in the future.
   */
  var HowlerGlobal = function() {
    this.init();
  };
  HowlerGlobal.prototype = {
    /**
     * Initialize the global Howler object.
     * @return {Howler}
     */
    init: function() {
      var self = this || Howler;

      // Internal properties.
      self._codecs = {};
      self._howls = [];
      self._muted = false;
      self._volume = 1;

      // Set to false to disable the auto iOS enabler.
      self.iOSAutoEnable = true;

      // No audio is available on this system if this is set to true.
      self.noAudio = noAudio;

      // This will be true if the Web Audio API is available.
      self.usingWebAudio = usingWebAudio;

      // Expose the AudioContext when using Web Audio.
      self.ctx = ctx;

      // Check for supported codecs.
      if (!noAudio) {
        self._setupCodecs();
      }

      return self;
    },

    /**
     * Get/set the global volume for all sounds.
     * @param  {Float} vol Volume from 0.0 to 1.0.
     * @return {Howler/Float}     Returns self or current volume.
     */
    volume: function(vol) {
      var self = this || Howler;
      vol = parseFloat(vol);

      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
        self._volume = vol;

        // When using Web Audio, we just need to adjust the master gain.
        if (usingWebAudio) {
          masterGain.gain.value = vol;
        }

        // Loop through and change volume for all HTML5 audio nodes.
        for (var i=0; i<self._howls.length; i++) {
          if (!self._howls[i]._webAudio) {
            // Get all of the sounds in this Howl group.
            var ids = self._howls[i]._getSoundIds();

            // Loop through all sounds and change the volumes.
            for (var j=0; j<ids.length; j++) {
              var sound = self._howls[i]._soundById(ids[j]);

              if (sound && sound._node) {
                sound._node.volume = sound._volume * vol;
              }
            }
          }
        }

        return self;
      }

      return self._volume;
    },

    /**
     * Handle muting and unmuting globally.
     * @param  {Boolean} muted Is muted or not.
     */
    mute: function(muted) {
      var self = this || Howler;

      self._muted = muted;

      // With Web Audio, we just need to mute the master gain.
      if (usingWebAudio) {
        masterGain.gain.value = muted ? 0 : self._volume;
      }

      // Loop through and mute all HTML5 Audio nodes.
      for (var i=0; i<self._howls.length; i++) {
        if (!self._howls[i]._webAudio) {
          // Get all of the sounds in this Howl group.
          var ids = self._howls[i]._getSoundIds();

          // Loop through all sounds and mark the audio node as muted.
          for (var j=0; j<ids.length; j++) {
            var sound = self._howls[i]._soundById(ids[j]);

            if (sound && sound._node) {
              sound._node.muted = (muted) ? true : sound._muted;
            }
          }
        }
      }

      return self;
    },

    /**
     * Check for codec support of specific extension.
     * @param  {String} ext Audio file extention.
     * @return {Boolean}
     */
    codecs: function(ext) {
      return (this || Howler)._codecs[ext];
    },

    /**
     * Check for browser support for various codecs and cache the results.
     * @return {Howler}
     */
    _setupCodecs: function() {
      var self = this || Howler;
      var audioTest = new Audio();
      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');

      self._codecs = {
        mp3: !!(mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, '')),
        mpeg: !!mpegTest,
        opus: !!audioTest.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ''),
        ogg: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
        wav: !!audioTest.canPlayType('audio/wav; codecs="1"').replace(/^no$/, ''),
        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),
        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
        weba: !!audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ''),
        webm: !!audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, '')
      };

      return self;
    },

    /**
     * iOS will only allow audio to be played after a user interaction.
     * Attempt to automatically unlock audio on the first user interaction.
     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/
     * @return {Howler}
     */
    _enableiOSAudio: function() {
      var self = this || Howler;

      // Only run this on iOS if audio isn't already eanbled.
      if (ctx && (self._iOSEnabled || !/iPhone|iPad|iPod/i.test(navigator.userAgent))) {
        return;
      }

      self._iOSEnabled = false;

      // Call this method on touch start to create and play a buffer,
      // then check if the audio actually played to determine if
      // audio has now been unlocked on iOS.
      var unlock = function() {
        // Create an empty buffer.
        var buffer = ctx.createBuffer(1, 1, 22050);
        var source = ctx.createBufferSource();
        source.buffer = buffer;
        source.connect(ctx.destination);

        // Play the empty buffer.
        if (typeof source.start === 'undefined') {
          source.noteOn(0);
        } else {
          source.start(0);
        }

        // Setup a timeout to check that we are unlocked on the next event loop.
        setTimeout(function() {
          if ((source.playbackState === source.PLAYING_STATE || source.playbackState === source.FINISHED_STATE)) {
            // Update the unlocked state and prevent this check from happening again.
            self._iOSEnabled = true;
            self.iOSAutoEnable = false;

            // Remove the touch start listener.
            document.removeEventListener('touchstart', unlock, false);
          }
        }, 0);
      };

      // Setup a touch start listener to attempt an unlock in.
      document.addEventListener('touchstart', unlock, false);

      return self;
    }
  };

  // Setup the global audio controller.
  var Howler = new HowlerGlobal();

  /** Group Methods **/
  /***************************************************************************/

  /**
   * Create an audio group controller.
   * @param {Object} o Passed in properties for this group.
   */
  var Howl = function(o) {
    var self = this;

    // Throw an error if no source is provided.
    if (!o.src || o.src.length === 0) {
      console.error('An array of source files must be passed with any new Howl.');
      return;
    }

    self.init(o);
  };
  Howl.prototype = {
    /**
     * Initialize a new Howl group object.
     * @param  {Object} o Passed in properties for this group.
     * @return {Howl}
     */
    init: function(o) {
      var self = this;

      // Setup user-defined default properties.
      self._autoplay = o.autoplay || false;
      self._ext = o.ext || null;
      self._html5 = o.html5 || false;
      self._muted = o.mute || false;
      self._loop = o.loop || false;
      self._pool = o.pool || 5;
      self._preload = (typeof o.preload === 'boolean') ? o.preload : true;
      self._rate = o.rate || 1;
      self._sprite = o.sprite || {};
      self._src = (typeof o.src !== 'string') ? o.src : [o.src];
      self._volume = o.volume !== undefined ? o.volume : 1;

      // Setup all other default properties.
      self._duration = 0;
      self._loaded = false;
      self._sounds = [];
      self._endTimers = {};

      // Setup event listeners.
      self._onend = o.onend ? [{fn: o.onend}] : [];
      self._onfaded = o.onfaded ? [{fn: o.onfaded}] : [];
      self._onload = o.onload ? [{fn: o.onload}] : [];
      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];
      self._onpause = o.onpause ? [{fn: o.onpause}] : [];
      self._onplay = o.onplay ? [{fn: o.onplay}] : [];

      // Web Audio or HTML5 Audio?
      self._webAudio = usingWebAudio && !self._html5;

      // Automatically try to enable audio on iOS.
      if (typeof ctx !== 'undefined' && ctx && Howler.iOSAutoEnable) {
        Howler._enableiOSAudio();
      }

      // Keep track of this Howl group in the global controller.
      Howler._howls.push(self);

      // Load the source file unless otherwise specified.
      if (self._preload) {
        self.load();
      }

      return self;
    },

    /**
     * Load the audio file.
     * @return {Howler}
     */
    load: function() {
      var self = this;
      var url = null;

      // If no audio is available, quit immediately.
      if (noAudio) {
        self._emit('loaderror');
        return;
      }

      // Make sure our source is in an array.
      if (typeof self._src === 'string') {
        self._src = [self._src];
      }

      // Loop through the sources and pick the first one that is compatible.
      for (var i=0; i<self._src.length; i++) {
        var ext, str;

        if (self._ext && self._ext[i]) {
          // If an extension was specified, use that instead.
          ext = self._ext[i];
        } else {
          // Extract the file extension from the URL or base64 data URI.
          str = self._src[i];
          ext = /^data:audio\/([^;,]+);/i.exec(str);
          if (!ext) {
            ext = /\.([^.]+)$/.exec(str.split('?', 1)[0]);
          }

          if (ext) {
            ext = ext[1].toLowerCase();
          }
        }

        // Check if this extension is available.
        if (Howler.codecs(ext)) {
          url = self._src[i];
          break;
        }
      }

      if (!url) {
        self._emit('loaderror');
        return;
      }

      self._src = url;

      // Create a new sound object and add it to the pool.
      new Sound(self);

      // Load and decode the audio data for playback.
      if (self._webAudio) {
        loadBuffer(self);
      }

      return self;
    },

    /**
     * Play a sound or resume previous playback.
     * @param  {String/Number} sprite Sprite name for sprite playback or sound id to continue previous.
     * @return {Number}        Sound ID.
     */
    play: function(sprite) {
      var self = this;
      var args = arguments;
      var id = null;

      // Determine if a sprite, sound id or nothing was passed
      if (typeof sprite === 'number') {
        id = sprite;
        sprite = null;
      } else if (typeof sprite === 'undefined') {
        // Use the default sound sprite (plays the full audio length).
        sprite = '__default';

        // Check if there is a single paused sound that isn't ended.
        // If there is, play that sound. If not, continue as usual.
        var num = 0;
        for (var i=0; i<self._sounds.length; i++) {
          if (self._sounds[i]._paused && !self._sounds[i]._ended) {
            num++;
            id = self._sounds[i]._id;
          }
        }

        if (num === 1) {
          sprite = null;
        } else {
          id = null;
        }
      }

      // Get the selected node, or get one from the pool.
      var sound = id ? self._soundById(id) : self._inactiveSound();

      // If the sound doesn't exist, do nothing.
      if (!sound) {
        return null;
      }

      // Select the sprite definition.
      if (id && !sprite) {
        sprite = sound._sprite || '__default';
      }

      // If we have no sprite and the sound hasn't loaded, we must wait
      // for the sound to load to get our audio's duration.
      if (!self._loaded && !self._sprite[sprite]) {
        self.once('load', function() {
          self.play(self._soundById(sound._id) ? sound._id : undefined);
        });
        return sound._id;
      }

      // Don't play the sound if an id was passed and it is already playing.
      if (id && !sound._paused) {
        return sound._id;
      }

      // Determine how long to play for and where to start playing.
      var seek = sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000;
      var duration = ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek;

      // Create a timer to fire at the end of playback or the start of a new loop.
      var ended = function() {
        // Should this sound loop?
        var loop = !!(sound._loop || self._sprite[sprite][2]);

        // Fire the ended event.
        self._emit('end', sound._id);

        // Restart the playback for HTML5 Audio loop.
        if (!self._webAudio && loop) {
          self.stop(sound._id).play(sound._id);
        }

        // Restart this timer if on a Web Audio loop.
        if (self._webAudio && loop) {
          self._emit('play', sound._id);
          sound._seek = sound._start || 0;
          sound._playStart = ctx.currentTime;
          self._endTimers[sound._id] = setTimeout(ended, ((sound._stop - sound._start) * 1000) / Math.abs(self._rate));
        }

        // Mark the node as paused.
        if (self._webAudio && !loop) {
          sound._paused = true;
          sound._ended = true;
          sound._seek = sound._start || 0;
          self._clearTimer(sound._id);

          // Clean up the buffer source.
          sound._node.bufferSource = null;
        }

        // When using a sprite, end the track.
        if (!self._webAudio && !loop) {
          self.stop(sound._id);
        }
      };
      self._endTimers[sound._id] = setTimeout(ended, (duration * 1000) / Math.abs(self._rate));

      // Update the parameters of the sound
      sound._paused = false;
      sound._ended = false;
      sound._sprite = sprite;
      sound._seek = seek;
      sound._start = self._sprite[sprite][0] / 1000;
      sound._stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;
      sound._loop = !!(sound._loop || self._sprite[sprite][2]);

      // Begin the actual playback.
      var node = sound._node;
      if (self._webAudio) {
        // Fire this when the sound is ready to play to begin Web Audio playback.
        var playWebAudio = function() {
          self._refreshBuffer(sound);

          // Setup the playback params.
          var vol = (sound._muted || self._muted) ? 0 : sound._volume * Howler.volume();
          node.gain.setValueAtTime(vol, ctx.currentTime);
          sound._playStart = ctx.currentTime;

          // Play the sound using the supported method.
          if (typeof node.bufferSource.start === 'undefined') {
            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);
          } else {
            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);
          }

          // Start a new timer if none is present.
          if (!self._endTimers[sound._id]) {
            self._endTimers[sound._id] = setTimeout(ended, (duration * 1000) / Math.abs(self._rate));
          }

          if (!args[1]) {
            setTimeout(function() {
              self._emit('play', sound._id);
            }, 0);
          }
        };

        if (self._loaded) {
          playWebAudio();
        } else {
          // Wait for the audio to load and then begin playback.
          self.once('load', playWebAudio);

          // Cancel the end timer.
          self._clearTimer(sound._id);
        }
      } else {
        // Fire this when the sound is ready to play to begin HTML5 Audio playback.
        var playHtml5 = function() {
          node.currentTime = seek;
          node.muted = sound._muted || self._muted || Howler._muted || node.muted;
          node.volume = sound._volume * Howler.volume();
          node.playbackRate = self._rate;
          setTimeout(function() {
            node.play();
            if (!args[1]) {
              self._emit('play', sound._id);
            }
          }, 0);
        };

        // Play immediately if ready, or wait for the 'canplaythrough'e vent.
        if (node.readyState === 4 || !node.readyState && navigator.isCocoonJS) {
          playHtml5();
        } else {
          var listener = function() {
            // Setup the new end timer.
            self._endTimers[sound._id] = setTimeout(ended, (duration * 1000) / Math.abs(self._rate));

            // Begin playback.
            playHtml5();

            // Clear this listener.
            node.removeEventListener('canplaythrough', listener, false);
          };
          node.addEventListener('canplaythrough', listener, false);

          // Cancel the end timer.
          self._clearTimer(sound._id);
        }
      }

      return sound._id;
    },

    /**
     * Pause playback and save current position.
     * @param  {Number} id The sound ID (empty to pause all in group).
     * @return {Howl}
     */
    pause: function(id) {
      var self = this;

      // Wait for the sound to begin playing before pausing it.
      if (!self._loaded) {
        self.once('play', function() {
          self.pause(id);
        });

        return self;
      }

      // If no id is passed, get all ID's to be paused.
      var ids = self._getSoundIds(id);

      for (var i=0; i<ids.length; i++) {
        // Clear the end timer.
        self._clearTimer(ids[i]);

        // Get the sound.
        var sound = self._soundById(ids[i]);

        if (sound && !sound._paused) {
          // Reset the seek position.
          sound._seek = self.seek(ids[i]);
          sound._paused = true;

          if (self._webAudio) {
            // make sure the sound has been created
            if (!sound._node.bufferSource) {
              return self;
            }

            if (typeof sound._node.bufferSource.stop === 'undefined') {
              sound._node.bufferSource.noteOff(0);
            } else {
              sound._node.bufferSource.stop(0);
            }

            // Clean up the buffer source.
            sound._node.bufferSource = null;
          } else if (!isNaN(sound._node.duration)) {
            sound._node.pause();
          }

          // Fire the pause event, unless `true` is passed as the 2nd argument.
          if (!arguments[1]) {
            self._emit('pause', sound._id);
          }
        }
      }

      return self;
    },

    /**
     * Stop playback and reset to start.
     * @param  {Number} id The sound ID (empty to stop all in group).
     * @return {Howl}
     */
    stop: function(id) {
      var self = this;

      // Wait for the sound to begin playing before stopping it.
      if (!self._loaded) {
        if (typeof self._sounds[0]._sprite !== 'undefined') {
          self.once('play', function() {
            self.stop(id);
          });
        }

        return self;
      }

      // If no id is passed, get all ID's to be stopped.
      var ids = self._getSoundIds(id);

      for (var i=0; i<ids.length; i++) {
        // Clear the end timer.
        self._clearTimer(ids[i]);

        // Get the sound.
        var sound = self._soundById(ids[i]);

        if (sound && !sound._paused) {
          // Reset the seek position.
          sound._seek = sound._start || 0;
          sound._paused = true;
          sound._ended = true;

          if (self._webAudio && sound._node) {
            // make sure the sound has been created
            if (!sound._node.bufferSource) {
              return self;
            }

            if (typeof sound._node.bufferSource.stop === 'undefined') {
              sound._node.bufferSource.noteOff(0);
            } else {
              sound._node.bufferSource.stop(0);
            }

            // Clean up the buffer source.
            sound._node.bufferSource = null;
          } else if (sound._node && !isNaN(sound._node.duration)) {
            sound._node.pause();
            sound._node.currentTime = sound._start || 0;
          }
        }
      }

      return self;
    },

    /**
     * Mute/unmute a single sound or all sounds in this Howl group.
     * @param  {Boolean} muted Set to true to mute and false to unmute.
     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).
     * @return {Howl}
     */
    mute: function(muted, id) {
      var self = this;

      // Wait for the sound to begin playing before muting it.
      if (!self._loaded) {
        self.once('play', function() {
          self.mute(muted, id);
        });

        return self;
      }

      // If applying mute/unmute to all sounds, update the group's value.
      if (typeof id === 'undefined') {
        if (typeof muted === 'boolean') {
          self._muted = muted;
        } else {
          return self._muted;
        }
      }

      // If no id is passed, get all ID's to be muted.
      var ids = self._getSoundIds(id);

      for (var i=0; i<ids.length; i++) {
        // Get the sound.
        var sound = self._soundById(ids[i]);

        if (sound) {
          sound._muted = muted;

          if (self._webAudio && sound._node) {
            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume * Howler.volume(), ctx.currentTime);
          } else if (sound._node) {
            sound._node.muted = Howler._muted ? true : muted;
          }
        }
      }

      return self;
    },

    /**
     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.
     *   volume() -> Returns the group's volume value.
     *   volume(id) -> Returns the sound id's current volume.
     *   volume(vol) -> Sets the volume of all sounds in this Howl group.
     *   volume(vol, id) -> Sets the volume of passed sound id.
     * @return {Howl/Number} Returns self or current volume.
     */
    volume: function() {
      var self = this;
      var args = arguments;
      var vol, id;

      // Determine the values based on arguments.
      if (args.length === 0) {
        // Return the value of the groups' volume.
        return self._volume;
      } else if (args.length === 1) {
        // First check if this is an ID, and if not, assume it is a new volume.
        var ids = self._getSoundIds();
        var index = ids.indexOf(args[0]);
        if (index >= 0) {
          id = parseInt(args[0], 10);
        } else {
          vol = parseFloat(args[0]);
        }
      } else if (args.length === 2) {
        vol = parseFloat(args[0]);
        id = parseInt(args[1], 10);
      }

      // Update the volume or return the current volume.
      var sound;
      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
        // Wait for the sound to begin playing before changing the volume.
        if (!self._loaded) {
          self.once('play', function() {
            self.volume.apply(self, args);
          });

          return self;
        }

        // Set the group volume.
        if (typeof id === 'undefined') {
          self._volume = vol;
        }

        // Update one or all volumes.
        id = self._getSoundIds(id);
        for (var i=0; i<id.length; i++) {
          // Get the sound.
          sound = self._soundById(id[i]);

          if (sound) {
            sound._volume = vol;

            if (self._webAudio && sound._node) {
              sound._node.gain.setValueAtTime(vol * Howler.volume(), ctx.currentTime);
            } else if (sound._node) {
              sound._node.volume = vol * Howler.volume();
            }
          }
        }
      } else {
        sound = id ? self._soundById(id) : self._sounds[0];
        return sound ? sound._volume : 0;
      }

      return self;
    },

    /**
     * Fade a currently playing sound between two volumes (if no id is passsed, all sounds will fade).
     * @param  {Number} from The value to fade from (0.0 to 1.0).
     * @param  {Number} to   The volume to fade to (0.0 to 1.0).
     * @param  {Number} len  Time in milliseconds to fade.
     * @param  {Number} id   The sound id (omit to fade all sounds).
     * @return {Howl}
     */
    fade: function(from, to, len, id) {
      var self = this;

      // Wait for the sound to play before fading.
      if (!self._loaded) {
        self.once('play', function() {
          self.fade(from, to, len, id);
        });

        return self;
      }

      // Set the volume to the start position.
      self.volume(from, id);

      // Fade the volume of one or all sounds.
      var ids = self._getSoundIds(id);
      for (var i=0; i<ids.length; i++) {
        // Get the sound.
        var sound = self._soundById(ids[i]);

        // Create a linear fade or fall back to timeouts with HTML5 Audio.
        if (sound) {
          if (self._webAudio) {
            var currentTime = ctx.currentTime;
            var end = currentTime + (len / 1000);
            sound._volume = from;
            sound._node.gain.setValueAtTime(from, currentTime);
            sound._node.gain.linearRampToValueAtTime(to, end);

            // Fire the event when complete.
            setTimeout(function(id, sound) {
              setTimeout(function() {
                sound._volume = to;
                self._emit('faded', id);
              }, end - ctx.currentTime > 0 ? Math.ceil((end - ctx.currentTime) * 1000) : 0);
            }.bind(self, ids[i], sound), len);
          } else {
            var diff = Math.abs(from - to);
            var dir = from > to ? 'out' : 'in';
            var steps = diff / 0.01;
            var stepLen = len / steps;

            (function() {
              var vol = from;
              var interval = setInterval(function(id) {
                // Update the volume amount.
                vol += (dir === 'in' ? 0.01 : -0.01);

                // Make sure the volume is in the right bounds.
                vol = Math.max(0, vol);
                vol = Math.min(1, vol);

                // Round to within 2 decimal points.
                vol = Math.round(vol * 100) / 100;

                // Change the volume.
                self.volume(vol, id);

                // When the fade is complete, stop it and fire event.
                if (vol === to) {
                  clearInterval(interval);
                  self._emit('faded', id);
                }
              }.bind(self, ids[i]), stepLen);
            })();
          }
        }
      }

      return self;
    },

    /**
     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.
     *   loop() -> Returns the group's loop value.
     *   loop(id) -> Returns the sound id's loop value.
     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.
     *   loop(loop, id) -> Sets the loop value of passed sound id.
     * @return {Howl/Boolean} Returns self or current loop value.
     */
    loop: function() {
      var self = this;
      var args = arguments;
      var loop, id, sound;

      // Determine the values for loop and id.
      if (args.length === 0) {
        // Return the grou's loop value.
        return self._loop;
      } else if (args.length === 1) {
        if (typeof args[0] === 'boolean') {
          loop = args[0];
          self._loop = loop;
        } else {
          // Return this sound's loop value.
          sound = self._soundById(parseInt(args[0], 10));
          return sound ? sound._loop : false;
        }
      } else if (args.length === 2) {
        loop = args[0];
        id = parseInt(args[1], 10);
      }

      // If no id is passed, get all ID's to be looped.
      var ids = self._getSoundIds(id);
      for (var i=0; i<ids.length; i++) {
        sound = self._soundById(ids[i]);

        if (sound) {
          sound._loop = loop;
          if (self._webAudio && sound._node) {
            sound._node.bufferSource.loop = loop;
          }
        }
      }

      return self;
    },

    /**
     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.
     *   seek() -> Returns the first sound node's current seek position.
     *   seek(id) -> Returns the sound id's current seek position.
     *   seek(seek) -> Sets the seek position of the first sound node.
     *   seek(seek, id) -> Sets the seek position of passed sound id.
     * @return {Howl/Number} Returns self or the current seek position.
     */
    seek: function() {
      var self = this;
      var args = arguments;
      var seek, id;

      // Determine the values based on arguments.
      if (args.length === 0) {
        // We will simply return the current position of the first node.
        id = self._sounds[0]._id;
      } else if (args.length === 1) {
        // First check if this is an ID, and if not, assume it is a new seek position.
        var ids = self._getSoundIds();
        var index = ids.indexOf(args[0]);
        if (index >= 0) {
          id = parseInt(args[0], 10);
        } else {
          id = self._sounds[0]._id;
          seek = parseFloat(args[0]);
        }
      } else if (args.length === 2) {
        seek = parseFloat(args[0]);
        id = parseInt(args[1], 10);
      }

      // If there is no ID, bail out.
      if (typeof id === 'undefined') {
        return self;
      }

      // Wait for the sound to load before seeking it.
      if (!self._loaded) {
        self.once('load', function() {
          self.seek.apply(self, args);
        });

        return self;
      }

      // Get the sound.
      var sound = self._soundById(id);

      if (sound) {
        if (seek >= 0) {
          // Pause the sound and update position for restarting playback.
          var playing = self.playing(id);
          if (playing) {
            self.pause(id, true);
          }

          // Move the position of the track and cancel timer.
          sound._seek = seek;
          self._clearTimer(id);

          // Restart the playback if the sound was playing.
          if (playing) {
            self.play(id, true);
          }
        } else {
          if (self._webAudio) {
            return (sound._seek + (self.playing(id) ? ctx.currentTime - sound._playStart : 0));
          } else {
            return sound._node.currentTime;
          }
        }
      }

      return self;
    },

    /**
     * Check if a specific sound is currently playing or not.
     * @param  {Number} id The sound id to check. If none is passed, first sound is used.
     * @return {Boolean}    True if playing and false if not.
     */
    playing: function(id) {
      var self = this;
      var sound = self._soundById(id) || self._sounds[0];

      return sound ? !sound._paused : false;
    },

    /**
     * Get the duration of this sound.
     * @return {Number} Audio duration.
     */
    duration: function() {
      return this._duration;
    },

    /**
     * Unload and destroy the current Howl object.
     * This will immediately stop all sound instances attached to this group.
     */
    unload: function() {
      var self = this;

      // Stop playing any active sounds.
      var sounds = self._sounds;
      for (var i=0; i<sounds.length; i++) {
        // Stop the sound if it is currently playing.
        if (!sounds[i]._paused) {
          self.stop(sounds[i]._id);
          self._emit('end', sounds[i]._id);
        }

        // Remove the source or disconnect.
        if (!self._webAudio) {
          // Set the source to an empty string to stop any downloading.
          sounds[i]._node.src = '';

          // Remove any event listeners.
          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);
          sounds[i]._node.removeEventListener('canplaythrough', sounds[i]._loadFn, false);
        }

        // Empty out all of the nodes.
        delete sounds[i]._node;

        // Make sure all timers are cleared out.
        self._clearTimer(sounds[i]._id);

        // Remove the references in the global Howler object.
        var index = Howler._howls.indexOf(self);
        if (index >= 0) {
          Howler._howls.splice(index, 1);
        }
      }

      // Delete this sound from the cache.
      if (cache) {
        delete cache[self._src];
      }

      // Clear out `self`.
      self = null;

      return null;
    },

    /**
     * Listen to a custom event.
     * @param  {String}   event Event name.
     * @param  {Function} fn    Listener to call.
     * @param  {Number}   id    (optional) Only listen to events for this sound.
     * @return {Howl}
     */
    on: function(event, fn, id) {
      var self = this;
      var events = self['_on' + event];

      if (typeof fn === 'function') {
        events.push({id: id, fn: fn});
      }

      return self;
    },

    /**
     * Remove a custom event.
     * @param  {String}   event Event name.
     * @param  {Function} fn    Listener to remove. Leave empty to remove all.
     * @param  {Number}   id    (optional) Only remove events for this sound.
     * @return {Howl}
     */
    off: function(event, fn, id) {
      var self = this;
      var events = self['_on' + event];

      if (fn) {
        // Loop through event store and remove the passed function.
        for (var i=0; i<events.length; i++) {
          if (fn === events[i].fn && id === events[i].id) {
            events.splice(i, 1);
            break;
          }
        }
      } else {
        // Clear out all events of this type.
        events = [];
      }

      return self;
    },

    /**
     * Listen to a custom event and remove it once fired.
     * @param  {String}   event Event name.
     * @param  {Function} fn    Listener to call.
     * @param  {Number}   id    (optional) Only listen to events for this sound.
     * @return {Howl}
     */
    once: function(event, fn, id) {
      var self = this;

      // Create the listener method.
      var listener = function() {
        // Call the passed function.
        fn.apply(self, arguments);

        // Clear the listener.
        self.off(event, listener, id);
      };

      // Setup the event listener.
      self.on(event, listener, id);

      return self;
    },

    /**
     * Emit all events of a specific type and pass the sound id.
     * @param  {String} event Event name.
     * @param  {Number} id    Sound ID.
     * @param  {Number} msg   Message to go with event.
     * @return {Howl}
     */
    _emit: function(event, id, msg) {
      var self = this;
      var events = self['_on' + event];

      // Loop through event store and fire all functions.
      for (var i=0; i<events.length; i++) {
        if (!events[i].id || events[i].id === id) {
          setTimeout(function(fn) {
            fn.call(this, id, msg);
          }.bind(self, events[i].fn), 0);
        }
      }

      return self;
    },

    /**
     * Clear the end timer for a sound playback.
     * @param  {Number} id The sound ID.
     * @return {Howl}
     */
    _clearTimer: function(id) {
      var self = this;

      if (self._endTimers[id]) {
        clearTimeout(self._endTimers[id]);
        delete self._endTimers[id];
      }

      return self;
    },

    /**
     * Return the sound identified by this ID, or return null.
     * @param  {Number} id Sound ID
     * @return {Object}    Sound object or null.
     */
    _soundById: function(id) {
      var self = this;

      // Loop through all sounds and find the one with this ID.
      for (var i=0; i<self._sounds.length; i++) {
        if (id === self._sounds[i]._id) {
          return self._sounds[i];
        }
      }

      return null;
    },

    /**
     * Return an inactive sound from the pool or create a new one.
     * @return {Sound} Sound playback object.
     */
    _inactiveSound: function() {
      var self = this;

      self._drain();

      // Find the first inactive node to recycle.
      for (var i=0; i<self._sounds.length; i++) {
        if (self._sounds[i]._ended) {
          return self._sounds[i].reset();
        }
      }

      // If no inactive node was found, create a new one.
      return new Sound(self);
    },

    /**
     * Drain excess inactive sounds from the pool.
     */
    _drain: function() {
      var self = this;
      var limit = self._pool;
      var cnt = 0;
      var i = 0;

      // If there are less sounds than the max pool size, we are done.
      if (self._sounds.length < limit) {
        return;
      }

      // Count the number of inactive sounds.
      for (i=0; i<self._sounds.length; i++) {
        if (self._sounds[i]._ended) {
          cnt++;
        }
      }

      // Remove excess inactive sounds, going in reverse order.
      for (i=self._sounds.length - 1; i>=0; i--) {
        if (cnt <= limit) {
          return;
        }

        if (self._sounds[i]._ended) {
          // Disconnect the audio source when using Web Audio.
          if (self._webAudio && self._sounds[i]._node) {
            self._sounds[i]._node.disconnect(0);
          }

          // Remove sounds until we have the pool size.
          self._sounds.splice(i, 1);
          cnt--;
        }
      }
    },

    /**
     * Get all ID's from the sounds pool.
     * @param  {Number} id Only return one ID if one is passed.
     * @return {Array}    Array of IDs.
     */
    _getSoundIds: function(id) {
      var self = this;

      if (typeof id === 'undefined') {
        var ids = [];
        for (var i=0; i<self._sounds.length; i++) {
          ids.push(self._sounds[i]._id);
        }

        return ids;
      } else {
        return [id];
      }
    },

    /**
     * Load the sound back into the buffer source.
     * @param  {Sound} sound The sound object to work with.
     * @return {Howl}
     */
    _refreshBuffer: function(sound) {
      var self = this;

      // Setup the buffer source for playback.
      sound._node.bufferSource = ctx.createBufferSource();
      sound._node.bufferSource.buffer = cache[self._src];

      // Connect to the correct node.
      if (sound._panner) {
        sound._node.bufferSource.connect(sound._panner);
      } else {
        sound._node.bufferSource.connect(sound._node);
      }

      // Setup looping and playback rate.
      sound._node.bufferSource.loop = sound._loop;
      if (sound._loop) {
        sound._node.bufferSource.loopStart = sound._start || 0;
        sound._node.bufferSource.loopEnd = sound._stop;
      }
      sound._node.bufferSource.playbackRate.value = self._rate;

      return self;
    }
  };

  /** Single Sound Methods **/
  /***************************************************************************/

  /**
   * Setup the sound object, which each node attached to a Howl group is contained in.
   * @param {Object} howl The Howl parent group.
   */
  var Sound = function(howl) {
    this._parent = howl;
    this.init();
  };
  Sound.prototype = {
    /**
     * Initialize a new Sound object.
     * @return {Sound}
     */
    init: function() {
      var self = this;
      var parent = self._parent;

      // Setup the default parameters.
      self._muted = parent._muted;
      self._loop = parent._loop;
      self._volume = parent._volume;
      self._muted = parent._muted;
      self._seek = 0;
      self._paused = true;
      self._ended = true;

      // Generate a unique ID for this sound.
      self._id = Math.round(Date.now() * Math.random());

      // Add itself to the parent's pool.
      parent._sounds.push(self);

      // Create the new node.
      self.create();

      return self;
    },

    /**
     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.
     * @return {Sound}
     */
    create: function() {
      var self = this;
      var parent = self._parent;
      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume * Howler.volume();

      if (parent._webAudio) {
        // Create the gain node for controlling volume (the source will connect to this).
        self._node = (typeof ctx.createGain === 'undefined') ? ctx.createGainNode() : ctx.createGain();
        self._node.gain.setValueAtTime(volume, ctx.currentTime);
        self._node.paused = true;
        self._node.connect(masterGain);
      } else {
        self._node = new Audio();

        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).
        self._errorFn = self._errorListener.bind(self);
        self._node.addEventListener('error', self._errorFn, false);

        // Listen for 'canplaythrough' event to let us know the sound is ready.
        self._loadFn = self._loadListener.bind(self);
        self._node.addEventListener('canplaythrough', self._loadFn, false);

        // Setup the new audio node.
        self._node.src = parent._src;
        self._node.preload = 'auto';
        self._node.volume = volume;

        // Begin loading the source.
        self._node.load();
      }

      return self;
    },

    /**
     * Reset the parameters of this sound to the original state (for recycle).
     * @return {Sound}
     */
    reset: function() {
      var self = this;
      var parent = self._parent;

      // Reset all of the parameters of this sound.
      self._muted = parent._muted;
      self._loop = parent._loop;
      self._volume = parent._volume;
      self._muted = parent._muted;
      self._seek = 0;
      self._paused = true;
      self._ended = true;
      self._sprite = null;

      // Generate a new ID so that it isn't confused with the previous sound.
      self._id = Math.round(Date.now() * Math.random());

      return self;
    },

    /**
     * HTML5 Audio error listener callback.
     */
    _errorListener: function() {
      var self = this;

      if (self._node.error && self._node.error.code === 4) {
        Howler.noAudio = true;
      }

      // Fire an error event and pass back the code.
      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);

      // Clear the event listener.
      self._node.removeEventListener('error', self._errorListener, false);
    },

    /**
     * HTML5 Audio canplaythrough listener callback.
     */
    _loadListener: function() {
      var self = this;
      var parent = self._parent;

      // Round up the duration to account for the lower precision in HTML5 Audio.
      parent._duration = Math.ceil(self._node.duration * 10) / 10;

      // Setup a sprite if none is defined.
      if (Object.keys(parent._sprite).length === 0) {
        parent._sprite = {__default: [0, parent._duration * 1000]};
      }

      if (!parent._loaded) {
        parent._loaded = true;
        parent._emit('load');
      }

      if (parent._autoplay) {
        parent.play();
      }

      // Clear the event listener.
      self._node.removeEventListener('canplaythrough', self._loadFn, false);
    }
  };

  /** Helper Methods **/
  /***************************************************************************/

  // Only define these methods when using Web Audio.
  if (usingWebAudio) {

    var cache = {};

    /**
     * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).
     * @param  {Howl} self
     */
    var loadBuffer = function(self) {
      var url = self._src;

      // Check if the buffer has already been cached and use it instead.
      if (cache[url]) {
        // Set the duration from the cache.
        self._duration = cache[url].duration;

        // Load the sound into this Howl.
        loadSound(self);

        return;
      }

      if (/^data:[^;]+;base64,/.test(url)) {
        // Setup polyfill for window.atob to support IE9.
        // Modified from: https://github.com/davidchambers/Base64.js
        window.atob = window.atob || function(input) {
          var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
          var str = String(input).replace(/=+$/, '');
          for (
            var bc = 0, bs, buffer, idx = 0, output = '';
            buffer = str.charAt(idx++);
            ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
          ) {
            buffer = chars.indexOf(buffer);
          }

          return output;
        };

        // Decode the base64 data URI without XHR, since some browsers don't support it.
        var data = atob(url.split(',')[1]);
        var dataView = new Uint8Array(data.length);
        for (var i=0; i<data.length; ++i) {
          dataView[i] = data.charCodeAt(i);
        }

        decodeAudioData(dataView.buffer, self);
      } else {
        // Load the buffer from the URL.
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          decodeAudioData(xhr.response, self);
        };
        xhr.onerror = function() {
          // If there is an error, switch to HTML5 Audio.
          if (self._webAudio) {
            self._html5 = true;
            self._webAudio = false;
            self._sounds = [];
            delete cache[url];
            self.load();
          }
        };
        safeXhrSend(xhr);
      }
    };

    /**
     * Send the XHR request wrapped in a try/catch.
     * @param  {Object} xhr XHR to send.
     */
    var safeXhrSend = function(xhr) {
      try {
        xhr.send();
      } catch (e) {
        xhr.onerror();
      }
    };

    /**
     * Decode audio data from an array buffer.
     * @param  {ArrayBuffer} arraybuffer The audio data.
     * @param  {Howl}        self
     */
    var decodeAudioData = function(arraybuffer, self) {
      // Decode the buffer into an audio source.
      ctx.decodeAudioData(arraybuffer, function(buffer) {
        if (buffer) {
          cache[self._src] = buffer;
          loadSound(self, buffer);
        }
      }, function() {
        self._emit('loaderror');
      });
    };

    /**
     * Sound is now loaded, so finish setting everything up and fire the loaded event.
     * @param  {Howl} self
     * @param  {Object} buffer The decoded buffer sound source.
     */
    var loadSound = function(self, buffer) {
      // Set the duration.
      if (buffer && !self._duration) {
        self._duration = buffer.duration;
      }

      // Setup a sprite if none is defined.
      if (Object.keys(self._sprite).length === 0) {
        self._sprite = {__default: [0, self._duration * 1000]};
      }

      // Fire the loaded event.
      if (!self._loaded) {
        self._loaded = true;
        self._emit('load');
      }

      // Begin playback if specified.
      if (self._autoplay) {
        self.play();
      }
    };

  }

  /**
   * Setup the audio context when available, or switch to HTML5 Audio mode.
   */
  function setupAudioContext() {
    try {
      if (typeof AudioContext !== 'undefined') {
        ctx = new AudioContext();
      } else if (typeof webkitAudioContext !== 'undefined') {
        ctx = new webkitAudioContext();
      } else {
        usingWebAudio = false;
      }
    } catch(e) {
      usingWebAudio = false;
    }

    if (!usingWebAudio) {
      if (typeof Audio !== 'undefined') {
        try {
          new Audio();
        } catch(e) {
          noAudio = true;
        }
      } else {
        noAudio = true;
      }
    }
  }

  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.
  if (typeof define === 'function' && define.amd) {
    define('howler', [],function() {
      return {
        Howler: Howler,
        Howl: Howl
      };
    });
  }

  // Add support for CommonJS libraries such as browserify.
  if (typeof exports !== 'undefined') {
    exports.Howler = Howler;
    exports.Howl = Howl;
  }

  // Define globally in case AMD is not available or unused.
  if (typeof window !== 'undefined') {
    window.HowlerGlobal = HowlerGlobal;
    window.Howler = Howler;
    window.Howl = Howl;
    window.Sound = Sound;
  }
})();
define('audio',[
	'jquery',
	'lodash',
	'environment',
	'howler',
	'device',
	'utils',
	'pubsub',
	'songs'
], function (
	j,
	_,
	env,
	howler,
	device,
	utils,
	pubsub,
	songs
) {
	'use strict';

	// extract utility to reset audio
	var resetSongClipPreview = function(preview) {
		preview.sound.pause();
		preview.sound.currentTime = 0;
		preview.state = 'ready';
	};


	var checkSongPosition = function(preview) {
		if (preview.state !== 'playing') { 
			return false;
		}

		// Since iOS for some reason doubles the duration value, we'll have to use a static value on this platform
		var duration = preview.id === env.SONG_MENU_ID ? preview.sound.duration : Math.min(30, preview.sound.duration);
		var timeLeft = duration - preview.sound.currentTime;

		return (timeLeft < 3);		
	}


	var _playSound = function(preview, currentPreviewId) {
		// Check that we are in the right state and that we are trying to play the right song
		// Reset the sound clip state
		preview.sound.volume = 0;
		resetSongClipPreview(preview);

		currentPreviewId || (currentPreviewId = preview.id);

		var cancelledPlayback = preview.cancelledPlayback;
		preview.cancelledPlayback = false;


		var isPlayingDfd = j.Deferred();
		
		if (cancelledPlayback) { 
			return isPlayingDfd.reject(); 
		}



		var playing = function () {
			preview.sound.removeEventListener('playing', playing, false); // Be sure to only use the event listener once
			pubsub.publish('previewAudioPlay', [ preview.id ]);

			isPlayingDfd.resolve(preview);
		};

		preview.sound.play();
		preview.sound.addEventListener('playing', playing, false);

		return isPlayingDfd;
	}




	// Provides audio playback functionality. It has methods for playing an arbitrary sound effect from the sound effect
	// sprite, as well as specialized functions for fetching and playing song preview audio.
	function AudioService(core) {
		this.core = core;
		this.previews = {};
	}

	AudioService.prototype = {

		// Called once, directly after creation, in JustDanceNow
		init: function () {
			console.log('%cÃ¢Å“â€', 'color:#339933; background:#CCFF00', 'Audio initialized');
			this.initSFX();
			this.videoPreviewPlaying = false;
			pubsub.subscribe('videoPreviewPlaying', function (bool) { this.videoPreviewPlaying = bool; }.bind(this));
		},

		// Called from init()
		initSFX: function () {

			var self = this,
				audioFilename = 'sfx-sprite';

			if (!!device.isIpad)
				audioFilename += '_IPAD';

			// Setup SFX audio sprite to improve performance on devices such as smartphones, TV's, etc.
			// The sprite is generated through Audacity and its project file can be found in Perforce.
			// Uses howler.js. See documentation at http://goldfirestudios.com/blog/104/howler.js-Modern-Web-Audio-Javascript-Library
			this.audioSFX = new howler.Howl({
				src: [cdn+'/web/audio/sfx/'+audioFilename+'.mp3', cdn+'/web/audio/sfx/'+audioFilename+'.ogg'],
				html5: device.isiOS ? true : false,
				sprite: {
					'dance-transition-in': 		[0, 3000],
					'dance-transition-out': 	[3000, 2000],
					'goldmove-intro': 			[4999, 1729],
					'goldmove': 				[6729, 1683],
					'unlock-game': 				[8982, 2410],
					'coach-selected-1': 		[11403, 1067],
					'coach-selected-2': 		[12472, 1067],
					'coach-selected-3': 		[13543, 1067],
					'coach-selected-4': 		[14614, 1067],
					'coach-selected-5': 		[15685, 1067],
					'coach-selected-6': 		[16752, 1066],
					'crowd-cheering':			[17818, 2957],
					'crowd-sad':   				[20775, 1471],
					'coverflow-whoosh': 		[21854, 1715],
					'coverflow-right': 			[23584, 250],
					'coverflow-left': 			[23857, 277],
					'avatar-appears-1': 		[24135, 648],
					'avatar-appears-2': 		[24783, 720],
					'avatar-appears-3': 		[25503, 696],
					'avatar-appears-4': 		[26199, 696],
					'flag-appears-1': 			[26895, 528],
					'flag-appears-2': 			[27423, 504],
					'flag-appears-3': 			[27927, 504],
					'flag-appears-4': 			[28431, 432],
					'coach-selection': 			[28863, 2952],
					'ghost-planet-appears':		[31815, 1920],
					'score-count': 				[33735, 5586],
					'after-dance-jingle': 		[39322, 5856],
					'after-dance-winner': 		[45178, 6624],
					'star-1': 					[51802, 2040],
					'star-2': 					[53842, 2040],
					'star-3': 					[55882, 2040],
					'star-4': 					[57922, 2544],
					'star-5': 					[60466, 3048],
					'snap' : 					[63514, 550],
					'coverflow-click' : 		[64074, 106],
					'coach-leave-1' : 			[64190, 920],
					'config-window-open' : 		[65110, 465],
					'config-window-close' : 	[65592, 225],
					'connect-info-pannel' : 	[65834, 666]
				},
				onload: function() {
					self.audioSFXisLoaded = true;
					console.log('Audio SFX sprite has been successfully loaded');
				},
				onloaderror: function(e) {
					console.log('An error with Howler has occured ' + e);
				}
			});
		},

		// Play a sound effect, identified by its unique id.
		// Arg types       String, Object
		playSFX: function (sound,  options) {

			var self = this;

			function playHowler (sound, options) {
				if (!self.audioSFXisLoaded) { return; }

				var volume = 1.0;
				if (options && options.hasOwnProperty('volume')) {
					volume = options.volume;
				}
				self.audioSFX.volume(volume);

				var delay = 0;
				if (options && options.hasOwnProperty('delay')) {
					delay = options.delay;
				}

				_.delay(function() { self.audioSFX.play(sound); }, delay);
			}

			var i, n;

			// May play multiple sounds
			if (j.isArray(sound)) {
				for (i = 0, n = sound.length; i < n; ++i) {
					playHowler(sound[i][0], sound[i][1]);
				}
			} else {
				playHowler(sound, options);
			}
		},

		// Stop playing a sound effect
		// Arg types       String  Number
		stopSFX: function (sound, fadeOutTime) {

			fadeOutTime = fadeOutTime || 400;
			var self = this,
				tempArr = this.audioSFX._sounds;

			if (!sound) {
				_.delay(function() { self.audioSFX.stop(); }, fadeOutTime);
			} else {
				for (var i = 0; i < tempArr.length; ++i) {
					if(sound && tempArr[i]._sprite === sound) {
						tempArr[i]._id = sound;
					}
				}
				_.delay(function () {
					self.audioSFX.stop(sound); 
				}, fadeOutTime);
			}
		},

		// Download a preview audio file over the network.
		// Returns a Promise of the audio file.
		// Arg types            String
		fetchPreview: function (songId) {
			var cachedPreview = this.previews[songId];
			if (cachedPreview) {
				cachedPreview.state = 'pendingPlay';
				return cachedPreview.loadedPromise;
			}

			var previewDeferred = j.Deferred();

			var src;
			if (songId === env.SONG_MENU_ID) {
				src = cdn + '/web/audio/music/' + songId + '.mp3';
			} else {
				src = songs.getSong(songId).base + '/assets/web/' + songId + '.mp3';
			}

			var audio = new Audio(src);
			audio.volume = 0;
			audio.addEventListener('loadedmetadata', function () { previewDeferred.resolve(preview); }, false);
			audio.addEventListener('ended', function () { preview.state = 'ready'; }, false);
			audio.addEventListener('error', function () { console.warn('audio onloaderror'); }, false);

			var preview = this.previews[songId] = {
				id: songId,
				state: 'pendingPlay',
				sound: audio
			};
			preview.loadedPromise = previewDeferred.promise();
			return preview.loadedPromise;
		},

		// factorize the menu music in case its name can change
		playMenuMusic: function(fadeInTime, fadeOutTime,volume) {

			var songId = env.SONG_MENU_ID;
			var volume = (!this.core.isDeviceSleepMode ? 0.162 : 0);

			this.playPreview(songId, fadeInTime, 0, volume);
		},

		// Plays a preview audio. If called when another preview audio is already playing, it will cross-fade between
		// the sounds.
		// Returns a Promise of the preview audio file that is being fetched. (Why?)
		// Arg types           String, Number,     Number,      Number
		playPreview: function (songId, fadeInTime, fadeOutTime, volume) {
			// Set some defaults
			fadeInTime = fadeInTime || 750;
			fadeOutTime = fadeOutTime || 2800;
			volume = volume || 0.2;
			songId = songId || this.core.song;

			var self = this;

			return this.fetchPreview(songId)
			.then(function(preview) {
				if (!_.contains(['songSelection', 'coachSelection', 'afterDance'], self.core.state) ||
					(preview.id !== self.core.song && preview.id !== env.SONG_MENU_ID) ||
					self.videoPreviewPlaying && self.core.state === 'coachSelection') {
						return null;
				}
				return _playSound(preview, self.currentPreviewId);
			}).then(function(preview) {
				if (!preview) {
					return;
				}

				// Playing. Make sure we never play more than two sounds at the same time
				// If there is a song that is currently fading out, then just stop it.
				var previousPreview = self.previews[self.previousPreviewId];
				if (previousPreview && previousPreview.state === 'playing') {
					resetSongClipPreview(previousPreview);
				}

				// Start fading out the currently playing preview
				self.stopPreview(350);

				self.previousPreviewId = self.currentPreviewId;
				self.currentPreviewId = preview.id;

				preview.state = 'playing';

				// Fade in object
				self.fade(preview, volume, fadeInTime);

				// Fade out song preview in the end, and fade in theme loop
				// Since Howler doesn't include a timeupdate callback: when song starts to play, start an interval to fade out song and start the theme loop
				
				var token = setInterval(function() {
					var isSongFinished = checkSongPosition(preview);

					if (isSongFinished) {
						clearInterval(token);
						// Fade out/stop previous audio previews, and start menu music afterwards
						self.stopPreview(1300).then(function() {
							self.playMenuMusic();
						});
					}
				}, 200);

			}.bind(this));
		},

		// Fades out the currently playing preview audio.
		// Arg types           Number
		stopPreview: function (fadeOutTime) {
			fadeOutTime = fadeOutTime || 0;
			var preview = this.getCurrentPreview();

			if (preview && preview.state === 'pendingPlay') {
				preview.cancelledPlayback = true;
			}

			if (preview && preview.state === 'playing') {
				if (fadeOutTime) {
					return this.fade(preview, 0, fadeOutTime || 0)
					.then(function() {
						resetSongClipPreview(preview);
						return;
					}.bind(this));
				}
				resetSongClipPreview(preview);
			}
			
			return j.when();

		},

		getCurrentPreview: function () {
			return this.previews[this.currentPreviewId];
		},

		getCurrentPreviewPosition: function () {
			var preview = this.getCurrentPreview();
			if (!preview || preview.id === env.SONG_MENU_ID) { return 0; }
			return preview.sound.currentTime;
		},

		// Private function. Fades out the provided preview audio.
		fade: function (preview, endVolume, duration) {
			var fadeDeferred = j.Deferred();
			var startVolume = preview.sound.volume;
			var startTime = Date.now();

			// Stop any ongoing fade
			clearInterval(preview.fadeIntervalId);

			preview.fadeIntervalId = setInterval(function() {
				var t = utils.clamp((Date.now() - startTime) / duration, 0, 1);
				var volume = utils.lerp(startVolume, endVolume, t);
				preview.sound.volume = volume;
				if (t === 1) {
					clearInterval(preview.fadeIntervalId);
					fadeDeferred.resolve();
				}
			}, 100);
			return fadeDeferred.promise();
		},


		// Resume playing the current preview audio. Used when the preview audio has been interrupted on e.g. iPad.
		resumePreview: function () {
			var preview = this.getCurrentPreview();
			preview && preview.sound.play();
		},

		// Set volume of the currently playing preview audio. Will not affect subsequent preview audios.
		// Arg types                Number
		setPreviewVolume: function (vol) {
			var preview = this.getCurrentPreview();
			if (preview) {
				preview.sound.volume = vol;
			}
		},

		// Set the global volume, for both sound effects and preview audios
		// Arg types         Number
		setVolume: function (vol) {
			// Global Howler method Ã¢â‚¬â€œ sets volume for all Howler sounds
			howler.Howler.volume = vol;
		},

		muteVolume: function(isVol) {
			j("video").prop("muted", isVol);
			j("audio").prop("muted", isVol);
		}

	};

	return AudioService;

});

define('simpleAudio',[
	'jquery',
	'lodash',
	'environment',
	'howler',
	'device',
	'utils',
	'songs',
	'audio'
], function (
	j,
	_,
	env,
	howler,
	device,
	utils,
	songs,
	AudioService
) {
'use strict';

	// Subclass of AudioService, designed for platforms that can only play one media file at a time,
	// e.g. Chromecast
	function SimpleAudioService(core) {
		AudioService.apply(this, arguments);

		this.core = core;
	}

	SimpleAudioService.prototype = Object.create(AudioService.prototype);
	SimpleAudioService.prototype.constructor = SimpleAudioService;

	SimpleAudioService.prototype = _.extend(SimpleAudioService.prototype, {

		// Override
		// Use an <audio> tag for sound playback instead of Howler.
		init: function () {
			console.log('%cÃ¢Å“â€', 'color:#339933; background:#CCFF00', 'Simple Audio initialized');
			this.initSFX();

			// Always reuse the same <audio> element for Chromecast
			if (!!device.isWeak) {
				this.buildAudioElement();
			}
		},

		buildAudioElement: function() {
			this.$audioEl = j('<audio>').attr({
				id: 'song-previews-audio',
				src: cdn + '/web/audio/sfx/star-1.mp3' // TEMP: Maybe produce a better sample file?
			}).appendTo(document.body);

			this.$audioEl.get(0).load();
			this.$audioEl.get(0).play();
			this.$audioEl.get(0).src = '';
		},

		playMenuMusic: function(fadeIn, fadeOut, volume) {
			var songId = env.SONG_MENU_ID,
			volume = volume || 0.204;

			this.playPreview(songId, fadeIn, fadeOut, volume);
		},

		// Override
		playPreview: function (songId, fadeIn, fadeOut, volume) {
			//Remove & append the new audio element everytime for IPAD & ANDROID TABLET
			//Otherwise the audio keeps on playing
			if (device.isiOS || device.isAndroidTabletApp) {
				this.$audioEl && this.$audioEl.remove();
				this.buildAudioElement();
			}

			// Set some defaults
			if (!volume) {
				volume = 0.38;
			}

			songId = songId || this.core.song;
			this.currentPreviewId = songId;

			var src, self = this;
			if (songId === env.SONG_MENU_ID) {
				src = cdn + '/web/audio/music/' + songId + '.mp3';
			} else {
				src = songs.getSong(songId).base + '/assets/web/' + songId + '.mp3';
			}

			this.$audioEl.attr({ src: src });
			this.$audioEl.get(0).load();
			this.$audioEl.get(0).play();

			// If in android sleep mode, then mute it otherwise its active
			if (!!this.core.isDeviceSleepMode) { this.$audioEl[0].volume = 0; }
			else {
				this.$audioEl[0].volume = volume;
			}

			this.$audioEl.off().one('ended', function() {
				self.playPreview(self.currentPreviewId);
			});
		},

		// Override
		stopPreview: function () {
			if (!this.$audioEl) { return; }

			this.currentPreviewId = undefined;
			this.$audioEl.off();
			this.$audioEl.attr('src', '');
		},

		// Override
		getCurrentPreview: function () {
			var $el = this.$audioEl;
			var el = $el[0];
			if (!$el) { return; }

			return {
				state: el.ended ? 'ready' : el.playing ? 'playing' : 'loading',
			};
		},


		// Override
		getCurrentPreviewPosition: function() { console.warn('Not implemented'); },

		// Override
		resumePreview: function() { console.warn('Not implemented'); },

		// Override
		setPreviewVolume: function() { console.warn('Not implemented'); },

		// Override
		setVolume: function (vol) {
			this.$audioEl && (this.$audioEl[0].volume = vol);
		},

		muteVolume: function(isVol) {
			j("video").prop("muted", isVol);
			j("audio").prop("muted", isVol);
		},

		removePreviewElement: function() {
			if (device.isiOS || device.isAndroidTabletApp) {
				j('#song-previews-audio').remove();
			}
		}

	});

	return SimpleAudioService;

});

define('initGameService',[
    'jquery',
    'device',
    'jd',
    'songs',
    'utils',
    'webSocketHandler',
    'videoPlayerFactory',
    'initConnectionService',
    'buildGameService',
    'keydownHandler',

    'audio',
    'simpleAudio'
],
function(
    $,
    device,
    JustDanceNowGame,
    songs,
    utils,
    WebSocketHandler,
    videoPlayerFactory,
    initConnectionService,
    buildGameService,
    KeydownHandler,

    AudioService,
    SimpleAudioService
) {
    'use strict';

    var WEAK_DEVICE = device.isWeak || device.isiOS || device.isAndroidTabletApp;


    /////////////////////////////////////////////////////////////////////////////////
    ///
    ///     INIT JD VALUES
    ///
    /////////////////////////////////////////////////////////////////////////////////

    var initJDValues = function(jd) {
         if (!!WEAK_DEVICE) {
            jd.audio = new SimpleAudioService(jd);
        } else {
            jd.audio = new AudioService(jd);
        }

        jd.audio.init();
        jd.keydownHandler = new KeydownHandler(jd);
        jd.extractRoomFTUE();
    };



    /////////////////////////////////////////////////////////////////////////////////
    ///
    ///     INIT WEBSOCKET CONNECTION
    ///
    /////////////////////////////////////////////////////////////////////////////////

     // Connects to the server using WS and sets up various callbacks
    var createConnection = function(jd) {

        jd.isInitializing = true;

        var webSocketHandler = new WebSocketHandler(jd);

        jd.ws = webSocketHandler.ws;
        jd.sr = webSocketHandler.sr;

        return webSocketHandler.completeDeferred
        .then(initConnectionService.bind(null, jd, videoPlayerFactory.getVideoFormat()))
     
    };

    /////////////////////////////////////////////////////////////////////////////////
    ///
    ///     get LaunchGame Deferred (checkUsability)
    ///
    /////////////////////////////////////////////////////////////////////////////////

    var getLaunchGameDfd = function(jd, postTearDownDfd, postInitializationDfd) {
        var dfd = jd.checkUsabilityDfd;

        dfd.then(buildGameService.bind(null, jd, postTearDownDfd, postInitializationDfd));

        return dfd;
    };


    /////////////////////////////////////////////////////////////////////////////////
    ///
    ///     Main class
    ///
    /////////////////////////////////////////////////////////////////////////////////



    var InitGameService = function() {
        this.jd = new JustDanceNowGame();
        this.jd.webSocketDfds = [];

        //launch game deferred
        this.postTearDownDfd = $.Deferred();

        //tags for building the UI
        this.buildingUI = false;
        this.uiBuilt = false;
        
        this.init();
    };

    InitGameService.prototype = {

        init: function() {

           initJDValues(this.jd);

            // INIT GAME
            this.postInitializationDfd = createConnection(this.jd);
            // LAUNCH GAME
            this.preLaunchGameDfd = getLaunchGameDfd(this.jd, this.postTearDownDfd, this.postInitializationDfd);

            //Android sleep mode
            if (!!device.isAndroidTabletApp || !!device.isMacOSApp) {
                this.jd.isDeviceSleepMode = false; // Android sleep mode flag to detect sleep mode
            }
        },

        launchGame: function(isNoScoringMode) {
            this.jd.checkUsabilityDfd.resolve(isNoScoringMode);
            if (!WEAK_DEVICE) {
                this.jd.audio.playSFX("snap", {volume : 0.7});
                this.jd.audio.playSFX("dance-transition-out", {volume : 0.25});
            }
        },


        resetJD: function() {
            this.jd.reset();
        },

        // ##################################################
        // Build Game Page
        // ##################################################

        getRoomNb: function() {
            return this.jd.room;
        },

        getGame: function() {
            return this.jd;
        },

        getGameInitialized: function() {
            return this.postInitializationDfd;
        },

        setTearDownDone: function() {
            this.postTearDownDfd.resolve();
        },

        setAudioTablet: function() {
            // Initialize audio
            if (!this.jd.audio) {
                this.jd.audio = new SimpleAudioService(this.jd);
                this.jd.audio.init();
            }
        }

    };


    return InitGameService;


});

define('text!html/initHome/noRoomNrError.html',[],function () { return '<div class="warning__wrapper" role="dialog" aria-hidden="true">\n\t<div class="warning warning--no-room">\n\t\t<svg width="80px" height="80px" class="warning__symbol">\n\t\t\t<use xlink:href="#icon-icon_warning"></use>\n\t\t</svg>\n\t\t<p  class="content content--text"><%= Web_Welcome_Error %></p>\n\t\t<button  class="warning__validate">OK</button>\n\t</div>\n</div>';});

define('polyfills',[],function () {
	'use strict';

	// Provide JS implementation of native functionalities in older browsers, that lacks support for said features
	// natively.

	// --- Element.fullscreenEnabled ---
	// --- Element.fullscreenElement ---
	// --- Element.requestFullscreen ---
	// --- Element.exitFullscreen ---
	// Copyright (c) 2015 Nicolas Ã¢â‚¬Å“NeovovÃ¢â‚¬Â Le Gall
	// The MIT License (MIT)

	(function (doc) {
		/*global Element */

		var pollute = true, api, vendor;
		var apis = {
			// http://dvcs.w3.org/hg/fullscreen/raw-file/tip/Overview.html
			w3: {
				enabled: 'fullscreenEnabled',
				element: 'fullscreenElement',
				request: 'requestFullscreen',
				exit: 'exitFullscreen',
				events: {
					change: 'fullscreenchange',
					error: 'fullscreenerror'
				}
			},
			webkit: {
				enabled: 'webkitFullscreenEnabled',
				element: 'webkitCurrentFullScreenElement',
				request: 'webkitRequestFullScreen',
				exit: 'webkitCancelFullScreen',
				events: {
					change: 'webkitfullscreenchange',
					error: 'webkitfullscreenerror'
				}
			},
			moz: {
				enabled: 'mozFullScreenEnabled',
				element: 'mozFullScreenElement',
				request: 'mozRequestFullScreen',
				exit: 'mozCancelFullScreen',
				events: {
					change: 'mozfullscreenchange',
					error: 'mozfullscreenerror'
				}
			},
			ms: {
				enabled: 'msFullscreenEnabled',
				element: 'msFullscreenElement',
				request: 'msRequestFullscreen',
				exit: 'msExitFullscreen',
				events: {
					change: 'MSFullscreenChange',
					error: 'MSFullscreenError'
				}
			}
		};
		var w3 = apis.w3;

		// Loop through each vendor's specific API
		for (vendor in apis) {
			// Check if document has the "enabled" property
			if (apis[vendor].enabled in doc) {
				// It seems this browser support the fullscreen API
				api = apis[vendor];
				break;
			}
		}

		function dispatch(type, target) {
			var event = doc.createEvent('Event');

			event.initEvent(type, true, false);
			target.dispatchEvent(event);
		}

		function handleChange(e) {
			// Recopy the enabled and element values
			doc[w3.enabled] = doc[api.enabled];
			doc[w3.element] = doc[api.element];

			dispatch(w3.events.change, e.target);
		}

		function handleError(e) {
			dispatch(w3.events.error, e.target);
		}

		// Pollute only if the API doesn't already exists
		if (pollute && !(w3.enabled in doc) && api) {
			// Add listeners for fullscreen events
			doc.addEventListener(api.events.change, handleChange, false);
			doc.addEventListener(api.events.error,  handleError,  false);

			// Copy the default value
			doc[w3.enabled] = doc[api.enabled];
			doc[w3.element] = doc[api.element];

			// Match the reference for exitFullscreen
			doc[w3.exit] = doc[api.exit];

			// Add the request method to the Element's prototype
			Element.prototype[w3.request] = function () {
				return this[api.request].apply(this, arguments);
			};
		}

		// Return the API found (or undefined if the Fullscreen API is unavailable)
		return api;

	}(document));

	// CustomEvent constructor polyfill for IE
	(function () {
		if (typeof window.CustomEvent === 'function') { return false; }

		function CustomEvent(event, params) {
			params = params || { bubbles: false, cancelable: false, detail: undefined };
			var evt = document.createEvent('CustomEvent');
			evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
			return evt;
		}

		CustomEvent.prototype = window.Event.prototype;

		window.CustomEvent = CustomEvent;
	})();

});
define('animator',[
	'jquery',
	'lodash',
	'bowser',
	'environment',
], function (
	j,
	_,
	bowser,
	env
) {
	'use strict';

	var TRANSITION_END = env.TRANSITION_END;
	var DEFAULT_DURATION = 0.3;

	// Transition the given properties from their current value to the provided ones. In difference to jQuery/TweenMax
	// animations, this function operates by means of CSS transitions, which always produces the smoothest possible
	// animation.
	// Arg types        Number,   Object, Number
	j.fn.to = function (duration, props,  delay) {
		var donePromise = j.Deferred(), self = this;

		var resolve = function () {
			self.css('transition', '');
			// We defer the resolve, as there is often multiple transitionend events triggered from a single transition
			setTimeout(function () { donePromise.resolveWith(self); }, 0);
			return donePromise.promise();
		};

		if (this.length === 0) { return resolve(); }

		this.off(TRANSITION_END);

		if (duration) {
			this.on(TRANSITION_END, function onTransitionEnd(ev) {
				if (ev.target !== this) { return; }
				j(this).off(TRANSITION_END, onTransitionEnd);
				resolve();
			});
		} else {
			resolve();
		}

		this.css(duration ? _.extend({
			transition: _.keys(props).join(),
		}, { 'transition-duration': duration + 's', 'transition-delay': (delay || 0) + 's' }, props) : props);

		return donePromise.promise();
	};

	// Transition the given properties from the provided initial values to the provided end values.
	j.fn.fromTo = function (duration, from, to, delay) {
		if (delay) { from['transition-delay'] = delay + 's'; }
		return this.off(TRANSITION_END).css({ 'transition-duration': '0s' }).css(from).forceRepaint().to(duration, to);
	};

	// Override jQuery.fadeIn with our own version, that uses CSS transitions for animation.
	// Not working? Check if the element has "visibility: hidden;"
	j.fn.fadeIn = function (duration, delay) {
		if (+this.css('opacity') === 1) {
			this[0].style.display = 'block';
			return j.Deferred().resolveWith(this).promise();
		}

		duration = _.isNumber(duration) ? duration : DEFAULT_DURATION;

		return this.show().forceRepaint().to(duration, { opacity: 1 }, delay);
	};

	// Override jQuery.fadeOut with our own version, that uses CSS transitions for animation.
	j.fn.fadeOut = function (duration, delay) {
		if (+this.css('opacity') === 0 || this.is(':hidden')) {
			this.hide();
			return j.Deferred().resolveWith(this).promise();
		}

		duration = _.isNumber(duration) ? duration : DEFAULT_DURATION;

		var donePromise = this.to(duration, { opacity: 0 }, delay);
		donePromise.then(this.hide);	// Hide the element after fade out, for better performance
		return donePromise.promise();
	};

	// Forces a browser repaint on all the matched elements. Useful for re-triggering CSS animations. Use with care, as
	// repaints are often expensive
	j.fn.forceRepaint = function () {
		for (var i = 0, n = this.length; i < n; ++i) {
			!this[0].offsetHeight;
		}
		return this;
	};

});
/*!
 * jQuery-ajaxTransport-XDomainRequest - v1.0.4 - 2015-03-05
 * https://github.com/MoonScript/jQuery-ajaxTransport-XDomainRequest
 * Copyright (c) 2015 Jason Moon (@JSONMOON)
 * Licensed MIT (/blob/master/LICENSE.txt)
 */
(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as anonymous module.
    define('jqueryXdomain',['jquery'], factory);
  } else if (typeof exports === 'object') {
    // CommonJS
    module.exports = factory(require('jquery'));
  } else {
    // Browser globals.
    factory(jQuery);
  }
}(function($) {

// Only continue if we're on IE8/IE9 with jQuery 1.5+ (contains the ajaxTransport function)
if ($.support.cors || !$.ajaxTransport || !window.XDomainRequest) {
  return $;
}

var httpRegEx = /^(https?:)?\/\//i;
var getOrPostRegEx = /^get|post$/i;
var sameSchemeRegEx = new RegExp('^(\/\/|' + location.protocol + ')', 'i');

// ajaxTransport exists in jQuery 1.5+
$.ajaxTransport('* text html xml json', function(options, userOptions, jqXHR) {

  // Only continue if the request is: asynchronous, uses GET or POST method, has HTTP or HTTPS protocol, and has the same scheme as the calling page
  if (!options.crossDomain || !options.async || !getOrPostRegEx.test(options.type) || !httpRegEx.test(options.url) || !sameSchemeRegEx.test(options.url)) {
    return;
  }

  var xdr = null;

  return {
    send: function(headers, complete) {
      var postData = '';
      var userType = (userOptions.dataType || '').toLowerCase();

      xdr = new XDomainRequest();
      if (/^\d+$/.test(userOptions.timeout)) {
        xdr.timeout = userOptions.timeout;
      }

      xdr.ontimeout = function() {
        complete(500, 'timeout');
      };

      xdr.onload = function() {
        var allResponseHeaders = 'Content-Length: ' + xdr.responseText.length + '\r\nContent-Type: ' + xdr.contentType;
        var status = {
          code: 200,
          message: 'success'
        };
        var responses = {
          text: xdr.responseText
        };
        try {
          if (userType === 'html' || /text\/html/i.test(xdr.contentType)) {
            responses.html = xdr.responseText;
          } else if (userType === 'json' || (userType !== 'text' && /\/json/i.test(xdr.contentType))) {
            try {
              responses.json = $.parseJSON(xdr.responseText);
            } catch(e) {
              status.code = 500;
              status.message = 'parseerror';
              //throw 'Invalid JSON: ' + xdr.responseText;
            }
          } else if (userType === 'xml' || (userType !== 'text' && /\/xml/i.test(xdr.contentType))) {
            var doc = new ActiveXObject('Microsoft.XMLDOM');
            doc.async = false;
            try {
              doc.loadXML(xdr.responseText);
            } catch(e) {
              doc = undefined;
            }
            if (!doc || !doc.documentElement || doc.getElementsByTagName('parsererror').length) {
              status.code = 500;
              status.message = 'parseerror';
              throw 'Invalid XML: ' + xdr.responseText;
            }
            responses.xml = doc;
          }
        } catch(parseMessage) {
          throw parseMessage;
        } finally {
          complete(status.code, status.message, responses, allResponseHeaders);
        }
      };

      // set an empty handler for 'onprogress' so requests don't get aborted
      xdr.onprogress = function(){};
      xdr.onerror = function() {
        complete(500, 'error', {
          text: xdr.responseText
        });
      };

      if (userOptions.data) {
        postData = ($.type(userOptions.data) === 'string') ? userOptions.data : $.param(userOptions.data);
      }
      xdr.open(options.type, options.url);
      xdr.send(postData);
    },
    abort: function() {
      if (xdr) {
        xdr.abort();
      }
    }
  };
});

return $;

}));

/**
 * jQuery.browser.mobile (http://detectmobilebrowser.com/)
 *
 * jQuery.browser.mobile will be true if the browser is a mobile device
 *
 **/
(function(a){(jQuery.browser=jQuery.browser||{}).mobile=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ipad|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))})(navigator.userAgent||navigator.vendor||window.opera);
define("jqueryDetectmobile", ["jquery"], function(){});

/*global jQuery */
/*!
* FitText.js 1.2
*
* Copyright 2011, Dave Rupert http://daverupert.com
* Released under the WTFPL license
* http://sam.zoy.org/wtfpl/
*
* Date: Thu May 05 14:23:00 2011 -0600
*/

(function( $ ){

  $.fn.fitText = function( kompressor, options ) {

    // Setup options
    var compressor = kompressor || 1,
        settings = $.extend({
          'minFontSize' : Number.NEGATIVE_INFINITY,
          'maxFontSize' : Number.POSITIVE_INFINITY
        }, options);

    return this.each(function(){

      // Store the object
      var $this = $(this);

      // Resizer() resizes items based on the object width divided by the compressor * 10
      var resizer = function () {
        $this.css('font-size', Math.max(Math.min($this.width() / (compressor*10), parseFloat(settings.maxFontSize)), parseFloat(settings.minFontSize)));
      };

      // Call once to set.
      resizer();

      // Call on resize. Opera debounces their resize by default.
      $(window).on('resize.fittext orientationchange.fittext', resizer);

    });

  };

})( jQuery );

define("fittext", ["jquery"], function(){});

define('initHome',[
    'jquery',
    'lodash',
    'device',
    'loc',
    'environment',
    'initGameService',
    'utils',
    'trackerUtils',
    'es6Promise',

    'text!html/initHome/noRoomNrError.html',

    // Non-AMD dependencies
    'polyfills',
    'jqueryCookie',
    'animator',
    'jqueryXdomain',
    'jqueryDetectmobile',
    'fittext'
], function(
    $,
    _,
    device,
    loc,
    env,
    InitGameService,
    utils,
    trackerUtils,
    es6Promise,

    noRoomNrErrorHtml
) {
    'use strict';

    var Promise = es6Promise.Promise;
    var STATUS_OK = 200 // "OK" status provided by server

    var maintenanceData;
    var mainLocObj = {
        'title': loc(3484),
        'text': loc(3485),
        'day': loc(3487),
        'days': loc(3488),
        'hour': loc(3489),
        'hours': loc(3490),
        'min': loc(3491),
        'mins': loc(3492),
        'sec': loc(3493),
        'secs': loc(3494),
        'done': loc(3486)
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //      Time stamp calculation for tracking page load
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    var trackPageLoadingTime = function() {
        var pageLoadingTime = utils.diffTimeCalculation();
        trackerUtils.trackClickEvents('Loading Time - ' + pageLoadingTime);
    }

    //////////////////////////////////////////
    //	   	 JDNS API CALL FUNCTION 		//
    //////////////////////////////////////////

    var queryGameServerData = function() {
        var request_region = utils.getParameterByName('rr');
        var query_url;

        if (request_region !== null)
            query_url = location.origin +'/query?rr='+ request_region;
        else
            query_url = location.origin +'/query';


        return new Promise(function(resolve, reject) {

            var xhr = new XMLHttpRequest();

            xhr.onreadystatechange = function(event) {
                if (this.readyState === XMLHttpRequest.DONE) {
                    if (this.status === STATUS_OK)
                        resolve(JSON.parse(this.responseText));
                    else
                        reject(this.status, this.statusText);
                }
            };

            xhr.open('GET', query_url, true);
            xhr.send(null);

        });
    }

    //////////////////////////////////////////
    //		MAIN INIT GAME FUNCTION 		//
    //////////////////////////////////////////

    var initGame = function() {

        if (device.isMobile || (device.isTablet && !device.isAndroidTabletApp && !device.isAndroidTvChromecast && !device.isAndroidTvBrowser) || (device.isIpad && !device.isIpadApp)) {
            console.warn('fail');
            return;
        }

        queryGameServerData()
            .then(function(data) {
                
                window.jdnsApiURL = data.jdns;
                window.websocketURL = data.wsUrl;
                window.wsClient = data.wsClient;
                window.wsTag = data.wsTag;

                var igs = new InitGameService();

                igs.postInitializationDfd
                .then(function() {
                    window.onload = trackPageLoadingTime();
                    window.jd.mainLocObj = mainLocObj;
                    window.jd.maintenanceData = maintenanceData;
                    
                    landingPageAPI.initializeGame(igs).then(igs.launchGame);
                });

                igs.preLaunchGameDfd
                .then(landingPageAPI.handleTearDown.bind(landingPageAPI))
                .then(igs.setTearDownDone.bind(igs));

            });

    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    //		MAIN CODE INIT
    //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////

    function init() {
        landingPageAPI.init()
        .then(initGame);
    };


    function loadingTxt() {
        if (device.isIpadApp || device.isAndroidTabletApp) {
            var $loading_html = '<div class="game_loading">'+loc(2682)+'</div>';
            $('body').append($loading_html);
        }
    }


    function initMaintenance() {

        if (!!maintenanceData) {

            var currentTime = new Date().getTime();
            var MST = maintenanceData.startTime;
            var MET = ((!!maintenanceData.endTime && maintenanceData.endTime > currentTime) ? maintenanceData.endTime : '');

            if (!window.ignoreMaintenance) {
                if (!!MST && currentTime > MST ) {
                    utils.renderMaintenancePage($('body'), MET, mainLocObj);
                    return;
                }
            } else {
                console.warn("A maintenance is ongoing but was ignored");
            }

            // Execute init() after rendering maintenance data
            init();
        }
    };

    function getMaintenanceData() {
        utils.makeHTTPRequestForMaintenance()
        .then(function(data) {
            // Initialize landing page with maintenance data
            maintenanceData = utils.processMaintenanceData(data);
            initMaintenance();
        })
        .catch(function(err) {
            // Display error, if maintenance data fetch fails
            // but still trigger the landing page
            console.error('Maintenance data not found: '+ err);
            init();
        });
    };


    // Require the logic of the landing page needed
    // We can possibly do the same for chromecast & ipad who also need partial views of the landing page

    var $body = $("body");
    var isChromecast = /chromecast/.test(location.search);


    var landingPageDfd = $.Deferred();
    var landingPageAPI = null;


    var landingPageName = 'initLandingPage';
    if (isChromecast) {
        landingPageName += "Chromecast";
    } else if (device.isIpadApp || device.isAndroidTabletApp || device.isMinimalUI) {
        landingPageName += "TabletApp";
    }

    landingPageDfd.then(function(LandingPage) {
        landingPageAPI = new LandingPage();
    });

    require([landingPageName], function(LandingPage) {
        landingPageDfd.resolve(LandingPage);
    });

    //whatever come last, we have our document and landing page's logic ready only when maintenance data is fetched
    $.when($(document).ready(), landingPageDfd)
    .then(loadingTxt)
    .then(getMaintenanceData);

});
require.config({

	// Main entry point to the game. Configures RequireJS and the loads the landing page module

	config: {
		text: {
			useXhr: function () {
				'use strict';
				// Allow cross-domain requests. See http://jaketrent.com/post/cross-domain-requirejs-text/
				return true;
			}
		}
	},

	baseUrl: (typeof cdn !== 'undefined' ? cdn : '') +
			(typeof window !== 'undefined' && window.debug ? '/web' : '/web'),
	waitSeconds: 200,
	paths: {
		loc: 'js/l18n',
		pubsub: 'js/pubsub',
		polyfills: 'js/polyfills',
		jd: 'js/jd',
		environment: 'js/environment',
		miscUtils: 'js/miscUtils',
		webSocketHandler : 'js/webSocketHandler',
		messageHandler: 'js/messageHandler',
		streamReader: 'js/streamReader',
		smoother: 'js/smoother',
		video: 'js/video',
		audio: 'js/audio/audio',
		simpleAudio: 'js/audio/simpleAudio',
		beatGenerator: 'js/audio/beatGenerator',
		utils: 'js/utils',
		gui: 'js/gui',
		keydownHandler : 'js/constants/keydownHandler',
		trackerUtils: 'js/tracking/trackerUtils',

		initHome: 					'js/init-home',
		initGameService: 			'js/initGame/initGameService',
		initConnectionService: 		'js/initGame/initConnectionService',
		buildGameService: 			'js/initGame/buildGameService',

		initLandingPage: 			'js/landingpage/initLandingPage',
		initLandingPageTabletApp: 	'js/landingpage/initLandingPageTabletApp',
		initLandingPageChromecast: 	'js/landingpage/initLandingPageChromecast',
		initLandingPageVirtual: 	'js/landingpage/initLandingPageVirtual',
		landingPageUtils: 			'js/landingpage/landingPageUtils',
		
		anime : 'js/libs/anime.min',
		text: 'js/libs/require-text',
		castReceiver: 'js/libs/cast_receiver',
		lodash: 'js/libs/lodash',
		jquery: 'js/libs/jquery',
		jqueryDetectmobile: 'js/libs/jquery.detectmobile',
		jqueryCookie: 'js/libs/jquery.cookie',
		jqueryXdomain: 'js/libs/jquery.xdomainrequest',
		howler: 'js/libs/howler',
		swfobject: 'js/libs/swfobject',
		fastclick: 'js/libs/fastclick',
		fastdom: 'js/libs/fastdom',
		fittext: 'js/libs/jquery.fittext',
		bowser: 'js/libs/bowser',
		hlsplayer: 'js/libs/hls',
		highcharts: 'js/libs/highcharts',
		reconnectingWebSocket: 'js/libs/reconnecting-websocket',

		es6Promise: 'js/libs/es6-promise.min',

		toasts: 'js/gui/components/toasts',
		modal: 'js/gui/components/modal',
		popup: 'js/gui/components/popup',
		iframe: 'js/gui/components/iframe',
		dropdown: 'js/gui/components/dropdown',
		animator: 'js/gui/components/animator',
		banner: 'js/gui/components/banner',

		connectionInfo : 'js/gui/connectionInfo',
		language: 'js/data/language',
		tutorial: 'js/gui/tutorial',
		afterDance: 'js/gui/afterDance/afterDance',
		buildResult: 'js/gui/afterDance/buildResult',
		afterDanceBuilder: 'js/gui/afterDance/afterDanceBuilder',
		afterDanceScroll: 'js/gui/afterDance/afterDanceScroll',

		coverflowTabs: 'js/gui/coverflow/tabs',
		playlist: 'js/gui/coverflow/playlist',
		songlist: 'js/gui/coverflow/songlist',
		songSelection: 'js/gui/coverflow/songSelection',
		songItem: 'js/gui/coverflow/songItem',
		previewArea: 'js/gui/coverflow/previewArea',

		coachSelection: 'js/gui/previewArea/coachSelection',
		songDetails: 	'js/gui/previewArea/songDetails',
		songAction : 	'js/gui/previewArea/songAction',
		sprites: 		'js/gui/previewArea/sprites',
		highscoreDisplay : 	'js/gui/previewArea/highscoreDisplay',

		songPreview : 'js/gui/previewArea/songPreview',
		audioPreview : 'js/gui/previewArea/songPreview/audioPreview',
		videoPreview : 'js/gui/previewArea/songPreview/videoPreview',

		virtualStat: 'js/gui/previewArea/socialStats/virtualStat',
		starsNumberStat: 'js/gui/previewArea/socialStats/starsNumberStat',
    	timesPlayedStat: 'js/gui/previewArea/socialStats/timesPlayedStat',
    	newHitsStat: 'js/gui/previewArea/socialStats/newHitsStat',

		hud: 'js/gui/hud',
		particles: 'js/gui/particles/particles',
		particleSystem: 'js/gui/particles/particleSystem',
		webGlRenderer: 'js/gui/particles/webGlRenderer',
		inGameBeatParticles: 'js/gui/particles/inGameBeatParticles',
		songPreviewMosaic: 'js/gui/particles/songPreviewMosaic',
		maintenance: 'js/gui/hud/maintenanceTicker',
		players: 'js/gui/hud/players',
		pictos: 'js/gui/hud/pictos',
		lyrics: 'js/gui/hud/lyrics',
		racetrack: 'js/gui/hud/racetrack',
		goldMove: 'js/gui/hud/goldMove',
		balloons: 'js/gui/hud/balloons',
		adminMenu: 'js/gui/adminMenu',

		chromecastManager: 'js/platforms/chromecast/manager',
		tizenRemoteButtons: 'js/platforms/tizen/remoteButtons',
		videoPlayer: 'js/video/videoPlayer',
		hlsVideoPlayer: 'js/video/hlsPlayer',
		nativeVideoPlayer: 'js/video/nativePlayer',
		videoPlayerFactory: 'js/video/videoPlayerFactory',
		debug: 'js/debugging/debug',
		domConsole: 'js/debugging/domConsole',
		ghosts: 'js/data/ghosts',
		device: 'js/data/device',
		songs: 'js/data/songs',
		avatars: 'js/data/avatars',
		keyboard: 'js/constants/keyboard'
	},

	shim: {
		hlsplayer: { exports: 'hlsplayer' },
		jqueryDetectmobile: [ 'jquery' ],
		jqueryCookie: [ 'jquery' ],
		jqueryXdomain: [ 'jquery' ],
		fittext: [ 'jquery' ],
	},

});

require([ 'initHome' ]);
define("js/main", function(){});